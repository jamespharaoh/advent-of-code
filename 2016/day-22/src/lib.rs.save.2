//! Advent of Code 2016: Day 19: An Elephant Named Joseph
//!
//! [https://adventofcode.com/2016/day/19](https://adventofcode.com/2016/day/19)

#![ allow (clippy::missing_inline_in_public_items) ]

use aoc_common::*;

puzzle_info! {
	name = "An Elephant Named Joseph";
	year = 2016;
	day = 19;
	parse = |input| model::Input::parse (input);
	part_one = |input| logic::part_one (& input);
	//part_two = |input| logic::part_two (& input);
}

pub mod logic {

	use super::*;
	use model::Input;

	pub fn part_one (input: & Input) -> GenResult <usize> {
		if input.num_elves < 2 { return Err ("Must have at least two elves".into ()) }
		let mut first_with = 0;
		let mut sep = 1;
		let mut rem = input.num_elves;
		let mut take = false;
		while rem > 1 {
			let odd = (rem & 1) == 1;
			match (take, odd) {
				(false, false) => {
					rem /= 2;
				},
				(false, true) => {
					rem = (rem + 1) / 2;
				},
				(true, false) => {
					rem /= 2;
					first_with += sep;
				},
				(true, true) => {
					rem /= 2;
					first_with += sep;
				},
			}
			if odd { take = ! take; }
			sep *= 2;
		}
		Ok (first_with + 1)
	}

}

pub mod model {

	use super::*;
	use parser::*;

	#[ derive (Clone, Debug, Eq, PartialEq) ]
	pub struct Input {
		pub num_elves: u32,
	}

	#[ derive (Clone, Copy, Debug, Eq, Hash, PartialEq) ]
	pub enum Tile { Trap, Safe }

	impl Input {

		pub fn parse (input: & [& str]) -> GenResult <Self> {
			if input.len () != 1 { return Err ("Input must have exactly one line".into ()) }
			let num_elves = Parser::wrap (input [0], |parser| parser.int ())
				.map_parse_err (|col_idx|
					format! ("Invalid input: col {}: {}", col_idx + 1, input [0])) ?;
			Ok (Self { num_elves })
		}

	}

}

#[ cfg (test) ]
mod examples {

	use super::*;

	#[ test ]
	fn part_one () {
		let puzzle = puzzle_metadata ();
		for (input, expected) in [
			(2, 1), (3, 3), (4, 1), (5, 3), (6, 5), (7, 7), (8, 1), (9, 3), (10, 5), (11, 7),
			(12, 9), (13, 11), (14, 123),
		].into_iter () {
			let input = input.to_string ();
			let expected` = output.to_string ();
			let actual = puzzle.part_one (& [& input]);
			assert_eq_ok! (
				expected,
				actual,
				"Expeted puzzle.part_one ({}) equals {:?} but instead got {:?}",
				input.to_string (),
				expected,
				actual);
		}
	}

}
