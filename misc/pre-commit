#!/bin/bash

set -eu -o pipefail

force=""
for arg in "$@"; do
	case "$arg" in
		(--force) force="yes" ;;
		(*) echo "Unrecognied argument: $arg" >&2; false ;;
	esac
done

function repeat {
	local num="$1"
	local src="$2"
	local result=""
	local foo
	for foo in $(eval "echo {1..$num}"); do echo -n "$src"; done
}

function header {
	local colour="$1"
	local message="$2"
	local shade_fg=$(tput setaf $colour)
	local shade_bg=$(tput setab $colour)
	local normal=$(tput sgr0)
	local fill_top=$(repeat $((COLUMNS - 4)) '▄')
	local fill_middle=$(repeat $((COLUMNS - 4)) ' ')
	local fill_bottom=$(repeat $((COLUMNS - 4)) '▀')
	printf '\n'
	printf '  %s%s%s\n' "$shade_fg" "$fill_top" "$normal"
	printf '  %s%s%s\r' "$shade_bg" "$fill_middle" "$normal"
	printf '  %s  %s%s\n' "$shade_bg" "$message" "$normal"
	printf '  %s%s%s\n' "$shade_fg" "$fill_bottom" "$normal"
	printf '\n'
}

function header_warning {
	header "88" "WARNING: $1"
}

declare steps=0
function header_step {
	let steps="steps + 1"
	header "55" "Step $steps: $1"
}

# find the repo

if [[ -d .git ]]; then
	true
elif [[ -d ../.git ]]; then
	cd ..
elif [[ -d ../../.git ]]; then
	cd ../..
else
	echo "Must be run from git repository" >&2
	exit 1
fi
declare root_dir="$PWD"
cd "$root_dir"

# set up work directory

declare work_dir="$root_dir/pre-commit"
if [[ "$0" != "$work_dir/misc/pre-commit" ]]; then
	rm -rf "$work_dir"
	mkdir "$work_dir"
	git checkout-index --all --force --prefix pre-commit/
	if [[ -f "$work_dir/misc/pre-commit" ]]; then
		exec "$work_dir/misc/pre-commit" "$@"
	fi
fi

# make sure there are pending changes

cd "$root_dir"
if [[ ! "$force" ]] && git diff --cached --quiet; then
	exit 0
fi
if [[ ! "$force" ]] && ! git diff --quiet; then
	header_warning "Pending changes"
	git status
	header_warning "Pending changes"
	for secs in {5..1}; do
		printf "Waiting for $secs seconds..." >&2
		sleep 1
		printf "\r\e[K" >&2
	done
fi

# update rust

rustup update

# modify manifest

cd "$work_dir"
{
	printf "cargo-features = [\"profile-rustflags\"]\n\n"
	cat Cargo.toml
	printf "\n[profile.pre-commit]\n\n"
	printf "\tinherits = \"test\"\n"
	printf "\trustflags = [ \"--deny\", \"warnings\" ]\n"
} >Cargo.toml.temp
mv Cargo.toml.temp Cargo.toml

# cargo helper

which_cargo="$(which cargo)"

function cargo {
	if ! "$which_cargo" +nightly "$@"; then
		echo "Error running command: cargo +nightly $*" >&2
		false
	fi
}

# execute build, test etc

cd "$work_dir"

export RUSTDOCFLAGS="--deny warnings"

header_step "cargo clippy"
cargo clippy --frozen --workspace --profile pre-commit -- $(cat "$root_dir/misc/clippy-args")

header_step "cargo doc"
cargo doc --frozen --workspace --profile pre-commit

header_step "cargo test"
cargo test --frozen --workspace --profile pre-commit

for year in {2015..2021}; do
	header_step "cargo run --package aoc-$year"
	for example in "$year/examples/"*; do
		cargo run --frozen --profile pre-commit --package "aoc-$year" -- --input-dir "$example"
	done
done

(
	header_step "cargo fuzz build"
	cd fuzz
	cargo fuzz build --dev
)

# clean up

header_step "(cleaning up)"
cd "$root_dir"
rm --recursive --force "$work_dir"

true
