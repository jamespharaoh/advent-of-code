#!/bin/bash

set -euf -o pipefail

# find the repo

if [[ -d .git ]]; then
	true
elif [[ -d ../.git ]]; then
	cd ..
elif [[ -d ../../.git ]]; then
	cd ../..
else
	echo "Must be run from git repository" >&2
	exit 1
fi
declare root_dir="$PWD"
cd $root_dir

# set up work directory

declare work_dir="$root_dir/pre-commit"
if [[ "$0" != "$work_dir/misc/pre-commit" ]]; then
	rm -rf $work_dir
	mkdir $work_dir
	git checkout-index --all --force --prefix pre-commit/
	exec $work_dir/misc/pre-commit "$@"
fi

# update rust

rustup update

# iterate projects

for project in common 2015 2021; do
	project_dir=$root_dir/$project
	project_work_dir=$work_dir/$project
	cd $project_work_dir

	# modify manifest

	{
		printf "cargo-features = [\"profile-rustflags\"]\n\n"
		cat $project_dir/Cargo.toml
		printf "\n[profile.pre-commit]\n\n"
		printf "\tinherits = \"release\"\n"
		printf "\trustflags = [ \"--deny\", \"warnings\" ]\n"
	} >Cargo.toml

	# run various cargo commands

	export RUSTDOCFLAGS="-D warnings"
	cargo +nightly check --frozen --workspace --all-targets --profile pre-commit
	cargo +nightly test --frozen --workspace --profile pre-commit
	cargo +nightly doc --frozen --profile pre-commit
	cargo +nightly clippy --frozen --profile pre-commit -- $(cat "$root_dir/misc/clippy-args")
	if [[ $project != common ]]; then cargo +nightly run --frozen --profile pre-commit; fi

done

# clean up

cd "$root_dir"
rm -rf "$work_dir"

true
