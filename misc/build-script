#!/bin/bash

export CARGO_TERM_COLOR="always"

function main {
	local mode
	local package
	local profile
	local toolchain
	local -a extra_args_0
	local -a extra_args_1
	while [[ "$#" != 0 ]]; do
		local arg="$1"; shift
		case "$arg" in
			(year-*) year="${arg:5}" ;;
			(day-*) day="${arg:4}" ;;
			(coverage|dev|quick|release|release-lto) profile="$arg" ;;
			(build|clippy|flamegraph|fuzz|run|run-test|tarpaulin|test) mode="$arg" ;;
			(cmin|init|repr|review) fuzz_mode="$arg" ;;
			(part-1|part-2) run_args+=( "$arg" ) ;;
			(stable|beta|nightly) toolchain="+$arg" ;;
			(--profile) profile="$1"; shift ;;
			(--width) flamegraph_width="$1"; shift ;;
			(--)
				while [[ "$#" != 0 ]]; do
					local extra_arg="$1"
					shift
					if [[ "$extra_arg" = "--" ]]; then break; fi
					extra_args_0+=( "$extra_arg" )
				done
				extra_args_1+=( "$@" )
				while [[ "$#" != 0 ]]; do shift; done
				;;
			(*) echo "Unknown command: $arg" >&2; exit 1 ;;
		esac
	done
	if [[ -n "$year" && -n "$day" ]]; then
		package="aoc-$year-day-$day"
	elif [[ -n "$year" ]]; then
		package="aoc-$year"
	fi
	local -a cargo_args
	if [[ -z "$mode" ]]; then mode="build"; fi
	if [[ -z "$profile" && "$mode" = "flamegraph" ]]; then profile="flamegraph"; fi
	if [[ -n "$package" ]]; then cargo_args+=( --package "$package" ); fi
	if [[ -n "$profile" ]]; then cargo_args+=( --profile "$profile" ); fi
	case "$mode" in
		(build)
			time_cmd cargo $toolchain build "${extra_args_0[@]}" -- "${extra_args_1[@]}"
			;;
		(clippy)
			local -a clippy_args=( $(cat "$(dirname "$0")"/clippy-args) )
			echo cargo $toolchain clippy "${cargo_args[@]}" -- "${clippy_args[@]}"
			cargo $toolchain clippy "${cargo_args[@]}" -- "${clippy_args[@]}"
			;;
		(fuzz) fuzz_mode ;;
		(run-test)
			time_cmd cargo $toolchain run "${cargo_args[@]}" \
				-- "${extra_args_0[@]}" -- "${extra_args_1[@]}"
			time_cmd cargo $toolchain test "${cargo_args[@]}"
			;;
		(run)
			time_cmd cargo $toolchain run "${cargo_args[@]}" \
				-- "${extra_args_0[@]}" -- "${extra_args_1[@]}"
			;;
		(test)
			time_cmd cargo $toolchain test "${cargo_args[@]}" \
				-- "${extra_args_0[@]}" -- "${extra_args_1[@]}"
			;;
		(flamegraph)
			cargo_args+=( --image-width "${flamegraph_width:-1200}" )
			cargo_args+=( --palette "rust" )
			local timestamp=$(date +"%Y-%m-%d-%H:%M:%S")
			if cargo $toolchain flamegraph \
				"${cargo_args[@]}" \
				--output target/flamegraph-$timestamp.svg \
				-- "${extra_args_0[@]}" -- "${extra_args_1[@]}"
			then
				(eog flamegraph.svg target/flamegraph-$timestamp.svg &)
				mv perf.data target/flamegraph-$timestamp.perf-data
				ln -fns flamegraph-$timestamp.svg target/flamegraph-latest.svg
				ln -fns flamegraph-$timestamp.perf-data target/flamegraph-latest.perf-data
			fi
			;;
		(kcov)
			if [[ -n "$profile" ]]; then echo "Profile not supported for kcov" >&2; exit 1; fi
			cargo $toolchain kcov --all
			;;
		(tarpaulin)
			if [[ -z "$profile" ]]; then profile="coverage"; fi
			cargo $toolchain tarpaulin \
				--workspace \
				--out Html \
				--exclude-files "main.rs" \
				--exclude-files "build.rs" \
				--profile "$profile" \
				--output-dir target/tarpaulin
			firefox --new-window "target/tarpaulin/tarpaulin-report.html"
			;;
	esac
}

function fuzz_mode {

	if [[ -z "$fuzz_mode" ]]; then fuzz_mode="run"; fi

	if ! arg_exists "-rss_limit_mb" "${extra_args_1[@]}"; then
		extra_args_1+=( -rss_limit_mb=4096 )
	fi

	if ! arg_exists "-dict" "${extra_args_1[@]}"; then
		extra_args_1+=( -dict="$PWD/fuzz/dictionaries/$year-day-$day" )
	fi

	case "$fuzz_mode" in

		(run|cmin)
			(
				cd fuzz
				ulimit -s 32768
				cargo +nightly fuzz "$fuzz_mode" \
					"$year-day-$day" \
					"corpus/$year-day-$day" \
					"${extra_args_0[@]}" \
					-- \
					"${extra_args_1[@]}"
			)
			;;

		(repr)
			(
				cd fuzz
				ulimit -s 32768
				cargo +nightly fuzz run \
					"$year-day-$day" \
					"${extra_args_0[@]}" \
					-- \
					"${extra_args_1[@]}"
			)
			;;

		(init)
			local sum_output="$(sha1sum "$year/inputs/day-$day")"
			local sum="${sum_output:0:40}"
			mkdir -p "fuzz/corpus/$year-day-$day"
			cp "$year/inputs/day-$day" "fuzz/corpus/$year-day-$day/$sum"
			;;

		(review)
			pushd fuzz
			local temp=$(mktemp)
			local cutoff_date=$(mktemp)
			touch --date "3 days ago" "$cutoff_date"
			for year in {2015..2021}; do
				for day in {01..25}; do
					if [[ ! -d artifacts/$year-day-$day ]]; then continue; fi
					for artifact in $(find artifacts/$year-day-$day -type f); do
						if [[ "$artifact" == */slow-unit-* ]]; then continue; fi
						if [[ "$artifact" == */timeout-* ]]; then continue; fi
						echo -n "Running $year-day-$day with $artifact..."
						cargo +nightly fuzz run "$year-day-$day" "$artifact" \
							-- -timeout=5 -timeout_exitcode=88 \
							&>"$temp"
						cargo_result="$?"
						if [[ $cargo_result == 0 ]]; then
							if [[ "$artifact" -ot "$cutoff_date" ]]; then
								echo " (deleted)"
								rm -f "$artifact"
							else
								echo
							fi
							continue
						fi
						if grep --quiet "SUMMARY: libFuzzer: timeout" "$temp"; then
							echo " (timeout, ignored)"
							continue
						fi
						echo " (status=$cargo_result)"
						echo
						echo "========== $artifact =========="
						echo
						cat "$temp"
						echo
						echo "aoc fuzz repr year-$year day-$day -- $artifact"
						echo
						echo "========== $artifact =========="
						echo
					done
				done
			done
			rm -f "$temp" "$cutoff_date"
			popd
			;;

		(*)
			echo "Syntax error" >&2
			exit 1
			;;

	esac
}

function arg_exists {
	local serach_arg="$1"; shift
	for arg in "$@"; do
		if [[ "$arg" = "$search_arg" ]]; then return 0; fi
		if [[ "$arg" == "$search_arg="* ]]; then return 0; fi
	done
	return 1
}

function time_cmd {
	/usr/bin/time --format "Process stats: user %Us, system %Ss, wall %es, max size: %MKiB" "$@"
}

main "$@"
