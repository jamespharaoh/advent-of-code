var searchIndex = JSON.parse('{\
"ahash":{"doc":"AHash is a hashing algorithm is intended to be a high …","t":[3,3,3,6,8,6,8,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,11,11,11,11,11,11,11,11,10,11,11,11,11,11,5,11,11,11,11,11,11],"n":["AHashMap","AHashSet","AHasher","HashMap","HashMapExt","HashSet","HashSetExt","RandomState","bitand","bitor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref_mut","deref_mut","eq","eq","extend","extend","extend","extend","finish","fmt","fmt","fmt","from","from","from","from","from","from","from","from_iter","from_iter","get","get_key_value","get_mut","index","insert","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","new","new","new","new","random_state","remove","sub","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher","with_hasher","with_hasher","write","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","RandomSource","RandomState","borrow","borrow_mut","build_hasher","clone","clone_into","default","fmt","from","gen_hasher_seed","generate_with","hash_one","hash_one","into","new","set_random_source","to_owned","try_from","try_into","type_id","with_seed","with_seeds"],"q":["ahash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ahash::random_state","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …","A <code>HashSet</code> using <code>RandomState</code> to hash the items. (Requires …","A <code>Hasher</code> for hashing an arbitrary stream of bytes.","Type alias for HashMap&lt;K, V, ahash::RandomState&gt;","A convenience trait that can be used together with the …","Type alias for HashSet&lt;K, ahash::RandomState&gt;","A convenience trait that can be used together with the …","","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>AHashSet&lt;T, S&gt;</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","Constructs a new AHasher with fixed keys. If <code>std</code> is …","","Creates an empty <code>AHashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Examples","","Returns the argument unchanged.","Examples","","","","Returns a reference to the value corresponding to the key.","Returns the key-value pair corresponding to the supplied …","Returns a mutable reference to the value corresponding to …","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","","","","Constructs a new HashMap","Constructs a new HashSet","","","","Removes a key from the map, returning the value at the key …","Returns the difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","Constructs a new HashMap with a given initial capacity","Constructs a new HashSet with a given initial capacity","","","","","","","","","","","","","","A supplier of Randomness used for different hashers. See …","Provides a Hasher factory. This is typically used (e.g. by …","","","Constructs a new AHasher with keys based on this …","","","","","Returns the argument unchanged.","","Allows for supplying seeds, but each time it is called the …","Calculates the hash of a single value.","Calculates the hash of a single value.","Calls <code>U::from(self)</code>.","Use randomly generated keys","Provides an optional way to manually supply a source of …","","","","","Allows for explicitly setting a seed to used.","Allows for explicitly setting the seeds to used."],"i":[0,0,0,0,0,0,0,0,1,1,1,2,4,1,2,4,1,2,4,1,2,4,1,2,4,1,4,1,4,1,4,1,4,4,1,1,2,2,4,1,2,4,4,4,1,1,1,4,1,4,4,4,4,4,2,4,4,1,1,4,4,4,1,1,25,26,4,1,0,4,1,2,4,1,2,4,1,2,4,1,2,4,1,25,26,4,1,4,1,4,1,2,2,2,2,2,2,2,0,0,5,5,5,5,5,5,5,5,22,5,5,5,5,5,0,5,5,5,5,5,5],"f":[0,0,0,0,0,0,0,0,[[1,1],1],[[1,1],1],[[1,1],1],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[[[4,[3,3,3]]],[[4,[3,3,3]]]],[[[1,[3,3]]],[[1,[3,3]]]],[[]],[[]],[[]],[[],2],[[],[[4,[5]]]],[[],[[1,[5]]]],[4],[1],[4],[1],[[4,4],6],[[1,1],6],[[4,7]],[[4,7]],[[1,7]],[[1,7]],[2,8],[[2,9],10],[[4,9],10],[[1,9],10],[[]],[[]],[[],4],[[[11,[5]]],4],[[]],[[],1],[[[12,[5]]],1],[7,4],[7,1],[4,13],[4,13],[4,13],[4],[4,13],[[]],[[]],[4,[[11,[5]]]],[1,[[12,[5]]]],[[]],[4],[4],[4],[1],[1],[[]],[[]],[[],[[4,[5]]]],[[],[[1,[5]]]],0,[4,13],[[1,1],1],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[16],[16],[16,[[4,[5]]]],[16,[[1,[5]]]],[16,4],[16,1],[[],4],[[],1],[2],[[2,17]],[[2,18]],[[2,19]],[[2,8]],[[2,20]],[[2,16]],0,0,[[]],[[]],[5,2],[5,5],[[]],[[],5],[[5,9],10],[[]],[[],16],[[8,8,8,8],5],[[5,21],8],[[5,21],8],[[]],[[],5],[[[0,[22,23,24]]],[[14,[6]]]],[[]],[[],14],[[],14],[[],15],[16,5],[[8,8,8,8],5]],"p":[[3,"AHashSet"],[3,"AHasher"],[8,"Clone"],[3,"AHashMap"],[3,"RandomState"],[15,"bool"],[8,"IntoIterator"],[15,"u64"],[3,"Formatter"],[6,"Result"],[3,"HashMap"],[3,"HashSet"],[4,"Option"],[4,"Result"],[3,"TypeId"],[15,"usize"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u8"],[8,"Hash"],[8,"RandomSource"],[8,"Send"],[8,"Sync"],[8,"HashMapExt"],[8,"HashSetExt"]]},\
"aoc":{"doc":"Advent of Code solutions by James Pharaoh","t":[2,2,2,2,2,2],"n":["common","year_2015","year_2016","year_2017","year_2018","year_2021"],"q":["aoc","","","","",""],"d":["","","","","",""],"i":[0,0,0,0,0,0],"f":[0,0,0,0,0,0],"p":[]},\
"aoc_2015":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5],"n":["day_01","day_02","day_03","day_04","day_05","day_06","day_07","day_08","day_09","day_10","day_11","day_12","day_13","day_14","day_15","day_16","day_17","day_18","day_19","day_20","day_21","day_22","day_23","day_24","day_25","puzzle_metadata"],"q":["aoc_2015","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[3,[[2,[1]]]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Vec"]]},\
"aoc_2015_day_01":{"doc":"Advent of Code 2015: Day 1: Not Quite Lisp","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","dirs","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Dir","Down","Up","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","from_parser","into","quick_into","to_owned","to_string","try_from","try_into","type_id","val"],"q":["aoc_2015_day_01","","","","aoc_2015_day_01::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_01::logic","","aoc_2015_day_01::model","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,[[]],[[]],[15,15],[[]],[[15,15],16],[[15,5],6],[[15,5],6],[[]],[7,[[8,[15]]]],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],12],[15,13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i32"],[15,"usize"],[4,"Dir"],[15,"bool"]]},\
"aoc_2015_day_02":{"doc":"Advent of Code 2015: Day 2: I Was Told There Would Be No …","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","sizes","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Dim"],"q":["aoc_2015_day_02","","","","aoc_2015_day_02::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_02::logic","","aoc_2015_day_02::model"],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Dim"]]},\
"aoc_2015_day_03":{"doc":"Advent of Code 2015: Day 3: Perfectly Spherical Houses in …","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","moves","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Dir","Pos"],"q":["aoc_2015_day_03","","","","aoc_2015_day_03::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_03::logic","","aoc_2015_day_03::model",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2015_day_04":{"doc":"Advent of Code 2015: Day 4: The Ideal Stocking Stuffer","t":[0,0,0,5,3,3,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5],"n":["cli","input","logic","puzzle_metadata","FindTestCaseArgs","RunArgs","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","find_test_case","fmt","from","from","into","into","parse","parse","quick_into","quick_into","run","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_threads","num_zeros_one","num_zeros_two","params","parse","quick_into","quick_into","seed","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","calc_result","part_one","part_two"],"q":["aoc_2015_day_04","","","","aoc_2015_day_04::cli","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_04::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_04::logic","",""],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,7,3,7,3,3,3,0,3,7,3,7,3,7,3,7,3,0,3,7,3,7,3,7,3,0,0,11,12,11,12,11,12,11,12,12,11,11,12,12,11,12,11,12,11,12,12,12,12,11,12,11,12,11,11,12,11,12,11,12,11,12,11,12,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[[]],[3,4],[[3,5],6],[[]],[[]],[[]],[[]],[[],[[9,[7,8]]]],[[],[[9,[3,8]]]],[[]],[[]],[7,4],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],0,0,[[]],[[]],[[]],[[]],[11,11],[12,12],[[]],[[]],[[],12],[[11,5],6],[[11,5],6],[[12,5],6],[[12,5],6],[[]],[[]],[13,[[14,[11]]]],[13,[[14,[12]]]],[[]],[[]],0,0,0,0,[[],[[4,[12]]]],[[]],[[]],0,[[]],[[]],[[],15],[[],15],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[11,16],[[4,[16]]]],[11,[[4,[16]]]],[11,[[4,[16]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"FindTestCaseArgs"],[6,"GenResult"],[3,"Formatter"],[6,"Result"],[3,"RunArgs"],[4,"ArgsParseError"],[4,"Result"],[3,"TypeId"],[3,"Input"],[3,"InputParams"],[3,"Parser"],[6,"ParseResult"],[3,"String"],[15,"u32"]]},\
"aoc_2015_day_05":{"doc":"Advent of Code 2015: Day 5: Doesn’t He Have Intern-Elves …","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","strings","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2015_day_05","","","aoc_2015_day_05::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_05::logic",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2015_day_06":{"doc":"Advent of Code 2015: Day 6: Probably a Fire Hazard","t":[0,0,0,5,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,5,5,4,6,13,13,6,3,3,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","InputStep","action","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","origin","params","parse","peak","quick_into","quick_into","quick_into","steps","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ModeFn","part_one","part_two","Action","Coord","Off","On","Pos","Step","Steps","Toggle","action","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref_mut","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from_parser","into","into","into","origin","peak","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["aoc_2015_day_06","","","","aoc_2015_day_06::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_06::logic","","","aoc_2015_day_06::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,4,3,4,5,3,4,5,3,4,5,3,4,5,5,4,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,4,3,5,4,3,4,5,3,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,0,0,19,19,0,0,0,19,18,16,18,19,16,18,19,16,16,18,19,16,18,19,16,16,18,19,16,18,19,19,16,18,19,19,16,18,19,18,18,16,18,19,16,18,19,19,16,18,19,16,18,19,16,18,19],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[[4,4],6],[[3,7],8],[[3,7],8],[[4,7],8],[[4,7],8],[[5,7],8],[[5,7],8],[[]],[[]],[[]],[9,[[10,[3]]]],[9,[[10,[4]]]],[9,[[10,[5]]]],[[]],[[]],[[]],0,0,[[],[[11,[5]]]],0,[[]],[[]],[[]],0,[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],0,[3,[[11,[15]]]],[3,[[11,[15]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,[[17,[16]]]],[16,16],[18,18],[19,19],[[]],[[]],[[]],[16,20],[16,20],[[18,18],6],[[19,19],6],[[16,7],8],[[18,7],8],[[19,7],8],[[19,7],8],[[]],[[]],[[]],[9,[[10,[19]]]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputStep"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Steps"],[6,"NumResult"],[3,"Step"],[4,"Action"],[3,"Vec"]]},\
"aoc_2015_day_07":{"doc":"Advent of Code 2015: Day 7: Some Assembly Required","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,13,13,13,13,13,13,13,3,13,3,4,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","wires","part_one","part_two","And","AndOne","LeftShift","Not","Or","RightShift","Static","Wire","Wire","WireId","WireInput","WireVal","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","deref","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","hash","id","input","inputs","into","into","into","partial_cmp","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["aoc_2015_day_07","","","","aoc_2015_day_07::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_07::logic","","aoc_2015_day_07::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,0,0,16,16,16,16,16,16,16,0,16,0,0,0,14,15,16,14,15,16,14,15,16,14,15,16,15,15,15,14,14,15,15,16,16,14,15,16,14,15,16,15,14,14,16,14,15,16,15,14,15,16,14,15,16,14,15,16,14,15,15,16,14,15,16,14,15,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[15,15],[16,16],[[]],[[]],[[]],[[15,15],17],[15,18],[[15,15],19],[[14,5],6],[[14,5],6],[[15,5],6],[[15,5],6],[[16,5],6],[[16,5],6],[[]],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[15]]]],[7,[[8,[16]]]],[15],0,0,[16,[[20,[15]]]],[[]],[[]],[[]],[[15,15],[[21,[17]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],11],[22,[[9,[15]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u16"],[3,"Wire"],[3,"WireId"],[4,"WireInput"],[4,"Ordering"],[4,"InpStr"],[15,"bool"],[3,"TinyVec"],[4,"Option"],[15,"str"]]},\
"aoc_2015_day_08":{"doc":"Advent of Code 2015: Day 8: Matchsticks","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","strings","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2015_day_08","","","aoc_2015_day_08::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_08::logic",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"usize"]]},\
"aoc_2015_day_09":{"doc":"Advent of Code 2015: Day 9: All in a Single Night","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,3,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","dists","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Dist","DistTable","borrow","borrow_mut","build","deref","deref_mut","from","into","quick_into","try_from","try_into","type_id"],"q":["aoc_2015_day_09","","","","aoc_2015_day_09::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_09::logic","","aoc_2015_day_09::model","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,[[]],[[]],[3,14],[14,15],[14,15],[[]],[[]],[[]],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"DistTable"],[3,"PairsMap"]]},\
"aoc_2015_day_10":{"doc":"Advent of Code 2015: Day 10: Elves Look, Elves Say","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","initial","into","into","num_iters_one","num_iters_two","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","one_round","part_one","part_two","State","borrow","borrow","borrow_mut","clone","clone_into","cmp","deref","eq","fmt","fmt","from","from_iter","hash","into","iter","parse","partial_cmp","quick_into","to_owned","to_string","try_from","try_from","try_into","type_id"],"q":["aoc_2015_day_10","","","","aoc_2015_day_10::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_10::logic","","","aoc_2015_day_10::model","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[13,13],[3,[[9,[14]]]],[3,[[9,[14]]]],0,[13],[[]],[[]],[13,13],[[]],[[13,13],15],[13,16],[[13,13],17],[[13,5],6],[[13,5],6],[[]],[[],13],[13],[[]],[13,[[19,[18]]]],[20,[[9,[13]]]],[[13,13],[[21,[15]]]],[[]],[[]],[[],10],[[],11],[[[16,[18]]],[[9,[13]]]],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"State"],[15,"u32"],[4,"Ordering"],[3,"Vec"],[15,"bool"],[15,"u8"],[3,"Iter"],[15,"str"],[4,"Option"]]},\
"aoc_2015_day_11":{"doc":"Advent of Code 2015: Day 11: Corporate Policy","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","initial","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","find_pair","is_valid","next_password","part_one","part_two"],"q":["aoc_2015_day_11","","","aoc_2015_day_11::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_11::logic","","","",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],13],[[],14],[15,[[9,[10]]]],[3,[[9,[10]]]],[3,[[9,[10]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[4,"Option"],[15,"bool"],[15,"str"]]},\
"aoc_2015_day_12":{"doc":"Advent of Code 2015: Day 12: JSAbacusFramework.io","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,4,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","json","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Array","Json","Number","Object","String","Val","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","from_parser","into","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2015_day_12","","","","aoc_2015_day_12::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_12::logic","","aoc_2015_day_12::model","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,0,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[4,"Json"]]},\
"aoc_2015_day_13":{"doc":"Advent of Code 2015: Day 13: Knights of the Dinner Table","t":[0,0,0,5,4,13,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","DiffSign","Gain","Input","InputParams","Lose","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","pairs","params","parse","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","HappinessTable","borrow","borrow_mut","build","deref","deref_mut","from","into","quick_into","try_from","try_into","type_id"],"q":["aoc_2015_day_13","","","","aoc_2015_day_13::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_13::logic","","aoc_2015_day_13::model","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,4,0,0,4,3,4,5,3,4,5,3,4,5,3,4,5,5,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,3,3,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[8,[[9,[5]]]],[[]],[[]],[[]],0,0,[[],[[10,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]],0,[[]],[[]],[[],[[10,[15]]]],[15,16],[15,16],[[]],[[]],[[]],[[],12],[[],12],[[],13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[4,"DiffSign"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i32"],[3,"HappinessTable"],[3,"PairsMap"]]},\
"aoc_2015_day_14":{"doc":"Advent of Code 2015: Day 14: Reindeer Olympics","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,12,12,11,11,11,11,11,12,11,12,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deers","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","race_time","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Reindeer","borrow","borrow_mut","clone","clone_into","fly_speed","fly_time","fmt","fmt","from","from_parser","into","name","quick_into","rest_time","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2015_day_14","","","","aoc_2015_day_14::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_14::logic","","aoc_2015_day_14::model","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,[[]],[[]],[14,14],[[]],0,0,[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],0,[[]],0,[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[3,"Reindeer"]]},\
"aoc_2015_day_15":{"doc":"Advent of Code 2015: Day 15: Science for Hungry People","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","ingrs","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","check_input","iter_recipes","part_one","part_two","Ingredient","Recipe","add_ingrs","borrow","borrow","borrow_mut","borrow_mut","calories","clone","clone","clone_into","clone_into","cmp","default","eq","fmt","fmt","fmt","from","from","from_parser","hash","ingrs","into","into","name","num_ingrs","partial_cmp","quick_into","quick_into","score","stats","stats","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2015_day_15","","","","aoc_2015_day_15::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_15::logic","","","","aoc_2015_day_15::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Validate extra conditions on the input.","Iterate through all recipes containing exactly 100 …","Part one: Find the combination of ingredients which gives …","Part two: Find the combination of ingredients which gives …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,15,19,15,19,15,15,19,15,19,15,19,15,19,19,19,15,19,15,19,19,15,19,15,19,15,19,19,15,15,19,15,19,15,19,19,15,19,15,19,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,9],[3,13],[3,[[9,[14]]]],[3,[[9,[14]]]],0,0,[[15,16,17],9],[[]],[[]],[[]],[[]],[15,18],[19,19],[15,15],[[]],[[]],[[19,19],20],[[],15],[[19,19],21],[[19,5],6],[[19,5],6],[[15,5],6],[[]],[[]],[7,[[8,[19]]]],[19],0,[[]],[[]],0,0,[[19,19],[[22,[20]]]],[[]],[[]],[15,[[23,[14]]]],0,0,[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Iterator"],[15,"u64"],[3,"Recipe"],[15,"usize"],[15,"i8"],[15,"i32"],[3,"Ingredient"],[4,"Ordering"],[15,"bool"],[4,"Option"],[6,"NumResult"]]},\
"aoc_2015_day_16":{"doc":"Advent of Code 2015: Day 16: Aunt Sue","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,13,4,3,13,13,13,13,13,13,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","sues","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","calc_result","part_one","part_two","Akitas","Attr","AuntSue","Cars","Cats","Children","Goldfish","Perfumes","Pomeranians","Samoyeds","Trees","Vizslas","attrs","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","number","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2015_day_16","","","","aoc_2015_day_16::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_16::logic","","","aoc_2015_day_16::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles.","Representation of the puzzle input, etc.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,15,0,0,15,15,15,15,15,15,15,15,15,14,14,15,14,15,14,15,14,15,14,15,14,14,15,15,14,15,14,15,14,15,14,14,15,14,15,14,15,14,15,14,15,14,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[14,14],[15,15],[[]],[[]],[[14,14],16],[[15,15],16],[[14,5],6],[[14,5],6],[[15,5],6],[[15,5],6],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[15]]]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u16"],[3,"AuntSue"],[4,"Attr"],[15,"bool"]]},\
"aoc_2015_day_17":{"doc":"Advent of Code 2015: Day 17: No Such Thing as Too Much","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,5,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","sizes","target","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","combos","part_one","part_two"],"q":["aoc_2015_day_17","","","aoc_2015_day_17::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_17::logic","",""],"d":["","Logic for solving the puzzles.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Iterate over combinations of provided container given a …","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,13],[3,[[9,[14]]]],[3,[[9,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Iterator"],[15,"u32"]]},\
"aoc_2015_day_18":{"doc":"Advent of Code 2015: Day 18: Like a GIF For Your Yard","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,4,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","num_steps","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Grid","Light","Off","On","Pos","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","fmt","from","from_parser","hash","into","partial_cmp","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2015_day_18","","","","aoc_2015_day_18::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_18::logic","","aoc_2015_day_18::model","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles.","Representation of the puzzle input, etc.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[],14],[[14,14],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[17,[15]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Light"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2015_day_19":{"doc":"Advent of Code 2015: Day 19: Medicine for Rudolph","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","medicine","params","parse","quick_into","quick_into","replacements","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2015_day_19","","","aoc_2015_day_19::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_19::logic",""],"d":["","Logic for solving the puzzles.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2015_day_20":{"doc":"Advent of Code 2015: Day 20: Infinite Elves and Infinite …","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","target","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","calc_result","part_one","part_two","Val"],"q":["aoc_2015_day_20","","","","aoc_2015_day_20::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_20::logic","","","aoc_2015_day_20::model"],"d":["","Logic for solving the puzzles.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[13,13,13],[[14,[13]]]],[3,[[9,[13]]]],[3,[[9,[13]]]],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[6,"NumResult"]]},\
"aoc_2015_day_21":{"doc":"Advent of Code 2015: Day 21: RPG Simulator 20XX","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,3,12,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","stats","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Stats","armor","borrow","borrow_mut","clone","clone_into","damage","fmt","fmt","from","from_parser","hit_points","into","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2015_day_21","","","","aoc_2015_day_21::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_21::logic","","aoc_2015_day_21::model","","","","","","","","","","","","","","","","","",""],"d":["Data structures to model the puzzle input","Logic for solving the puzzles.","Data structures and types","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,[[]],[[]],[14,14],[[]],0,[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],0,[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Stats"]]},\
"aoc_2015_day_22":{"doc":"Advent of Code 2015: Day 22: Wizard Simulator 20XX","t":[0,0,0,5,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","boss","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Boss","Player","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","damage","default","eq","eq","fmt","fmt","fmt","from","from","from_parser","hash","hash","hit_points","hit_points","into","into","mana","partial_cmp","partial_cmp","quick_into","quick_into","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2015_day_22","","","","aoc_2015_day_22::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_22::logic","","aoc_2015_day_22::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Data structures to model the puzzle input","Logic for solving the puzzles.","Representation of the puzzle input, etc.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,14,15,14,15,14,15,14,15,14,15,15,14,14,15,14,15,15,14,15,15,14,15,14,15,14,15,14,14,15,14,15,14,15,15,14,15,14,15,14,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],0,[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,[[]],[[]],[[]],[[]],[14,14],[15,15],[[]],[[]],[[14,14],16],[[15,15],16],0,[[],14],[[14,14],17],[[15,15],17],[[14,5],6],[[15,5],6],[[15,5],6],[[]],[[]],[7,[[8,[15]]]],[14],[15],0,0,[[]],[[]],0,[[14,14],[[18,[16]]]],[[15,15],[[18,[16]]]],[[]],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u16"],[3,"Player"],[3,"Boss"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2015_day_23":{"doc":"Advent of Code 2015: Day 23: Opening the Turing Lock","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,13,13,13,4,13,13,13,6,4,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","A","B","Hlf","Inc","Instr","Jie","Jio","Jmp","Offset","Reg","Tpl","Val","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2015_day_23","","","","aoc_2015_day_23::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_23::logic","","aoc_2015_day_23::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Data structures to model the puzzle input","Logic for solving the puzzles.","Representation of the puzzle input, etc.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,15,15,14,14,0,14,14,14,0,0,14,0,14,15,14,15,14,15,14,15,14,15,14,14,15,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[14,14],[15,15],[[]],[[]],[[14,14],16],[[15,15],16],[[14,5],6],[[14,5],6],[[15,5],6],[[15,5],6],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[4,"Instr"],[4,"Reg"],[15,"bool"]]},\
"aoc_2015_day_24":{"doc":"Advent of Code 2015: Day 24: It Hangs in the Balance","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","weights","part_one","part_two"],"q":["aoc_2015_day_24","","","aoc_2015_day_24::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_24::logic",""],"d":["Data structures to model the puzzle input","Logic for solving the puzzles.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"]]},\
"aoc_2015_day_25":{"doc":"Advent of Code 2015: Day 25: Let It Snow","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","col","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","row","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one"],"q":["aoc_2015_day_25","","","aoc_2015_day_25::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_25::logic"],"d":["Data structures to model the puzzle input","Logic for solving the puzzles.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"]]},\
"aoc_2016":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5],"n":["day_01","day_02","day_03","day_04","day_05","day_06","day_07","day_08","day_09","day_10","day_11","day_12","day_13","day_14","day_15","day_16","day_17","day_18","day_19","day_20","day_21","day_22","day_23","day_24","day_25","puzzle_metadata"],"q":["aoc_2016","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[3,[[2,[1]]]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Vec"]]},\
"aoc_2016_cpu":{"doc":"Advent of Code 2016: CPU","t":[4,3,13,13,13,13,4,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Arg","Cpu","Cpy","Dec","Imm","Inc","Instr","Jnz","Out","RegA","RegB","RegC","RegD","Tgl","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","eq","exec","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","instrs","into","into","into","is_reg","is_v1","is_v2","is_v3","limit","next","quick_into","quick_into","quick_into","reg_a","reg_b","reg_c","reg_d","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["aoc_2016_cpu","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,2,2,1,2,0,2,2,1,1,1,1,2,3,1,2,3,1,2,1,2,1,2,3,1,2,3,1,1,2,2,3,1,2,1,2,3,3,1,2,1,2,2,2,3,3,3,1,2,3,3,3,3,1,2,1,2,3,1,2,3,1,2,3,1,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[],3],[[1,1],4],[[2,2],4],[3,[[7,[[6,[5]]]]]],[[1,8],9],[[1,8],9],[[2,8],9],[[2,8],9],[[]],[[]],[[]],[10,[[11,[1]]]],[10,[[11,[2]]]],0,[[]],[[]],[[]],[1,4],[2,4],[2,4],[2,4],0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14]],"p":[[4,"Arg"],[4,"Instr"],[3,"Cpu"],[15,"bool"],[15,"i32"],[4,"Option"],[6,"GenResult"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_01":{"doc":"Advent of Code 2016: Day 1: No Time for a Taxicab","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","steps","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","iter_posns","part_one","part_two","Coord","Dir","Pos","Turn"],"q":["aoc_2016_day_01","","","","aoc_2016_day_01::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_01::logic","","","aoc_2016_day_01::model","","",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,13],[3,[[9,[14]]]],[3,[[9,[14]]]],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Iterator"],[15,"u32"]]},\
"aoc_2016_day_02":{"doc":"Advent of Code 2016: Day 2: Bathroom Security","t":[0,0,0,5,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,6,6,6,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","buttons","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Button","Coord","Dir","Pos","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","from_parser","into","quick_into","steps","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2016_day_02","","","","aoc_2016_day_02::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_02::logic","","aoc_2016_day_02::model","","","","","","","","","","","","","","","","","","",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],0,[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[10]]]],0,0,0,0,[[]],[[]],[13,13],[[]],[[13,5],6],[[13,5],6],[[]],[7,[[8,[13]]]],[[]],[[]],0,[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Button"]]},\
"aoc_2016_day_03":{"doc":"Advent of Code 2016: Day 3: Squares With Three Sides","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,5,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","triangles","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Side","Triangle"],"q":["aoc_2016_day_03","","","","aoc_2016_day_03::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_03::logic","","aoc_2016_day_03::model",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],0,[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"usize"]]},\
"aoc_2016_day_04":{"doc":"Advent of Code 2016: Day 4: Security Through Obscurity","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,12,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","rooms","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Room","borrow","borrow_mut","checksum","clone","clone_into","eq","fmt","fmt","from","from_parser","into","name","quick_into","sector","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2016_day_04","","","","aoc_2016_day_04::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_04::logic","","aoc_2016_day_04::model","","","","","","","","","","","","","","","","","","",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,[[]],[[]],0,[14,14],[[]],[[14,14],15],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],0,[[]],0,[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Room"],[15,"bool"]]},\
"aoc_2016_day_05":{"doc":"Advent of Code 2016: Day 5: How About a Nice Game of Chess?","t":[0,0,5,3,3,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","batch_size","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","door_id","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_threads","num_zeros","params","parse","password_len","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2016_day_05","","","aoc_2016_day_05::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_05::logic",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,4,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,4,4,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[10]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_06":{"doc":"Advent of Code 2016: Day 6: Signals and Noise","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","lines","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","calc_result","part_one","part_two"],"q":["aoc_2016_day_06","","","aoc_2016_day_06::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_06::logic","",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],[[9,[10]]]],[3,[[9,[10]]]],[3,[[9,[10]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_07":{"doc":"Advent of Code 2016: Day 7: Internet Protocol Version 7","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","lines","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2016_day_07","","","aoc_2016_day_07::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_07::logic",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"usize"]]},\
"aoc_2016_day_08":{"doc":"Advent of Code 2016: Day 8: Two-Factor Authentication","t":[0,0,0,5,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,5,5,5,5,6,6,6,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,12,11,11,11,12,11,11,11,5,11,11,11],"n":["input","logic","model","puzzle_metadata","tools","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","height","into","into","params","parse","quick_into","quick_into","steps","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","width","apply_step","calc_result","part_one","part_two","Coord","Grid","Pos","Rect","RotateCol","RotateRow","Step","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","fmt","from","from_parser","hash","into","partial_cmp","quick_into","to_owned","to_string","try_from","try_into","type_id","col","dist","dist","height","row","width","Args","animate","borrow","borrow_mut","from","input","into","parse","quick_into","run","try_from","try_into","type_id"],"q":["aoc_2016_day_08","","","","","aoc_2016_day_08::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_08::logic","","","","aoc_2016_day_08::model","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_08::model::Step","","","","","","aoc_2016_day_08::tools","","","","","","","","","","","",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,4,0,0,0,0,0,0,0,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,21,22,21,23,22,23,0,19,19,19,19,19,19,19,19,0,19,19,19],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[[13,14]],[3,13],[3,[[9,[15]]]],[3,[[9,[10]]]],0,0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],16],[[14,14],17],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[18,[16]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12],0,0,0,0,0,0,0,0,[[]],[[]],[[]],0,[[]],[[],[[11,[19,20]]]],[[]],[19,9],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Grid"],[4,"Step"],[15,"usize"],[4,"Ordering"],[15,"bool"],[4,"Option"],[3,"Args"],[4,"ArgsParseError"],[13,"RotateCol"],[13,"RotateRow"],[13,"Rect"]]},\
"aoc_2016_day_09":{"doc":"Advent of Code 2016: Day 9: Explosives in Cyberspace","t":[0,0,5,3,3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","Letter","Repeat","Token","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","display_len","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","params","parse","quick_into","quick_into","quick_into","stream","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two"],"q":["aoc_2016_day_09","","","aoc_2016_day_09::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_09::logic",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,4,4,0,3,4,5,3,4,5,3,4,5,3,4,5,5,4,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,3,5,3,4,5,3,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[4,6],[[3,7],8],[[3,7],8],[[4,7],8],[[4,7],8],[[5,7],8],[[5,7],8],[[]],[[]],[[]],[9,[[10,[3]]]],[9,[[10,[4]]]],[9,[[10,[5]]]],[[]],[[]],[[]],0,[[],[[11,[5]]]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[3,[[11,[6]]]],[3,[[11,[15]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[4,"Token"],[3,"InputParams"],[15,"u32"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"]]},\
"aoc_2016_day_10":{"doc":"Advent of Code 2016: Day 10: Balance Bots","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,13,13,13,13,4,4,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","high","into","into","low","params","parse","quick_into","quick_into","steps","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Bot","Give","Input","Output","Step","Target","Val","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","bot","bot","high","low","val"],"q":["aoc_2016_day_10","","","","aoc_2016_day_10::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_10::logic","","aoc_2016_day_10::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_10::model::Step","","","",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,4,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,16,15,15,16,0,0,0,15,16,15,16,15,16,15,16,15,16,15,15,16,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,18,19,19,19,18],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[15,15],[16,16],[[]],[[]],[[15,15],17],[[16,16],17],[[15,5],6],[[15,5],6],[[16,5],6],[[16,5],6],[[]],[[]],[7,[[8,[15]]]],[7,[[8,[16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[15,"u64"],[4,"Step"],[4,"Target"],[15,"bool"],[13,"Input"],[13,"Give"]]},\
"aoc_2016_day_11":{"doc":"Advent of Code 2016: Day 11: Radioisotope Thermoelectric …","t":[0,0,0,5,0,4,3,13,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,3,6,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,5,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","tools","Component","Floor","Generator","Input","InputParams","Microchip","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref_mut","eq","floors","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","into","into","into","into","params","parse","quick_into","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","part_one","part_two","State","StateCompact","Val","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","compact","comps","comps_len","elevator","eq","expand","fmt","fmt","from","from","from_input","hash","into","into","is_done","next_states","partial_cmp","quick_into","quick_into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","CorpusGenArgs","borrow","borrow_mut","corpus_gen","from","into","parse","quick_into","try_from","try_into","type_id"],"q":["aoc_2016_day_11","","","","","aoc_2016_day_11::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_11::logic","","aoc_2016_day_11::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_11::tools","","","","","","","","","",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,0,0,5,0,0,5,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,6,4,4,5,3,3,3,4,4,5,5,6,6,3,4,5,6,3,4,5,6,3,4,5,6,3,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,0,0,0,0,0,18,19,18,19,18,19,18,19,19,18,18,18,18,19,19,18,19,18,19,18,19,18,19,18,18,19,18,19,18,19,18,19,18,19,18,19,0,23,23,0,23,23,23,23,23,23,23],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[],6],[4,7],[4,7],[[5,5],8],0,[[3,9],10],[[3,9],10],[[4,9],10],[[4,9],10],[[5,9],10],[[5,9],10],[[6,9],10],[[6,9],10],[[]],[[]],[[]],[[]],[11,[[12,[3]]]],[11,[[12,[4]]]],[11,[[12,[5]]]],[11,[[12,[6]]]],[[]],[[]],[[]],[[]],0,[[],[[13,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[3,[[13,[17]]]],[3,[[13,[17]]]],0,0,0,[[]],[[]],[[]],[[]],[18,18],[19,19],[[]],[[]],[[19,19],20],[18,19],0,0,0,[[19,19],8],[[19,21],18],[[18,9],10],[[19,9],10],[[]],[[]],[3,13],[19],[[]],[[]],[18,8],[[18,7]],[[19,19],[[22,[20]]]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,[[]],[[]],[23,13],[[]],[[]],[[],[[15,[23,24]]]],[[]],[[],15],[[],15],[[],16]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"Floor"],[4,"Component"],[3,"InputParams"],[3,"Vec"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"usize"],[3,"State"],[3,"StateCompact"],[4,"Ordering"],[15,"u8"],[4,"Option"],[3,"CorpusGenArgs"],[4,"ArgsParseError"]]},\
"aoc_2016_day_12":{"doc":"Advent of Code 2016: Day 12: Leonardo’s Monorail","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","ops_limit","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2016_day_12","","","aoc_2016_day_12::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_12::logic",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i32"]]},\
"aoc_2016_day_13":{"doc":"Advent of Code 2016: Day 13: A Maze of Twisty Little …","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,5,5,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count_dist","default","end_x","end_y","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_dist","params","parse","quick_into","quick_into","seed","start_x","start_y","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Pos"],"q":["aoc_2016_day_13","","","","aoc_2016_day_13::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_13::logic","","aoc_2016_day_13::model",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,4,4,4,3,3,4,4,3,4,3,4,3,4,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],0,0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],0,0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2016_day_14":{"doc":"Advent of Code 2016: Day 14: One-Time Pad","t":[0,0,5,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","batch_size","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","hash_reps","into","into","max_threads","num_keys","num_next","params","parse","quick_into","quick_into","salt","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2016_day_14","","","aoc_2016_day_14::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_14::logic",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,4,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,4,3,4,4,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,0,0,0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2016_day_15":{"doc":"Advent of Code 2016: Day 15: Timing is Everything","t":[0,0,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5],"n":["input","logic","puzzle_metadata","Disc","Input","InputParams","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","delay","discs","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","num_posns","params","parse","quick_into","quick_into","quick_into","start_pos","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","calc_result","part_one","part_two"],"q":["aoc_2016_day_15","","","aoc_2016_day_15::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_15::logic","",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Main logic for both parts, takes a list of discs and …","Implementation for part one","Implementation for part two"],"i":[0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,4,5,4,3,4,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,4,3,5,3,4,5,4,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],4],[[],5],0,0,[[4,4],6],[[3,7],8],[[3,7],8],[[4,7],8],[[4,7],8],[[5,7],8],[[5,7],8],[[]],[[]],[[]],[9,[[10,[3]]]],[9,[[10,[4]]]],[9,[[10,[5]]]],[[]],[[]],[[]],0,0,[[],[[11,[5]]]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],[[11,[15]]]],[3,[[11,[15]]]],[3,[[11,[15]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"Disc"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"]]},\
"aoc_2016_day_16":{"doc":"Advent of Code 2016: Day 16: Dragon Checksum","t":[0,0,5,4,3,3,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Bit","Disc","Input","InputParams","One","Zero","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","delay","disk_size_one","disk_size_two","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","initial_state","into","into","into","into","num_posns","params","parse","quick_into","quick_into","quick_into","quick_into","start_pos","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","part_one","part_two"],"q":["aoc_2016_day_16","","","aoc_2016_day_16::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_16::logic",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,5,5,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,4,6,4,6,6,4,5,3,3,4,4,5,5,6,6,3,4,5,6,3,4,5,6,3,3,4,5,6,4,3,6,3,4,5,6,4,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[],4],[[],6],0,0,0,[[4,4],7],[[5,5],7],[[3,8],9],[[3,8],9],[[4,8],9],[[4,8],9],[[5,8],9],[[5,8],9],[[6,8],9],[[6,8],9],[[]],[[]],[[]],[[]],[10,[[11,[3]]]],[10,[[11,[4]]]],[10,[[11,[5]]]],[10,[[11,[6]]]],0,[[]],[[]],[[]],[[]],0,0,[[],[[12,[6]]]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[3,[[12,[13]]]],[3,[[12,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"Disc"],[4,"Bit"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_17":{"doc":"Advent of Code 2016: Day 17: Two Steps Forward","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","passcode","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Dir","Pos"],"q":["aoc_2016_day_17","","","","aoc_2016_day_17::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_17::logic","","aoc_2016_day_17::model",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[13]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2016_day_18":{"doc":"Advent of Code 2016: Day 18: Like a Rogue","t":[0,0,5,3,3,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","Safe","Tile","Trap","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","eq","first_row","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","hash","into","into","into","num_rows_one","num_rows_two","params","parse","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two"],"q":["aoc_2016_day_18","","","aoc_2016_day_18::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_18::logic",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,5,0,5,3,4,5,3,4,5,3,4,5,3,4,5,4,5,3,3,3,4,4,5,5,3,4,5,3,4,5,5,3,4,5,4,4,3,4,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],4],[[5,5],6],0,[[3,7],8],[[3,7],8],[[4,7],8],[[4,7],8],[[5,7],8],[[5,7],8],[[]],[[]],[[]],[9,[[10,[3]]]],[9,[[10,[4]]]],[9,[[10,[5]]]],[5],[[]],[[]],[[]],0,0,0,[[],[[11,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[3,[[11,[15]]]],[3,[[11,[15]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[4,"Tile"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2016_day_19":{"doc":"Advent of Code 2016: Day 19: An Elephant Named Joseph","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","num_elves","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2016_day_19","","","aoc_2016_day_19::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_19::logic",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2016_day_20":{"doc":"Advent of Code 2016: Day 20: Firewall Rules","t":[0,0,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","Rule","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","params","parse","partial_cmp","quick_into","quick_into","quick_into","rules","start","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two"],"q":["aoc_2016_day_20","","","aoc_2016_day_20::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_20::logic",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,4,5,4,4,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,3,5,4,3,4,5,3,4,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[4,4],6],[[],5],0,[[4,4],7],[[3,8],9],[[3,8],9],[[4,8],9],[[4,8],9],[[5,8],9],[[5,8],9],[[]],[[]],[[]],[10,[[11,[3]]]],[10,[[11,[4]]]],[10,[[11,[5]]]],[[]],[[]],[[]],0,[[],[[12,[5]]]],[[4,4],[[13,[6]]]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[3,[[12,[17]]]],[3,[[12,[17]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"Rule"],[3,"InputParams"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2016_day_21":{"doc":"Advent of Code 2016: Day 21: Scrambled Letters and Hash","t":[0,0,0,0,5,3,3,13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,4,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5],"n":["input","logic","model","ops","puzzle_metadata","Input","InputParams","Move","Reverse","RotChar","RotLeft","RotRight","ScrambleOp","SwapChars","SwapPosns","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","ops","params","parse","partial_cmp","quick_into","quick_into","quick_into","start_one","start_two","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","Mode","Scramble","State","Unscramble","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","quick_into","to_owned","try_from","try_into","type_id","apply","move_shift","reverse","rotate","rotate_char_scramble","rotate_char_unscramble","swap_chars","swap_posns"],"q":["aoc_2016_day_21","","","","","aoc_2016_day_21::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_21::logic","","aoc_2016_day_21::model","","","","","","","","","","","","","","","","","aoc_2016_day_21::ops","","","","","","",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Apply the provided <code>ScrambleOp</code>, in the provided <code>Mode</code>, to …","","","","","","",""],"i":[0,0,0,0,0,0,0,4,4,4,4,4,0,4,4,3,4,5,3,4,5,3,4,5,3,4,5,4,5,4,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,3,3,5,4,3,4,5,5,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,17,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0],"f":[0,0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[4,4],6],[[],5],[[4,4],7],[[3,8],9],[[3,8],9],[[4,8],9],[[4,8],9],[[5,8],9],[[5,8],9],[[]],[[]],[[]],[10,[[11,[3]]]],[10,[[11,[4]]]],[10,[[11,[5]]]],[[]],[[]],[[]],0,0,[[],[[12,[5]]]],[[4,4],[[13,[6]]]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[3,[[12,[14]]]],[3,[[12,[14]]]],0,0,0,0,[[]],[[]],[17,17],[[]],[[17,17],7],[[17,8],9],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],16],[[18,18,17,4],12],[[18,19,19],12],[[18,19,19],12],[[18,18,19],12],[[18,18,20],12],[[18,18,20],12],[[18,20,20],12],[[18,19,19],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[4,"ScrambleOp"],[3,"InputParams"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[4,"Mode"],[6,"State"],[15,"usize"],[15,"char"]]},\
"aoc_2016_day_22":{"doc":"Advent of Code 2016: Day 22: Grid Computing","t":[0,0,0,5,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","Node","avail","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","nodes","params","parse","pos","quick_into","quick_into","quick_into","size","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","use_pc","used","part_one","part_two","Coord","Pos","Size"],"q":["aoc_2016_day_22","","","","aoc_2016_day_22::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_22::logic","","aoc_2016_day_22::model","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,4,3,4,5,3,4,5,3,4,5,3,4,5,5,3,4,5,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,3,3,5,4,3,4,5,4,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,4,4,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[[3,3],6],[[4,4],6],[[5,5],6],[[3,7],8],[[3,7],8],[[4,7],8],[[4,7],8],[[5,7],8],[[5,7],8],[[]],[[]],[[]],[9,[[10,[3]]]],[9,[[10,[4]]]],[9,[[10,[5]]]],[[]],[[]],[[]],0,0,[[],[[11,[5]]]],0,[[]],[[]],[[]],0,[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],0,0,[3,[[11,[15]]]],[3,[[11,[15]]]],0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"Node"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"usize"]]},\
"aoc_2016_day_23":{"doc":"Advent of Code 2016: Day 23: Safe Cracking","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2016_day_23","","","aoc_2016_day_23::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_23::logic",""],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,3],5],[[4,4],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],0,[[]],[[]],0,[[],[[10,[4]]]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i32"]]},\
"aoc_2016_day_24":{"doc":"Advent of Code 2016: Day 24: Air Duct Spelunking","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6,13,13,6,6,4,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","tiles","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Num","Open","Pos","SeenGrid","Tile","TilesGrid","Wall","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from_parser","into","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2016_day_24","","","","aoc_2016_day_24::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_24::logic","","aoc_2016_day_24::model","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,15,15,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,3],5],[[4,4],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[[]],[[]],0,[[],[[10,[4]]]],[[]],[[]],0,[[]],[[]],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]],0,0,0,0,0,0,0,0,[[]],[[]],[15,15],[[]],[[],15],[[15,15],5],[[15,6],7],[[15,6],7],[[]],[8,[[9,[15]]]],[[]],[[]],[[]],[[],11],[[],12],[[],12],[[],13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"]]},\
"aoc_2016_day_25":{"doc":"Advent of Code 2016: Day 25: Clock Signal","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","limit","ops_limit","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one"],"q":["aoc_2016_day_25","","","aoc_2016_day_25::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_25::logic"],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,4,3,3,4,4,3,4,3,4,3,3,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,3],5],[[4,4],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],0,[[]],[[]],0,0,0,[[],[[10,[4]]]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[3,[[10,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i32"]]},\
"aoc_2017":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5],"n":["day_01","day_02","day_03","day_04","day_05","day_06","day_07","day_08","day_09","day_10","day_11","day_12","day_13","day_14","day_15","day_16","day_17","day_18","day_19","day_20","day_21","day_22","day_23","day_24","day_25","puzzle_metadata"],"q":["aoc_2017","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[3,[[2,[1]]]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Vec"]]},\
"aoc_2017_cpu":{"doc":"","t":[13,3,4,4,13,4,13,13,13,13,13,13,13,13,3,13,13,13,13,4,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Add","Cpu","CpuError","DstArg","Imm","Instr","Jgz","Jnz","Limit","Mod","Mul","Overflow","Rcv","Receive","Reg","Reg","Reg","Set","Snd","SrcArg","Sub","Val","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_step","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cpu_optimise","default","eq","eq","eq","eq","execute","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_parser","from_parser","from_parser","from_parser","get_reg","idx","input","instrs","into","into","into","into","into","into","limit","load_dst","load_reg","load_src","new","next","next_instr","provide","push_input","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","set_limit","set_next","set_reg","step","store_dst","store_reg","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["aoc_2017_cpu","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[4,0,0,0,6,0,4,4,3,4,4,3,4,3,0,5,6,4,4,0,4,0,1,3,4,5,6,7,1,3,4,5,6,7,1,1,3,4,5,6,7,1,3,4,5,6,7,0,1,4,5,6,7,1,1,3,3,4,4,5,5,6,6,7,7,1,3,3,4,5,6,7,4,5,6,7,1,7,1,1,1,3,4,5,6,7,1,1,1,1,1,1,1,3,1,1,3,4,5,6,7,1,1,1,1,1,1,1,3,4,5,6,7,3,4,5,6,7,1,3,4,5,6,7,7,1,3,4,5,6,7,1,3,4,5,6,7],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[1,1],[3,3],[4,4],[5,5],[6,6],[7,7],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],1],[[4,4],2],[[5,5],2],[[6,6],2],[[7,7],2],[1,[[10,[[9,[8]],3]]]],[[1,11],12],[[3,11],12],[[3,11],12],[[4,11],12],[[4,11],12],[[5,11],12],[[5,11],12],[[6,11],12],[[6,11],12],[[7,11],12],[[7,11],12],[[]],[[]],[13,3],[[]],[[]],[[]],[[]],[14,[[15,[4]]]],[14,[[15,[5]]]],[14,[[15,[6]]]],[14,[[15,[7]]]],[[1,16],[[10,[8,17]]]],[7,18],[1,19],[1,20],[[]],[[]],[[]],[[]],[[]],[[]],[1,21],[[1,5],8],[[1,7],8],[[1,6],8],[[[22,[20]]],1],[1,21],[1,[[9,[4]]]],[23],[[1,8],1],[[]],[[]],[[]],[[]],[[]],[[]],[[1,21],1],[[1,21]],[[1,16,8],[[10,[1,17]]]],[1,[[10,[[9,[8]],3]]]],[[1,5,8]],[[1,7,8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],10],[[],10],[[],10],[[],10],[[],10],[16,[[10,[7]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25]],"p":[[3,"Cpu"],[15,"bool"],[4,"CpuError"],[4,"Instr"],[4,"DstArg"],[4,"SrcArg"],[3,"Reg"],[6,"Val"],[4,"Option"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"Overflow"],[3,"Parser"],[6,"ParseResult"],[15,"char"],[15,"str"],[15,"usize"],[3,"VecDeque"],[3,"Rc"],[15,"u64"],[8,"Into"],[3,"Demand"],[3,"String"],[3,"TypeId"]]},\
"aoc_2017_day_01":{"doc":"Advent of Code 2017: Day 1: Inverse Captcha","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","digits","eq","eq","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2017_day_01","","","aoc_2017_day_01::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_01::logic",""],"d":["","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,3],5],[[4,4],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[[]],[[]],0,[[],[[10,[4]]]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_02":{"doc":"Advent of Code 2017: Day 2: Corruption Checksum","t":[0,0,0,5,3,3,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","Row","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cells","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref_mut","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","params","parse","quick_into","quick_into","quick_into","rows","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","Value"],"q":["aoc_2017_day_02","","","","aoc_2017_day_02::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_02::logic","","aoc_2017_day_02::model"],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,5,3,4,5,4,3,4,5,3,4,5,5,4,4,3,4,5,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,3,5,3,4,5,3,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[4,6],[4,6],[[3,3],7],[[4,4],7],[[5,5],7],[[3,8],9],[[3,8],9],[[4,8],9],[[4,8],9],[[5,8],9],[[5,8],9],[[]],[[]],[[]],[10,[[11,[3]]]],[10,[[11,[4]]]],[10,[[11,[5]]]],[[]],[[]],[[]],0,[[],[[12,[5]]]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[3,[[12,[16]]]],[3,[[12,[16]]]],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"Row"],[3,"InputParams"],[3,"Vec"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_03":{"doc":"Advent of Code 2017: Day 3: Spiral Memory","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","target","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Dir","Pos","Turn"],"q":["aoc_2017_day_03","","","","aoc_2017_day_03::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_03::logic","","aoc_2017_day_03::model","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,3],5],[[4,4],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[[]],[[]],0,[[],[[10,[4]]]],[[]],[[]],0,[[]],[[]],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_04":{"doc":"Advent of Code 2017: Day 4: High-Entropy Passphrases","t":[0,0,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputLine","InputParams","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref_mut","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","params","parse","passphrases","passphrases","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two"],"q":["aoc_2017_day_04","","","aoc_2017_day_04::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_04::logic",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,5,4,4,3,4,5,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,3,5,3,4,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[4,6],[4,6],[[3,3],7],[[4,4],7],[[5,5],7],[[3,8],9],[[3,8],9],[[4,8],9],[[4,8],9],[[5,8],9],[[5,8],9],[[]],[[]],[[]],[10,[[11,[3]]]],[10,[[11,[4]]]],[10,[[11,[5]]]],[[]],[[]],[[]],0,[[],[[12,[5]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[3,[[12,[16]]]],[3,[[12,[16]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputLine"],[3,"InputParams"],[3,"Vec"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_05":{"doc":"Advent of Code 2017: Day 5: A Maze of Twisty Trampolines, …","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,5,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","tramps","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Tramp"],"q":["aoc_2017_day_05","","","","aoc_2017_day_05::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_05::logic","","aoc_2017_day_05::model"],"d":["","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,3],5],[[4,4],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[[]],[[]],0,[[],[[10,[4]]]],[[]],[[]],[[]],[[]],[[],11],[[],11],0,[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_06":{"doc":"Advent of Code 2017: Day 6: Memory Reallocation","t":[0,0,0,5,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","banks","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Banks"],"q":["aoc_2017_day_06","","","","aoc_2017_day_06::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_06::logic","","aoc_2017_day_06::model"],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,3,4,3,4,3,4,3,4,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,3],5],[[4,4],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[[]],[[]],0,[[],[[10,[4]]]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_07":{"doc":"Advent of Code 2017: Day 7: Recursive Circus","t":[0,0,0,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,3,11,11,11,11,11,12,12,11,12,11,12,11,12,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","Prog","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","holds","into","into","into","name","params","parse","progs","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","weight","part_one","part_two","ProgInfo","borrow","borrow_mut","build","fmt","from","holds","holds_weight","into","name","nested_len","prog_weight","quick_into","total_weight","try_from","try_into","type_id","write_input"],"q":["aoc_2017_day_07","","","","aoc_2017_day_07::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_07::logic","","aoc_2017_day_07::model","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,5,3,4,5,3,3,4,4,5,5,3,4,5,3,4,5,4,3,4,5,4,3,5,3,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,4,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[[3,3],6],[[4,4],6],[[5,5],6],[[3,7],8],[[3,7],8],[[4,7],8],[[4,7],8],[[5,7],8],[[5,7],8],[[]],[[]],[[]],[9,[[10,[3]]]],[9,[[10,[4]]]],[9,[[10,[5]]]],0,[[]],[[]],[[]],0,0,[[],[[11,[5]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],0,[3,[[11,[12]]]],[3,[[11,[15]]]],0,[[]],[[]],[3,[[11,[16]]]],[[16,7],8],[[]],0,0,[[]],0,[16,17],0,[[]],0,[[],13],[[],13],[[],14],[[16,18]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"Prog"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"ProgInfo"],[15,"usize"],[3,"Vec"]]},\
"aoc_2017_day_08":{"doc":"Advent of Code 2017: Day 8: I Heard You Like Registers","t":[0,0,0,5,4,3,13,4,13,13,13,13,3,13,13,13,6,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["cpu","input","logic","puzzle_metadata","ChkOp","Cpu","Dec","DstOp","Eq","Gtr","GtrEq","Inc","Instr","Lsr","LsrEq","NotEq","Val","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chk_amt","chk_op","chk_reg","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","dst_amt","dst_op","dst_reg","eq","eq","eq","execute","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","into","into","into","into","is_ready","load","new","quick_into","quick_into","quick_into","quick_into","regs","step","store","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2017_day_08","","","","aoc_2017_day_08::cpu","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_08::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_08::logic",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,5,0,4,4,4,5,0,4,4,4,0,3,4,5,6,3,4,5,6,6,6,6,3,4,5,6,3,4,5,6,6,6,6,4,5,6,3,3,4,4,5,5,6,6,3,4,5,6,4,5,6,3,4,5,6,3,3,3,3,4,5,6,3,3,3,3,4,5,6,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,0,0,21,22,21,22,21,22,21,22,22,21,21,22,22,21,22,21,22,21,21,22,21,22,21,22,21,22,21,22,21,22,21,22,21,22,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],0,0,0,[[4,4],7],[[5,5],7],[[6,6],7],[3],[[3,8],9],[[4,8],9],[[4,8],9],[[5,8],9],[[5,8],9],[[6,8],9],[[6,8],9],[[]],[[]],[[]],[[]],[10,[[11,[4]]]],[10,[[11,[5]]]],[10,[[11,[6]]]],[[]],[[]],[[]],[[]],[3,7],[[3,12],13],[[[15,[14]]],3],[[]],[[]],[[]],[[]],[3,16],[3,17],[[3,12,13]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],0,0,[[]],[[]],[[]],[[]],[21,21],[22,22],[[]],[[]],[[],22],[[21,8],9],[[21,8],9],[[22,8],9],[[22,8],9],[[]],[[]],[10,[[11,[21]]]],[10,[[11,[22]]]],0,[[]],[[]],0,[[],[[23,[22]]]],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[21,[[23,[13]]]],[21,[[23,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Cpu"],[4,"ChkOp"],[4,"DstOp"],[3,"Instr"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[4,"InpStr"],[6,"Val"],[3,"Rc"],[8,"Into"],[8,"Iterator"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Input"],[3,"InputParams"],[6,"GenResult"]]},\
"aoc_2017_day_09":{"doc":"Advent of Code 2017: Day 9: Stream Processing","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","input","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2017_day_09","","","aoc_2017_day_09::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_09::logic",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_10":{"doc":"Advent of Code 2017: Day 10: Knot Hash","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","rounds_one","rounds_two","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2017_day_10","","","aoc_2017_day_10::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_10::logic",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,4,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[10]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_11":{"doc":"Advent of Code 2017: Day 11: Hex Ed","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6,13,13,13,6,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","steps","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","North","NorthEast","NorthWest","Pos","South","SouthEast","SouthWest","VHexDir","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","fmt","from","from_parser","into","partial_cmp","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2017_day_11","","","","aoc_2017_day_11::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_11::logic","","aoc_2017_day_11::model","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,0,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[14,14],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],[[14,14],[[17,[15]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"VHexDir"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2017_day_12":{"doc":"Advent of Code 2017: Day 12: Digital Plumber","t":[0,0,0,5,3,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","InputPipe","InputPipes","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","left","params","parse","pipes","quick_into","quick_into","quick_into","right","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","Grouper","Village","borrow","borrow_mut","build","clone","clone_into","default","fmt","from","group_size","groups","into","quick_into","to_owned","try_from","try_into","type_id"],"q":["aoc_2017_day_12","","","","aoc_2017_day_12::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_12::logic","","aoc_2017_day_12::model","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,5,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,4,3,5,3,3,4,5,4,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[8,[[9,[5]]]],[[]],[[]],[[]],0,0,[[],[[10,[5]]]],0,[[]],[[]],[[]],0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]],0,0,[[]],[[]],[3,15],[15,15],[[]],[[],15],[[15,6],7],[[]],[[15,16],17],[15,18],[[]],[[]],[[]],[[],12],[[],12],[[],13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputPipe"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Grouper"],[6,"Village"],[15,"usize"],[8,"Iterator"]]},\
"aoc_2017_day_13":{"doc":"Advent of Code 2017: Day 13: Packet Scanners","t":[0,0,0,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","Layer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","depth","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","layers","params","parse","partial_cmp","quick_into","quick_into","quick_into","range","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","LayerDepth","LayerRange"],"q":["aoc_2017_day_13","","","","aoc_2017_day_13::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_13::logic","","aoc_2017_day_13::model",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,4,5,4,4,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,3,3,5,4,3,4,5,4,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[4,4],6],[[],5],0,[[4,4],7],[[3,8],9],[[3,8],9],[[4,8],9],[[4,8],9],[[5,8],9],[[5,8],9],[[]],[[]],[[]],[10,[[11,[3]]]],[10,[[11,[4]]]],[10,[[11,[5]]]],[[]],[[]],[[]],0,0,[[],[[12,[5]]]],[[4,4],[[13,[6]]]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[3,[[12,[17]]]],[3,[[12,[17]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"Layer"],[3,"InputParams"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_14":{"doc":"Advent of Code 2017: Day 14: Disk Defragmentation","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","key","num_rounds","num_rows","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Grid","Pos","part_one","part_two"],"q":["aoc_2017_day_14","","","aoc_2017_day_14::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_14::logic","","",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_15":{"doc":"Advent of Code 2017: Day 15: Dueling Generators","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","reps_one","reps_two","start_a","start_b","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2017_day_15","","","aoc_2017_day_15::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_15::logic",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,4,4,3,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,0,0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_16":{"doc":"Advent of Code 2017: Day 16: Permutation Promenade","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,5,5,13,3,8,13,3,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","reps_two","steps","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Exchange","Line","LineItem","Partner","Pos","Prog","Spin","Step","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref_mut","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_parser","from_parser","from_parser","idx","idx","into","into","into","into","quick_into","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["aoc_2017_day_16","","","","aoc_2017_day_16::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_16::logic","","aoc_2017_day_16::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,4,3,3,4,3,4,3,4,3,4,3,4,0,0,18,0,0,18,0,0,18,0,13,14,17,18,13,14,17,18,13,14,17,18,13,14,17,18,17,17,17,14,13,13,14,14,17,17,18,18,13,14,17,17,18,13,14,18,13,14,13,14,17,18,13,14,17,18,13,14,17,18,13,14,17,18,13,13,14,14,17,18,13,14,17,18,13,14,17,18],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[10]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,13],[14,14],[[[17,[[0,[15,16]]]]],[[17,[[0,[15,16]]]]]],[18,18],[[]],[[]],[[]],[[]],[[],[[17,[16]]]],[[[17,[16]]]],[[[17,[16]]]],[[14,14],19],[[13,5],6],[[13,5],6],[[14,5],6],[[14,5],6],[[[17,[[0,[20,16]]]],5],6],[[[17,[16]],5],6],[[18,5],6],[[18,5],6],[[]],[[]],[[],[[17,[16]]]],[[]],[[]],[7,[[8,[13]]]],[7,[[8,[14]]]],[7,[[8,[18]]]],[13,21],[14,21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[22,[[11,[13]]]],[[],11],[22,[[11,[14]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Pos"],[3,"Prog"],[8,"Clone"],[8,"LineItem"],[3,"Line"],[4,"Step"],[15,"bool"],[8,"Debug"],[15,"usize"],[15,"u8"]]},\
"aoc_2017_day_17":{"doc":"Advent of Code 2017: Day 17: Spinlock","t":[0,0,5,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","advance","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2017_day_17","","","aoc_2017_day_17::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_17::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_18":{"doc":"Advent of Code 2017: Day 18: Duet","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2017_day_18","","","aoc_2017_day_18::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_18::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i64"],[15,"u32"]]},\
"aoc_2017_day_19":{"doc":"Advent of Code 2017: Day 19: A Series of Tubes","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,6,13,6,13,6,13,13,6,4,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","route_iter","Coord","Corner","Dir","Empty","Grid","Horiz","Letter","Pos","Tile","Turn","Vert","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from_parser","into","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2017_day_19","","","","aoc_2017_day_19::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_19::logic","","","aoc_2017_day_19::model","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,15,0,15,0,15,15,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[15,15],[[]],[[],15],[[15,15],16],[[15,5],6],[[15,5],6],[[]],[7,[[8,[15]]]],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[8,"Iterator"],[4,"Tile"],[15,"bool"]]},\
"aoc_2017_day_20":{"doc":"Advent of Code 2017: Day 20: Particle Swarm","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,4,6,6,6,3,6,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","particles","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Acc","Aspect","Axis","Coord","CoordAbs","Particle","Pos","Pos","Vel","acc","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","from","from","from_parser","index","into","into","pos","quick_into","quick_into","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vel"],"q":["aoc_2017_day_20","","","","aoc_2017_day_20::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_20::logic","","aoc_2017_day_20::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,0,0,0,0,0,0,14,14,15,14,15,14,15,14,15,14,15,14,15,14,15,15,14,15,15,15,14,15,15,14,15,14,15,15,14,15,14,15,14,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[14,14],[15,15],[[]],[[]],[[14,14],16],[[15,15],16],[[14,5],6],[[15,5],6],[[15,5],6],[[]],[[]],[7,[[8,[15]]]],[[15,14],17],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Aspect"],[3,"Particle"],[15,"bool"],[6,"Pos"]]},\
"aoc_2017_day_21":{"doc":"Advent of Code 2017: Day 21: Fractal Art","t":[0,0,0,5,3,3,4,4,13,13,13,13,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,5,5,5,5,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","InputPixel","InputRule","Off","On","ThreeToFour","TwoToThree","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_rules","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","into","into","into","into","iters_one","iters_two","params","parse","parse_pixels","parse_pixels_2","parse_pixels_3","parse_pixels_4","quick_into","quick_into","quick_into","quick_into","rules","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","part_one","part_two","FourByFour","SixBySix","Square","ThreeByThree","TwoByTwo","borrow","borrow_mut","clone","clone_into","cmp","default","eq","flip","fmt","fmt","from","idx","into","join","num_active","partial_cmp","quick_into","rotate","split","split","to_owned","to_string","try_from","try_from","try_from","try_into","type_id"],"q":["aoc_2017_day_21","","","","aoc_2017_day_21::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_21::logic","","aoc_2017_day_21::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,5,5,4,4,3,4,5,6,3,4,5,6,6,3,4,5,6,3,4,5,6,5,6,4,5,3,3,4,4,5,5,6,6,3,4,5,6,3,4,5,6,3,4,5,6,6,6,3,6,0,0,0,0,3,4,5,6,3,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[],5],[[],6],[[4,4],7],[[5,5],7],[[3,8],9],[[3,8],9],[[4,8],9],[[4,8],9],[[5,8],9],[[5,8],9],[[6,8],9],[[6,8],9],[[]],[[]],[[]],[[]],[10,[[11,[3]]]],[10,[[11,[4]]]],[10,[[11,[5]]]],[10,[[11,[6]]]],[[]],[[]],[[]],[[]],0,0,0,[[],[[12,[6]]]],[[10,13],[[11,[14]]]],[10,[[11,[15]]]],[10,[[11,[16]]]],[10,[[11,[16]]]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],19],[3,[[12,[14]]]],[3,[[12,[14]]]],0,0,0,0,0,[[]],[[]],[[[22,[[0,[20,21]]]]],[[22,[[0,[20,21]]]]]],[[]],[[[22,[[0,[23,21]]]],22],24],[[],[[22,[[0,[25,21]]]]]],[[[22,[[0,[26,21]]]],22],7],[[[22,[21]]],[[22,[21]]]],[[[22,[21]],8],9],[[[22,[[0,[27,21]]]],8],9],[[]],[[[22,[21]]],13],[[]],[[],[[22,[14]]]],[[[22,[21]]],14],[[[22,[[0,[28,21]]]],22],[[29,[24]]]],[[]],[[[22,[21]]],[[22,[21]]]],[[[22,[14]]]],[[[22,[16]]]],[[]],[[],17],[[],18],[15,[[18,[[22,[15]]]]]],[16,[[18,[[22,[16]]]]]],[[],18],[[],19]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[4,"InputRule"],[4,"InputPixel"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[15,"usize"],[15,"u64"],[15,"u8"],[15,"u16"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Clone"],[8,"Int"],[3,"Square"],[8,"Ord"],[4,"Ordering"],[8,"Default"],[8,"PartialEq"],[8,"Debug"],[8,"PartialOrd"],[4,"Option"]]},\
"aoc_2017_day_22":{"doc":"Advent of Code 2017: Day 22: Sporifica Virus","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,6,6,13,6,13,4,6,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","iters_one","iters_two","nodes","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Clean","Coord","Dir","Flagged","Grid","Infected","Node","Pos","Turn","Weakened","borrow","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from_parser","into","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2017_day_22","","","","aoc_2017_day_22::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_22::logic","","aoc_2017_day_22::model","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,4,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,0,0,14,0,14,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[],14],[[14,14],15],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[4,"Node"],[15,"bool"]]},\
"aoc_2017_day_23":{"doc":"Advent of Code 2017: Day 23: Coprocessor Conflagration","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2017_day_23","","","aoc_2017_day_23::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_23::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[15,"i64"]]},\
"aoc_2017_day_24":{"doc":"Advent of Code 2017: Day 24: Electromagnetic Moat","t":[0,0,0,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6],"n":["input","logic","model","puzzle_metadata","Component","Input","InputParams","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","comps","default","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","hash","into","into","into","params","parse","partial_cmp","port_0","port_1","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","Components","Port"],"q":["aoc_2017_day_24","","","","aoc_2017_day_24::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_24::logic","","aoc_2017_day_24::model",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,4,3,5,4,3,3,4,4,5,5,3,4,5,3,4,5,4,3,4,5,3,5,4,4,4,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[4,4],6],0,[[],5],[[4,4],7],[[3,8],9],[[3,8],9],[[4,8],9],[[4,8],9],[[5,8],9],[[5,8],9],[[]],[[]],[[]],[10,[[11,[3]]]],[10,[[11,[4]]]],[10,[[11,[5]]]],[4],[[]],[[]],[[]],0,[[],[[12,[5]]]],[[4,4],[[13,[6]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[3,[[12,[17]]]],[3,[[12,[17]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"Component"],[3,"InputParams"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_25":{"doc":"Advent of Code 2017: Day 25: The Halting Problem","t":[0,0,5,4,3,3,13,13,13,4,3,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["input","logic","puzzle_metadata","Dir","Input","InputParams","Left","One","Right","Slot","State","Zero","begin_state","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","eq","eq","eq","false_dir","false_state","false_write","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_parser","from_parser","from_parser","from_parser","from_parser","hash","hash","hash","id","into","into","into","into","into","num_steps","params","parse","partial_cmp","partial_cmp","partial_cmp","quick_into","quick_into","quick_into","quick_into","quick_into","states","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","true_dir","true_state","true_write","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","part_one"],"q":["aoc_2017_day_25","","","aoc_2017_day_25::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_25::logic"],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,4,5,4,0,0,5,3,3,4,5,6,7,3,4,5,6,7,3,4,5,6,7,3,4,5,6,7,4,5,6,7,4,5,6,6,6,6,3,3,4,4,5,5,6,6,7,7,3,4,5,6,7,3,4,5,6,7,4,5,6,6,3,4,5,6,7,3,3,7,4,5,6,3,4,5,6,7,3,3,4,5,6,7,3,4,5,6,7,6,6,6,3,4,5,6,7,3,4,5,6,7,3,4,5,6,7,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[7,7],[[]],[[]],[[]],[[]],[[]],[[4,4],8],[[5,5],8],[[6,6],8],[[],7],[[4,4],9],[[5,5],9],[[6,6],9],0,0,0,[[3,10],11],[[3,10],11],[[4,10],11],[[4,10],11],[[5,10],11],[[5,10],11],[[6,10],11],[[6,10],11],[[7,10],11],[[7,10],11],[[]],[[]],[[]],[[]],[[]],[12,[[13,[3]]]],[12,[[13,[4]]]],[12,[[13,[5]]]],[12,[[13,[6]]]],[12,[[13,[7]]]],[4],[5],[6],0,[[]],[[]],[[]],[[]],[[]],0,0,[[],[[14,[7]]]],[[4,4],[[15,[8]]]],[[5,5],[[15,[8]]]],[[6,6],[[15,[8]]]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],0,0,0,[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[],18],[3,[[14,[19]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[4,"Dir"],[4,"Slot"],[3,"State"],[3,"InputParams"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_knot":{"doc":"","t":[5,5,5,5],"n":["calc_checksum","calc_sparse","calculate","calculate_rounds"],"q":["aoc_2017_knot","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[[[]],[[[0,[1,2]],3]],[[]],[3]],"p":[[8,"IntoIterator"],[8,"Clone"],[15,"u32"]]},\
"aoc_2018":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5],"n":["day_01","day_02","day_03","day_04","day_05","day_06","day_07","day_08","day_09","day_10","day_11","day_12","day_13","day_14","day_15","day_16","day_17","day_18","day_19","day_20","day_21","day_22","day_23","day_24","day_25","puzzle_metadata"],"q":["aoc_2018","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[3,[[2,[1]]]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Vec"]]},\
"aoc_2018_cpu":{"doc":"","t":[13,13,13,4,13,13,13,13,13,13,4,6,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,4,4,13,13,13,3,13,13,13,18,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Add","Addi","Addr","ArgType","Ban","Bani","Banr","Bor","Bori","Borr","CpuError","CpuResult","Eq","Eqir","Eqri","Eqrr","Gt","Gtir","Gtri","Gtrr","Halt","Ignore","Imm","Instr","Internal","Mul","Muli","Mulr","Op","Opcode","Overflow","Reg","Register","Regs","Set","Seti","Setr","VARIANTS","apply","apply","apply","arg_a","arg_a","arg_b","arg_b","arg_c","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","data","default","deref","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_parser","from_parser","from_parser","from_parser","from_parser","from_parser","get","hash","hash","hash","hash","hash","hash","idx","into","into","into","into","into","into","new","op","opcode","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","provide","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","set","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["aoc_2018_cpud":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[5,1,1,0,5,1,1,5,1,1,0,0,5,1,1,1,5,1,1,1,8,7,7,0,8,5,1,1,0,0,8,7,8,0,5,1,1,1,1,5,6,1,6,1,6,6,1,5,7,8,3,6,1,5,7,8,3,6,1,5,7,8,3,6,1,5,7,8,3,6,1,5,7,8,3,6,1,3,3,1,5,7,8,3,6,1,1,5,5,7,7,8,8,3,3,6,6,1,5,7,8,3,6,1,5,7,8,3,6,3,1,5,7,8,3,6,1,1,5,7,8,3,6,3,1,6,1,5,7,8,3,6,8,1,5,7,8,3,6,3,1,5,7,8,3,6,1,5,7,8,3,6,1,5,7,8,3,6,1,5,7,8,3,6,1,5,7,8,3,6],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,2,2,[3,[2]]],[[4,[[3,[2]]]]]],[[5,[4,[2]],[4,[2]]],[[4,[2]]]],[[[6,[2]],[3,[2]]],[[4,[[3,[2]]]]]],[1,7],0,[1,7],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[5,5],[7,7],[8,8],[[[3,[[0,[9,2]]]]],[[3,[[0,[9,2]]]]]],[[[6,[[0,[9,2]]]]],[[6,[[0,[9,2]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],10],[[5,5],10],[[7,7],10],[[8,8],10],[[[3,[[0,[11,2]]]],3],10],[[[6,[[0,[11,2]]]],6],10],[1],[[],[[3,[2]]]],[[[3,[2]]]],[[1,1],12],[[5,5],12],[[7,7],12],[[8,8],12],[[[3,[[0,[13,2]]]],3],12],[[[6,[[0,[13,2]]]],6],12],[[1,14],15],[[1,14],15],[[5,14],15],[[5,14],15],[[7,14],15],[[7,14],15],[[8,14],15],[[8,14],15],[[[3,[2]],14],15],[[[3,[[0,[16,2]]]],14],15],[[[6,[2]],14],15],[[[6,[[0,[2,17]]]],14],15],[[]],[[]],[[]],[[]],[[]],[[]],[18,[[19,[1]]]],[18,[[19,[5]]]],[18,[[19,[7]]]],[18,[[19,[8]]]],[18,[[19,[[3,[[0,[2,17]]]]]]]],[18,[[19,[[6,[[0,[2,17]]]]]]]],[[[3,[2]],2],[[20,[2]]]],[1],[5],[7],[8],[[[3,[[0,[21,2]]]]]],[[[6,[[0,[21,2]]]]]],[1,22],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[3,[2]]]],[1,5],0,[[1,1],[[20,[10]]]],[[5,5],[[20,[10]]]],[[7,7],[[20,[10]]]],[[8,8],[[20,[10]]]],[[[3,[[0,[23,2]]]],3],[[20,[10]]]],[[[6,[[0,[23,2]]]],6],[[20,[10]]]],[24],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[2]],2,2],20],[[]],[[]],[[]],[[]],[[]],[[]],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27]],"p":[[4,"Opcode"],[8,"Int"],[3,"Regs"],[6,"CpuResult"],[4,"Op"],[3,"Instr"],[4,"ArgType"],[4,"CpuError"],[8,"Clone"],[4,"Ordering"],[8,"Ord"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"FromParser"],[3,"Parser"],[6,"ParseResult"],[4,"Option"],[8,"Hash"],[15,"usize"],[8,"PartialOrd"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2018_day_01":{"doc":"Advent of Code 2018: Day 1: Chronal Calibration","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deltas","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2018_day_01","","","aoc_2018_day_01::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_01::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i32"]]},\
"aoc_2018_day_02":{"doc":"Advent of Code 2018: Day 2: Inventory Management System","t":[0,0,5,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","box_ids","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2018_day_02","","","aoc_2018_day_02::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_02::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],0,[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[10]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2018_day_03":{"doc":"Advent of Code 2018: Day 3: No Matter How You Slice It","t":[0,0,0,5,3,3,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,5,5,3,6,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Claim","Input","InputParams","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","claims","clone","clone","clone","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","height","id","into","into","into","left","params","parse","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_string","to_string","to_string","top","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","width","part_one","part_two","Claim","Coord","Id","Pos","Square","area","borrow","borrow","borrow_mut","borrow_mut","bottom","bound","build_vec","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","height","id","into","into","left","new","new_size","overlap","quick_into","quick_into","remove","right","square","to_owned","to_owned","top","try_from","try_from","try_into","try_into","type_id","type_id","width"],"q":["aoc_2018_day_03","","","","aoc_2018_day_03::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_03::logic","","aoc_2018_day_03::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,5,3,4,5,3,3,4,5,3,4,5,5,3,3,4,4,5,5,3,4,5,3,4,5,4,4,3,4,5,4,3,5,3,4,5,3,4,5,3,4,5,4,3,4,5,3,4,5,3,4,5,4,0,0,0,0,0,0,0,15,17,15,17,15,15,15,17,17,15,17,15,17,15,17,15,17,15,15,17,17,15,15,15,15,15,17,15,15,15,17,17,15,15,17,15,17,15,17,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[8,[[9,[5]]]],0,0,[[]],[[]],[[]],0,0,[[],[[10,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],0,[3,[[10,[14]]]],[3,[[10,[14]]]],0,0,0,0,0,[15,14],[[]],[[]],[[]],[[]],[15,16],[[15,15],15],[3,[[10,[[18,[17]]]]]],[17,17],[15,15],[[]],[[]],[[17,17],19],[[15,15],19],[[17,6],7],[[15,6],7],[[]],[[]],[15,16],0,[[]],[[]],[15,16],[[16,16,16,16],[[10,[15]]]],[[16,16,16,16],[[10,[15]]]],[[15,15],[[20,[15]]]],[[]],[[]],[[15,15],[[21,[15]]]],[15,16],0,[[]],[[]],[15,16],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[15,16]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"Claim"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Square"],[6,"Coord"],[3,"Claim"],[3,"Vec"],[15,"bool"],[4,"Option"],[3,"TinyVec"]]},\
"aoc_2018_day_04":{"doc":"Advent of Code 2018: Day 4: Repose Record","t":[0,0,0,5,13,3,4,13,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","BeginsShift","Entry","Event","FallsAsleep","Input","InputParams","WakesUp","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","date","default","entries","event","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","into","into","into","into","params","parse","quick_into","quick_into","quick_into","quick_into","time","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","part_one","part_two","Date","HourMinute","as_minutes","as_seconds","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","hour","into","into","minute","next","partial_cmp","partial_cmp","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2018_day_04","","","","aoc_2018_day_04::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_04::logic","","aoc_2018_day_04::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,5,0,0,5,0,0,5,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,4,6,3,4,3,3,4,4,5,5,6,6,3,4,5,6,3,4,5,6,3,4,5,6,3,6,3,4,5,6,4,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,0,0,0,0,16,16,17,16,17,16,17,16,17,16,17,16,17,16,17,17,16,16,17,16,17,16,16,17,16,16,17,17,16,17,16,17,16,17,16,17,16,17,16,17,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],0,[[],6],0,0,[[3,7],8],[[3,7],8],[[4,7],8],[[4,7],8],[[5,7],8],[[5,7],8],[[6,7],8],[[6,7],8],[[]],[[]],[[]],[[]],[9,[[10,[3]]]],[9,[[10,[4]]]],[9,[[10,[5]]]],[9,[[10,[6]]]],[[]],[[]],[[]],[[]],0,[[],[[11,[6]]]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[3,[[11,[15]]]],[3,[[11,[15]]]],0,0,[16,15],[16,15],[[]],[[]],[[]],[[]],[17,17],[16,16],[[]],[[]],[[17,17],18],[[16,16],18],[[17,17],19],[[16,16],19],[[17,7],8],[[17,7],8],[[16,7],8],[[16,7],8],[[]],[[]],[9,[[10,[17]]]],[9,[[10,[16]]]],[16,15],[[]],[[]],[16,15],[17,17],[[17,17],[[20,[18]]]],[[16,16],[[20,[18]]]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"Entry"],[4,"Event"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"HourMinute"],[3,"Date"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2018_day_05":{"doc":"Advent of Code 2018: Day 5: Alchemical Reduction","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","polymer","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","reduce"],"q":["aoc_2018_day_05","","","aoc_2018_day_05::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_05::logic","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],[14,[[16,[15]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[8,"IntoIterator"],[15,"char"],[3,"Vec"]]},\
"aoc_2018_day_06":{"doc":"Advent of Code 2018: Day 6: Chronal Coordinates","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","dist_two","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","posns","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Pos"],"q":["aoc_2018_day_06","","","","aoc_2018_day_06::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_06::logic","","aoc_2018_day_06::model",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2018_day_07":{"doc":"Advent of Code 2018: Day 7: The Sum of Its Parts","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deps","extra_time","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","num_workers","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2018_day_07","","","aoc_2018_day_07::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_07::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,4,3,3,4,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2018_day_08":{"doc":"Advent of Code 2018: Day 8: Memory Maneuver","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2018_day_08","","","aoc_2018_day_08::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_08::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2018_day_09":{"doc":"Advent of Code 2018: Day 9: Marble Mania","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","last_marble","num_players","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2018_day_09","","","aoc_2018_day_09::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_09::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2018_day_10":{"doc":"Advent of Code 2018: Day 10: The Stars Align","t":[0,0,0,5,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,6,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,3,11,11,11,11,11,11,5,11,11,11],"n":["input","logic","model","puzzle_metadata","tools","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","points","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","find_smallest","part_one","part_two","Coord","Point","Pos","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","fmt","from","from_parser","hash","into","offset","partial_cmp","pos","quick_into","to_owned","to_string","try_from","try_into","type_id","vel","RunArgs","borrow","borrow_mut","from","into","parse","quick_into","run","try_from","try_into","type_id"],"q":["aoc_2018_day_10","","","","","aoc_2018_day_10::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_10::logic","","","aoc_2018_day_10::model","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_10::tools","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,20,20,20,20,20,20,0,20,20,20],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,9],[3,[[9,[10]]]],[3,[[9,[13]]]],0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[14,14],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,17],[[18,[14]]]],[[14,14],[[19,[15]]]],0,[[]],[[]],[[],10],[[],11],[[],11],[[],12],0,0,[[]],[[]],[[]],[[]],[[],[[11,[20,21]]]],[[]],[20,9],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Point"],[4,"Ordering"],[15,"bool"],[6,"Coord"],[6,"NumResult"],[4,"Option"],[3,"RunArgs"],[4,"ArgsParseError"]]},\
"aoc_2018_day_11":{"doc":"Advent of Code 2018: Day 11: Chronal Charge","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid_size","into","into","params","parse","quick_into","quick_into","serial","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","find_simple","part_one","part_two","Coord","Grid","Pos","Power"],"q":["aoc_2018_day_11","","","","aoc_2018_day_11::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_11::logic","","","aoc_2018_day_11::model","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[13,14],9],[3,[[9,[10]]]],[3,[[9,[10]]]],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Grid"],[6,"Coord"]]},\
"aoc_2018_day_12":{"doc":"Advent of Code 2018: Day 12: Subterranean Sustainability","t":[0,0,0,5,3,3,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,3,13,4,3,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","InputRule","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_rules","clone","clone","clone","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","into","into","into","params","parse","quick_into","quick_into","quick_into","rules","start","to","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","Empty","Generator","Plant","Pot","State","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","from","from","from","from","from_parser","into","into","into","iter","next","quick_into","quick_into","quick_into","start","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["aoc_2018_day_12","","","","aoc_2018_day_12::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_12::logic","","aoc_2018_day_12::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","Data representation and algorithms used to solve the puzzle","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Efficiently apply rules to a <code>State</code>","","Simple enum to represent the state of a pot","Represents all occupied plant pots at a specific point in …","","","","","","","Build a <code>Generator</code> from an <code>Input</code>","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return an iterator over the numbers of all occupied pots, …","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,5,3,4,5,5,3,4,5,3,4,5,5,3,3,4,4,5,5,3,4,5,4,3,4,5,3,4,5,3,5,3,4,5,3,3,4,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,16,0,16,0,0,16,15,17,16,15,17,15,16,15,16,15,17,17,16,16,15,16,15,17,17,16,16,15,17,17,15,16,15,17,17,16,15,16,16,15,17,16,15,17,16,15,17],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],0,[8,[[9,[3]]]],[8,[[9,[4]]]],[8,[[9,[5]]]],[[]],[[]],[[]],0,[[],[[10,[5]]]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,[[10,[15]]]],[16,16],[15,15],[[]],[[]],0,[[],17],[[16,6],7],[[16,6],7],[[15,6],7],[[]],[[]],[[]],[[],17],[8,[[9,[16]]]],[[]],[[]],[[]],[17,18],[[15,17],[[19,[17]]]],[[]],[[]],[[]],0,[[]],[[]],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputRule"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i64"],[3,"Generator"],[4,"Pot"],[3,"State"],[8,"Iterator"],[6,"NumResult"]]},\
"aoc_2018_day_13":{"doc":"Advent of Code 2018: Day 13: Mine Cart Madness","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,13,13,13,6,13,13,13,6,13,6,13,6,4,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","CartDown","CartLeft","CartRight","CartUp","Coord","CornerBck","CornerFwd","Crossing","Dir","Empty","Grid","Horiz","Pos","Tile","Turn","Vert","borrow","borrow_mut","clone","clone_into","default","fmt","fmt","from","from_parser","into","is_cart","is_crossing","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2018_day_13","","","","aoc_2018_day_13::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_13::logic","","aoc_2018_day_13::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","Data representation and algorithms used to solve the puzzle","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,13,13,13,13,0,13,13,13,0,13,0,13,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[13,13],[[]],[[],13],[[13,5],6],[[13,5],6],[[]],[7,[[8,[13]]]],[[]],[13,14],[13,14],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[4,"Tile"],[15,"bool"]]},\
"aoc_2018_day_14":{"doc":"Advent of Code 2018: Day 14: Chocolate Charts","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_recipes","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value","part_one","part_two"],"q":["aoc_2018_day_14","","","aoc_2018_day_14::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_14::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[3,[[9,[10]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2018_day_15":{"doc":"Advent of Code 2018: Day 15: Beverage Bandits","t":[0,0,0,5,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,6,6,13,13,6,13,6,6,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","state","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Cavern","Coord","Dir","Elf","Goblin","Grid","Open","Pos","SeenGrid","Tile","borrow","borrow_mut","clone","clone_into","cmp","default","enemy","eq","fmt","fmt","from","from_parser","into","partial_cmp","quick_into","to_owned","to_string","try_from","try_into","type_id","State","borrow","borrow_mut","build","from","into","num_rounds","quick_into","score","tick","try_from","try_into","type_id","units","winner"],"q":["aoc_2018_day_15","","","","","aoc_2018_day_15::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_15::logic","","aoc_2018_day_15::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_15::state","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,0,0,14,14,0,14,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[],14],[14,14],[[14,14],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],[[14,14],[[17,[15]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12],0,[[]],[[]],[[18,19,19],[[9,[20]]]],[[]],[[]],[20,13],[[]],[20,13],[20,16],[[],11],[[],11],[[],12],[20],[20,[[17,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"],[4,"Ordering"],[15,"bool"],[4,"Option"],[6,"Grid"],[15,"u16"],[3,"State"]]},\
"aoc_2018_day_16":{"doc":"Advent of Code 2018: Day 16: Chronal Classification","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,4,4,13,6,3,13,13,13,18,6,12,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","params","parse","quick_into","quick_into","samples","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Add","Addi","Addr","ArgType","Ban","Bani","Banr","Bor","Bori","Borr","Eq","Eqir","Eqri","Eqrr","Gt","Gtir","Gtri","Gtrr","Ignore","Imm","Instr","Mul","Muli","Mulr","Op","Opcode","Reg","Regs","Sample","Set","Seti","Setr","VARIANTS","Val","after","apply","apply","arg_a","arg_a","arg_b","arg_b","arg_c","before","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","data","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_parser","from_parser","from_parser","from_parser","from_parser","hash","hash","hash","hash","hash","idx","instr","into","into","into","into","into","op","op","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","quick_into","quick_into","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["aoc_2018_day_16","","","","aoc_2018_day_16::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_16::logic","","aoc_2018_day_16::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,17,14,14,0,17,14,14,17,14,14,17,14,14,14,17,14,14,14,18,18,0,17,14,14,0,0,18,0,0,17,14,14,14,0,20,14,17,14,19,14,19,19,20,14,19,20,17,18,14,19,20,17,18,14,19,20,17,18,14,19,20,17,18,14,19,20,17,18,14,14,19,20,17,18,14,14,19,19,20,20,17,17,18,18,14,19,20,17,18,14,19,20,17,18,14,19,20,17,18,14,20,14,19,20,17,18,14,19,14,19,20,17,18,14,19,20,17,18,14,19,20,17,18,14,19,20,17,18,14,19,20,17,18,14,19,20,17,18,14,19,20,17,18],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[14,15],[[11,[15,16]]]],[[17,[11,[16]],[11,[16]]],[[11,[16]]]],[14,18],0,[14,18],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[19,19],[20,20],[17,17],[18,18],[[]],[[]],[[]],[[]],[[]],[[14,14],21],[[19,19],21],[[20,20],21],[[17,17],21],[[18,18],21],[14],[[14,14],22],[[19,19],22],[[20,20],22],[[17,17],22],[[18,18],22],[[14,5],[[11,[23]]]],[[14,5],[[11,[23]]]],[[19,5],6],[[19,5],6],[[20,5],6],[[20,5],6],[[17,5],[[11,[23]]]],[[17,5],[[11,[23]]]],[[18,5],[[11,[23]]]],[[18,5],[[11,[23]]]],[[]],[[]],[[]],[[]],[[]],[7,[[11,[14,24]]]],[7,[[8,[19]]]],[7,[[8,[20]]]],[7,[[11,[17,24]]]],[7,[[11,[18,24]]]],[14],[19],[20],[17],[18],[14,25],0,[[]],[[]],[[]],[[]],[[]],[14,17],0,[[14,14],[[26,[21]]]],[[19,19],[[26,[21]]]],[[20,20],[[26,[21]]]],[[17,17],[[26,[21]]]],[[18,18],[[26,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Opcode"],[3,"Regs"],[4,"CpuError"],[4,"Op"],[4,"ArgType"],[3,"Instr"],[3,"Sample"],[4,"Ordering"],[15,"bool"],[3,"Error"],[4,"ParseError"],[15,"usize"],[4,"Option"]]},\
"aoc_2018_day_17":{"doc":"Advent of Code 2018: Day 17: Reservoir Research","t":[0,0,0,5,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,4,6,13,6,13,6,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clay_ranges","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Clay","ClayRange","Coord","DrySand","Grid","Horiz","Pos","Tile","Vert","Water","WetSand","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","hash","into","into","partial_cmp","partial_cmp","quick_into","quick_into","ranges","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","valid","x","y","x","x_end","x_start","y","y_end","y_start"],"q":["aoc_2018_day_17","","","","aoc_2018_day_17::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_17::logic","","aoc_2018_day_17::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_17::model::ClayRange","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,0,0,14,0,15,0,0,15,14,14,14,15,14,15,14,15,14,15,14,15,14,14,15,14,14,15,15,14,15,14,15,15,14,15,14,15,14,15,15,14,15,14,15,14,15,14,15,14,15,15,15,15,21,22,22,22,21,21],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],0,[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[14,14],[15,15],[[]],[[]],[[14,14],16],[[15,15],16],[[],14],[[14,14],17],[[15,15],17],[[14,5],6],[[14,5],6],[[15,5],6],[[15,5],6],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[15]]]],[15],[[]],[[]],[[14,14],[[18,[16]]]],[[15,15],[[18,[16]]]],[[]],[[]],[15],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[15,17],[15,[[20,[19]]]],[15,[[20,[19]]]],0,0,0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"],[4,"ClayRange"],[4,"Ordering"],[15,"bool"],[4,"Option"],[6,"Coord"],[3,"RangeInclusive"],[13,"Vert"],[13,"Horiz"]]},\
"aoc_2018_day_18":{"doc":"Advent of Code 2018: Day 18: Settlers of The North Pole","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,13,6,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Grid","Open","Pos","Tile","Tree","Yard","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","fmt","from","from_parser","hash","into","partial_cmp","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2018_day_18","","","","aoc_2018_day_18::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_18::logic","","aoc_2018_day_18::model","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,14,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[],14],[[14,14],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[17,[15]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2018_day_19":{"doc":"Advent of Code 2018: Day 19: Go With The Flow","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,13,13,4,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,13,4,4,13,13,13,6,13,13,13,18,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","ip","max_instrs","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Add","Addi","Addr","ArgType","Ban","Bani","Banr","Bor","Bori","Borr","CpuError","Eq","Eqir","Eqri","Eqrr","Gt","Gtir","Gtri","Gtrr","Halt","Ignore","Imm","Instr","Internal","Mul","Muli","Mulr","Op","Opcode","Overflow","Reg","Register","Regs","Set","Seti","Setr","VARIANTS","Val","apply","apply","arg_a","arg_b","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","data","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","hash","hash","hash","hash","idx","into","into","into","into","op","partial_cmp","partial_cmp","partial_cmp","partial_cmp","provide","quick_into","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["aoc_2018_day_19","","","","aoc_2018_day_19::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_19::logic","","aoc_2018_day_19::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,17,14,14,0,17,14,14,17,14,14,0,17,14,14,14,17,14,14,14,16,18,18,0,16,17,14,14,0,0,16,18,16,0,17,14,14,14,0,14,17,14,14,14,17,18,16,14,17,18,16,14,17,18,16,14,17,18,16,14,17,18,16,14,14,17,18,16,14,14,17,17,18,18,16,16,14,17,18,16,14,17,18,16,14,17,18,16,14,14,17,18,16,14,14,17,18,16,16,14,17,18,16,14,17,18,16,14,17,18,16,14,17,18,16,14,17,18,16,14,17,18,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[14,15],[[11,[15,16]]]],[[17,[11,[16]],[11,[16]]],[[11,[16]]]],[14,18],[14,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[17,17],[18,18],[16,16],[[]],[[]],[[]],[[]],[[14,14],19],[[17,17],19],[[18,18],19],[[16,16],19],[14],[[14,14],20],[[17,17],20],[[18,18],20],[[16,16],20],[[14,5],[[11,[21]]]],[[14,5],[[11,[21]]]],[[17,5],[[11,[21]]]],[[17,5],[[11,[21]]]],[[18,5],[[11,[21]]]],[[18,5],[[11,[21]]]],[[16,5],[[11,[21]]]],[[16,5],[[11,[21]]]],[[]],[[]],[[]],[[]],[7,[[11,[14,22]]]],[7,[[11,[17,22]]]],[7,[[11,[18,22]]]],[7,[[11,[16,22]]]],[14],[17],[18],[16],[14,23],[[]],[[]],[[]],[[]],[14,17],[[14,14],[[24,[19]]]],[[17,17],[[24,[19]]]],[[18,18],[[24,[19]]]],[[16,16],[[24,[19]]]],[25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[4,"Opcode"],[3,"Regs"],[4,"CpuError"],[4,"Op"],[4,"ArgType"],[4,"Ordering"],[15,"bool"],[3,"Error"],[4,"ParseError"],[15,"usize"],[4,"Option"],[3,"Demand"]]},\
"aoc_2018_day_20":{"doc":"Advent of Code 2018: Day 20: A Regular Map","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,13,6,6,13,13,13,6,13,13,13,13,13,13,13,13,13,13,6,4,4,3,4,3,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","dist_two","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","regex","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Branch","Coord","Dir","East","East","EastWest","Grid","None","North","North","NorthEast","NorthEastWest","NorthSouth","NorthSouthEast","NorthSouthEastWest","NorthSouthWest","NorthWest","Pos","Room","RouteDir","RouteRegex","RouteRegexItem","RouteRegexString","South","South","SouthEast","SouthEastWest","SouthWest","Span","West","West","bitor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","default","deref","deref","deref","doors","east","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_parser","from_parser","from_parser","from_parser","from_parser","hash","hash","hash","hash","hash","into","into","into","into","into","north","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","quick_into","quick_into","quick_into","quick_into","quick_into","rev","south","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","west"],"q":["aoc_2018_day_20","","","","aoc_2018_day_20::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_20::logic","","aoc_2018_day_20::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,18,0,0,14,15,14,0,14,14,15,14,14,14,14,14,14,14,0,0,0,0,0,0,14,15,14,14,14,18,14,15,14,14,15,16,17,18,14,15,16,17,18,14,15,16,17,18,14,15,16,17,18,14,15,16,17,18,14,15,16,17,14,14,14,15,16,17,18,14,14,15,15,16,16,17,17,18,18,14,15,16,17,18,14,15,16,17,18,14,15,16,17,18,14,15,16,17,18,14,14,15,16,17,18,14,15,16,17,18,15,14,14,15,16,17,18,14,15,16,17,18,14,15,16,17,18,14,15,16,17,18,14,15,16,17,18,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[14,15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[15,15],[16,16],[17,17],[18,18],[[]],[[]],[[]],[[]],[[]],[[14,14],19],[[15,15],19],[[16,16],19],[[17,17],19],[[18,18],19],[[],14],[15,20],[16,17],[17],[14,[[21,[20]]]],[14,22],[[14,14],22],[[15,15],22],[[16,16],22],[[17,17],22],[[18,18],22],[[14,5],6],[[14,5],6],[[15,5],6],[[15,5],6],[[16,5],6],[[16,5],6],[[17,5],6],[[17,5],6],[[18,5],6],[[18,5],6],[[]],[[]],[[]],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[15]]]],[7,[[8,[16]]]],[7,[[8,[17]]]],[7,[[8,[18]]]],[14],[15],[16],[17],[18],[[]],[[]],[[]],[[]],[[]],[14,22],[[14,14],[[23,[19]]]],[[15,15],[[23,[19]]]],[[16,16],[[23,[19]]]],[[17,17],[[23,[19]]]],[[18,18],[[23,[19]]]],[[]],[[]],[[]],[[]],[[]],[15,15],[14,22],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[14,22]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Room"],[4,"RouteDir"],[3,"RouteRegex"],[3,"RouteRegexString"],[4,"RouteRegexItem"],[4,"Ordering"],[6,"Dir"],[3,"TinyVec"],[15,"bool"],[4,"Option"]]},\
"aoc_2018_day_21":{"doc":"Advent of Code 2018: Day 21: Chronal Conversion","t":[0,0,0,0,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,13,13,4,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,13,4,4,13,13,13,6,13,13,13,18,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["analyser","input","logic","model","puzzle_metadata","Args","Block","SuperBlock","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","eq","fmt","fmt","from","from","from","hash","into","into","into","parse","partial_cmp","quick_into","quick_into","quick_into","run","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","ip","max_instrs","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Add","Addi","Addr","ArgType","Ban","Bani","Banr","Bor","Bori","Borr","CpuError","Eq","Eqir","Eqri","Eqrr","Gt","Gtir","Gtri","Gtrr","Halt","Ignore","Imm","Instr","Internal","Mul","Muli","Mulr","Op","Opcode","Overflow","Reg","Register","Regs","Set","Seti","Setr","VARIANTS","Val","apply","apply","arg_a","arg_b","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","data","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","hash","hash","hash","hash","idx","into","into","into","into","op","partial_cmp","partial_cmp","partial_cmp","partial_cmp","provide","quick_into","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["aoc_2018_day_21","","","","","aoc_2018_day_21::analyser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_21::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_21::logic","","aoc_2018_day_21::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,9,3,4,9,3,4,3,4,3,4,4,4,3,4,9,3,4,4,9,3,4,9,4,9,3,4,0,3,4,9,3,4,9,3,4,9,3,4,0,0,15,16,15,16,15,16,15,16,16,15,15,16,16,15,16,15,16,15,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,0,0,24,21,21,0,24,21,21,24,21,21,0,24,21,21,21,24,21,21,21,23,25,25,0,23,24,21,21,0,0,23,25,23,0,24,21,21,21,0,21,24,21,21,21,24,25,23,21,24,25,23,21,24,25,23,21,24,25,23,21,24,25,23,21,21,24,25,23,21,21,24,24,25,25,23,23,21,24,25,23,21,24,25,23,21,24,25,23,21,21,24,25,23,21,21,24,25,23,23,21,24,25,23,21,24,25,23,21,24,25,23,21,24,25,23,21,24,25,23,21,24,25,23],"f":[0,0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[4,4],5],[[4,4],6],[[3,7],8],[[4,7],8],[[]],[[]],[[]],[4],[[]],[[]],[[]],[[],[[11,[9,10]]]],[[4,4],[[12,[5]]]],[[]],[[]],[[]],[9,13],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],14],[[],14],[[],14],0,0,[[]],[[]],[[]],[[]],[15,15],[16,16],[[]],[[]],[[],16],[[15,7],8],[[15,7],8],[[16,7],8],[[16,7],8],[[]],[[]],[17,[[18,[15]]]],[17,[[18,[16]]]],0,[[]],[[]],0,0,0,[[],[[13,[16]]]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],11],[[],11],[[],11],[[],11],[[],14],[[],14],[15,[[13,[20]]]],[15,[[13,[20]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[21,22],[[11,[22,23]]]],[[24,[11,[23]],[11,[23]]],[[11,[23]]]],[21,25],[21,25],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,21],[24,24],[25,25],[23,23],[[]],[[]],[[]],[[]],[[21,21],5],[[24,24],5],[[25,25],5],[[23,23],5],[21],[[21,21],6],[[24,24],6],[[25,25],6],[[23,23],6],[[21,7],[[11,[26]]]],[[21,7],[[11,[26]]]],[[24,7],[[11,[26]]]],[[24,7],[[11,[26]]]],[[25,7],[[11,[26]]]],[[25,7],[[11,[26]]]],[[23,7],[[11,[26]]]],[[23,7],[[11,[26]]]],[[]],[[]],[[]],[[]],[17,[[11,[21,27]]]],[17,[[11,[24,27]]]],[17,[[11,[25,27]]]],[17,[[11,[23,27]]]],[21],[24],[25],[23],[21,28],[[]],[[]],[[]],[[]],[21,24],[[21,21],[[12,[5]]]],[[24,24],[[12,[5]]]],[[25,25],[[12,[5]]]],[[23,23],[[12,[5]]]],[29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],14],[[],14],[[],14],[[],14]],"p":[[8,"Puzzle"],[3,"Box"],[3,"SuperBlock"],[3,"Block"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Args"],[4,"ArgsParseError"],[4,"Result"],[4,"Option"],[6,"GenResult"],[3,"TypeId"],[3,"Input"],[3,"InputParams"],[3,"Parser"],[6,"ParseResult"],[3,"String"],[15,"u64"],[4,"Opcode"],[3,"Regs"],[4,"CpuError"],[4,"Op"],[4,"ArgType"],[3,"Error"],[4,"ParseError"],[15,"usize"],[3,"Demand"]]},\
"aoc_2018_day_22":{"doc":"Advent of Code 2018: Day 22: Mode Maze","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,5,5,13,6,4,6,13,13,6,4,13,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","depth","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","left_factor","max_mins","max_target","modulo","params","parse","quick_into","quick_into","target","to_owned","to_owned","to_string","to_string","top_factor","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Climbing","Coord","Equip","Grid","Narrow","Neither","Pos","Region","Rocky","Torch","Val","Wet","borrow","borrow","borrow_mut","borrow_mut","can_equip","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","fmt","fmt","fmt","from","from","from_parser","hash","hash","into","into","partial_cmp","partial_cmp","quick_into","quick_into","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2018_day_22","","","","aoc_2018_day_22::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_22::logic","","aoc_2018_day_22::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,4,4,4,4,3,4,3,4,3,3,4,3,4,4,3,4,3,4,3,4,0,0,15,0,0,0,14,15,0,0,14,15,0,14,14,15,14,15,14,14,15,14,15,14,15,14,15,14,14,15,14,15,14,14,15,14,15,14,15,14,15,14,15,14,14,15,14,15,14,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,0,0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],0,[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[14,15],16],[14,14],[15,15],[[]],[[]],[[14,14],17],[[15,15],17],[[14,14],16],[[15,15],16],[[14,5],6],[[14,5],6],[[15,5],6],[[]],[[]],[7,[[8,[14]]]],[14],[15],[[]],[[]],[[14,14],[[18,[17]]]],[[15,15],[[18,[17]]]],[[]],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Region"],[4,"Equip"],[15,"bool"],[4,"Ordering"],[4,"Option"]]},\
"aoc_2018_day_23":{"doc":"Advent of Code 2018: Day 23: Experimental Emergency …","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,3,3,18,18,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,12,11,11,11,12,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_iters","nanobots","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","CoordRange","Nanobot","OPEN","OPEN","Pos","Region","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","contains","dist","end","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from_bot","from_parser","hash","hash","hash","into","into","into","new","nnp","npn","overlap","overlap","partial_cmp","partial_cmp","partial_cmp","pnn","pos","ppp","quick_into","quick_into","quick_into","radius","reduce","signs","start","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","NNP","NPN","PNN","PPP"],"q":["aoc_2018_day_23","","","","aoc_2018_day_23::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_23::logic","","aoc_2018_day_23::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_23::model::signs","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,16,17,0,0,15,16,17,15,16,17,15,16,17,15,16,17,15,16,17,17,17,17,15,16,17,15,15,16,17,15,16,17,16,15,15,16,17,15,16,17,17,16,16,16,17,15,16,17,16,15,16,15,16,17,15,16,0,17,15,16,17,15,15,16,17,15,16,17,15,16,17,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[15,15],[16,16],[17,17],[[]],[[]],[[]],[[15,15],18],[[16,16],18],[[17,17],18],[[17,14],19],[17,14],0,[[15,15],19],[[16,16],19],[[17,17],19],[[15,5],6],[[15,5],6],[[16,5],6],[[17,5],6],[[]],[[]],[[]],[15,[[20,[16]]]],[7,[[8,[15]]]],[15],[16],[17],[[]],[[]],[[]],[[21,14,21],[[20,[17]]]],0,0,[[16,16],[[22,[16]]]],[[17,17],[[22,[17]]]],[[15,15],[[22,[18]]]],[[16,16],[[22,[18]]]],[[17,17],[[22,[18]]]],0,0,0,[[]],[[]],[[]],0,[16,[[20,[[22,[16]]]]]],0,0,[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[6,"Coord"],[3,"Nanobot"],[3,"Region"],[3,"CoordRange"],[4,"Ordering"],[15,"bool"],[6,"NumResult"],[6,"Pos"],[4,"Option"]]},\
"aoc_2018_day_24":{"doc":"Advent of Code 2018: Day 24: Immune System Simulator 20XX","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,4,13,13,13,3,13,13,18,6,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","immune_system","infection","into","into","max_boost","max_rounds","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","AttackType","Bludgeoning","Cold","Fire","Group","Radiation","Slashing","VARIANTS","Val","attack_damage","attack_type","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","effective_power","eq","eq","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","has_immunity","has_weakness","hash","hash","hit_points","immunities","initiative","into","into","num_units","partial_cmp","partial_cmp","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","weaknesses"],"q":["aoc_2018_day_24","","","","aoc_2018_day_24::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_24::logic","","aoc_2018_day_24::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,3,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,15,15,15,0,15,15,15,0,14,14,14,15,14,15,14,15,14,15,14,15,14,14,15,14,14,15,15,14,15,14,15,14,14,14,15,14,14,14,14,15,14,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,0,[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[14,14],[15,15],[[]],[[]],[[14,14],16],[[15,15],16],[14,[[17,[13]]]],[[14,14],18],[[15,15],18],[[14,5],6],[[14,5],6],[[15,5],6],[[15,5],6],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[15]]]],[[14,15],18],[[14,15],18],[14],[15],0,0,0,[[]],[[]],0,[[14,14],[[19,[16]]]],[[15,15],[[19,[16]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[3,"Group"],[4,"AttackType"],[4,"Ordering"],[6,"NumResult"],[15,"bool"],[4,"Option"]]},\
"aoc_2018_day_25":{"doc":"Advent of Code 2018: Day 25: Four-Dimensional Adventure","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","coords","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","Coord","Pos"],"q":["aoc_2018_day_25","","","","aoc_2018_day_25::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_25::logic","aoc_2018_day_25::model",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2019":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5],"n":["day_01","day_02","day_03","day_04","day_05","day_06","day_07","day_08","day_09","day_10","day_11","day_12","day_13","day_14","day_15","day_16","day_17","day_18","day_19","day_20","day_21","day_22","day_23","day_24","day_25","puzzle_metadata"],"q":["aoc_2019","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[3,[[2,[1]]]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Vec"]]},\
"aoc_2019_day_01":{"doc":"Advent of Code 2019: Day 1: The Tyranny of the Rocket …","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","module_masses","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2019_day_01","","","aoc_2019_day_01::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_01::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2019_day_02":{"doc":"Advent of Code 2019: Day 2: 1202 Program Alarm","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_ops","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Cpu","Mem","RunResult","Val"],"q":["aoc_2019_day_02","","","","aoc_2019_day_02::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_02::logic","","aoc_2019_day_02::model","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"]]},\
"aoc_2019_day_03":{"doc":"Advent of Code 2019: Day 3: Crossed Wires","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,6,6,3,6,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","wire_0","wire_1","part_one","part_two","Dir","Pos","Step","Val","borrow","borrow_mut","clone","clone_into","cmp","dir","eq","fmt","fmt","from","from_parser","hash","into","num","partial_cmp","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2019_day_03","","","","aoc_2019_day_03::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_03::logic","","aoc_2019_day_03::model","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,3,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,0,[[]],[[]],[15,15],[[]],[[15,15],16],0,[[15,15],17],[[15,5],6],[[15,5],6],[[]],[7,[[8,[15]]]],[15],[[]],0,[[15,15],[[18,[16]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[15,"u32"],[3,"Step"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2019_day_04":{"doc":"Advent of Code 2019: Day 4: Secure Container","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max","min","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2019_day_04","","","aoc_2019_day_04::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_04::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2019_day_05":{"doc":"Advent of Code 2019: Day 5: Sunny with a Chance of …","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Cpu","Mem","RunResult","Val"],"q":["aoc_2019_day_05","","","","aoc_2019_day_05::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_05::logic","","aoc_2019_day_05::model","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"]]},\
"aoc_2019_day_06":{"doc":"Advent of Code 2019: Day 6: Universal Orbit Map","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","orbits","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Orbit","base","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","fmt","from","from_parser","into","partial_cmp","quick_into","satl","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2019_day_06","","","","aoc_2019_day_06::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_06::logic","","aoc_2019_day_06::model","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[14,14],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],[[14,14],[[17,[15]]]],[[]],0,[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Orbit"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2019_day_07":{"doc":"Advent of Code 2019: Day 7: Amplification Circuit","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_ops_one","max_ops_two","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Cpu","Val"],"q":["aoc_2019_day_07","","","","aoc_2019_day_07::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_07::logic","","aoc_2019_day_07::model",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"]]},\
"aoc_2019_day_08":{"doc":"Advent of Code 2019: Day 8: Space Image Format","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","pixels","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Black","Pixel","Transparent","White","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","fmt","from","from_parser","hash","into","partial_cmp","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2019_day_08","","","","aoc_2019_day_08::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_08::logic","","aoc_2019_day_08::model","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[10]]]],0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[14,14],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[17,[15]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Pixel"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2019_day_09":{"doc":"Advent of Code 2019: Day 9: Sensor Boost","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Cpu","Val"],"q":["aoc_2019_day_09","","","","aoc_2019_day_09::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_09::logic","","aoc_2019_day_09::model",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"]]},\
"aoc_2019_day_10":{"doc":"Advent of Code 2019: Day 10: Monitoring Station","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,6,3,3,13,6,6,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Asteroid","Coord","Dir","DirVec","Empty","Grid","Pos","Space","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","dir","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from_parser","hash","hash","hash","into","into","into","mul","new","partial_cmp","partial_cmp","partial_cmp","pos","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["aoc_2019_day_10","","","","aoc_2019_day_10::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_10::logic","","aoc_2019_day_10::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,15,0,0,0,15,0,0,0,15,16,17,15,16,17,15,16,17,15,16,17,15,16,17,15,16,15,16,17,15,15,16,17,15,16,17,15,15,16,17,15,16,17,16,16,15,16,17,16,15,16,17,15,16,17,15,15,16,17,15,16,17,15,16,17],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[15,15],[16,16],[17,17],[[]],[[]],[[]],[[15,15],18],[[16,16],18],[[17,17],18],[[],15],0,[[15,15],19],[[16,16],19],[[17,17],19],[[15,5],6],[[15,5],6],[[16,5],6],[[17,5],6],[[]],[[]],[[]],[7,[[8,[15]]]],[15],[16],[17],[[]],[[]],[[]],0,[20,16],[[15,15],[[21,[18]]]],[[16,16],[[21,[18]]]],[[17,17],[[21,[18]]]],[16,20],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[6,"Coord"],[4,"Space"],[3,"DirVec"],[3,"Dir"],[4,"Ordering"],[15,"bool"],[6,"Pos"],[4,"Option"]]},\
"aoc_2019_day_11":{"doc":"Advent of Code 2019: Day 11: Space Police","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,4,6,6,6,6,13,6,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_step_ops","max_steps","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Black","Colour","Coord","Cpu","Dir","Grid","None","Pos","Val","White","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","fmt","from","from_parser","hash","into","partial_cmp","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2019_day_11","","","","aoc_2019_day_11::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_11::logic","","aoc_2019_day_11::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,0,0,0,0,0,14,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[10]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[],14],[[14,14],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[17,[15]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Colour"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2019_day_12":{"doc":"Advent of Code 2019: Day 12: The N-Body Problem","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","moons","num_steps_one","num_steps_two","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Axis","Coord","Energy","Moon","MoonAxis","Pos","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","eq","fmt","from","from","hash","into","into","kinetic_energy","new","partial_cmp","pos","pos","potential_energy","quick_into","quick_into","to_owned","total_energy","try_from","try_from","try_into","try_into","type_id","type_id","vel","vel"],"q":["aoc_2019_day_12","","","","aoc_2019_day_12::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_12::logic","","aoc_2019_day_12::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0,0,18,15,18,15,15,15,15,15,15,18,15,15,18,15,18,18,15,18,15,18,18,15,15,18,18,15,18,15,18,15,18,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[15,15],[[]],[[15,15],16],[[15,15],17],[[15,5],6],[[]],[[]],[15],[[]],[[]],[18,13],[19,18],[[15,15],[[20,[16]]]],0,0,[18,13],[[]],[[]],[[]],[18,13],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Energy"],[15,"u64"],[3,"MoonAxis"],[4,"Ordering"],[15,"bool"],[3,"Moon"],[6,"Pos"],[4,"Option"]]},\
"aoc_2019_day_13":{"doc":"Advent of Code 2019: Day 13: Care Package","t":[0,0,0,5,0,3,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,5,5,5,13,13,6,3,4,6,13,3,4,6,13,13,13,13,13,13,6,6,4,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,12,11,11,11,5,11,11,11,11],"n":["input","logic","model","puzzle_metadata","run","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core_max_steps","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","game_max_steps","into","into","params","parse","quick_into","quick_into","size_max_steps","step_max_ops","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","get_size","part_one","part_two","Ball","Block","Coord","Core","CoreNext","Cpu","Empty","Game","GameNext","Grid","Halt","Halt","Input","Input","Output","Paddle","Pos","RunResult","Tile","Val","Wall","ball_pos","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","default","eq","fmt","fmt","from","from","from","from","from","from_parser","grid","hash","input","input","into","into","into","into","into","new","new","next","next","paddle_pos","partial_cmp","quick_into","quick_into","quick_into","quick_into","quick_into","score","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","RunArgs","borrow","borrow_mut","clone","clone_into","fmt","from","input","into","parse","quick_into","run","to_owned","try_from","try_into","type_id"],"q":["aoc_2019_day_13","","","","","aoc_2019_day_13::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_13::logic","","","aoc_2019_day_13::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_13::run","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,4,3,3,4,4,3,4,3,4,4,3,4,3,4,3,4,4,4,3,4,3,4,3,4,3,4,3,4,0,0,0,17,17,0,0,0,0,17,0,0,0,23,24,23,24,23,17,0,0,0,0,17,16,21,23,16,24,17,21,23,16,24,17,17,17,17,17,17,17,17,21,23,16,24,17,17,16,17,21,16,21,23,16,24,17,21,16,21,16,16,17,21,23,16,24,17,16,17,17,21,23,16,24,17,21,23,16,24,17,21,23,16,24,17,0,26,26,26,26,26,26,26,26,26,26,0,26,26,26,26],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]],[3,[[9,[15]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17,17],[[]],[[17,17],18],[[],17],[[17,17],19],[[17,5],6],[[17,5],6],[[]],[[]],[[]],[[]],[[]],[7,[[8,[17]]]],[16,20],[17],[[21,22]],[[16,22]],[[]],[[]],[[]],[[]],[[]],[[3,19],21],[[3,19,13],[[9,[16]]]],[21,[[9,[23]]]],[16,[[9,[24]]]],[16,13],[[17,17],[[25,[18]]]],[[]],[[]],[[]],[[]],[[]],[16,22],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],0,[[]],[[]],[26,26],[[]],[[26,5],6],[[]],0,[[]],[[],[[11,[26,27]]]],[[]],[26,9],[[]],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Pos"],[15,"u32"],[15,"i32"],[3,"Game"],[4,"Tile"],[4,"Ordering"],[15,"bool"],[6,"Grid"],[3,"Core"],[6,"Val"],[4,"CoreNext"],[4,"GameNext"],[4,"Option"],[3,"RunArgs"],[4,"ArgsParseError"]]},\
"aoc_2019_day_14":{"doc":"Advent of Code 2019: Day 14: Space Stoichiometry","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,6,6,6,5,5,3,6,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","num_ore","params","parse","quick_into","quick_into","reactions","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Dependencies","Order","Reactions","part_one","part_two","ChemQty","Qty","Reaction","borrow","borrow","borrow_mut","borrow_mut","chem","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","hash","hash","inputs","into","into","output","partial_cmp","partial_cmp","qty","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2019_day_14","","","","aoc_2019_day_14::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_14::logic","","","","","aoc_2019_day_14::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0,0,14,15,14,15,15,14,15,14,15,14,15,14,15,14,14,15,15,14,15,14,15,14,15,14,14,15,14,14,15,15,14,15,14,15,14,15,14,15,14,15,14,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,0,[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,[[]],[[]],[[]],[[]],0,[14,14],[15,15],[[]],[[]],[[14,14],16],[[15,15],16],[[14,14],17],[[15,15],17],[[14,5],6],[[14,5],6],[[15,5],6],[[15,5],6],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[15]]]],[14],[15],0,[[]],[[]],0,[[14,14],[[18,[16]]]],[[15,15],[[18,[16]]]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Qty"],[3,"Reaction"],[3,"ChemQty"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2019_day_15":{"doc":"Advent of Code 2019: Day 15: Oxygen System","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,6,3,4,6,6,13,13,6,13,13,13,6,6,4,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Blocked","Coord","Core","CoreStep","Cpu","Dir","Empty","Found","Grid","Moved","Oxygen","OxygenSystem","Pos","RunResult","Tile","Unknown","Val","Wall","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","eq","fmt","fmt","from","from","from","from_parser","hash","into","into","into","new","partial_cmp","quick_into","quick_into","quick_into","step","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["aoc_2019_day_15","","","","aoc_2019_day_15::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_15::logic","","aoc_2019_day_15::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,20,0,0,0,0,0,14,20,0,20,14,14,0,0,0,14,0,14,20,14,15,20,14,15,14,15,14,15,14,14,14,14,14,20,14,15,14,14,20,14,15,15,14,20,14,15,15,14,15,14,20,14,15,20,14,15,20,14,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[15,15],[[]],[[]],[[14,14],16],[[],14],[[14,14],17],[[14,5],6],[[14,5],6],[[]],[[]],[[]],[7,[[8,[14]]]],[14],[[]],[[]],[[]],[3,15],[[14,14],[[18,[16]]]],[[]],[[]],[[]],[[15,19],[[11,[20,21]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"],[3,"Core"],[4,"Ordering"],[15,"bool"],[4,"Option"],[6,"Dir"],[4,"CoreStep"],[6,"RunResult"]]},\
"aoc_2019_day_16":{"doc":"Advent of Code 2019: Day 16: Flawed Frequency Transmission","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_signal","num_iters","num_reps","offset_digits","params","parse","quick_into","quick_into","result_digits","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2019_day_16","","","aoc_2019_day_16::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_16::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,4,4,4,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,0,0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[10]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2019_day_17":{"doc":"Advent of Code 2019: Day 17: Set and Forget","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,6,5,5,6,6,6,13,6,13,6,13,13,13,13,13,13,4,4,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Func","Funcs","Main","part_one","part_two","Coord","Cpu","Dir","Empty","Grid","Left","Pos","Right","RobotDown","RobotLeft","RobotRight","RobotUp","Scaffold","Step","Tile","Turn","Val","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","eq","eq","fmt","fmt","fmt","fmt","from","from","from_parser","hash","hash","into","into","partial_cmp","partial_cmp","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2019_day_17","","","","aoc_2019_day_17::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_17::logic","","","","","aoc_2019_day_17::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0,0,15,0,16,0,16,15,15,15,15,15,0,0,0,0,15,16,15,16,15,16,15,16,15,16,15,15,16,15,15,16,16,15,16,15,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16,15,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,0,[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[15,15],[16,16],[[]],[[]],[[15,15],17],[[16,16],17],[[],15],[[15,15],18],[[16,16],18],[[15,5],6],[[15,5],6],[[16,5],6],[[16,5],6],[[]],[[]],[7,[[8,[15]]]],[15],[16],[[]],[[]],[[15,15],[[19,[17]]]],[[16,16],[[19,[17]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[6,"Val"],[4,"Tile"],[4,"Step"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2019_day_18":{"doc":"Advent of Code 2019: Day 18: Many-Worlds Interpretation","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,13,6,13,13,6,13,13,6,4,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","max_iters","max_path_starts","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","DeadEnd","Dir","Door","Entrance","Grid","Key","Open","Pos","Tile","Turn","Wall","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","fmt","from","from_parser","hash","into","partial_cmp","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2019_day_18","","","","aoc_2019_day_18::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_18::logic","","aoc_2019_day_18::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,14,0,14,14,0,14,14,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[],14],[[14,14],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[17,[15]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2019_day_19":{"doc":"Advent of Code 2019: Day 19: Tractor Beam","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Cpu","Pos","Val"],"q":["aoc_2019_day_19","","","","aoc_2019_day_19::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_19::logic","","aoc_2019_day_19::model","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2019_day_20":{"doc":"Advent of Code 2019: Day 20: Donut Maze","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,18,6,6,13,6,13,13,3,6,4,13,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","AA","Coord","Dir","Empty","Grid","Letter","Passage","Portal","Pos","Tile","Wall","ZZ","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","eq","eq","fmt","fmt","fmt","from","from","from_parser","hash","hash","inner","into","into","label","new","partial_cmp","partial_cmp","partner","quick_into","quick_into","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2019_day_20","","","","aoc_2019_day_20::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_20::logic","","aoc_2019_day_20::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,15,0,0,14,0,14,14,0,0,0,14,15,14,15,14,15,14,15,14,15,14,15,14,14,15,14,14,15,14,15,14,14,15,15,14,15,15,15,14,15,15,14,15,14,15,14,14,15,14,15,14,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[14,14],[15,15],[[]],[[]],[[14,14],16],[[15,15],16],[[],14],[[14,14],17],[[15,15],17],[[14,5],6],[[14,5],6],[[15,5],6],[[]],[[]],[7,[[8,[14]]]],[14],[15],[15,17],[[]],[[]],[15],[17,15],[[14,14],[[18,[16]]]],[[15,15],[[18,[16]]]],[15,15],[[]],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"],[3,"Portal"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2019_day_21":{"doc":"Advent of Code 2019: Day 21: Springdroid Adventure","t":[0,0,0,0,5,13,4,18,13,13,3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,18,6,3,3,18,18,3,3,3,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["emul","input","logic","model","puzzle_metadata","And","Instr","J","Not","Or","Prog","Reg","T","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","char","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","eq","eq","eq","eval","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","hash","hash","hash","idx","into","into","into","into_iter","is_empty","len","new","partial_cmp","partial_cmp","partial_cmp","push","quick_into","quick_into","quick_into","test","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_ops","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","ALL","Cpu","Frag","FragIter","MASK","NONE","Regs","RegsIter","Rules","RulesSet","Sample","Val","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","default","default","deref","eq","eq","eq","eq","eq","first_hole","first_hole","first_hole","first_reg","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_slice","get","get","hash","hash","hash","hash","hash","holes","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","iter","iter","iter","iter","iter_all","last_hole","last_hole","last_hole","last_reg","len","len","len","matches","new","new","next","next","not_holes","num_conflicts","num_false","num_holes","num_jump_holes","num_jumps","num_regs","num_true","order","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","push","push","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_rule","with_rules"],"q":["aoc_2019_day_21","","","","","aoc_2019_day_21::emul","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_21::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_21::logic","","aoc_2019_day_21::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,5,0,3,5,5,0,0,3,5,6,3,5,6,3,3,5,6,3,5,6,3,5,6,3,6,5,6,3,6,5,5,6,6,3,3,5,6,3,5,6,3,3,5,6,3,6,6,6,6,5,6,3,6,5,6,3,6,5,6,3,5,6,3,5,6,3,3,3,5,6,3,5,6,3,0,0,19,20,19,20,19,20,19,20,19,20,19,19,20,20,19,20,19,20,19,20,20,19,20,19,20,19,20,19,20,19,20,19,20,19,20,0,0,27,0,0,0,27,27,0,0,0,0,0,0,25,34,32,26,27,28,25,29,34,32,26,27,28,25,29,26,27,28,25,29,26,27,28,25,29,26,27,28,25,29,28,25,29,26,27,28,25,29,26,27,28,26,26,27,27,28,29,29,34,32,26,27,28,25,29,29,27,26,27,26,27,28,25,29,27,34,32,26,27,28,25,29,34,32,27,28,25,25,28,25,29,26,27,28,25,26,26,27,28,26,28,25,29,26,28,25,34,32,27,28,28,26,28,28,26,28,28,26,27,28,25,29,28,25,34,32,26,27,28,25,29,26,27,28,25,29,27,29,34,32,26,27,27,28,25,29,34,32,26,27,28,25,29,34,32,26,27,28,25,29,28,28],"f":[0,0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,4],[5,5],[6,6],[3,3],[[]],[[]],[[]],[[5,5],7],[[6,6],7],[[3,3],7],[[],6],[[5,5],8],[[6,6],8],[[3,3],8],[6],[[5,9],10],[[5,9],10],[[6,9],10],[[6,9],10],[[3,9],10],[[3,9],10],[[]],[[]],[[]],[5],[6],[3],[3,11],[[]],[[]],[[]],[6,[[12,[5]]]],[6,8],[6,11],[[],6],[[5,5],[[13,[7]]]],[[6,6],[[13,[7]]]],[[3,3],[[13,[7]]]],[[6,5],13],[[]],[[]],[[]],[6,[[15,[[14,[11]]]]]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],15],[[],15],[4,[[15,[3,17]]]],[11,[[15,[3,17]]]],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],0,0,[[]],[[]],[[]],[[]],[19,19],[20,20],[[]],[[]],0,[[],20],[[19,9],10],[[19,9],10],[[20,9],10],[[20,9],10],[[]],[[]],[21,[[22,[19]]]],[21,[[22,[20]]]],[[]],[[]],0,0,[[],[[23,[20]]]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[19,[[23,[24]]]],[19,[[23,[24]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[25,25]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26,26],[27,27],[28,28],[25,25],[29,29],[[]],[[]],[[]],[[]],[[]],[[26,26],7],[[27,27],7],[[28,28],7],[[25,25],7],[[29,29],7],[[],28],[[],25],[29],[[26,26],8],[[27,27],8],[[28,28],8],[[25,25],8],[[29,29],8],[26,30],[27,30],[28,30],[26,30],[[26,9],10],[[27,9],10],[[27,9],10],[[28,9],10],[[29,9],10],[[29,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[8]]],29],[[]],[[],27],[[26,11],[[13,[8]]]],[[27,11],[[13,[8]]]],[26],[27],[28],[25],[29],[27,31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,32],[28,12],[25,[[12,[28]]]],[25,[[33,[28]]]],[28,8],[25,8],[29,8],[26,34],[27,32],[28,12],[25,[[12,[28]]]],[[],35],[26,30],[27,30],[28,30],[26,30],[28,11],[25,11],[29,11],[[26,27],8],[[],28],[[],25],[34,[[13,[[13,[8]]]]]],[32,[[13,[8]]]],[27,31],[28,30],[28,11],[26,30],[28,30],[28,30],[26,30],[28,11],[28,31],[[26,26],[[13,[7]]]],[[27,27],[[13,[7]]]],[[28,28],[[13,[7]]]],[[25,25],[[13,[7]]]],[[29,29],[[13,[7]]]],[[28,27,8],13],[[25,28]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],15],[[],15],[[],15],[31,[[15,[27,17]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[28,27,8],[[13,[28]]]],[[28,28],[[13,[28]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Reg"],[15,"char"],[4,"Instr"],[3,"Prog"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"usize"],[3,"Iter"],[4,"Option"],[3,"Vec"],[4,"Result"],[3,"String"],[3,"Overflow"],[3,"TypeId"],[3,"Input"],[3,"InputParams"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[6,"Val"],[3,"RulesSet"],[3,"Frag"],[3,"Regs"],[3,"Rules"],[3,"Sample"],[15,"u32"],[15,"u16"],[3,"RegsIter"],[3,"IntoIter"],[3,"FragIter"],[8,"Iterator"]]},\
"aoc_2019_day_22":{"doc":"Advent of Code 2019: Day 22: Slam Shuffle","t":[0,0,0,5,13,13,13,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Cut","DealIntoNewStack","DealWithIncrement","Input","InputParams","Shuffle","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deck_size_one","deck_size_two","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","init_one","init_two","into","into","into","params","parse","quick_into","quick_into","quick_into","repeat_two","shuffles","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","Operation","apply","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","quick_into","repeat","reverse","then","then_add","then_multiply","to_owned","try_from","try_into","type_id"],"q":["aoc_2019_day_22","","","","aoc_2019_day_22::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_22::logic","","aoc_2019_day_22::model","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,4,4,4,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,5,5,5,3,3,4,4,5,5,3,4,5,3,4,5,5,5,3,4,5,3,5,3,4,5,5,3,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],0,0,[[],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[8,[[9,[5]]]],0,0,[[]],[[]],[[]],0,[[],[[10,[5]]]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]],0,[[15,14],14],[[]],[[]],[15,15],[[]],[[15,6],7],[[]],[[]],[14,15],[[]],[[15,14],15],[15,[[16,[15]]]],[[15,15],15],[[15,14],15],[[15,14],15],[[]],[[],12],[[],12],[[],13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[4,"Shuffle"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[3,"Operation"],[4,"Option"]]},\
"aoc_2019_day_23":{"doc":"Advent of Code 2019: Day 23: Category Six","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_iters_one","max_iters_two","max_ops","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Cpu","RunResult","Val"],"q":["aoc_2019_day_23","","","","aoc_2019_day_23::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_23::logic","","aoc_2019_day_23::model","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"]]},\
"aoc_2019_day_24":{"doc":"Advent of Code 2019: Day 24: Planet of Discord","t":[0,0,5,13,13,3,6,6,3,6,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Bug","Empty","Input","InputCoord","InputGrid","InputParams","InputPos","InputTile","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","default","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","grid","hash","into","into","into","num_reps_two","params","parse","partial_cmp","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two"],"q":["aoc_2019_day_24","","","aoc_2019_day_24::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_24::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,4,4,0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,4,4,5,4,3,3,4,4,5,5,3,4,5,3,4,5,3,4,3,4,5,5,3,5,4,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[4,4],6],[[],4],[[],5],[[4,4],7],[[3,8],9],[[3,8],9],[[4,8],9],[[4,8],9],[[5,8],9],[[5,8],9],[[]],[[]],[[]],[10,[[11,[3]]]],[10,[[11,[4]]]],[10,[[11,[5]]]],0,[4],[[]],[[]],[[]],0,0,[[],[[12,[5]]]],[[4,4],[[13,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[3,[[12,[17]]]],[3,[[12,[17]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[4,"InputTile"],[3,"InputParams"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2019_day_25":{"doc":"Advent of Code 2019: Day 25: Cryostasis","t":[0,0,0,0,5,0,13,13,13,3,4,3,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,11,5,12,11,11,12,11,11,11,11,11,11,11,6,4,13,13,6,6,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,5,11,11,11],"n":["game","input","logic","model","puzzle_metadata","run","Dropped","EjectedHeavier","EjectedLighter","Game","GameOutput","GameOutputRoom","GameOutputVec","Prompt","Room","Solution","Taken","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","command","deref","descrip","doors","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","into","into","into","into","items","name","new","quick_into","quick_into","quick_into","quick_into","read_output","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Explorer","Room","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","descrip","doors","fmt","from","from","into","into","items","name","new","part_one","player","quick_into","quick_into","rooms","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Cpu","Door","East","North","RcStr","RunResult","South","Val","West","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","fmt","from","from_parser","into","partial_cmp","quick_into","rev","to_owned","to_string","try_from","try_into","type_id","RunArgs","borrow","borrow_mut","from","into","parse","quick_into","run","try_from","try_into","type_id"],"q":["aoc_2019_day_25","","","","","","aoc_2019_day_25::game","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_25::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_25::logic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_25::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_25::run","","","","","","","","","",""],"d":["","","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,4,4,4,0,0,0,0,4,4,4,4,6,3,4,5,6,3,4,5,3,4,5,3,4,5,6,3,5,5,3,4,5,6,3,4,5,3,4,5,6,3,4,5,5,5,6,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,0,0,17,18,17,18,17,18,17,18,17,18,17,17,18,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,0,0,21,20,21,20,20,20,20,20,20,21,20,21,20,21,20,21,0,21,21,20,21,20,21,20,21,20,21,20,0,0,22,22,0,0,22,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,26,26,26,26,26,26,0,26,26,26],"f":[0,0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[6,7]],[3],0,0,[[3,8],9],[[4,8],9],[[5,8],9],[[]],[[]],[[]],[[]],[10,[[11,[3]]]],[10,[[11,[4]]]],[10,[[11,[5]]]],[[]],[[]],[[]],[[]],0,0,[[[13,[12]]],6],[[]],[[]],[[]],[[]],[6,[[14,[3]]]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],0,0,[[]],[[]],[[]],[[]],[17,17],[18,18],[[]],[[]],0,[[],18],[[17,8],9],[[17,8],9],[[18,8],9],[[18,8],9],[[]],[[]],[10,[[11,[17]]]],[10,[[11,[18]]]],[[]],[[]],0,[[],[[14,[18]]]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,0,[[]],[[]],[[]],[[]],[20,20],[[]],0,0,[[20,8],9],[[]],[[]],[[]],[[]],0,0,[6,[[14,[21]]]],[17,[[14,[19]]]],0,[[]],[[]],0,[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,0,0,0,0,0,0,0,0,[[]],[[]],[22,22],[[]],[[22,22],23],[[22,22],24],[[22,8],9],[[22,8],9],[[]],[10,[[11,[22]]]],[[]],[[22,22],[[25,[23]]]],[[]],[22,22],[[]],[[],19],[[],15],[[],15],[[],16],0,[[]],[[]],[[]],[[]],[[],[[15,[26,27]]]],[[]],[26,14],[[],15],[[],15],[[],16]],"p":[[8,"Puzzle"],[3,"Box"],[3,"GameOutputVec"],[4,"GameOutput"],[3,"GameOutputRoom"],[3,"Game"],[15,"str"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"Val"],[3,"Vec"],[6,"GenResult"],[4,"Result"],[3,"TypeId"],[3,"Input"],[3,"InputParams"],[3,"String"],[3,"Room"],[3,"Explorer"],[4,"Door"],[4,"Ordering"],[15,"bool"],[4,"Option"],[3,"RunArgs"],[4,"ArgsParseError"]]},\
"aoc_2019_intcode":{"doc":"","t":[13,13,13,3,13,6,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Halt","Input","Instr","Machine","MaxOps","Mem","Memory","Output","Overflow","RunResult","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","eq","fmt","fmt","from","from","from","halt","hash","input","input_char","input_line","input_str","into","into","mem_get","mem_set","new","output","partial_cmp","provide","quick_into","quick_into","run","set_max_ops","set_mem_limit","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2019_intcode","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[4,4,4,0,4,0,4,4,4,0,3,4,3,4,3,4,3,4,4,4,4,4,3,4,4,4,4,3,3,3,3,3,4,3,3,3,4,4,4,3,4,3,3,3,3,4,4,3,4,3,4,3,4],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[4,[1]]],[[4,[1]]]],[[]],[[]],[[[4,[5]],4],6],[[[4,[7]],4],8],[[[4,[2]],9],10],[[[4,[11]],9],10],[[]],[12,[[4,[2]]]],[[]],[[[4,[2]]],[[13,[[4,[2]]]]]],[[[4,[14]]]],[[[3,[2]],2]],[[[3,[2]],15]],[[[3,[2]],16]],[[[3,[2]],16]],[[]],[[]],[[[3,[2]],2],[[17,[2]]]],[[[3,[2]],2,2],17],[[[18,[2]]],[[3,[2]]]],[[[4,[2]]],[[13,[[17,[2]],[4,[2]]]]]],[[[4,[19]],4],[[17,[6]]]],[20],[[]],[[]],[[[3,[2]]],[[4,[2]]]],[[[3,[2]],21]],[[[3,[2]],21]],[[]],[[]],[[],22],[[],13],[[],13],[[],13],[[],13],[[],23],[[],23]],"p":[[8,"Clone"],[8,"Int"],[3,"Machine"],[4,"RunResult"],[8,"Ord"],[4,"Ordering"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"Overflow"],[4,"Result"],[8,"Hash"],[15,"char"],[15,"str"],[4,"Option"],[6,"Mem"],[8,"PartialOrd"],[3,"Demand"],[15,"u32"],[3,"String"],[3,"TypeId"]]},\
"aoc_2020":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5],"n":["day_01","day_02","day_03","day_04","day_05","day_06","day_07","day_08","day_09","day_10","day_11","day_12","day_13","day_14","day_15","day_16","day_17","day_18","day_19","day_20","day_21","day_22","day_23","day_24","day_25","puzzle_metadata"],"q":["aoc_2020","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[3,[[2,[1]]]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Vec"]]},\
"aoc_2020_day_01":{"doc":"Advent of Code 2020: Day 1: Report Repair","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","entries","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2020_day_01","","","aoc_2020_day_01::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_01::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2020_day_02":{"doc":"Advent of Code 2020: Day 2: Password Philosophy","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,12,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","pass_policies","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","PassPolicy","borrow","borrow_mut","ch","clone","clone_into","fmt","fmt","from","from_parser","into","num_0","num_1","password","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2020_day_02","","","","aoc_2020_day_02::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_02::logic","","aoc_2020_day_02::model","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,[[]],[[]],0,[14,14],[[]],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],0,0,0,[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"PassPolicy"]]},\
"aoc_2020_day_03":{"doc":"Advent of Code 2020: Day 3: Toboggan Trajectory","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,13,6,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Grid","Open","Pos","Tile","Tree","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","fmt","from","from_parser","hash","into","partial_cmp","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2020_day_03","","","","aoc_2020_day_03::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_03::logic","","aoc_2020_day_03::model","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,15,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,0,0,0,[[]],[[]],[15,15],[[]],[[15,15],16],[[],15],[[15,15],17],[[15,5],6],[[15,5],6],[[]],[7,[[8,[15]]]],[15],[[]],[[15,15],[[18,[16]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[15,"u64"],[4,"Tile"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2020_day_04":{"doc":"Advent of Code 2020: Day 4: Passport Processing","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","passports","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Passport","borrow","borrow_mut","clone","clone_into","deref","deref_mut","fmt","fmt","from","from_parser","into","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2020_day_04","","","","aoc_2020_day_04::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_04::logic","","aoc_2020_day_04::model","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,[[]],[[]],[14,14],[[]],[14,15],[14,15],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Passport"],[3,"Vec"]]},\
"aoc_2020_day_05":{"doc":"Advent of Code 2020: Day 5: Binary Boarding","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,13,13,13,13,3,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","seats","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Back","Front","Left","Right","Seat","SeatCol","SeatRow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","col","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","hash","hash","hash","id","into","into","into","partial_cmp","partial_cmp","partial_cmp","quick_into","quick_into","quick_into","row","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["aoc_2020_day_05","","","","aoc_2020_day_05::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_05::logic","","aoc_2020_day_05::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,15,15,16,16,0,0,0,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16,14,14,15,16,14,14,15,15,16,16,14,15,16,14,15,16,14,15,16,14,14,15,16,14,15,16,14,15,16,14,14,15,16,14,15,16,14,15,16,14,15,16,14,15,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[15,15],[16,16],[[]],[[]],[[]],[[14,14],17],[[15,15],17],[[16,16],17],0,[[14,14],18],[[15,15],18],[[16,16],18],[[14,5],6],[[14,5],6],[[15,5],6],[[15,5],6],[[16,5],6],[[16,5],6],[[]],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[15]]]],[7,[[8,[16]]]],[14],[15],[16],[14,13],[[]],[[]],[[]],[[14,14],[[19,[17]]]],[[15,15],[[19,[17]]]],[[16,16],[[19,[17]]]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u16"],[3,"Seat"],[4,"SeatRow"],[4,"SeatCol"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2020_day_06":{"doc":"Advent of Code 2020: Day 6: Custom Customs","t":[0,0,5,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputGroup","InputParams","InputPerson","answers","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","groups","into","into","into","into","params","parse","people","quick_into","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","part_one","part_two"],"q":["aoc_2020_day_06","","","aoc_2020_day_06::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_06::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,5,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,6,4,5,4,5,3,3,4,4,5,5,6,6,3,4,5,6,3,4,5,6,3,3,4,5,6,3,6,4,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[],6],[4,7],[5,8],[4,7],[5,8],[[3,9],10],[[3,9],10],[[4,9],10],[[4,9],10],[[5,9],10],[[5,9],10],[[6,9],10],[[6,9],10],[[]],[[]],[[]],[[]],[11,[[12,[3]]]],[11,[[12,[4]]]],[11,[[12,[5]]]],[11,[[12,[6]]]],0,[[]],[[]],[[]],[[]],0,[[],[[13,[6]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[3,[[13,[17]]]],[3,[[13,[17]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputGroup"],[3,"InputPerson"],[3,"InputParams"],[3,"Vec"],[4,"InpStr"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2020_day_07":{"doc":"Advent of Code 2020: Day 7: Handy Haversacks","t":[0,0,5,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputBagContains","InputNumBags","InputParams","bags_contain","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","colour","colour","contains","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","into","into","into","into","max_iters_one","max_iters_two","num","params","parse","quick_into","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","part_one","part_two"],"q":["aoc_2020_day_07","","","aoc_2020_day_07::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_07::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,4,5,4,6,3,3,4,4,5,5,6,6,3,4,5,6,3,4,5,6,3,4,5,6,6,6,5,3,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],0,0,0,[[],6],[[3,7],8],[[3,7],8],[[4,7],8],[[4,7],8],[[5,7],8],[[5,7],8],[[6,7],8],[[6,7],8],[[]],[[]],[[]],[[]],[9,[[10,[3]]]],[9,[[10,[4]]]],[9,[[10,[5]]]],[9,[[10,[6]]]],[[]],[[]],[[]],[[]],0,0,0,0,[[],[[11,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[3,[[11,[15]]]],[3,[[11,[15]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputBagContains"],[3,"InputNumBags"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2020_day_08":{"doc":"Advent of Code 2020: Day 8: Handheld Halting","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,3,13,13,4,6,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Acc","Instr","Jmp","Nop","Op","Val","arg","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","hash","hash","into","into","op","partial_cmp","partial_cmp","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2020_day_08","","","","aoc_2020_day_08::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_08::logic","","aoc_2020_day_08::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,0,14,14,0,0,15,14,15,14,15,14,15,14,15,14,15,14,15,14,14,15,15,14,15,14,15,14,15,14,15,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[14,14],[15,15],[[]],[[]],[[14,14],16],[[15,15],16],[[14,14],17],[[15,15],17],[[14,5],6],[[14,5],6],[[15,5],6],[[15,5],6],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[15]]]],[14],[15],[[]],[[]],0,[[14,14],[[18,[16]]]],[[15,15],[[18,[16]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[4,"Op"],[3,"Instr"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2020_day_09":{"doc":"Advent of Code 2020: Day 9: Encoding Error","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2020_day_09","","","aoc_2020_day_09::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_09::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"]]},\
"aoc_2020_day_10":{"doc":"Advent of Code 2020: Day 10: Adapter Array","t":[0,0,5,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","adapters","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2020_day_10","","","aoc_2020_day_10::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_10::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u16"],[15,"u64"]]},\
"aoc_2020_day_11":{"doc":"Advent of Code 2020: Day 11: Seating System","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6,13,13,13,6,4,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_iters","params","parse","quick_into","quick_into","tiles","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Empty","Floor","Occupied","Pos","Tile","Tiles","TilesCursor","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","fmt","from","from_parser","hash","into","partial_cmp","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2020_day_11","","","","aoc_2020_day_11::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_11::logic","","aoc_2020_day_11::model","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[],14],[[14,14],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[17,[15]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2020_day_12":{"doc":"Advent of Code 2020: Day 12: Rain Risk","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6,6,13,13,13,13,6,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","steps","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Dir","East","Forwards","Left","North","Pos","Right","South","Step","West","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","fmt","from","from_parser","hash","into","partial_cmp","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2020_day_12","","","","aoc_2020_day_12::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_12::logic","","aoc_2020_day_12::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0,14,14,14,14,0,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[14,14],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[17,[15]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Step"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2020_day_13":{"doc":"Advent of Code 2020: Day 13: Shuttle Search","t":[0,0,5,3,3,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","bus_ids","clone","clone","clone_into","clone_into","default","earliest","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_iters","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2020_day_13","","","aoc_2020_day_13::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_13::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],0,[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[15,"u128"]]},\
"aoc_2020_day_14":{"doc":"Advent of Code 2020: Day 14: Docking Data","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Instr","Mask","Store","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","fmt","from","from_parser","hash","into","partial_cmp","quick_into","to_owned","to_string","try_from","try_into","type_id","addr","mask","val","val"],"q":["aoc_2020_day_14","","","","aoc_2020_day_14::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_14::logic","","aoc_2020_day_14::model","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_14::model::Instr","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,18,19,19,18],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[14,14],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[17,[15]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[4,"Instr"],[4,"Ordering"],[15,"bool"],[4,"Option"],[13,"Store"],[13,"Mask"]]},\
"aoc_2020_day_15":{"doc":"Advent of Code 2020: Day 15: Rambunctious Recitation","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","ord_one","ord_two","params","parse","quick_into","quick_into","start_nums","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2020_day_15","","","aoc_2020_day_15::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_15::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2020_day_16":{"doc":"Advent of Code 2020: Day 16: Ticket Translation","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fields","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","nearby_tickets","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","your_ticket","part_one","part_two","Field","Ticket","Val","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","contains","deref","deref_mut","eq","eq","fields","first","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","hash","hash","into","into","name","partial_cmp","partial_cmp","quick_into","quick_into","second","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2020_day_16","","","","aoc_2020_day_16::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_16::logic","","aoc_2020_day_16::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,0,0,0,0,0,15,16,15,16,15,16,15,16,15,16,15,16,16,15,16,16,15,15,15,16,16,15,16,15,16,15,16,15,16,15,15,16,15,16,15,15,16,15,16,15,16,15,16,15,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,[[]],[[]],[[]],[[]],[15,15],[16,16],[[]],[[]],[[15,15],17],[[16,16],17],[[15,13],18],[16,19],[16,19],[[15,15],18],[[16,16],18],0,0,[[15,5],6],[[15,5],6],[[16,5],6],[[16,5],6],[[]],[[]],[7,[[8,[15]]]],[7,[[8,[16]]]],[15],[16],[[]],[[]],0,[[15,15],[[20,[17]]]],[[16,16],[[20,[17]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[15,"u64"],[3,"Field"],[3,"Ticket"],[4,"Ordering"],[15,"bool"],[3,"Vec"],[4,"Option"]]},\
"aoc_2020_day_17":{"doc":"Advent of Code 2020: Day 17: Conway Cubes","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,18,6,8,6,13,6,6,6,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","iters_one","iters_two","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Active","BASE_DIRS","Coord","GenPos","Grid","Inactive","PosXY","PosXYZ","PosXYZW","Tile","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","fmt","from","from_parser","hash","into","partial_cmp","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2020_day_17","","","","aoc_2020_day_17::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_17::logic","","aoc_2020_day_17::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,18,0,0,0,14,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[],14],[[14,14],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[17,[15]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"],[4,"Ordering"],[15,"bool"],[4,"Option"],[8,"GenPos"]]},\
"aoc_2020_day_18":{"doc":"Advent of Code 2020: Day 18: Operation Order","t":[0,0,5,13,3,3,3,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,6,5,5],"n":["input","logic","puzzle_metadata","Add","Input","InputExpr","InputParams","InputToken","Mul","Number","ParenClose","ParenOpen","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","deref","deref_mut","eq","eq","exprs","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","hash","hash","into","into","into","into","params","parse","partial_cmp","partial_cmp","quick_into","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","tokens","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","TokensIter","part_one","part_two"],"q":["aoc_2020_day_18","","","aoc_2020_day_18::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_18::logic","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,5,0,0,0,0,5,5,5,5,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,4,5,6,4,4,4,5,3,3,3,4,4,5,5,6,6,3,4,5,6,3,4,5,6,4,5,3,4,5,6,3,6,4,5,3,4,5,6,3,4,5,6,3,4,5,6,4,3,4,5,6,3,4,5,6,3,4,5,6,0,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[4,4],7],[[5,5],7],[[],6],[4,8],[4,8],[[4,4],9],[[5,5],9],0,[[3,10],11],[[3,10],11],[[4,10],11],[[4,10],11],[[5,10],11],[[5,10],11],[[6,10],11],[[6,10],11],[[]],[[]],[[]],[[]],[12,[[13,[3]]]],[12,[[13,[4]]]],[12,[[13,[5]]]],[12,[[13,[6]]]],[4],[5],[[]],[[]],[[]],[[]],0,[[],[[14,[6]]]],[[4,4],[[15,[7]]]],[[5,5],[[15,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],0,[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],0,[3,[[14,[19]]]],[3,[[14,[19]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputExpr"],[4,"InputToken"],[3,"InputParams"],[4,"Ordering"],[3,"Vec"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"]]},\
"aoc_2020_day_19":{"doc":"Advent of Code 2020: Day 19: Monster Messages","t":[0,0,0,0,5,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,13,6,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","matcher","model","puzzle_metadata","Input","InputMessage","InputParams","InputRule","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","default","deref","deref_mut","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","hash","id","into","into","into","into","messages","params","parse","partial_cmp","quick_into","quick_into","quick_into","quick_into","rule","rules","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","match_message","part_one","part_two","Matcher","MatcherBuilder","MatcherInner","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","char","clone","clone","clone_into","clone_into","concat","default","empty","fmt","from","from","from","into","into","into","is_empty","is_empty","len","match_prefix","matches","new","none","push_char","push_empty","quick_into","quick_into","quick_into","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","Char","Rule","Rule","RuleId","RuleItem","RuleOption","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","deps","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","hash","hash","hash","into","into","into","items","options","partial_cmp","partial_cmp","partial_cmp","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","two","type_id","type_id","type_id"],"q":["aoc_2020_day_19","","","","","aoc_2020_day_19::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_19::logic","","","aoc_2020_day_19::matcher","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_19::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,5,6,5,5,5,3,3,4,4,5,5,6,6,3,4,5,6,3,4,5,6,5,4,3,4,5,6,3,3,6,5,3,4,5,6,4,3,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,0,0,0,0,0,0,22,19,24,22,19,24,22,19,24,19,24,19,22,22,19,22,19,24,22,19,24,22,19,22,19,19,22,22,19,19,22,19,24,19,24,22,19,24,22,19,24,22,19,24,19,29,0,29,0,0,0,27,28,29,27,28,29,27,28,29,27,28,29,27,28,29,27,27,28,29,27,27,28,28,29,29,27,28,29,27,28,29,27,28,29,27,28,29,28,27,27,28,29,27,28,29,27,28,29,27,28,29,27,28,29,27,28,29,27,27,28,29],"f":[0,0,0,0,[[],[[2,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[5,5],7],[[],6],[5,8],[5,8],[[5,5],9],[[3,10],11],[[3,10],11],[[4,10],11],[[4,10],11],[[5,10],11],[[5,10],11],[[6,10],11],[[6,10],11],[[]],[[]],[[]],[[]],[12,[[13,[3]]]],[12,[[13,[4]]]],[12,[[13,[5]]]],[12,[[13,[6]]]],[5],0,[[]],[[]],[[]],[[]],0,0,[[],[[14,[6]]]],[[5,5],[[15,[7]]]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[19,19,20],[[14,[9]]]],[3,[[14,[21]]]],[3,[[14,[21]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[22,23],[[14,[19]]]],[19,19],[24,24],[[]],[[]],[[19,19],[[14,[19]]]],[[],22],[22,[[14,[19]]]],[[19,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[22,9],[19,9],[22,25],[[19,20],26],[[19,20],9],[[],22],[22,19],[[19,23],[[14,[19]]]],[19,[[14,[19]]]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[19,19],[[14,[19]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[27,27],[28,28],[29,29],[[]],[[]],[[]],[[27,27],7],[[28,28],7],[[29,29],7],[27,26],[[27,27],9],[[28,28],9],[[29,29],9],[[27,10],11],[[27,10],11],[[28,10],11],[[28,10],11],[[29,10],11],[[29,10],11],[[]],[[]],[[]],[12,[[13,[27]]]],[12,[[13,[28]]]],[12,[[13,[29]]]],[27],[28],[29],[[]],[[]],[[]],0,0,[[27,27],[[15,[7]]]],[[28,28],[[15,[7]]]],[[29,29],[[15,[7]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[30,30],27],[[],18],[[],18],[[],18]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputRule"],[3,"InputMessage"],[3,"InputParams"],[4,"Ordering"],[4,"InpStr"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Matcher"],[15,"str"],[15,"u32"],[3,"MatcherBuilder"],[15,"char"],[3,"MatcherInner"],[15,"usize"],[8,"Iterator"],[3,"Rule"],[3,"RuleOption"],[4,"RuleItem"],[6,"RuleId"]]},\
"aoc_2020_day_20":{"doc":"Advent of Code 2020: Day 20: Jurassic Jigsaw","t":[0,0,0,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,6,6,6,4,6,6,3,6,6,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","InputTile","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","grid","id","into","into","into","params","parse","quick_into","quick_into","quick_into","tiles","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","Black","Coord","Dir","Grid","Pixel","Pos","Tag","Tile","TileId","Tiles","Turn","White","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","eq","eq","flip","fmt","fmt","fmt","from","from","from_parser","grid","hash","hash","id","into","into","new","partial_cmp","quick_into","quick_into","rotate_around","rotate_left","rotate_right","tags","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2020_day_20","","","","aoc_2020_day_20::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_20::logic","","aoc_2020_day_20::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,5,3,3,4,4,5,5,3,4,5,3,4,5,4,4,3,4,5,3,5,3,4,5,3,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,16,0,0,0,0,0,0,0,0,0,0,16,16,17,16,17,16,17,16,17,16,16,16,17,17,16,16,17,16,17,16,17,16,17,17,16,17,17,16,16,17,17,17,17,17,16,17,16,16,17,16,17,16,17],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[8,[[9,[5]]]],0,0,[[]],[[]],[[]],0,[[],[[10,[5]]]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[15]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[16,16],[17,17],[[]],[[]],[[16,16],18],[[],16],[[16,16],19],[[17,17],19],[17,10],[[16,6],7],[[16,6],7],[[17,6],7],[[]],[[]],[8,[[9,[16]]]],0,[16],[17],0,[[]],[[]],[[20,21],17],[[16,16],[[22,[18]]]],[[]],[[]],[17,10],[17,10],[17,10],0,[[]],[[]],[[],11],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputTile"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[15,"u32"],[4,"Pixel"],[3,"Tile"],[4,"Ordering"],[15,"bool"],[6,"TileId"],[6,"Grid"],[4,"Option"]]},\
"aoc_2020_day_21":{"doc":"Advent of Code 2020: Day 21: Allergen Assessment","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","foods","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Food","alrgns","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","from_parser","ingrs","into","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2020_day_21","","","","aoc_2020_day_21::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_21::logic","","aoc_2020_day_21::model","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],0,[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[10]]]],0,0,[[]],[[]],[14,14],[[]],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],0,[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Food"]]},\
"aoc_2020_day_22":{"doc":"Advent of Code 2020: Day 22: Crab Combat","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,3,3,13,3,13,4,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_games","max_rounds","params","parse","player_1","player_2","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Card","Deck","DecksState","Game","One","Pool","Two","Winner","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","card_1","card_2","clone","clone","clone_into","clone_into","cmp","deck_1","deck_2","decks_state","draw_cards","eq","fmt","free","from","from","from","from","hash","into","into","into","into","new","new","new","new_input","partial_cmp","quick_into","quick_into","quick_into","quick_into","replace_cards","seen","start_state","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["aoc_2020_day_22","","","","aoc_2020_day_22::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_22::logic","","aoc_2020_day_22::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,4,4,3,4,3,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,14,0,14,0,19,17,14,15,19,17,14,15,17,17,14,15,14,15,15,17,17,17,17,15,14,17,19,17,14,15,15,19,17,14,15,19,17,15,17,15,19,17,14,15,17,17,17,14,15,19,17,14,15,19,17,14,15,19,17,14,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],0,0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[14,14],[15,15],[[]],[[]],[[15,15],16],0,0,[17,15],[17,[[11,[14]]]],[[15,15],18],[[14,5],6],[[17,19]],[[]],[[]],[[]],[[]],[15],[[]],[[]],[[]],[[]],[[],19],[[19,20,20],17],[[21,21],15],[3,17],[[15,15],[[22,[16]]]],[[]],[[]],[[]],[[]],[[17,14]],0,0,[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Winner"],[3,"DecksState"],[4,"Ordering"],[3,"Game"],[15,"bool"],[3,"Pool"],[8,"Iterator"],[6,"Deck"],[4,"Option"]]},\
"aoc_2020_day_23":{"doc":"Advent of Code 2020: Day 23: Crab Cups","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deck_size_two","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","iters_one","iters_two","params","parse","quick_into","quick_into","start","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Card","Deck","borrow","borrow_mut","contains","default","extend","fmt","from","from_iter","into","move_after","new","pick","place","place_after","quick_into","try_from","try_into","type_id"],"q":["aoc_2020_day_23","","","","aoc_2020_day_23::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_23::logic","","aoc_2020_day_23::model","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,4,3,3,4,4,3,4,3,4,3,4,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[13]]]],0,0,[[]],[[]],[[14,15],16],[[],14],[[14,17]],[[14,5],6],[[]],[[],14],[[]],[[14,15]],[[],14],[14,15],[[14,15]],[[14,15]],[[]],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[3,"Deck"],[6,"Card"],[15,"bool"],[8,"IntoIterator"]]},\
"aoc_2020_day_24":{"doc":"Advent of Code 2020: Day 24: Lobby Layout","t":[0,0,0,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,13,6,6,13,6,13,13,6,13,13,4,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","InputTile","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","num_iters","params","parse","quick_into","quick_into","quick_into","steps","tiles","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","part_two_bits","Black","Coord","Dir","East","Grid","NorthEast","NorthWest","Pos","SouthEast","SouthWest","Step","Tile","West","White","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","decode","default","encode","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","hash","hash","into","into","partial_cmp","partial_cmp","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2020_day_24","","","","aoc_2020_day_24::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_24::logic","","","aoc_2020_day_24::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,5,4,4,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,5,3,5,3,4,5,4,3,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,17,0,0,16,0,16,16,0,16,16,0,0,16,17,16,17,16,17,16,17,16,17,16,17,17,17,17,16,17,16,16,17,17,21,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17,16,17],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[4,6],[4,6],[[3,7],8],[[3,7],8],[[4,7],8],[[4,7],8],[[5,7],8],[[5,7],8],[[]],[[]],[[]],[9,[[10,[3]]]],[9,[[10,[4]]]],[9,[[10,[5]]]],[[]],[[]],[[]],0,0,[[],[[11,[5]]]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[3,[[11,[15]]]],[3,[[11,[15]]]],[3,[[11,[15]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[16,16],[17,17],[[]],[[]],[[16,16],18],[[17,17],18],[19,17],[[],17],[17,19],[[16,16],20],[[17,17],20],[[16,7],8],[[16,7],8],[[17,7],8],[[17,7],8],[16,21],[[]],[[]],[9,[[10,[16]]]],[9,[[10,[17]]]],[16],[17],[[]],[[]],[[16,16],[[22,[18]]]],[[17,17],[[22,[18]]]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputTile"],[3,"InputParams"],[3,"Vec"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Step"],[4,"Tile"],[4,"Ordering"],[15,"usize"],[15,"bool"],[6,"Pos"],[4,"Option"]]},\
"aoc_2020_day_25":{"doc":"Advent of Code 2020: Day 25: Combo Breaker","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_loops","params","parse","pub_key_0","pub_key_1","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one"],"q":["aoc_2020_day_25","","","aoc_2020_day_25::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_25::logic"],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,4,3,4,3,3,3,4,3,4,3,4,3,4,3,4,3,4,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],0,0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2021":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5],"n":["day_01","day_02","day_03","day_04","day_05","day_06","day_07","day_08","day_09","day_10","day_11","day_12","day_13","day_14","day_15","day_16","day_17","day_18","day_19","day_20","day_21","day_22","day_23","day_24","day_25","puzzle_metadata"],"q":["aoc_2021","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[3,[[2,[1]]]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Vec"]]},\
"aoc_2021_day_01":{"doc":"Advent of Code 2021: Day 1: Sonar Sweep","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","report","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2021_day_01","","","aoc_2021_day_01::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_01::logic",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2021_day_02":{"doc":"Advent of Code 2021: Day 2: Dive!","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,4,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","commands","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Command","Down","Forward","Up","Val","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","from_parser","into","quick_into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2021_day_02","","","","aoc_2021_day_02::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_02::logic","","aoc_2021_day_02::model","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i32"],[4,"Command"]]},\
"aoc_2021_day_03":{"doc":"Advent of Code 2021: Day 3: Binary Diagnostic","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","readings","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2021_day_03","","","aoc_2021_day_03::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_03::logic",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2021_day_04":{"doc":"Advent of Code 2021: Day 4: Giant Squid","t":[0,0,0,5,3,3,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","boards","borrow","borrow","borrow_mut","borrow_mut","call_order","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Board","Coord","Dir","Grid","Pos"],"q":["aoc_2021_day_04","","","","aoc_2021_day_04::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_04::logic","","aoc_2021_day_04::model","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,3,4,3,4,3,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],0,[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2021_day_05":{"doc":"Advent of Code 2021: Day 5: Hydrothermal Venture","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,6,6,6,6,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vents","part_one","part_two","Coord","Grid","Pos","Val","Vent","borrow","borrow_mut","clone","clone_into","end","eq","fmt","fmt","from","from_parser","hash","into","is_diagonal","is_point","is_straight","is_valid","quick_into","start","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2021_day_05","","","","aoc_2021_day_05::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_05::logic","","aoc_2021_day_05::model","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,0,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,[[]],[[]],[14,14],[[]],0,[[14,14],15],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[14,15],[14,15],[14,15],[14,15],[[]],0,[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Vent"],[15,"bool"]]},\
"aoc_2021_day_06":{"doc":"Advent of Code 2021: Day 6: Lanternfish","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fish","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","calc_result","part_one","part_two"],"q":["aoc_2021_day_06","","","aoc_2021_day_06::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_06::logic","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[3,13],[[9,[14]]]],[3,[[9,[14]]]],[3,[[9,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[15,"u64"]]},\
"aoc_2021_day_07":{"doc":"Advent of Code 2021: Day 7: The Treachery of Whales","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","crabs","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2021_day_07","","","aoc_2021_day_07::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_07::logic",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"]]},\
"aoc_2021_day_08":{"doc":"Advent of Code 2021: Day 8: Seven Segment Search","t":[0,0,14,0,5,14,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12],"n":["input","logic","make_solver","model","puzzle_metadata","solver_constrain","Input","InputDisplay","InputParams","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","displays","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","params","parse","quick_into","quick_into","quick_into","samples","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","use_solver","value","part_one","part_two","Digit","Display","borrow","borrow","borrow_mut","borrow_mut","build_vec","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","from_str","into","into","num_segments","off","on","quick_into","quick_into","samples","segments","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value"],"q":["aoc_2021_day_08","","","","","","aoc_2021_day_08::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_08::logic","","aoc_2021_day_08::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,5,3,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,3,5,3,4,5,4,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,5,4,0,0,0,0,15,17,15,17,15,15,17,15,17,17,15,17,15,17,17,15,17,17,17,17,15,17,15,17,15,17,15,17,15,17,15,17,15],"f":[0,0,0,0,[[],[[2,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],0,[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[8,[[9,[5]]]],[[]],[[]],[[]],0,[[],[[10,[5]]]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],0,0,[3,[[10,[14]]]],[3,[[10,[14]]]],0,0,[[]],[[]],[[]],[[]],[[],[[10,[[16,[15]]]]]],[15,15],[17,17],[[]],[[]],[[],17],[[15,6],7],[[17,6],7],[[]],[[]],[18,[[12,[17]]]],[[]],[[]],[17,14],[17,19],[17,19],[[]],[[]],0,0,[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputDisplay"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Display"],[3,"Vec"],[3,"Digit"],[15,"str"],[15,"u8"]]},\
"aoc_2021_day_09":{"doc":"Advent of Code 2021: Day 9: Smoke Basin","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Grid","Pos"],"q":["aoc_2021_day_09","","","","aoc_2021_day_09::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_09::logic","","aoc_2021_day_09::model","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2021_day_10":{"doc":"Advent of Code 2021: Day 10: Syntax Scoring","t":[0,0,0,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,5,5,13,13,13,13,13,13,13,4,4,13,13,13,13,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputLine","InputParams","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","lines","params","parse","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_string","to_string","to_string","tokens","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","Angle","AngleClose","AngleOpen","Close","Curly","CurlyClose","CurlyOpen","Delim","Mode","Open","Round","RoundClose","RoundOpen","Square","SquareClose","SquareOpen","Token","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","delim","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from_parser","hash","into","into","into","mismatched_points","mode","not_closed_points","partial_cmp","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["aoc_2021_day_10","","","","aoc_2021_day_10::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_10::logic","","aoc_2021_day_10::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,5,4,4,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,3,3,5,3,4,5,3,4,5,3,4,5,4,3,4,5,3,4,5,3,4,5,0,0,17,16,16,18,17,16,16,0,0,18,17,16,16,17,16,16,0,16,17,18,16,17,18,16,17,18,16,17,18,16,16,16,17,18,16,16,17,18,16,17,18,16,16,16,17,18,17,16,17,16,16,17,18,16,17,18,16,16,17,18,16,17,18,16,17,18],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[4,6],[4,6],[[3,7],8],[[3,7],8],[[4,7],8],[[4,7],8],[[5,7],8],[[5,7],8],[[]],[[]],[[]],[9,[[10,[3]]]],[9,[[10,[4]]]],[9,[[10,[5]]]],[[]],[[]],[[]],0,0,[[],[[11,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[3,[[11,[15]]]],[3,[[11,[15]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[16,16],[17,17],[18,18],[[]],[[]],[[]],[[16,16],19],[16,17],[[16,16],20],[[17,17],20],[[18,18],20],[[16,7],8],[[16,7],8],[[17,7],8],[[18,7],8],[[]],[[]],[[]],[9,[[10,[16]]]],[16],[[]],[[]],[[]],[17,15],[16,18],[17,15],[[16,16],[[21,[19]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputLine"],[3,"InputParams"],[3,"Vec"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[4,"Token"],[4,"Delim"],[4,"Mode"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2021_day_11":{"doc":"Advent of Code 2021: Day 11: Dumbo Octopus","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Grid","Pos","Val"],"q":["aoc_2021_day_11","","","","aoc_2021_day_11::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_11::logic","","aoc_2021_day_11::model","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2021_day_12":{"doc":"Advent of Code 2021: Day 12: Passage Pathing","t":[0,0,0,5,3,3,3,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,6,3,11,11,11,11,11,12,12,11,11,11,12,11,11,11,12,11,11,12,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputConnection","InputParams","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cave_0","cave_1","clone","clone","clone","clone_into","clone_into","clone_into","cnxns","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","params","parse","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","Cave","CaveId","Caves","borrow","borrow","borrow_mut","borrow_mut","build","caves","cnxns","end","from","from","id","index","into","into","name","quick_into","quick_into","small","start","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2021_day_12","","","","aoc_2021_day_12::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_12::logic","","aoc_2021_day_12::model","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,5,3,4,5,4,4,3,4,5,3,4,5,3,5,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,3,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,0,0,15,16,15,16,15,15,16,15,15,16,16,15,15,16,16,15,16,16,15,15,16,15,16,15,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[3,3],[4,4],[5,5],[[]],[[]],[[]],0,[[],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[8,[[9,[5]]]],[[]],[[]],[[]],0,[[],[[10,[5]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]],0,0,0,[[]],[[]],[[]],[[]],[3,[[10,[15]]]],0,0,[15,16],[[]],[[]],0,[[15,17],16],[[]],[[]],0,[[]],[[]],0,[15,16],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputConnection"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[3,"Caves"],[3,"Cave"],[6,"CaveId"]]},\
"aoc_2021_day_13":{"doc":"Advent of Code 2021: Day 13: Transparent Origami","t":[0,0,0,5,0,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,6,6,3,6,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,5,11,11,11],"n":["input","logic","model","puzzle_metadata","tool","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","dots","fmt","fmt","fmt","fmt","folds","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","fold_multi","fold_once","part_one","part_two","Axis","Coord","Fold","Pos","axis","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","from_parser","into","quick_into","to_owned","to_string","try_from","try_into","type_id","val","RunArgs","borrow","borrow_mut","from","into","parse","quick_into","run","try_from","try_into","type_id"],"q":["aoc_2021_day_13","","","","","aoc_2021_day_13::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_13::logic","","","","aoc_2021_day_13::model","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_13::tool","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,18,18,18,18,18,18,0,18,18,18],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],0,[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[13,[[15,[14]]]],[[16,13],[[15,[14]]]],[3,[[9,[17]]]],[3,[[9,[10]]]],0,0,0,0,0,[[]],[[]],[16,16],[[]],[[16,5],6],[[16,5],6],[[]],[7,[[8,[16]]]],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],12],0,0,[[]],[[]],[[]],[[]],[[],[[11,[18,19]]]],[[]],[18,9],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"IntoIterator"],[6,"Pos"],[3,"AHashSet"],[3,"Fold"],[15,"u32"],[3,"RunArgs"],[4,"ArgsParseError"]]},\
"aoc_2021_day_14":{"doc":"Advent of Code 2021: Day 14: Extended Polymerization","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,5,5,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","rules","template","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","calc_result","get_rules","part_one","part_two"],"q":["aoc_2021_day_14","","","aoc_2021_day_14::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_14::logic","","",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[3,13],[[9,[14]]]],[3,[[9,[[16,[15]]]]]],[3,[[9,[14]]]],[3,[[9,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[15,"u64"],[15,"char"],[3,"AHashMap"]]},\
"aoc_2021_day_15":{"doc":"Advent of Code 2021: Day 15: Chiton","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","risks","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Cursor","Grid","Offset","Pos","Risks","Val"],"q":["aoc_2021_day_15","","","","aoc_2021_day_15::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_15::logic","","aoc_2021_day_15::model","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u16"]]},\
"aoc_2021_day_16":{"doc":"Advent of Code 2021: Day 15: Packet Decoder","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","BitIter","Packet","borrow","borrow","borrow_mut","borrow_mut","children","decode","fmt","from","from","has_next","into","into","new","next_bit","next_uint","packet_type","position","quick_into","quick_into","try_from","try_from","try_into","try_into","type_id","type_id","value","version","version_sum"],"q":["aoc_2021_day_16","","","","aoc_2021_day_16::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_16::logic","","aoc_2021_day_16::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,14,15,14,15,15,15,15,14,15,14,14,15,14,14,14,15,14,14,15,14,15,14,15,14,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,[[]],[[]],[[]],[[]],0,[14,[[16,[15]]]],[[15,5],6],[[]],[[]],[14,17],[[]],[[]],[[],14],[14,[[16,[17]]]],[[14,18],[[16,[13]]]],0,[14,19],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,[15,13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[3,"BitIter"],[3,"Packet"],[4,"Option"],[15,"bool"],[15,"u8"],[15,"usize"]]},\
"aoc_2021_day_17":{"doc":"Advent of Code 2021: Day 17: Trick Shot","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,5,5,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","target_x_end","target_x_start","target_y_end","target_y_start","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Pos"],"q":["aoc_2021_day_17","","","","aoc_2021_day_17::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_17::logic","","aoc_2021_day_17::model",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,3,3,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],0,0,0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Coord"],[15,"u32"]]},\
"aoc_2021_day_18":{"doc":"Advent of Code 2021: Day 18: Snailfish","t":[0,0,0,5,13,13,3,3,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,3,13,4,13,13,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Close","Comma","Input","InputParams","Open","Token","Tokens","Value","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","into","into","into","into","nums","params","parse","quick_into","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","tokens","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","part_one","part_two","Mismatch","Number","Number","ParseError","Token","UnexpectedClose","UnexpectedComma","UnexpectedEnd","UnexpectedOpen","UnexpectedValue","Val","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","fmt","from","from","from_str","into","into","magnitude","pair","provide","quick_into","quick_into","reduce","sum","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2021_day_18","","","","aoc_2021_day_18::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_18::logic","","aoc_2021_day_18::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,5,5,0,0,5,0,0,5,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,6,5,3,3,4,4,5,5,6,6,3,4,5,6,3,4,5,6,3,4,5,6,3,3,6,3,4,5,6,3,4,5,6,3,4,5,6,4,3,4,5,6,3,4,5,6,3,4,5,6,0,0,18,0,18,0,18,18,18,18,18,18,0,17,18,17,18,17,18,17,18,17,17,18,18,17,17,18,17,17,18,17,17,17,18,18,17,17,17,18,17,18,17,18,17,17,18,17,18,17],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[],6],[[5,5],7],[[3,8],9],[[3,8],9],[[4,8],9],[[4,8],9],[[5,8],9],[[5,8],9],[[6,8],9],[[6,8],9],[[]],[[]],[[]],[[]],[10,[[11,[3]]]],[10,[[11,[4]]]],[10,[[11,[5]]]],[10,[[11,[6]]]],[[]],[[]],[[]],[[]],0,0,[[],[[12,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[3,[[12,[16]]]],[3,[[12,[16]]]],0,0,0,0,0,0,0,0,0,0,0,[[17,17],17],[[]],[[]],[[]],[[]],[18,18],[17,17],[[]],[[]],[[17,17],7],[[18,8],9],[[18,8],9],[[17,8],9],[[17,8],9],[[]],[[]],[19,[[14,[17,18]]]],[[]],[[]],[17,16],[[17,17],17],[20],[[]],[[]],[17,17],[[],[[21,[17]]]],[[]],[[]],[[],13],[[],13],[[],14],[4,[[14,[17,18]]]],[[],14],[[],14],[[],14],[[],15],[[],15]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"Tokens"],[4,"Token"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[3,"Number"],[4,"ParseError"],[15,"str"],[3,"Demand"],[4,"Option"]]},\
"aoc_2021_day_19":{"doc":"Advent of Code 2021: Day 19: Beacon Scanner","t":[0,0,0,5,0,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,17,6,6,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","rotation","Input","InputParams","InputScanner","beacons","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","id","into","into","into","params","parse","quick_into","quick_into","quick_into","scanners","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","Coord","Pos","SCANNER_HASH_TOTAL_U64S","ScannerHash","ScannerHasher","ALL","Around","Clockwise","ClockwiseAround","ClockwiseDown","ClockwiseLeft","ClockwiseRight","ClockwiseUp","CounterClockwise","CounterClockwiseAround","CounterClockwiseDown","CounterClockwiseLeft","CounterClockwiseRight","CounterClockwiseUp","Down","Left","None","Right","Rotation","Up","UpsideDown","UpsideDownAround","UpsideDownDown","UpsideDownLeft","UpsideDownRight","UpsideDownUp","apply","around","borrow","borrow_mut","clockwise","clone","clone_into","combine","counter_clockwise","down","eq","flip","fmt","from","hash","idx","into","left","quick_into","rev","right","to_owned","try_from","try_into","type_id","up","upside_down"],"q":["aoc_2021_day_19","","","","","aoc_2021_day_19::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_19::logic","","aoc_2021_day_19::model","","","","","aoc_2021_day_19::rotation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,4,3,4,5,3,4,5,3,4,5,3,4,5,5,3,3,4,4,5,5,3,4,5,3,4,5,4,3,4,5,3,5,3,4,5,3,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[8,[[9,[5]]]],0,[[]],[[]],[[]],0,[[],[[10,[5]]]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[15,16],16],[15,15],[[]],[[]],[15,15],[15,15],[[]],[[15,15],15],[15,15],[15,15],[[15,15],17],[15,15],[[15,6],7],[[]],[15],[15,18],[[]],[15,15],[[]],[15,15],[15,15],[[]],[[],12],[[],12],[[],13],[15,15],[15,15]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputScanner"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i64"],[4,"Rotation"],[6,"Pos"],[15,"bool"],[15,"usize"]]},\
"aoc_2021_day_20":{"doc":"Advent of Code 2021: Day 20: Trench Map","t":[0,0,0,5,0,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,5,5,11,5,11,11,11,5,5,11,11,11,11,6,13,3,13,4,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,5,11,11,11],"n":["input","logic","model","puzzle_metadata","tool","Input","InputParams","algorithm","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","num_times_one","num_times_two","params","parse","pixels","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","ImageIter","borrow","borrow_mut","calc_next","calc_result","from","image_iter","into","into_iter","next","part_one","part_two","quick_into","try_from","try_into","type_id","Algorithm","Dark","Image","Light","Pixel","Pixels","Pos","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","default","default","eq","fmt","fmt","fmt","fmt","from","from","from_parser","get","hash","into","into","new_from","num_pixels","partial_cmp","quick_into","quick_into","range","size","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","RunArgs","borrow","borrow_mut","from","into","parse","quick_into","run","try_from","try_into","type_id"],"q":["aoc_2021_day_20","","","","","aoc_2021_day_20::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_20::logic","","","","","","","","","","","","","","","","aoc_2021_day_20::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_20::tool","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,3,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,4,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,19,19,0,0,19,0,19,19,19,0,0,19,19,19,19,0,21,0,21,0,0,0,21,14,21,14,21,21,21,21,14,21,21,21,14,14,21,14,21,14,21,21,14,14,14,21,21,14,14,14,21,21,14,21,14,21,14,21,14,0,27,27,27,27,27,27,0,27,27,27],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[[]],[[]],[[13,14],14],[[3,15],[[9,[16]]]],[[]],[[13,[18,[[17,[14]]]]],19],[[]],[[]],[19,[[20,[[17,[14]]]]]],[3,[[9,[16]]]],[3,[[9,[16]]]],[[]],[[],11],[[],11],[[],12],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[21,21],[[]],[[21,21],22],[[],21],[14,21],[[21,21],23],[[21,5],6],[[21,5],6],[[14,5],6],[[14,5],6],[[]],[[]],[7,[[8,[21]]]],[[14,24],21],[21],[[]],[[]],[[25,21],14],[14,26],[[21,21],[[20,[22]]]],[[]],[[]],[14],[14,24],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[[]],[[]],[[]],[[]],[[],[[11,[27,28]]]],[[]],[27,9],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Algorithm"],[3,"Image"],[15,"u32"],[15,"i64"],[3,"Rc"],[8,"Into"],[3,"ImageIter"],[4,"Option"],[4,"Pixel"],[4,"Ordering"],[15,"bool"],[6,"Pos"],[6,"Pixels"],[15,"usize"],[3,"RunArgs"],[4,"ArgsParseError"]]},\
"aoc_2021_day_21":{"doc":"Advent of Code 2021: Day 21: Dirac Dice","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","player_1","player_2","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2021_day_21","","","aoc_2021_day_21::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_21::logic",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[15,"u128"]]},\
"aoc_2021_day_22":{"doc":"Advent of Code 2021: Day 22: Reactor Reboot","t":[0,0,0,5,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,5,5,3,3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputCube","InputParams","InputStep","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cube","default","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","hash","into","into","into","into","params","parse","quick_into","quick_into","quick_into","quick_into","state","steps","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","x0","x1","y0","y1","z0","z1","part_one","part_two","Cube","Pos","Step","ZERO","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cube","eq","eq","fmt","fmt","fmt","from","from","from","from","from","hash","hash","intersect","into","into","into","overlaps","partial_cmp","quick_into","quick_into","quick_into","state","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","volume","x","x0","x1","y","y0","y1","z","z0","z1"],"q":["aoc_2021_day_22","","","","aoc_2021_day_22::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_22::logic","","aoc_2021_day_22::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,4,6,5,3,3,4,4,5,5,6,6,3,4,5,6,3,4,5,6,5,3,4,5,6,3,6,3,4,5,6,4,3,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,5,5,5,5,5,5,0,0,0,0,0,18,17,18,19,17,18,19,17,18,19,17,18,19,19,17,18,19,17,18,19,17,17,18,18,19,18,19,18,17,18,19,18,19,17,18,19,17,17,18,19,17,18,19,17,18,19,17,18,19,18,19,18,18,19,18,18,19,18,18],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],0,[[],6],[[5,5],7],[[3,8],9],[[3,8],9],[[4,8],9],[[4,8],9],[[5,8],9],[[5,8],9],[[6,8],9],[[6,8],9],[[]],[[]],[[]],[[]],[10,[[11,[3]]]],[10,[[11,[4]]]],[10,[[11,[5]]]],[10,[[11,[6]]]],[5],[[]],[[]],[[]],[[]],0,[[],[[12,[6]]]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],0,0,0,0,0,0,[3,[[12,[16]]]],[3,[[12,[16]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[17,17],[18,18],[19,19],[[]],[[]],[[]],[[19,19],20],0,[[18,18],7],[[19,19],7],[[17,8],9],[[18,8],9],[[19,8],9],[4,17],[[]],[5,18],[[]],[[]],[18],[19],[[18,18],[[21,[18]]]],[[]],[[]],[[]],[[18,18],7],[[19,19],[[21,[20]]]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[18,16],0,0,0,0,0,0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputStep"],[3,"InputCube"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i64"],[3,"Step"],[3,"Cube"],[3,"Pos"],[4,"Ordering"],[4,"Option"]]},\
"aoc_2021_day_23":{"doc":"Advent of Code 2021: Day 23: Amphipod","t":[0,0,0,5,0,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,11,11,5,5,5,11,11,11,11,5,5,5,11,11,11,11,11,13,4,13,13,13,13,4,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,5,11,11,11,11,11,11,5,5,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","tools","Input","InputParams","amphs","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Between","In","Move","Out","borrow","borrow_mut","calc_next_moves","calc_next_states","calc_result","clone","clone_into","from","into","iterator","part_one","part_two","quick_into","to_owned","try_from","try_into","type_id","Amber","Amph","Bronze","Copper","Desert","Hall","Place","Room","State","StateCompact","as_array","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","compact","cost","entrance","eq","eq","eq","eq","expand","fmt","fmt","fmt","fmt","fmt","fmt","for_idx","from","from","from","from","from_array","from_letter","from_parser","from_str","get","hall","hash","hash","hash","idx","idx","into","into","into","into","is_finished","is_finished","letter","move_between","move_in","move_out","new_part_one","new_part_two","partial_cmp","partial_cmp","pretty_line","print","quick_into","quick_into","quick_into","quick_into","room","room_is_happy","room_size","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","InternalsArgs","RunArgs","borrow","borrow","borrow_mut","borrow_mut","from","from","internals","into","into","parse","parse","quick_into","quick_into","run","run_part","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2021_day_23","","","","","aoc_2021_day_23::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_23::logic","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_23::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_23::tools","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,14,14,0,14,14,14,0,0,0,14,14,14,14,0,0,0,14,14,14,14,14,20,0,20,20,20,19,0,19,0,0,13,13,16,19,20,13,16,19,20,13,16,19,20,13,16,19,20,16,20,13,20,19,13,16,19,20,16,13,13,16,19,20,20,19,13,16,19,20,13,20,20,13,13,13,16,19,20,19,20,13,16,19,20,13,16,20,13,13,13,13,13,16,20,13,13,13,16,19,20,13,13,13,13,16,19,20,13,20,13,16,19,20,13,16,19,20,13,16,19,20,0,0,28,27,28,27,28,27,0,28,27,28,27,28,27,0,0,28,27,28,27,28,27],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,0,0,[[]],[[]],[13,[[15,[14]]]],[16,15],[13,[[9,[17]]]],[14,14],[[]],[[]],[[]],[13,18],[3,[[9,[17]]]],[3,[[9,[17]]]],[[]],[[]],[[],11],[[],11],[[],12],0,0,0,0,0,0,0,0,0,0,[13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,13],[16,16],[19,19],[20,20],[[]],[[]],[[]],[[]],[[16,16],21],[[20,20],21],[13,16],[20,17],[19,22],[[13,13],22],[[16,16],22],[[19,19],22],[[20,20],22],[16,13],[[13,5],6],[[13,5],6],[[16,5],6],[[19,5],6],[[20,5],6],[[20,5],6],[23,19],[[]],[[]],[[]],[[]],[23,13],[24,[[25,[[25,[20]]]]]],[7,[[8,[20]]]],[26,[[11,[13]]]],[[13,19],[[25,[20]]]],[13],[16],[19],[20],[19,23],[20,23],[[]],[[]],[[]],[[]],[13,22],[16,22],[20,24],[[13,20,20],13],[[13,19,20],13],[[13,20,19],13],[3,13],[3,13],[[16,16],[[25,[21]]]],[[20,20],[[25,[21]]]],[[13,23],10],[13],[[]],[[]],[[]],[[]],[[13,20]],[[13,20],22],[13,23],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[27,9],[[]],[[]],[[],[[11,[28,29]]]],[[],[[11,[27,29]]]],[[]],[[]],[28,9],[[28,13],9],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"State"],[4,"Move"],[3,"TinyVec"],[3,"StateCompact"],[15,"i64"],[8,"Iterator"],[4,"Place"],[4,"Amph"],[4,"Ordering"],[15,"bool"],[15,"usize"],[15,"char"],[4,"Option"],[15,"str"],[3,"InternalsArgs"],[3,"RunArgs"],[4,"ArgsParseError"]]},\
"aoc_2021_day_24":{"doc":"Advent of Code 2021: Day 24: Arithmetic Logic Unit","t":[0,0,0,0,5,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,13,13,13,13,13,4,13,3,4,3,13,13,13,13,4,4,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,6,5,5,13,4,13,13,3,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,5,11,11,11,11,12,11,5,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,3,4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,5,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11],"n":["input","logic","machine","model","puzzle_metadata","quick","solver","tool","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","calc_result","part_one","part_two","Add","Div","DivideByZero","Eql","Inp","Instr","Int","Machine","MachineError","MachineRegs","Mod","Mul","NegativeModulo","NoMoreInput","Reg","RegOrInt","W","W","X","X","Y","Y","Z","Z","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_parser","from_parser","from_parser","hash","hash","ic","into","into","into","into","into","into","machine_input","new","pc","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","regs","step","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","w","x","y","z","Input","input_from_str","input_to_str","Inner","NextNumIter","Outer","Poison","Step","borrow","borrow","borrow_mut","borrow_mut","check","clone","clone_into","fmt","from","from","incr","increment","into","into","into_iter","iterator","new","next","quick_into","quick_into","random","solve","steps_for","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","nested","nested","next_iter","nums","progress","reverse","reverse","steps","steps","Add","Divide","Error","Input","IsEqual","IsUnequal","Modulo","Multiply","Solver","SymVal","Symbol","Symbol","Value","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","children","children","clone","clone","clone","clone_into","clone_into","clone_into","cmp","define","depth","depth","dump","dump_symbol","dump_symbol_auto","eq","eq","eval","eval","fmt","fmt","fmt","fmt","fork","from","from","from","from_prog","get","hash","into","into","into","is_empty","is_empty","len","len","name","new","original_children","original_depth","original_depth","original_len","original_len","partial_cmp","quick_into","quick_into","quick_into","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","AllArgs","MachineArgs","SolverArgs","all","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","into","into","into","machine","parse","parse","parse","quick_into","quick_into","quick_into","solver","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["aoc_2021_day_24","","","","","","","","aoc_2021_day_24::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_24::logic","","","aoc_2021_day_24::machine","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_24::model","","","aoc_2021_day_24::quick","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_24::quick::NextNumIter","","","","","","","","","aoc_2021_day_24::solver","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_24::tool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","Quick algorithm found by reverse engineering the input …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,17,17,15,17,17,0,19,0,0,0,17,17,15,15,0,0,18,19,18,19,18,19,18,19,14,15,16,17,18,19,14,15,16,17,18,19,14,15,16,17,18,19,14,15,16,17,18,19,14,16,14,15,16,17,18,19,14,15,16,17,17,18,18,19,19,14,15,16,17,18,19,17,18,19,14,16,16,14,15,16,17,18,19,0,14,16,14,15,16,17,18,19,14,14,14,15,16,17,18,19,17,18,19,14,15,16,17,18,19,14,15,16,17,18,19,14,15,16,17,18,19,16,16,16,16,0,0,0,26,0,26,26,0,26,22,26,22,22,22,22,22,26,22,22,22,26,22,26,0,22,26,26,22,22,22,0,22,26,22,26,22,26,22,41,42,42,42,42,41,42,41,42,30,30,30,30,30,30,30,30,0,0,0,30,30,31,28,30,31,28,30,28,30,31,28,30,31,28,30,28,31,28,30,31,31,31,28,30,31,28,28,28,30,30,31,31,28,30,31,31,28,31,28,30,28,30,28,30,28,31,28,28,30,28,30,28,31,28,30,31,28,30,28,30,31,28,30,31,28,30,31,28,30,28,0,0,0,0,37,38,40,37,38,40,37,38,40,37,38,40,0,37,38,40,37,38,40,0,37,38,40,37,38,40,37,38,40],"f":[0,0,0,0,[[],[[2,[1]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[13,[[9,[10]]]],[3,[[9,[10]]]],[3,[[9,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[],16],[[14,14],13],[[15,15],13],[[16,16],13],[[17,17],13],[[18,18],13],[[19,19],13],[[14,5],6],[[15,5],6],[[16,5],6],[[17,5],6],[[17,5],6],[[18,5],6],[[18,5],6],[[19,5],6],[[19,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[7,[[8,[17]]]],[7,[[8,[18]]]],[7,[[8,[19]]]],[14],[16],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],0,[[]],[[]],[[]],[[]],[[]],[[]],0,[14,[[11,[13,15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,0,0,0,0,[20,21],[21,10],0,0,0,0,0,[[]],[[]],[[]],[[]],0,[22,22],[[]],[[22,5],6],[[]],[[]],[[22,23,24],23],0,[[]],[[]],[[]],[13,25],[[13,23,23],22],[[[26,[25]]],27],[[]],[[]],0,[[22,23],[[27,[24]]]],[[],9],[[]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[28,[[29,[28]]]],[30,[[29,[28]]]],[31,31],[28,28],[30,30],[[]],[[]],[[]],[[28,28],32],[[31,[33,[20]],30],28],[28,34],[30,34],[[31,34,13]],[[31,34,13,28]],[[31,28]],[[28,28],13],[[30,30],13],[[31,28],[[11,[[35,[23]],15]]]],[[28,36],[[11,[[35,[23]],15]]]],[[28,5],6],[[28,5],6],[[30,5],6],[[30,5],6],[31,31],[[]],[[]],[[]],[[]],[[31,33],[[27,[28]]]],[28],[[]],[[]],[[]],[28,13],[30,13],[28,34],[30,34],[28,33],[[],31],[28,[[29,[28]]]],[28,34],[30,34],[28,34],[30,34],[[28,28],[[27,[32]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[28,30],0,0,0,[37,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38,9],[[],[[11,[37,39]]]],[[],[[11,[38,39]]]],[[],[[11,[40,39]]]],[[]],[[]],[[]],[40,9],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"bool"],[3,"Machine"],[4,"MachineError"],[3,"MachineRegs"],[4,"Instr"],[4,"Reg"],[4,"RegOrInt"],[15,"str"],[6,"Input"],[3,"Step"],[15,"i64"],[15,"u8"],[8,"Iterator"],[4,"NextNumIter"],[4,"Option"],[3,"Symbol"],[3,"TinyVec"],[4,"SymVal"],[3,"Solver"],[4,"Ordering"],[3,"Rc"],[15,"usize"],[3,"Vec"],[8,"Fn"],[3,"AllArgs"],[3,"MachineArgs"],[4,"ArgsParseError"],[3,"SolverArgs"],[13,"Outer"],[13,"Inner"]]},\
"aoc_2021_day_25":{"doc":"Advent of Code 2021: Day 25: Sea Cucumber","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,6,13,4,13,6,6,13,6,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","max_iters","params","parse","quick_into","quick_into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","Coord","East","Either","Empty","Grid","GridInner","Left","Pos","Region","Right","South","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","decode","default","encode","eq","fmt","fmt","from","from","from_parser","hash","into","into","into_iter","next","partial_cmp","quick_into","quick_into","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2021_day_25","","","","aoc_2021_day_25::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_25::logic","aoc_2021_day_25::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,0,14,0,0,18,0,0,18,14,18,14,18,14,14,14,14,14,14,14,14,14,14,18,14,14,14,18,14,18,18,14,18,14,14,14,18,14,18,14,18,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[14,14],[[]],[[14,14],15],[16,14],[[],14],[14,16],[[14,14],17],[[14,5],6],[[14,5],6],[[]],[[]],[7,[[8,[14]]]],[14],[[]],[[]],[[]],[18,19],[[14,14],[[19,[15]]]],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Region"],[4,"Ordering"],[15,"usize"],[15,"bool"],[4,"Either"],[4,"Option"]]},\
"aoc_args":{"doc":"","t":[8,4,8,8,13,13,13,13,16,13,5,14,11,11,11,11,10,11,11,11,10,10,11,10,10,11,11,11,11,11,11],"n":["ArgsParse","ArgsParseError","ArgsParseInner","ArgsParseOuter","Duplicated","Invalid","MissingArg","MissingValue","State","Unexpected","arg_matches","args_decl","borrow","borrow_mut","clone","clone_into","finish","fmt","fmt","from","handle","init","into","parse","parse","provide","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_args","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,3,3,3,3,11,3,0,0,3,3,3,3,11,3,3,3,11,11,3,12,13,3,3,3,3,3,3],"f":[0,0,0,0,0,0,0,0,0,0,[1,2],0,[[]],[[]],[3,3],[[]],[1,[[4,[3]]]],[[3,5],6],[[3,5],6],[[]],[[1,7],[[4,[3]]]],[[]],[[]],[[],[[4,[3]]]],[[1,7],[[4,[3]]]],[8],[[]],[[],9],[[],4],[[],4],[[],10]],"p":[[15,"str"],[15,"bool"],[4,"ArgsParseError"],[4,"Result"],[3,"Formatter"],[6,"Result"],[8,"Iterator"],[3,"Demand"],[3,"String"],[3,"TypeId"],[8,"ArgsParseOuter"],[8,"ArgsParse"],[8,"ArgsParseInner"]]},\
"aoc_bithash":{"doc":"Bloom filter","t":[3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BitHash","BitHasher","IteratorBitHash","bit_hash","bitand","bits","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","finish","fmt","from","from","into","into","is_zero","new_with_hasher","not","quick_into","quick_into","reduce","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","update","zero"],"q":["aoc_bithash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A bit hash value","State for building a <code>BitHash</code> iteratively","Extension trait to <code>Iterator</code> for working with <code>BitHash</code>","Construct a <code>BitHash</code> with the values from an iterator","","The number of one bits in the hash value","","","","","","","Stop hashing and return the hash value","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true is this hash has no one bits","Construct a <code>BitHasher</code> with the provided <code>BuildHasher</code>","","","","Map the hash to an equivalent hash of a smaller size","","","","","","","","","Update the hash value with a new item","A zero hash value, with no items added"],"i":[0,0,0,12,1,1,4,1,4,1,1,1,4,1,4,1,4,1,1,4,1,4,1,1,1,1,4,1,4,1,4,1,4,1],"f":[0,0,0,[[],1],[[1,1],1],[1,2],[[]],[[]],[[]],[[]],[1,1],[[]],[[[4,[3]]],1],[[1,5],6],[[]],[[]],[[]],[[]],[1,7],[3,[[4,[3]]]],[1,1],[[]],[[]],[1,1],[[]],[[],8],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[4,[3]],11],[[4,[3]]]],[[],1]],"p":[[3,"BitHash"],[15,"usize"],[8,"BuildHasher"],[3,"BitHasher"],[3,"Formatter"],[6,"Result"],[15,"bool"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Hash"],[8,"IteratorBitHash"]]},\
"aoc_bitvec":{"doc":"Dynamically sized array of items encoded as bits and packed","t":[18,18,3,8,3,3,8,11,11,11,11,11,11,11,11,11,10,10,11,10,10,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,18,18,3,8,8,18,18,18,11,11,11,11,10,10,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BITS","BITS","BitVec","BitVecEncoding","BitVecEncodingDefault","BitVecIter","BitVecNative","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","decode","decode","decode","encode","encode","encode","eq","fmt","from","from","into","into","into_iter","next","prelude","quick_into","quick_into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","BITS","BITS","BitVec","BitVecEncoding","BitVecNative","MASK","MASK","MASK","borrow","borrow_mut","clone","clone_into","decode","decode","default","encode","encode","eq","extend","fmt","from","from_iter","get","get_bit_shift","get_bit_shift","get_bit_shift","into","is_empty","item_to_word","item_to_word","item_to_word","iter","len","new","push","quick_into","set","to_owned","try_from","try_into","type_id","word_to_item","word_to_item","word_to_item"],"q":["aoc_bitvec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_bitvec::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Number of bits in each encoded item","Number of bits in an encoded item","Dynamically sized array of items encoded as bits and packed","Trait for encoding an item as bits for storing in a <code>BitVec</code>","Default implementation of <code>BitVecEncoding</code> for items which …","Iterator over the items in a <code>BitVec</code>","Trait for items which know how to encode themselves for …","","","","","","","","","","Decode an item from its representation as bits","Decode an item from its representation as bits","","Encode an item into its representation as bits","Encode an item into its representation as bits","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Number of bits in each encoded item","Number of bits in an encoded item","Dynamically sized array of items encoded as bits and packed","Trait for encoding an item as bits for storing in a <code>BitVec</code>","Trait for items which know how to encode themselves for …","Mask for the bits in an encoded item","Mask for the bits in an encoded item","Mask for the bits in an encoded item","","","","","Decode an item from its representation as bits","Decode an item from its representation as bits","","Encode an item into its representation as bits","Encode an item into its representation as bits","","","","Returns the argument unchanged.","","Get a specific item given its index","","","","Calls <code>U::from(self)</code>.","True if there are no stored items","","","","Create an iterator over the stored items","Number of items stored","Create a new <code>BitVec</code> with no items","Add a new item, increases the size by one","","Replace the item at the specified index","","","","","","",""],"i":[16,17,0,0,0,0,0,1,3,1,3,1,3,1,3,3,16,17,1,16,17,1,1,1,1,3,1,3,3,3,0,1,3,1,3,1,3,1,3,1,3,16,17,0,0,0,16,16,16,11,11,11,11,16,17,11,16,17,11,11,11,11,11,11,16,16,16,11,11,16,16,16,11,11,11,11,11,11,11,11,11,11,16,16,16],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[[[3,[2,2]]],[[3,[2,2]]]],[[]],[[]],[3,4],[4],[4],[4],[[],4],[[],4],[[],4],[[1,1],5],[[1,6],7],[[]],[[]],[[]],[[]],[[]],[3,8],0,[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],0,0,0,0,0,0,0,0,[[]],[[]],[[[11,[2,2]]],[[11,[2,2]]]],[[]],[4],[4],[[],11],[[],4],[[],4],[[[11,[12,12]],11],5],[[11,13]],[[[11,[14,14]],6],7],[[]],[13,11],[[11,4],8],[15,15],[15,15],[15,15],[[]],[11,5],[[4,15],4],[[4,15],4],[[4,15],4],[11,3],[11,4],[[],11],[11],[[]],[[11,4]],[[]],[[],9],[[],9],[[],10],[[4,15],4],[[4,15],4],[[4,15],4]],"p":[[3,"BitVecEncodingDefault"],[8,"Clone"],[3,"BitVecIter"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"BitVec"],[8,"PartialEq"],[8,"IntoIterator"],[8,"Debug"],[15,"u32"],[8,"BitVecEncoding"],[8,"BitVecNative"]]},\
"aoc_checked":{"doc":"","t":[14],"n":["checked"],"q":["aoc_checked"],"d":[""],"i":[0],"f":[0],"p":[]},\
"aoc_codegen":{"doc":"Generate boilerplate code, run from build.rs","t":[5],"n":["invoke"],"q":["aoc_codegen"],"d":["Entry point for code generation"],"i":[0],"f":[[[],[[3,[[2,[1]]]]]]],"p":[[8,"Error"],[3,"Box"],[4,"Result"]]},\
"aoc_common":{"doc":"Common functionality used in all puzzle solutions","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"aoc_grid":{"doc":"","t":[16,16,18,13,3,3,3,3,3,3,3,3,6,3,3,8,8,8,4,8,3,8,3,8,8,3,8,8,8,8,16,16,16,16,13,13,13,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,10,11,10,11,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,16,16,3,3,3,3,8,8,8,8,8,16,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11],"n":["Coord","Cursors","DISPLAY_TYPE","DownRight","GridBuf","GridCursor","GridCursorCompact","GridCursorIter","GridCursorWalk","GridExtend","GridExtendCursors","GridExtendIter","GridIter","GridKeysIter","GridOffset","GridPos","GridPosDisplay","GridPosDisplayAuto","GridPosDisplayType","GridPosParse","GridPrint","GridStorage","GridStorageClone","GridStorageIntoIter","GridStorageMut","GridTransformIter","GridView","GridViewExtend","GridViewIter","GridViewPrint","Item","Item","Item","Iter","RightUp","UpRight","UpRightSlant","Values","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cursor","cursors","cursors","end","end","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_array","get_trusted","get_trusted","grid_parse_col_offset","grid_parse_first_index","grid_parse_grid_size","grid_parse_row_offset","grid_pos_display_native","grid_pos_display_prefix","grid_pos_display_rows_cols","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","new","next","next","next","next","next","next","next","nth","offset","prelude","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","size","size","start","start","storage_get","storage_iter","storage_len","storage_mut","storage_ref","storage_set","to_array","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values","Coord","Cursors","GridBuf","GridCursor","GridCursorCompact","GridOffset","GridPos","GridView","GridViewExtend","GridViewIter","GridViewPrint","Item","Values","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","compact","cursor","cursor","cursor","cursors","cursors","default","display_with_delim","end","end","eq","eq","eq","expand","extend","extend","extend","extend_in_place","extend_map","extend_map","extend_map","first_key","first_key","first_key","fmt","fmt","fmt","fmt","from","from","from","from","from_array","from_native","from_native","from_native","from_parser","get","get","get","get","get_mut","get_native","get_native","get_native","get_ref","get_trusted","get_trusted","hash","hash","hash","idx","index","into","into","into","into","is_empty","is_empty","is_empty","iter","iter","iter","keys","keys","keys","last_key","last_key","last_key","len","len","len","map","map","map","map","map","map","native","native_to_index","native_to_index","native_to_index","neg","new","new_range","new_size","offset","offset","offset","parse_with_delim","parse_with_delim_and_fn","parse_with_fn","partial_cmp","partial_cmp","partial_cmp","pos","print","print","print","quick_into","quick_into","quick_into","quick_into","reset","resize","set","set_index","size","size","start","start","to_array","to_buf","to_buf","to_buf","to_native","to_native","to_native","to_owned","to_owned","to_owned","to_owned","to_string","transform","transform","transform","translate","try_add","try_add_assign","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_map","try_map","try_map","try_set","type_id","type_id","type_id","type_id","val","values","values","walk","wrap_range","wrap_size"],"q":["aoc_gridaoc_grid::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Multi dimensional abstraction over a single dimensional …","","","","","","","","","","","Trait for values to use as indices for a <code>GridView</code>.","","","","","","Trait for backing stores for a <code>GridBuf</code>","Wrapping iterator which clones items.","Extra trait for <code>GridStorage</code> to support iteration.","Additional trait for backing stores which which can …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multi dimensional abstraction over a single dimensional …","","","","Trait for values to use as indices for a <code>GridView</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[15,31,41,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,31,44,42,42,42,45,14,42,8,7,16,17,13,2,3,4,14,42,8,7,16,17,13,2,3,4,2,3,4,2,3,4,2,31,2,31,2,8,2,14,42,8,7,16,17,13,2,3,4,15,31,2,46,46,46,46,47,47,47,14,42,8,7,16,17,13,2,3,4,14,7,16,17,13,3,4,13,14,7,16,17,13,3,4,4,2,0,14,42,8,7,16,17,13,2,3,4,31,2,31,2,43,44,43,48,48,43,15,2,3,4,8,14,42,8,7,16,17,13,2,3,4,14,42,8,7,16,17,13,2,3,4,14,42,8,7,16,17,13,2,3,4,45,2,15,31,0,0,0,0,0,0,0,0,0,31,45,23,5,24,18,23,5,24,18,23,5,24,18,23,5,24,18,23,5,24,5,31,31,31,31,23,18,23,31,23,23,5,24,24,49,49,49,23,31,31,31,31,31,31,23,23,5,18,23,5,24,18,15,15,15,15,23,31,31,31,5,23,31,31,31,23,31,23,23,5,24,18,5,23,5,24,18,31,31,31,45,45,45,31,31,31,31,31,31,31,31,31,15,15,15,31,31,31,5,15,15,15,18,18,23,23,31,31,31,23,23,23,23,5,24,5,50,50,50,23,5,24,18,23,23,23,23,31,23,31,23,15,45,45,45,15,15,15,23,5,24,18,23,31,31,31,23,5,5,23,5,24,18,23,5,24,18,31,31,31,23,23,5,24,18,18,45,23,5,23,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1,1]]],[[2,[1,1]]]],[[[3,[1,1]]],[[3,[1,1]]]],[[[4,[1]]],[[4,[1]]]],[[]],[[]],[[]],[2,[[6,[5]]]],[[]],[2,7],[[]],[2],[[8,9],10],[[2,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11],[[2,11]],[[11,11],12],[[11,11],11],[[]],[[11,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,13],[14,[[6,[5]]]],[7,[[6,[5]]]],[[[16,[15]]],[[6,[15]]]],[17,[[6,[5]]]],[13,[[6,[5]]]],[3,6],[4,6],[[4,11],6],[2,[[19,[18]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[[]],[2],[11,6],[[]],[[],11],[11,6],[11,6],[11],[[]],[[]],[[]],[[]],[[],20],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[2],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[23,[1,1]]],[[23,[1,1]]]],[[[5,[1]]],[[5,[1]]]],[[[24,[1]]],[[24,[1]]]],[[[18,[1]]],[[18,[1]]]],[[]],[[]],[[]],[[]],[[[23,[25,25]],23],26],[[[5,[25]],5],26],[[[24,[25]],24],26],[5,24],[[],[[6,[5]]]],[[],[[6,[5]]]],[[],[[6,[5]]]],[[]],[23,17],[[],[[18,[27]]]],[[23,28,9],10],[[]],[23],[[[23,[29,29]],23],30],[[[5,[29]],5],30],[[[24,[29]],24],30],[[24,31],5],[[],[[19,[2]]]],[[],[[19,[2]]]],[[],[[19,[2]]]],[23,[[19,[23]]]],[[],[[19,[23]]]],[[],[[19,[23]]]],[[],[[19,[23]]]],[[]],[[]],[[]],[[23,9],10],[[23,9],10],[[5,9],10],[[[18,[32]],9],10],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[33,[[34,[23]]]],[[],6],[[],6],[[],6],[[5,31]],[23,6],[[],6],[[],6],[[],6],[23,6],[11],[[23,11]],[[[23,[35,35]]]],[[[5,[35]]]],[[[24,[35]]]],[18,12],[5,11],[[]],[[]],[[]],[[]],[[],30],[[],30],[[],30],[[],36],[[],36],[[],36],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[],23],[[],23],[[],23],[5],[[],[[6,[12]]]],[[],[[6,[12]]]],[[],[[6,[12]]]],[18,18],[[],[[19,[18]]]],[[],[[19,[23]]]],[[],23],[[],[[19,[18]]]],[[],[[19,[18]]]],[[],[[19,[18]]]],[[33,37,38],[[34,[23]]]],[[33,38,37,[0,[37,1]]],[[34,[23]]]],[[33,37,[0,[37,1]]],[[34,[23]]]],[[[23,[39,39]],23],[[6,[26]]]],[[[5,[39]],5],[[6,[26]]]],[[[24,[39]],24],[[6,[26]]]],[5],[[],8],[[],8],[[],8],[[]],[[]],[[]],[[]],[[[23,[40]]]],[23,[[19,[23]]]],[23],[[23,11]],[[]],[23],[[]],[23],[[]],[[],23],[[],23],[[],23],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[]],[[],20],[[],[[19,[23]]]],[[],[[19,[23]]]],[[],[[19,[23]]]],[23,[[19,[23]]]],[[5,18],[[19,[5]]]],[[5,18],19],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],[[21,[23]]]],[[],[[21,[23]]]],[[],[[21,[23]]]],[23,6],[[],22],[[],22],[[],22],[[],22],[18],[[]],[23],[[5,18],14],[[],[[19,[23]]]],[[],23]],"p":[[8,"Clone"],[3,"GridExtend"],[3,"GridExtendIter"],[3,"GridStorageClone"],[3,"GridCursor"],[4,"Option"],[3,"GridExtendCursors"],[3,"GridPrint"],[3,"Formatter"],[6,"Result"],[15,"usize"],[15,"isize"],[3,"GridTransformIter"],[3,"GridCursorWalk"],[8,"GridPos"],[3,"GridKeysIter"],[3,"GridCursorIter"],[3,"GridOffset"],[6,"NumResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"GridBuf"],[3,"GridCursorCompact"],[8,"Ord"],[4,"Ordering"],[8,"Default"],[8,"Display"],[8,"PartialEq"],[15,"bool"],[8,"GridView"],[8,"Debug"],[3,"Parser"],[6,"ParseResult"],[8,"Hash"],[6,"GridIter"],[8,"Fn"],[8,"ParseDelimiter"],[8,"PartialOrd"],[3,"Vec"],[8,"GridPosDisplayAuto"],[4,"GridPosDisplayType"],[8,"GridStorage"],[8,"GridStorageIntoIter"],[8,"GridViewIter"],[8,"GridPosParse"],[8,"GridPosDisplay"],[8,"GridStorageMut"],[8,"GridViewExtend"],[8,"GridViewPrint"]]},\
"aoc_inpstr":{"doc":"","t":[13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Borrow","InpStr","RefCount","alloc","as_str","borrow","borrow","borrow_mut","borrowed","clone","clone_into","cmp","deref","eq","eq","eq","fmt","fmt","from","from","hash","into","partial_cmp","to_owned","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_inpstr","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,0,[[[2,[1]]],3],[3,1],[1,3],[[]],[[]],[3,1],[3,3],[[]],[[3,3],4],[3,1],[[3,1],5],[[3,1],5],[[3,3],5],[[3,6],7],[[3,6],7],[1,3],[[]],[3],[[]],[[3,3],[[8,[4]]]],[[]],[3,9],[[],9],[[],10],[[],10],[[],11]],"p":[[15,"str"],[8,"AsRef"],[4,"InpStr"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"aoc_list":{"doc":"Implementation of lisp-like lists","t":[6,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CharList","Empty","List","Present","borrow","borrow_mut","clone","clone_into","cmp","cons","contains","eq","eq","eq","fmt","fmt","from","from","from","hash","head","into","is_empty","iter","len","new","partial_cmp","prepend","prepend","starts_with","starts_with","strip_prefix","strip_prefix","tail","to_owned","to_string","try_from","try_into","type_id","with_push_front"],"q":["aoc_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,2,0,2,2,2,2,2,2,2,2,2,7,7,2,2,2,7,7,2,2,2,2,2,2,2,2,2,7,2,7,2,7,2,2,2,2,2,2,2],"f":[0,0,0,0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[2,2],3],[[[2,[1]]],4],[[[2,[1]]],5],[[[2,[[0,[1,6]]]],[2,[[0,[1,6]]]]],5],[[7,8],5],[[7,9],5],[[[2,[10]],11],12],[[[2,[[0,[1,13]]]],11],12],[[]],[9,7],[8,7],[[[2,[[0,[1,14]]]]]],[[[2,[1]]],4],[[]],[[[2,[1]]],5],[[[2,[1]]],[[0,[1]]]],[[[2,[1]]],15],[[],[[2,[1]]]],[[2,2],[[4,[3]]]],[[[2,[10]],8],[[2,[10]]]],[[7,8],7],[[[2,[10]],8],5],[[7,8],5],[[[2,[10]],8],[[4,[[2,[10]]]]]],[[7,8],[[4,[7]]]],[[[2,[1]]],[[4,[[2,[1]]]]]],[[]],[[],9],[[],16],[[],16],[[],17],[[[2,[1]],1],[[2,[1]]]]],"p":[[8,"Clone"],[4,"List"],[4,"Ordering"],[4,"Option"],[15,"bool"],[8,"PartialEq"],[6,"CharList"],[15,"str"],[3,"String"],[15,"char"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Hash"],[15,"usize"],[4,"Result"],[3,"TypeId"]]},\
"aoc_md5":{"doc":"","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["MD5","Output","as_hex_bytes","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","eq","finish","finish_reset","fmt","fmt","from","from","from_hex","index","into","into","is_empty","len","md5_hash","new","num_zeros","push","quick_into","quick_into","reset","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","update"],"q":["aoc_md5","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,1,1,2,1,1,2,2,1,1,2,1,1,1,2,1,1,1,0,2,1,2,2,1,2,1,1,2,1,2,1,2,1,2],"f":[0,0,[1],[[]],[[]],[[]],[[]],[1,1],[[]],[[],2],[[],1],[[1,1],3],[2,1],[2,1],[[1,4],5],[[1,4],5],[[]],[[]],[6,[[8,[1,7]]]],[[1,9],10],[[]],[[]],[1,3],[1,9],[[],1],[[],2],[1,10],[[2,10]],[[]],[[]],[2],[[]],[[],7],[[],8],[[],8],[[],8],[[],8],[[],11],[[],11],[2]],"p":[[3,"Output"],[3,"MD5"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"String"],[4,"Result"],[15,"usize"],[15,"u8"],[3,"TypeId"]]},\
"aoc_misc":{"doc":"","t":[14,14,14,14,14,14,14,0,14,14,14,13,13,8,8,3,4,3,3,4,3,4,3,3,3,3,3,3,3,3,8,8,8,8,8,8,13,4,8,3,4,3,3,4,3,4,8,14,3,3,8,8,8,8,13,16,8,2,13,13,13,13,13,13,4,8,8,6,6,13,8,14,3,4,3,8,16,2,13,8,8,4,13,13,8,3,13,13,3,3,4,8,3,3,8,13,13,13,13,4,3,16,16,16,16,16,16,16,16,16,16,16,13,3,3,3,3,13,13,13,13,13,13,3,3,8,3,3,3,3,13,13,8,8,8,13,8,8,8,8,3,3,13,13,13,8,16,13,2,13,13,13,3,3,3,13,2,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,2,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,14,14,14,14,14,14,11,11,11,11,11,11,11,11,11,10,11,11,10,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,0,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,14,14,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,0,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,14,14,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,8,14,13,13,13,8,14,4,8,14,8,14,3,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,5,11,5,5,11,10,11,11,11,11,11,4,3,8,13,8,14,3,3,3,3,3,8,3,3,13,8,8,8,8,6,13,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,10,11,11,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,5,11,11,5,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,8,3,8,14,8,16,3,11,11,10,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,3,3,13,8,3,3,3,3,13,13,13,13,13,3,13,13,3,13,3,4,13,13,13,13,13,13,3,13,13,13,3,3,13,8,3,3,13,13,13,13,13,13,13,13,13,8,13,3,13,6,8,4,3,3,13,13,3,3,3,3,3,3,13,3,13,13,13,13,13,8,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,10,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,8,11,11,11,11,10,10,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,3,3,3,3,3,3,8,3,3,8,8,3,3,3,3,3,8,3,8,3,3,3,16,8,16,16,8,3,3,3,3,3,8,3,3,3,3,3,3,8,3,3,8,3,3,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,10,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,18,3,8,3,18,3,19,18,18,18,11,5,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,12,5,5,5,11,11,11,5,12,5,5,5,11,11,11,11,11,11,11,5,5,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,5,11,11,11,5,11,8,8,18,8,8,8,8,8,8,4,13,18,8,13,13,4,8,8,8,8,8,8,13,8,8,8,8,8,4,13,8,8,8,8,8,8,8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,3,8,3,3,3,3,3,8,8,8,16,16,8,8,8,8,8,8,16,8,16,13,3,16,13,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,10,11,11,10,10,10,10,10,10,10,11,12,12,10,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,8,3,3,3,3,3,8,16,16,16,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,16,3,3,3,8,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,13,8,13,8,13,8,4,8,16,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,6,3,3,3,3,3,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,5,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,3,18,18,18,18,18,3,3,3,17,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["array_vec","assert_eq_ok","assert_err","assert_is_err","assert_is_ok","ok_or","ok_or_else","prelude","some_or","wrapper_deref","wrapper_deref_mut","AcqRel","Acquire","Add","AddAssign","Arc","ArrayCombinations","ArrayWindows","Arrays","AtomicOrdering","AtomicUsize","BTreeEntry","BTreeIntoIter","BTreeIter","BTreeIterMut","BTreeKeys","BTreeMap","BTreeSet","BTreeValues","BinaryHeap","BitAnd","BitAndAssign","BitOr","BitOrAssign","Borrow","BorrowMut","Borrowed","Bound","BuildHasher","BuildHasherDefault","CartesianProduct","Cell","Chars","CircularArrayWindows","Condvar","Cow","Debug","Debug","DedupConsecutive","DefaultHasher","Deref","DerefMut","Display","Div","Equal","Err","Error","Excluded","Excluded","Finished","Finished","Finished","Finished","Finished","FlattenOk","FromStr","FusedIterator","GenError","GenResult","Greater","Hash","Hash","HashMap","HashMapEntry","HashSet","Hasher","Hasher","Included","Included","Index","IndexMut","Infallible","Inner","Iterating","IteratorExt","JoinHandle","Less","Main","MapOk","MapToIndex","MergeConsecutive","Mul","MultiPeek","Mutex","Neg","Nested","Occupied","Occupied","One","Ordering","OsString","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Owned","ParseIntError","Path","Peekable","PhantomData","Poison","Poison","Poison","Poison","Poison","Prev","RandomHasher","Range","RangeBounds","RangeInclusive","Rc","RcWeak","RefCell","Relaxed","Release","Rem","ResultEither","ResultMapRef","SeqCst","Shl","ShlAssign","Shr","ShrAssign","SliceIter","SliceIterMut","Start","Start","Start","Sub","Target","Two","Unbounded","Unbounded","Vacant","Vacant","VecDeque","VecIntoIter","WhileSome","Wrap","_","add","add","add","add_assign","add_assign","add_assign","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_by","advance_by","advance_by","advance_by","all","all","all_equal","all_equal","all_unique","all_unique","allocator","allocator","ancestors","and_modify","and_modify","any","any","append","append","append","append","array","array","array","array_combinations","array_combinations","array_vec","array_vec","array_vec","array_windows","array_windows","arrays","arrays","as_array_of_cells","as_fd","as_mut","as_mut_os_str","as_mut_ptr","as_mut_slice","as_mut_slice","as_mut_slices","as_os_str","as_os_str","as_pthread_t","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_raw_fd","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slice","as_slice","as_slice_of_cells","as_slices","as_str","assert_eq_ok","assert_eq_ok","assert_err","assert_err","assert_is_err","assert_is_err","assert_is_ok","assert_is_ok","assume_init","assume_init","assume_init","assume_init","back","back_mut","binary_search","binary_search_by","binary_search_by_key","bitand","bitand","bitand","bitand_assign","bitor","bitor","bitor","bitor_assign","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_hasher","build_hasher","build_hasher","canonicalize","capacity","capacity","capacity","cartesian_product","cartesian_product","cause","cause","circular_array_windows","circular_array_windows","clear","clear","clear","clear","clear","clear_poison","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_from","clone_from","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","compare_and_swap","compare_exchange","compare_exchange_weak","components","contains","contains","contains","contains","contains","contains_key","count","count","count","count","count","decrement_strong_count","decrement_strong_count","dedup_consecutive","dedup_consecutive","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","description","description","description","description","difference","display","div","downcast","downcast","downcast","downcast","downcast","downcast_mut","downcast_mut","downcast_mut","downcast_ref","downcast_ref","downcast_ref","downcast_unchecked","downcast_unchecked","downgrade","downgrade","drain","drain","drain_filter","drain_filter","drain_sorted","drop","drop","drop","drop","drop","drop","drop","either","end","end","end_bound","end_bound","end_bound","end_bound","end_bound","ends_with","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","exactly_one","exactly_one","exists","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_reserve","extend_reserve","extend_reserve","extend_reserve","extension","fetch_add","fetch_and","fetch_max","fetch_min","fetch_nand","fetch_or","fetch_sub","fetch_update","fetch_xor","file_name","file_prefix","file_stem","find","find","find_map","find_map","finish","finish","first","first_entry","first_key_value","flatten_ok","flatten_ok","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold_ok","fold_ok","for_each","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_mut","from_mut","from_mut_slice","from_raw","from_raw","from_raw","from_str","from_str","from_vec","front","front_mut","fs","ge","ge","ge","ge","ge","get","get","get","get","get","get","get","get","get","get_key_value","get_key_value","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut_slice","get_mut_unchecked","get_mut_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","gt","gt","gt","gt","gt","has_root","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash_one","hash_slice","increment_strong_count","increment_strong_count","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert","insert","insert","insert","insert_entry","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_boxed_os_str","into_inner","into_inner","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter_sorted","into_keys","into_owned","into_path_buf","into_pthread_t","into_raw","into_raw","into_raw","into_slice","into_sorted_vec","into_string","into_values","into_vec","into_vec","io","is","is","is","is_absolute","is_borrowed","is_dir","is_disjoint","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_eq","is_file","is_finished","is_ge","is_gt","is_le","is_lt","is_ne","is_owned","is_poisoned","is_relative","is_sorted","is_sorted","is_sorted_by","is_subset","is_superset","is_symlink","iter","iter","iter","iter","iter","iter","iter_mut","iter_mut","join","join","key","key","keys","kind","last","last","last","last","last","last","last","last","last","last","last","last_entry","last_key_value","le","le","le","le","le","len","len","len","len","len","len","len","len","len","len","len","len","load","lock","lt","lt","lt","lt","lt","make_contiguous","make_mut","make_mut","map","map_ok","map_ok","map_ref","max","max","max","max","max","max_ok_by_key","max_ok_by_key","mem","merge_consecutive","merge_consecutive","metadata","min","min","min","min","min","min_max","min_max","min_ok","min_ok","mul","multipeek","multipeek","ne","ne","ne","ne","ne","ne","ne","ne","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_cyclic","new_cyclic","new_in","new_in","new_in","new_uninit","new_uninit","new_uninit_slice","new_uninit_slice","new_zeroed","new_zeroed","new_zeroed_slice","new_zeroed_slice","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_chunk","next_if","next_if_eq","notify_all","notify_one","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","ok_or","ok_or","ok_or_else","ok_or_else","ok_or_err","ops","or_default","or_default","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with_key","or_insert_with_key","parent","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partition_point","peek","peek","peek","peek_mut","peek_mut","pin","pin","pop","pop_back","pop_first","pop_first","pop_front","pop_last","pop_last","position","position","provide","provide","provide","provide","provide","ptr_eq","ptr_eq","ptr_eq","push","push","push_back","push_front","range","range","range","range_mut","range_mut","read","read_buf","read_dir","read_link","rem","remove","remove","remove","remove","remove_entry","replace","replace","replace","replace_with","report","request_ref","request_ref","request_ref","request_value","request_value","request_value","reserve","reserve","reserve","reserve_exact","reserve_exact","reserve_exact","reset_peek","resize","resize_with","retain","retain","retain","retain","retain_mut","reverse","rfold","rfold","rotate_left","rotate_right","rposition","rposition","set","shl","shl_assign","shr","shr_assign","shrink_to","shrink_to","shrink_to","shrink_to_fit","shrink_to_fit","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","slice","some_or","some_or","sorted","sorted","sorted_by_cached_key","sorted_by_cached_key","sorted_by_key","sorted_by_key","sorted_unique","sorted_unique","source","source","sources","split_off","split_off","split_off","start","start","start_bound","start_bound","start_bound","start_bound","start_bound","starts_with","store","str","strip_prefix","strong_count","strong_count","strong_count","sub","sub","sub","swap","swap","swap","swap","swap_remove_back","swap_remove_front","symlink_metadata","symmetric_difference","take","take","take","then","then_with","thread","thread","time","to_mut","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_path_buf","to_str","to_string","to_string","to_string","to_string","to_string","to_string","to_string_lossy","truncate","try_array","try_array","try_borrow","try_borrow_mut","try_borrow_unguarded","try_collect","try_collect","try_exists","try_fold","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_new","try_new","try_new_uninit","try_new_uninit","try_new_zeroed","try_new_zeroed","try_pin","try_reserve","try_reserve","try_reserve","try_reserve_exact","try_reserve_exact","try_reserve_exact","try_rfold","try_rfold","try_unwrap","try_unwrap","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","undo_leak","union","unlock","unwrap_or_clone","unwrap_or_clone","update","upgrade","values","values_mut","wait","wait_timeout","wait_timeout_ms","wait_timeout_while","wait_while","weak_count","weak_count","weak_count","while_some","while_some","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher","with_capacity_in","with_extension","with_file_name","with_hasher","with_hasher","wrapper_deref","wrapper_deref","wrapper_deref_mut","wrapper_deref_mut","write","write","write","write_all","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_length_prefix","write_str","write_str","write_str","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","inner","inners","items","into_iter_two","into_iter_two","item_one","iter_one","iter_one","iter_two","first","first","idx","inner","inner","prev","prev","inner","inner","nested","inner","inner","merge_fn","merge_fn","prev","IntoIter","TryFromSliceError","advance_back_by","advance_by","as_mut_slice","as_slice","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","description","drop","empty","fmt","fmt","fmt","fold","from","from","from","from_fn","from_mut","from_ref","into","into","into_iter","is_empty","last","len","new","new_unchecked","next","next_back","provide","rfold","size_hint","to_owned","to_owned","to_string","try_from","try_from","try_from_fn","try_into","try_into","type_id","type_id","Eq","Eq","Equal","Greater","Less","Ord","Ord","Ordering","PartialEq","PartialEq","PartialOrd","PartialOrd","Reverse","borrow","borrow_mut","clamp","clone","clone_from","clone_into","cmp","cmp","default","eq","eq","fmt","from","ge","ge","gt","gt","hash","into","le","le","lt","lt","max","max","max_by","max_by_key","min","min","min_by","min_by_key","ne","partial_cmp","partial_cmp","to_owned","try_from","try_into","type_id","Alignment","Arguments","Binary","Center","Debug","Debug","DebugList","DebugMap","DebugSet","DebugStruct","DebugTuple","Display","Error","Formatter","Left","LowerExp","LowerHex","Octal","Pointer","Result","Right","UpperExp","UpperHex","Write","align","alternate","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","debug_list","debug_map","debug_set","debug_struct","debug_tuple","default","description","entries","entries","entries","entry","entry","entry","eq","eq","field","field","fill","finish","finish","finish","finish","finish","finish_non_exhaustive","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","into","into","key","pad","pad_integral","partial_cmp","precision","provide","sign_aware_zero_pad","sign_minus","sign_plus","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","width","write","write_char","write_char","write_fmt","write_fmt","write_fmt","write_str","write_str","write_str","DirBuilder","DirEntry","File","FileTimes","FileType","Metadata","OpenOptions","Permissions","ReadDir","accessed","append","as_fd","as_raw_fd","as_raw_stat","atime","atime_nsec","blksize","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonicalize","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","copy","create","create","create","create_dir","create_dir_all","create_new","create_new","created","ctime","ctime_nsec","custom_flags","default","dev","eq","eq","file_name","file_name_ref","file_type","file_type","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_mode","from_raw_fd","gid","hard_link","hash","ino","ino","into","into","into","into","into","into","into","into","into","into_iter","into_raw_fd","is_block_device","is_char_device","is_dir","is_dir","is_fifo","is_file","is_file","is_read_vectored","is_read_vectored","is_socket","is_symlink","is_symlink","is_terminal","is_write_vectored","is_write_vectored","len","metadata","metadata","metadata","mode","mode","mode","mode","modified","mtime","mtime_nsec","new","new","new","next","nlink","open","open","options","path","permissions","rdev","read","read","read","read","read_at","read_buf","read_buf","read_dir","read_link","read_to_end","read_to_end","read_to_string","read_to_string","read_to_string","read_vectored","read_vectored","readonly","recursive","remove_dir","remove_dir_all","remove_file","rename","seek","seek","set_accessed","set_len","set_mode","set_modified","set_modified","set_permissions","set_permissions","set_readonly","set_times","size","soft_link","st_atime","st_atime_nsec","st_blksize","st_blocks","st_ctime","st_ctime_nsec","st_dev","st_gid","st_ino","st_mode","st_mtime","st_mtime_nsec","st_nlink","st_rdev","st_size","st_uid","symlink_metadata","sync_all","sync_data","to_owned","to_owned","to_owned","to_owned","to_owned","truncate","try_clone","try_exists","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uid","write","write","write","write","write_at","write_vectored","write_vectored","BuildHasher","BuildHasherDefault","Hash","Hash","Hasher","Hasher","SipHasher","borrow","borrow_mut","build_hasher","clone","clone_into","default","finish","finish","fmt","from","hash","hash_one","hash_slice","into","new","new_with_keys","to_owned","try_from","try_into","type_id","write","write","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_length_prefix","write_str","write_str","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","AddrInUse","AddrNotAvailable","AlreadyExists","ArgumentListTooLong","BorrowedBuf","BorrowedCursor","BrokenPipe","BufRead","BufReader","BufWriter","Bytes","Chain","ConnectionAborted","ConnectionRefused","ConnectionReset","CrossesDevices","Current","Cursor","Deadlock","DirectoryNotEmpty","Empty","End","Error","ErrorKind","ExecutableFileBusy","FileTooLarge","FilesystemLoop","FilesystemQuotaExceeded","HostUnreachable","Interrupted","IntoInnerError","InvalidData","InvalidFilename","InvalidInput","IoSlice","IoSliceMut","IsADirectory","IsTerminal","LineWriter","Lines","NetworkDown","NetworkUnreachable","NotADirectory","NotConnected","NotFound","NotSeekable","Other","OutOfMemory","PermissionDenied","Read","ReadOnlyFilesystem","Repeat","ResourceBusy","Result","Seek","SeekFrom","Sink","Split","StaleNetworkFileHandle","Start","Stderr","StderrLock","Stdin","StdinLock","Stdout","StdoutLock","StorageFull","Take","TimedOut","TooManyLinks","UnexpectedEof","Unsupported","WouldBlock","Write","WriteZero","WriterPanicked","advance","advance","advance","advance_slices","advance_slices","append","as_fd","as_fd","as_fd","as_fd","as_fd","as_fd","as_mut","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer","by_ref","by_ref","bytes","capacity","capacity","capacity","capacity","cause","chain","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","consume","consume","consume","consume","consume","consume","consume","copy","default","default","default","deref","deref","deref_mut","description","description","description","downcast","drop","empty","ensure_init","eq","eq","eq","error","fill_buf","fill_buf","fill_buf","fill_buf","fill_buf","fill_buf","fill_buf","filled","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw_os_error","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","has_data_left","hash","init_len","init_mut","init_ref","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_parts","into_parts","is_empty","is_read_vectored","is_read_vectored","is_read_vectored","is_read_vectored","is_read_vectored","is_read_vectored","is_terminal","is_terminal","is_terminal","is_terminal","is_terminal","is_terminal","is_terminal","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","kind","last_os_error","len","limit","lines","lines","lock","lock","lock","new","new","new","new","new","new","new","next","next","next","other","partial_cmp","position","prelude","provide","provide","provide","raw_os_error","read","read","read","read","read","read","read","read","read","read_buf","read_buf","read_buf","read_buf","read_buf","read_buf","read_buf_exact","read_exact","read_exact","read_exact","read_exact","read_exact","read_line","read_line","read_line","read_to_end","read_to_end","read_to_end","read_to_end","read_to_string","read_to_string","read_to_string","read_to_string","read_to_string","read_until","read_until","read_vectored","read_vectored","read_vectored","read_vectored","read_vectored","read_vectored","read_vectored","reborrow","remaining_slice","repeat","rewind","seek","seek","seek","seek","seek","seek_relative","set_init","set_init","set_limit","set_position","sink","size_hint","source","split","stderr","stdin","stdout","stream_len","stream_len","stream_len","stream_position","stream_position","stream_position","stream_position","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfilled","uninit_mut","with_capacity","with_capacity","with_capacity","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all_vectored","write_all_vectored","write_all_vectored","write_all_vectored","write_all_vectored","write_all_vectored","write_all_vectored","write_all_vectored","write_fmt","write_fmt","write_fmt","write_fmt","write_fmt","write_fmt","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","written","BufRead","Read","Seek","Write","by_ref","by_ref","bytes","chain","consume","fill_buf","flush","has_data_left","is_read_vectored","is_write_vectored","lines","read","read_buf","read_buf_exact","read_exact","read_line","read_to_end","read_to_string","read_until","read_vectored","rewind","seek","split","stream_len","stream_position","take","write","write_all","write_all_vectored","write_fmt","write_vectored","ArrayChunks","ByRefSized","Chain","Cloned","Copied","Cycle","DoubleEndedIterator","Empty","Enumerate","ExactSizeIterator","Extend","Filter","FilterMap","FlatMap","Flatten","FromFn","FromIterator","Fuse","FusedIterator","Inspect","Intersperse","IntersperseWith","IntoIter","IntoIterator","Item","Item","Iterator","Map","MapWhile","Once","OnceWith","Peekable","Product","Repeat","RepeatWith","Rev","Scan","Skip","SkipWhile","Step","StepBy","Successors","Sum","Take","TakeWhile","TrustedLen","TrustedStep","Zip","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","all","any","array_chunks","backward","backward_checked","backward_unchecked","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","chain","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","cmp_by","collect","collect_into","copied","count","count","count","count","count","count","count","count","count","count","count","cycle","default","empty","enumerate","eq","eq_by","extend","extend_one","extend_reserve","filter","filter_map","find","find","find","find","find_map","flat_map","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","for_each","for_each","forward","forward_checked","forward_unchecked","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_fn","from_generator","from_iter","fuse","ge","gt","inspect","intersperse","intersperse_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_remainder","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_partitioned","is_sorted","is_sorted_by","is_sorted_by_key","last","last","last","last","last","last","last","last","le","len","len","len","len","len","len","len","len","len","len","len","len","lt","map","map_while","max","max_by","max_by_key","min","min_by","min_by_key","ne","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_chunk","next_chunk","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","once","once_with","partial_cmp","partial_cmp_by","partition","partition_in_place","peekable","position","product","product","reduce","repeat","repeat_with","rev","rfind","rfind","rfind","rfind","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rposition","scan","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","skip","skip_while","step_by","steps_between","successors","sum","sum","take","take_while","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_collect","try_find","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_for_each","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reduce","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unzip","zip","zip","ALIGNMENT","Assume","BikeshedIntrinsicFrom","Discriminant","LIFETIMES","ManuallyDrop","MaybeUninit","NOTHING","SAFETY","VALIDITY","add","align_of","align_of_val","align_of_val_raw","alignment","and","array_assume_init","as_bytes","as_bytes_mut","as_mut_ptr","as_ptr","assume_init","assume_init_drop","assume_init_mut","assume_init_read","assume_init_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","but_not","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","copy","default","deref","deref_mut","discriminant","drop","drop","eq","eq","eq","fmt","fmt","fmt","fmt","forget","forget_unsized","from","from","from","from","hash","hash","into","into","into","into","into_inner","lifetimes","min_align_of","min_align_of_val","needs_drop","new","new","partial_cmp","replace","safety","size_of","size_of_val","size_of_val_raw","slice_as_bytes","slice_as_bytes_mut","slice_as_mut_ptr","slice_as_ptr","slice_assume_init_mut","slice_assume_init_ref","sub","swap","take","take","to_owned","to_owned","to_owned","to_owned","transmute","transmute_copy","transpose","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uninit","uninit_array","uninitialized","validity","variant_count","write","write_slice","write_slice_cloned","zeroed","zeroed","Add","AddAssign","BREAK","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Bound","Break","CONTINUE","CoerceUnsized","Complete","Continue","ControlFlow","Deref","DerefMut","DispatchFromDyn","Div","DivAssign","Drop","Excluded","Fn","FnMut","FnOnce","FromResidual","Generator","GeneratorState","Included","Index","IndexMut","Mul","MulAssign","Neg","Not","OneSidedRange","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Range","RangeBounds","RangeFrom","RangeFull","RangeInclusive","RangeTo","RangeToInclusive","Rem","RemAssign","Residual","Residual","Return","Shl","ShlAssign","Shr","ShrAssign","Sub","SubAssign","Target","Try","TryType","Unbounded","Yeet","Yield","Yielded","add","add_assign","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","branch","break_value","call","call_mut","call_once","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains","contains","contains","continue_value","default","deref","deref_mut","div","div_assign","drop","end","end","end","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_output","from_output","from_residual","from_residual","get","get","get","get","get","get","get","get","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","hash","hash","hash","hash","hash","hash","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into_iter","is_break","is_continue","map_break","map_continue","mul","mul_assign","neg","next","not","nth","partial_cmp","rem","rem_assign","resume","shl","shl_assign","shr","shr_assign","size_hint","start","start","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","sub","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ArrayChunks","ArrayChunksMut","ArrayWindows","Chunks","ChunksExact","ChunksExactMut","ChunksMut","Concat","EscapeAscii","GroupBy","GroupByMut","Iter","IterMut","Join","Output","Output","Output","RChunks","RChunksExact","RChunksExactMut","RChunksMut","RSplit","RSplitMut","RSplitN","RSplitNMut","SliceIndex","Split","SplitInclusive","SplitInclusiveMut","SplitMut","SplitN","SplitNMut","Windows","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","concat","count","count","count","count","count","count","count","count","count","count","count","count","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","from_mut_ptr_range","from_ptr_range","from_raw_parts","from_raw_parts_mut","from_ref","get","get_mut","get_unchecked","get_unchecked_mut","index","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_remainder","into_remainder","into_remainder","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","join","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","range","remainder","remainder","remainder","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Bytes","CharIndices","Chars","EncodeUtf16","Err","EscapeDebug","EscapeDefault","EscapeUnicode","FromStr","Lines","LinesAny","MatchIndices","Matches","ParseBoolError","RMatchIndices","RMatches","RSplit","RSplitN","RSplitTerminator","Split","SplitAsciiWhitespace","SplitInclusive","SplitN","SplitTerminator","SplitWhitespace","Utf8Chunk","Utf8Chunks","Utf8Error","all","any","as_str","as_str","as_str","as_str","as_str","as_str","as_str","as_str","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","description","description","eq","eq","eq","error_len","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_boxed_utf8_unchecked","from_str","from_utf8","from_utf8_mut","from_utf8_unchecked","from_utf8_unchecked_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","invalid","is_empty","last","last","last","last","last","len","new","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth_back","offset","pattern","position","provide","provide","rfind","rposition","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_fold","try_fold","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","valid","valid_up_to","CharArrayRefSearcher","CharArraySearcher","CharPredicateSearcher","CharSearcher","CharSliceSearcher","Done","DoubleEndedSearcher","Match","Pattern","Reject","ReverseSearcher","SearchStep","Searcher","Searcher","StrSearcher","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","haystack","haystack","haystack","haystack","haystack","haystack","haystack","into","into","into","into","into","into","into","into_searcher","is_contained_in","is_prefix_of","is_suffix_of","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_match","next_match","next_match","next_match","next_match","next_match","next_match","next_match_back","next_match_back","next_match_back","next_match_back","next_match_back","next_match_back","next_match_back","next_reject","next_reject","next_reject","next_reject","next_reject","next_reject_back","next_reject_back","next_reject_back","next_reject_back","next_reject_back","strip_prefix_of","strip_suffix_of","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","AccessError","Builder","JoinHandle","LocalKey","Result","Scope","ScopedJoinHandle","Thread","ThreadId","__FastLocalKeyInner","as_u64","available_parallelism","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","current","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","get","hash","id","into","into","into","into","into","into","into","into","is_finished","join","name","name","new","new","panicking","park","park_timeout","park_timeout_ms","provide","register_dtor","replace","replace","scope","set","set","sleep","sleep_ms","spawn","spawn","spawn","spawn_scoped","spawn_unchecked","stack_size","take","take","thread","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_with","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpark","with","with_borrow","with_borrow_mut","yield_now","Duration","Instant","MAX","MICROSECOND","MILLISECOND","NANOSECOND","SECOND","SystemTime","SystemTimeError","TryFromFloatSecsError","UNIX_EPOCH","UNIX_EPOCH","ZERO","add","add","add","add_assign","add_assign","add_assign","as_micros","as_millis","as_nanos","as_secs","as_secs_f32","as_secs_f64","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add","checked_add","checked_div","checked_duration_since","checked_mul","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","description","div","div_assign","div_duration_f32","div_duration_f64","div_f32","div_f64","duration","duration_since","duration_since","elapsed","elapsed","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_micros","from_millis","from_nanos","from_secs","from_secs_f32","from_secs_f64","hash","hash","hash","into","into","into","into","into","is_zero","mul","mul_assign","mul_f32","mul_f64","new","now","now","partial_cmp","partial_cmp","partial_cmp","provide","provide","saturating_add","saturating_duration_since","saturating_mul","saturating_sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","subsec_micros","subsec_millis","subsec_nanos","sum","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from_secs_f32","try_from_secs_f64","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["aoc_misc","","","","","","","","","","","aoc_misc::preludeaoc_misc::prelude::ArrayCombinations","","","aoc_misc::prelude::CartesianProduct","","","","","","aoc_misc::prelude::CircularArrayWindows","","","","","","","aoc_misc::prelude::FlattenOk","","","aoc_misc::prelude::MergeConsecutive","","","","","aoc_misc::prelude::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_misc::prelude::cmp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_misc::prelude::fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_misc::prelude::fsaoc_misc::prelude::hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_misc::prelude::ioaoc_misc::prelude::io::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_misc::prelude::iteraoc_misc::prelude::mem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_misc::prelude::opsaoc_misc::prelude::sliceaoc_misc::prelude::straoc_misc::prelude::str::pattern","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_misc::prelude::thread","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_misc::prelude::time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","Has the effects of both <code>Acquire</code> and <code>Release</code> together: For …","When coupled with a load, if the loaded value was written …","The addition operator <code>+</code>.","The addition assignment operator <code>+=</code>.","A thread-safe reference-counting pointer. ‘Arc’ stands …","","","","Atomic memory orderings","An integer type which can be safely shared between threads.","A view into a single entry in a map, which may either be …","An owning iterator over the entries of a <code>BTreeMap</code>.","An iterator over the entries of a <code>BTreeMap</code>.","A mutable iterator over the entries of a <code>BTreeMap</code>.","An iterator over the keys of a <code>BTreeMap</code>.","An ordered map based on a B-Tree.","An ordered set based on a B-Tree.","An iterator over the values of a <code>BTreeMap</code>.","A priority queue implemented with a binary heap.","The bitwise AND operator <code>&amp;</code>.","The bitwise AND assignment operator <code>&amp;=</code>.","The bitwise OR operator <code>|</code>.","The bitwise OR assignment operator <code>|=</code>.","A trait for borrowing data.","A trait for mutably borrowing data.","Borrowed data.","An endpoint of a range of keys.","A trait for creating instances of <code>Hasher</code>.","Used to create a default <code>BuildHasher</code> instance for types …","","A mutable memory location.","An iterator over the <code>char</code>s of a string slice.","","A Condition Variable","A clone-on-write smart pointer.","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","","The default <code>Hasher</code> used by <code>RandomState</code>.","Used for immutable dereferencing operations, like <code>*v</code>.","Used for mutable dereferencing operations, like in <code>*v = 1;</code>.","Format trait for an empty format, <code>{}</code>.","The division operator <code>/</code>.","An ordering where a compared value is equal to another.","The associated error which can be returned from parsing.","<code>Error</code> is a trait representing the basic expectations for …","","An exclusive bound.","","","","","","","Parse a value from a string","An iterator that always continues to yield <code>None</code> when …","","","An ordering where a compared value is greater than another.","A hashable type.","Derive macro generating an impl of the trait <code>Hash</code>.","A <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …","A view into a single entry in a map, which may either be …","A <code>HashSet</code> using <code>RandomState</code> to hash the items. (Requires …","A trait for hashing an arbitrary stream of bytes.","Type of the hasher that will be created.","","An inclusive bound.","Used for indexing operations (<code>container[index]</code>) in …","Used for indexing operations (<code>container[index]</code>) in mutable …","The error type for errors that can never happen.","","","","An owned permission to join on a thread (block on its …","An ordering where a compared value is less than another.","","","","","The multiplication operator <code>*</code>.","","A mutual exclusion primitive useful for protecting shared …","The unary negation operator <code>-</code>.","","An occupied entry.","An occupied entry.","","An <code>Ordering</code> is the result of a comparison between two …","A type that can represent owned, mutable platform-native …","The resulting type after applying the <code>+</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>*</code> operator.","The resulting type after applying the <code>/</code> operator.","The resulting type after applying the <code>%</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>&amp;</code> operator.","The resulting type after applying the <code>|</code> operator.","The resulting type after applying the <code>&lt;&lt;</code> operator.","The resulting type after applying the <code>&gt;&gt;</code> operator.","The returned type after indexing.","Owned data.","An error which can be returned when parsing an integer.","A slice of a path (akin to <code>str</code>).","An iterator with a <code>peek()</code> that returns an optional …","Zero-sized type used to mark things that “act like” …","","","","","","","<code>RandomState</code> is the default state for <code>HashMap</code> types.","A (half-open) range bounded inclusively below and …","<code>RangeBounds</code> is implemented by Rust’s built-in range …","A range bounded inclusively below and above (<code>start..=end</code>).","A single-threaded reference-counting pointer. ‘Rc’ …","<code>Weak</code> is a version of <code>Rc</code> that holds a non-owning reference …","A mutable memory location with dynamically checked borrow …","No ordering constraints, only atomic operations.","When coupled with a store, all previous operations become …","The remainder operator <code>%</code>.","","","Like <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …","The left shift operator <code>&lt;&lt;</code>. Note that because this trait …","The left shift assignment operator <code>&lt;&lt;=</code>.","The right shift operator <code>&gt;&gt;</code>. Note that because this trait …","The right shift assignment operator <code>&gt;&gt;=</code>.","Immutable slice iterator","Mutable slice iterator.","","","","The subtraction operator <code>-</code>.","The resulting type after dereferencing.","","","An infinite endpoint. Indicates that there is no bound in …","A vacant entry.","A vacant entry.","A double-ended queue implemented with a growable ring …","An iterator that moves out of a vector.","","","","Performs the <code>+</code> operation.","","","Performs the <code>+=</code> operation.","","","","","","","","","","","","","","","","","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Produces an iterator over <code>Path</code> and its ancestors.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","","","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Moves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …","Moves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Utilities for the array primitive type.","","","","","","","","","","","","Returns a <code>&amp;[Cell&lt;T&gt;; N]</code> from a <code>&amp;Cell&lt;[T; N]&gt;</code>","","Converts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.","Yields a mutable reference to the underlying <code>OsStr</code> slice.","Returns a mutable pointer to the underlying integer.","Returns the remaining items of this iterator as a mutable …","Views the underlying data as a mutable subslice of the …","Returns a pair of slices which contain, in order, the …","Converts to an <code>OsStr</code> slice.","Yields the underlying <code>OsStr</code> slice.","","Returns a raw pointer to the underlying data in this cell.","Returns a raw pointer to the underlying data in this cell.","Provides a raw pointer to the data.","Returns a raw pointer to the object <code>T</code> pointed to by this …","Provides a raw pointer to the data.","","","","","","","","","","","","","Converts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.","Returns a slice of all values in the underlying vector, in …","Returns the remaining items of this iterator as a slice.","Views the underlying data as a subslice of the original …","Views the underlying data as a subslice of the original …","Returns a <code>&amp;[Cell&lt;T&gt;]</code> from a <code>&amp;Cell&lt;[T]&gt;</code>","Returns a pair of slices which contain, in order, the …","Views the underlying data as a subslice of the original …","","","","","","","","","Converts to <code>Rc&lt;T&gt;</code>.","Converts to <code>Rc&lt;[T]&gt;</code>.","Converts to <code>Arc&lt;[T]&gt;</code>.","Converts to <code>Arc&lt;T&gt;</code>.","Provides a reference to the back element, or <code>None</code> if the …","Provides a mutable reference to the back element, or <code>None</code> …","Binary searches this <code>VecDeque</code> for a given element. This …","Binary searches this <code>VecDeque</code> with a comparator function. …","Binary searches this <code>VecDeque</code> with a key extraction …","Performs the <code>&amp;</code> operation.","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Performs the <code>&amp;=</code> operation.","Performs the <code>|</code> operation.","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>AHashSet&lt;T, S&gt;</code>.","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>.","Performs the <code>|=</code> operation.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","Immutably borrows from an owned value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Immutably borrows the wrapped value.","","","","","","","","","","","","","","","","","","","","","","","","","","Mutably borrows from an owned value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutably borrows the wrapped value.","","","","","","","","","","","","","","","","","","","","","","","Creates a new hasher.","","","Returns the canonical, absolute form of the path with all …","Returns the number of elements the binary heap can hold …","Returns the capacity this <code>OsString</code> can hold without …","Returns the number of elements the deque can hold without …","","","","","","","Drops all items from the binary heap.","Clears the map, removing all elements.","Truncates the <code>OsString</code> to zero length.","Clears the set, removing all elements.","Clears the deque, removing all values.","Clear the poisoned state from a mutex","","","","","","","","","","","","","","Panics","Makes a clone of the <code>Rc</code> pointer.","Makes a clone of the <code>Weak</code> pointer that points to the same …","Makes a clone of the <code>Arc</code> pointer.","","","","","","","","","","","","","","","","","","","","Panics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Map a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of …","Utilities for comparing and ordering values.","","","","","","","","Panics","Comparison for two <code>Rc</code>s.","Comparison for two <code>Arc</code>s.","","","","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Produces an iterator over the <code>Component</code>s of the path.","Returns <code>true</code> if the set contains an element equal to the …","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if the deque contains an element equal to the …","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if the map contains a value for the specified …","","","","","","Decrements the strong reference count on the <code>Rc&lt;T&gt;</code> …","Decrements the strong reference count on the <code>Arc&lt;T&gt;</code> …","","","","","Creates an owned Cow&lt;’a, B&gt; with the default value for …","Creates an empty <code>BinaryHeap&lt;T&gt;</code>.","","Creates an empty <code>AHashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","Creates an empty <code>BTreeMap</code>.","Constructs an empty <code>OsString</code>.","Creates an empty <code>BTreeSet</code>.","","Creates an empty deque.","Creates a <code>Cell&lt;T&gt;</code>, with the <code>Default</code> value for T.","Creates a <code>RefCell&lt;T&gt;</code>, with the <code>Default</code> value for T.","Creates a new <code>Rc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.","Constructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …","Creates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.","Creates a <code>Condvar</code> which is ready to be waited on and …","Creates a <code>Mutex&lt;T&gt;</code>, with the <code>Default</code> value for T.","Constructs a new <code>RandomState</code>.","Creates a new <code>DefaultHasher</code> using <code>new</code>. See its …","","","","Dereferences the value.","","","","","","","","Mutably dereferences the value.","","","","","","","","Visits the elements representing the difference, i.e., the …","Returns an object that implements <code>Display</code> for safely …","Performs the <code>/</code> operation.","Attempts to downcast the box to a concrete type.","Attempts to downcast the box to a concrete type.","Attempts to downcast the box to a concrete type.","Attempt to downcast the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.","Attempt to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Returns some mutable reference to the inner value if it is …","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Returns some reference to the inner value if it is of type …","Downcasts the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.","Downcasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …","Creates a new <code>Weak</code> pointer to this allocation.","Creates a new <code>Weak</code> pointer to this allocation.","Clears the binary heap, returning an iterator over the …","Removes the specified range from the deque in bulk, …","Creates an iterator that visits all elements (key-value …","Creates an iterator that visits all elements in ascending …","Clears the binary heap, returning an iterator over the …","","","","Drops the <code>Rc</code>.","Drops the <code>Weak</code> pointer.","Drops the <code>Arc</code>.","","","Returns the upper bound of the range (inclusive).","The upper bound of the range (exclusive).","End index bound.","","","","","Determines whether <code>child</code> is a suffix of <code>self</code>.","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Panics","Equality for two <code>Rc</code>s.","Equality for two <code>Arc</code>s.","","","","","","","","","","","","","","","","","","","","","","","Returns <code>true</code> if the path points at an existing entity.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts the extension (without the leading dot) of …","Adds to the current value, returning the previous value.","Bitwise “and” with the current value.","Maximum with the current value.","Minimum with the current value.","Bitwise “nand” with the current value.","Bitwise “or” with the current value.","Subtracts from the current value, returning the previous …","Fetches the value, and applies a function to it that …","Bitwise “xor” with the current value.","Returns the final component of the <code>Path</code>, if there is one.","Extracts the prefix of <code>self.file_name</code>.","Extracts the stem (non-extension) portion of <code>self.file_name</code>…","","","","","Returns the hash value for the values written so far.","","Returns a reference to the first element in the set, if …","Returns the first entry in the map for in-place …","Returns the first key-value pair in the map. The key in …","","","","Utilities for formatting and printing <code>String</code>s.","Formats the value using the given formatter.","Formats the value using the given formatter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts the string reference into a <code>Cow::Borrowed</code>.","Converts the string reference into a <code>Cow::Borrowed</code>.","Returns the argument unchanged.","Creates a clone-on-write pointer from a reference to …","Creates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of …","Moves the string into a <code>Cow::Owned</code>.","Creates a clone-on-write pointer from a reference to <code>Path</code>.","Converts a <code>String</code> into an <code>Owned</code> variant. No heap …","Converts a string slice into a <code>Borrowed</code> variant. No heap …","Converts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or …","Converts a <code>String</code> reference into a <code>Borrowed</code> variant. No …","Creates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.","Converts a <code>CString</code> into an owned <code>Cow</code> without copying or …","Converts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or …","Creates a clone-on-write pointer from an owned instance of …","Creates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.","","Returns the argument unchanged.","Converts a <code>Vec&lt;T&gt;</code> into a <code>BinaryHeap&lt;T&gt;</code>.","Returns the argument unchanged.","Examples","Returns the argument unchanged.","","","Examples","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;(K, V)&gt;</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a Box&lt;OsStr&gt; into an <code>OsString</code> without copying or …","Returns the argument unchanged.","Converts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into an <code>OsString</code>, by copying the …","Converts a <code>String</code> into an <code>OsString</code>.","Converts a <code>PathBuf</code> into an <code>OsString</code>","Copies any value implementing AsRef&lt;OsStr&gt; into a newly …","Returns the argument unchanged.","Converts a <code>[T; N]</code> into a <code>BTreeSet&lt;T&gt;</code>.","Returns the argument unchanged.","Turn a <code>Vec&lt;T&gt;</code> into a <code>VecDeque&lt;T&gt;</code>.","Converts a <code>[T; N]</code> into a <code>VecDeque&lt;T&gt;</code>.","Returns the argument unchanged.","","Returns the argument unchanged.","Creates a new <code>Cell&lt;T&gt;</code> containing the given value.","","Returns the argument unchanged.","Creates a new <code>RefCell&lt;T&gt;</code> containing the given value.","Copies the string into a newly allocated Rc&lt;OsStr&gt;.","Converts a generic type <code>T</code> into an <code>Rc&lt;T&gt;</code>","Move a boxed object to a new, reference counted, …","Converts a <code>CString</code> into an Rc&lt;CStr&gt; by moving the <code>CString</code> …","Allocate a reference-counted slice and move <code>v</code>’s items …","Create a reference-counted pointer from a clone-on-write …","Returns the argument unchanged.","Converts an <code>OsString</code> into an Rc&lt;OsStr&gt; by moving the …","Converts a <code>PathBuf</code> into an Rc&lt;Path&gt; by moving the <code>PathBuf</code> …","Allocate a reference-counted slice and fill it by cloning <code>v</code>…","Converts a <code>Path</code> into an <code>Rc</code> by copying the <code>Path</code> data into a …","Allocate a reference-counted string slice and copy <code>v</code> into …","Converts a <code>&amp;CStr</code> into a <code>Rc&lt;CStr&gt;</code>, by copying the contents …","Allocate a reference-counted string slice and copy <code>v</code> into …","","Converts a reference-counted string slice into a byte …","Returns the argument unchanged.","Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.","Converts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …","Returns the argument unchanged.","Allocate a reference-counted slice and move <code>v</code>’s items …","Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.","Create an atomically reference-counted pointer from a …","Converts a <code>T</code> into an <code>Arc&lt;T&gt;</code>","","Converts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …","Converts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …","Move a boxed object to a new, reference-counted allocation.","Converts an atomically reference-counted string slice into …","Converts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …","Allocate a reference-counted slice and fill it by cloning <code>v</code>…","Converts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …","Copies the string into a newly allocated Arc&lt;OsStr&gt;.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a new mutex in an unlocked state ready for use. …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>usize</code> into an <code>AtomicUsize</code>.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Takes each element in the <code>Iterator</code> and collects it into an …","Takes each element in the <code>Iterator</code> and collects it into an …","Returns a <code>&amp;Cell&lt;T&gt;</code> from a <code>&amp;mut T</code>","Get atomic access to a <code>&amp;mut usize</code>.","Get atomic access to a <code>&amp;mut [usize]</code> slice.","Constructs an <code>Rc&lt;T&gt;</code> from a raw pointer.","Converts a raw pointer previously created by <code>into_raw</code> back …","Constructs an <code>Arc&lt;T&gt;</code> from a raw pointer.","Parses a string <code>s</code> to return a value of this type.","","","Provides a reference to the front element, or <code>None</code> if the …","Provides a mutable reference to the front element, or <code>None</code> …","Filesystem manipulation operations.","","","Panics","‘Greater than or equal to’ comparison for two <code>Rc</code>s.","‘Greater than or equal to’ comparison for two <code>Arc</code>s.","Returns a reference to the value corresponding to the key.","Returns a reference to the value corresponding to the key.","Returns a reference to the element in the set, if any, …","Provides a reference to the element at the given index.","Returns a copy of the contained value.","","","","","Returns the key-value pair corresponding to the supplied …","Returns the key-value pair corresponding to the supplied …","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the value corresponding to …","Provides a mutable reference to the element at the given …","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference into the given <code>Rc</code>, if there are","Returns a mutable reference into the given <code>Arc</code>, if there …","Returns a mutable reference to the underlying data.","","","","","Returns a mutable reference to the underlying integer.","Get non-atomic access to a <code>&amp;mut [AtomicUsize]</code> slice","Returns a mutable reference into the given <code>Rc</code>, without any …","Returns a mutable reference into the given <code>Arc</code>, without …","","","","","","","","","","","Panics","Greater-than comparison for two <code>Rc</code>s.","Greater-than comparison for two <code>Arc</code>s.","Returns <code>true</code> if the <code>Path</code> has a root.","Generic hashing support.","Feeds this value into the given <code>Hasher</code>.","","","","","","","","","","","","","","","","Calculates the hash of a single value.","Feeds a slice of this type into the given <code>Hasher</code>.","Increments the strong reference count on the <code>Rc&lt;T&gt;</code> …","Increments the strong reference count on the <code>Arc&lt;T&gt;</code> …","Performs the indexing (<code>container[index]</code>) operation.","","Returns a reference to the value corresponding to the …","Returns a reference to the value corresponding to the …","","","","","","","Performs the mutable indexing (<code>container[index]</code>) operation.","","","","","","","","Inserts a key-value pair into the map.","Inserts a key-value pair into the map.","Adds a value to the set.","Inserts an element at <code>index</code> within the deque, shifting all …","Sets the value of the entry, and returns an <code>OccupiedEntry</code>.","Visits the elements representing the intersection, i.e., …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this <code>OsString</code> into a boxed <code>OsStr</code>.","Unwraps the value.","Consumes the <code>RefCell</code>, returning the wrapped value.","Consumes this mutex, returning the underlying data.","Destructures the <code>RangeInclusive</code> into (lower bound, upper …","Consumes the atomic and returns the contained value.","","","","","","","","","","","","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","","","","","","","","Gets an iterator for moving out the <code>BTreeSet</code>’s contents.","","Consumes the deque into a front-to-back iterator yielding …","","","","","","","","","","Returns an iterator which retrieves elements in heap order.","Creates a consuming iterator visiting all the keys, in …","Extracts the owned data.","Converts a <code>Box&lt;Path&gt;</code> into a <code>PathBuf</code> without copying or …","","Consumes the <code>Rc</code>, returning the wrapped pointer.","Consumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.","Consumes the <code>Arc</code>, returning the wrapped pointer.","Views the underlying data as a subslice of the original …","Consumes the <code>BinaryHeap</code> and returns a vector in sorted …","Converts the <code>OsString</code> into a <code>String</code> if it contains valid …","Creates a consuming iterator visiting all the values, in …","Consumes the <code>BinaryHeap</code> and returns the underlying vector …","","Traits, helpers, and type definitions for core I/O …","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Returns <code>true</code> if the inner type is the same as <code>T</code>.","Returns <code>true</code> if the <code>Path</code> is absolute, i.e., if it is …","Returns true if the data is borrowed, i.e. if <code>to_mut</code> would …","Returns <code>true</code> if the path exists on disk and is pointing at …","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","","Checks if the binary heap is empty.","Returns <code>true</code> if the map contains no elements.","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the deque is empty.","","","","Returns <code>true</code> if the range contains no items.","Returns <code>true</code> if the range contains no items.","Returns <code>true</code> if the ordering is the <code>Equal</code> variant.","Returns <code>true</code> if the path exists on disk and is pointing at …","Checks if the associated thread has finished running its …","Returns <code>true</code> if the ordering is either the <code>Greater</code> or <code>Equal</code>…","Returns <code>true</code> if the ordering is the <code>Greater</code> variant.","Returns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …","Returns <code>true</code> if the ordering is the <code>Less</code> variant.","Returns <code>true</code> if the ordering is not the <code>Equal</code> variant.","Returns true if the data is owned, i.e. if <code>to_mut</code> would be …","Determines whether the mutex is poisoned.","Returns <code>true</code> if the <code>Path</code> is relative, i.e., not absolute.","","","","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","Returns <code>true</code> if the path exists on disk and is pointing at …","Composable external iteration.","Returns an iterator visiting all values in the underlying …","Gets an iterator over the entries of the map, sorted by …","Gets an iterator that visits the elements in the <code>BTreeSet</code> …","Returns a front-to-back iterator.","Produces an iterator over the path’s components viewed …","Gets a mutable iterator over the entries of the map, …","Returns a front-to-back iterator that returns mutable …","Waits for the associated thread to finish.","Creates an owned <code>PathBuf</code> with <code>path</code> adjoined to <code>self</code>.","Returns a reference to this entry’s key.","Returns a reference to this entry’s key.","Gets an iterator over the keys of the map, in sorted order.","Outputs the detailed cause of parsing an integer failing.","","","","","Returns a reference to the last element in the set, if any.","","","","","","","Returns the last entry in the map for in-place …","Returns the last key-value pair in the map. The key in …","","","Panics","‘Less than or equal to’ comparison for two <code>Rc</code>s.","‘Less than or equal to’ comparison for two <code>Arc</code>s.","","Returns the length of the binary heap.","Returns the number of elements in the map.","","","","","","Returns the number of elements in the set.","Returns the number of elements in the deque.","","","Loads a value from the atomic integer.","Acquires a mutex, blocking the current thread until it is …","","","Panics","Less-than comparison for two <code>Rc</code>s.","Less-than comparison for two <code>Arc</code>s.","Rearranges the internal storage of this deque so it is one …","Makes a mutable reference into the given <code>Rc</code>.","Makes a mutable reference into the given <code>Arc</code>.","Maps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to …","","","","","","","","","","","Basic functions for dealing with memory.","","","Queries the file system to get information about a file, …","","","","","","","","","","Performs the <code>*</code> operation.","","","","","","","","","Inequality for two <code>Rc</code>s.","Inequality for two <code>Arc</code>s.","Performs the unary <code>-</code> operation.","","Creates an empty <code>BinaryHeap</code> as a max-heap.","","","Makes a new, empty <code>BTreeMap</code>.","Constructs a new empty <code>OsString</code>.","Makes a new, empty <code>BTreeSet</code>.","Creates an empty deque.","Creates a new <code>Cell</code> containing the given value.","Creates a new <code>RefCell</code> containing <code>value</code>.","Constructs a new <code>Rc&lt;T&gt;</code>.","Constructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …","Constructs a new <code>Arc&lt;T&gt;</code>.","Directly wraps a string slice as a <code>Path</code> slice.","Creates a new condition variable which is ready to be …","Creates a new mutex in an unlocked state ready for use.","Constructs a new <code>RandomState</code> that is initialized with …","Creates a new <code>DefaultHasher</code>.","Creates a new inclusive range. Equivalent to writing …","Creates a new atomic integer.","Constructs a new <code>Rc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …","Constructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …","Makes a new empty BTreeMap with a reasonable choice for B.","Makes a new <code>BTreeSet</code> with a reasonable choice of B.","Creates an empty deque.","Constructs a new <code>Rc</code> with uninitialized contents.","Constructs a new <code>Arc</code> with uninitialized contents.","Constructs a new reference-counted slice with …","Constructs a new atomically reference-counted slice with …","Constructs a new <code>Rc</code> with uninitialized contents, with the …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new reference-counted slice with …","Constructs a new atomically reference-counted slice with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume and return the next value of this iterator if a …","Consume and return the next item if it is equal to <code>expected</code>…","Wakes up all blocked threads on this condvar.","Wakes up one blocked thread on this condvar.","","","","","","","","","","","","","","","Overloadable operators.","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Ensures a value is in the entry by inserting, if empty, …","Returns the <code>Path</code> without its final component, if there is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Panics","Partial comparison for two <code>Rc</code>s.","Partial comparison for two <code>Arc</code>s.","","","","","","","","","","","","","","","Returns the index of the partition point according to the …","","Returns the greatest item in the binary heap, or <code>None</code> if …","Returns a reference to the next() value without advancing …","Returns a mutable reference to the greatest item in the …","Returns a mutable reference to the next() value without …","Constructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","Constructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","Removes the greatest item from the binary heap and returns …","Removes the last element from the deque and returns it, or …","Removes and returns the first element in the map. The key …","Removes the first element from the set and returns it, if …","Removes the first element and returns it, or <code>None</code> if the …","Removes and returns the last element in the map. The key …","Removes the last element from the set and returns it, if …","","","Provides type based access to context intended for error …","","","","","Returns <code>true</code> if the two <code>Rc</code>s point to the same allocation …","Returns <code>true</code> if the two <code>Weak</code>s point to the same allocation …","Returns <code>true</code> if the two <code>Arc</code>s point to the same allocation …","Pushes an item onto the binary heap.","Extends the string with the given &amp;OsStr slice.","Appends an element to the back of the deque.","Prepends an element to the deque.","Constructs a double-ended iterator over a sub-range of …","Constructs a double-ended iterator over a sub-range of …","Creates an iterator that covers the specified range in the …","Constructs a mutable double-ended iterator over a …","Creates an iterator that covers the specified mutable …","Fill <code>buf</code> with the contents of the “front” slice as …","","Returns an iterator over the entries within a directory.","Reads a symbolic link, returning the file that the link …","Performs the <code>%</code> operation.","Removes a key from the map, returning the value at the key …","Removes a key from the map, returning the value at the key …","If the set contains an element equal to the value, removes …","Removes and returns the element at <code>index</code> from the deque. …","Removes a key from the map, returning the stored key and …","Adds a value to the set, replacing the existing element, …","Replaces the contained value with <code>val</code>, and returns the old …","Replaces the wrapped value with a new one, returning the …","Replaces the wrapped value with a new one computed from <code>f</code>, …","","Request a reference of type <code>T</code> as context about this error.","Request a reference of type <code>T</code> as context about this error.","Request a reference of type <code>T</code> as context about this error.","Request a value of type <code>T</code> as context about this error.","Request a value of type <code>T</code> as context about this error.","Request a value of type <code>T</code> as context about this error.","Reserves capacity for at least <code>additional</code> elements more …","Reserves capacity for at least <code>additional</code> more capacity to …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for at least <code>additional</code> …","Reserves the minimum capacity for at least <code>additional</code> more …","Reserves the minimum capacity for at least <code>additional</code> more …","","Modifies the deque in-place so that <code>len()</code> is equal to …","Modifies the deque in-place so that <code>len()</code> is equal to …","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Reverses the <code>Ordering</code>.","","","Rotates the double-ended queue <code>mid</code> places to the left.","Rotates the double-ended queue <code>k</code> places to the right.","","","Sets the contained value.","Performs the <code>&lt;&lt;</code> operation.","Performs the <code>&lt;&lt;=</code> operation.","Performs the <code>&gt;&gt;</code> operation.","Performs the <code>&gt;&gt;=</code> operation.","Discards capacity with a lower bound.","Shrinks the capacity of the <code>OsString</code> with a lower bound.","Shrinks the capacity of the deque with a lower bound.","Discards as much additional capacity as possible.","Shrinks the capacity of the <code>OsString</code> to match its length.","Shrinks the capacity of the deque as much as possible.","","","","","","","","","","","","","Utilities for the slice primitive type.","","","","","","","","","","","The lower-level source of this error, if any.","","Returns an iterator starting with the current error and …","Splits the collection into two at the given key. Returns …","Splits the collection into two at the value. Returns a new …","Splits the deque into two at the given index.","Returns the lower bound of the range (inclusive).","The lower bound of the range (inclusive).","Start index bound.","","","","","Determines whether <code>base</code> is a prefix of <code>self</code>.","Stores a value into the atomic integer.","Utilities for the <code>str</code> primitive type.","Returns a path that, when joined onto <code>base</code>, yields <code>self</code>.","Gets the number of strong (<code>Rc</code>) pointers to this allocation.","Gets the number of strong (<code>Rc</code>) pointers pointing to this …","Gets the number of strong (<code>Arc</code>) pointers to this …","Performs the <code>-</code> operation.","Returns the difference of <code>self</code> and <code>rhs</code> as a new …","Returns the difference of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>…","Swaps elements at indices <code>i</code> and <code>j</code>.","Swaps the values of two <code>Cell</code>s. Difference with …","Swaps the wrapped value of <code>self</code> with the wrapped value of …","Stores a value into the atomic integer, returning the …","Removes an element from anywhere in the deque and returns …","Removes an element from anywhere in the deque and returns …","Queries the metadata about a file without following …","Visits the elements representing the symmetric difference, …","Removes and returns the element in the set, if any, that …","Takes the value of the cell, leaving <code>Default::default()</code> in …","Takes the wrapped value, leaving <code>Default::default()</code> in its …","Chains two orderings.","Chains the ordering with the given function.","Native threads.","Extracts a handle to the underlying thread.","Temporal quantification.","Acquires a mutable reference to the owned form of the data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a <code>Path</code> to an owned <code>PathBuf</code>.","Yields a <code>&amp;str</code> slice if the <code>Path</code> is valid unicode.","","","","","","","Converts a <code>Path</code> to a <code>Cow&lt;str&gt;</code>.","Shortens the deque, keeping the first <code>len</code> elements and …","","","Immutably borrows the wrapped value, returning an error if …","Mutably borrows the wrapped value, returning an error if …","Immutably borrows the wrapped value, returning an error if …","","","Returns <code>Ok(true)</code> if the path points at an existing entity.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to acquire this lock.","Constructs a new <code>Rc&lt;T&gt;</code>, returning an error if the …","Constructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …","Constructs a new <code>Rc</code> with uninitialized contents, returning …","Constructs a new <code>Arc</code> with uninitialized contents, …","Constructs a new <code>Rc</code> with uninitialized contents, with the …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …","Tries to reserve capacity for at least <code>additional</code> elements …","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for at least …","Tries to reserve the minimum capacity for at least …","Tries to reserve the minimum capacity for at least …","","","Returns the inner value, if the <code>Rc</code> has exactly one strong …","Returns the inner value, if the <code>Arc</code> has exactly one strong …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Undo the effect of leaked guards on the borrow state of …","Visits the elements representing the union, i.e., all the …","Immediately drops the guard, and consequently unlocks the …","If we have the only reference to <code>T</code> then unwrap it. …","If we have the only reference to <code>T</code> then unwrap it. …","Updates the contained value using a function and returns …","Attempts to upgrade the <code>Weak</code> pointer to an <code>Rc</code>, delaying …","Gets an iterator over the values of the map, in order by …","Gets a mutable iterator over the values of the map, in …","Blocks the current thread until this condition variable …","Waits on this condition variable for a notification, …","Waits on this condition variable for a notification, …","Waits on this condition variable for a notification, …","Blocks the current thread until this condition variable …","Gets the number of <code>Weak</code> pointers to this allocation.","Gets the number of <code>Weak</code> pointers pointing to this …","Gets the number of <code>Weak</code> pointers to this allocation.","","","Creates an empty <code>BinaryHeap</code> with at least the specified …","","","Creates a new <code>OsString</code> with at least the given capacity.","Creates an empty deque with space for at least <code>capacity</code> …","","","Creates an empty deque with space for at least <code>capacity</code> …","Creates an owned <code>PathBuf</code> like <code>self</code> but with the given …","Creates an owned <code>PathBuf</code> like <code>self</code> but with the given file …","","","","","","","Writes some data into this <code>Hasher</code>.","","","","Writes a single <code>i128</code> into this hasher.","Writes a single <code>i16</code> into this hasher.","Writes a single <code>i32</code> into this hasher.","Writes a single <code>i64</code> into this hasher.","Writes a single <code>i8</code> into this hasher.","Writes a single <code>isize</code> into this hasher.","Writes a length prefix into this hasher, as part of being …","","","Writes a single <code>str</code> into this hasher.","Writes a single <code>u128</code> into this hasher.","Writes a single <code>u16</code> into this hasher.","Writes a single <code>u32</code> into this hasher.","Writes a single <code>u64</code> into this hasher.","Writes a single <code>u8</code> into this hasher.","Writes a single <code>usize</code> into this hasher.","","","","","","","","","","","","","","","","","","","","","","","","","A by-value array iterator.","The error type returned when a conversion from a slice to …","","","Returns a mutable slice of all elements that have not been …","Returns an immutable slice of all elements that have not …","","","","","","","","","","","","Creates an iterator over <code>T</code> which returns no elements.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Creates an array of type [T; N], where each element <code>T</code> is …","Converts a mutable reference to <code>T</code> into a mutable reference …","Converts a reference to <code>T</code> into a reference to an array of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Creates a new iterator over the given <code>array</code>.","Creates an iterator over the elements in a …","","","","","","","","","","","Creates an array <code>[T; N]</code> where each fallible array element <code>T</code>…","","","","","Trait for equality comparisons which are equivalence …","Derive macro generating an impl of the trait <code>Eq</code>.","An ordering where a compared value is equal to another.","An ordering where a compared value is greater than another.","An ordering where a compared value is less than another.","Trait for types that form a total order.","Derive macro generating an impl of the trait <code>Ord</code>.","An <code>Ordering</code> is the result of a comparison between two …","Trait for equality comparisons which are partial …","Derive macro generating an impl of the trait <code>PartialEq</code>.","Trait for types that form a partial order.","Derive macro generating an impl of the trait <code>PartialOrd</code>.","A helper struct for reverse ordering.","","","Restrict a value to a certain interval.","","","","This method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.","","","This method tests for <code>self</code> and <code>other</code> values to be equal, …","","","Returns the argument unchanged.","This method tests greater than or equal to (for <code>self</code> and …","","This method tests greater than (for <code>self</code> and <code>other</code>) and is …","","","Calls <code>U::from(self)</code>.","This method tests less than or equal to (for <code>self</code> and <code>other</code>…","","This method tests less than (for <code>self</code> and <code>other</code>) and is …","","Compares and returns the maximum of two values.","Compares and returns the maximum of two values.","Returns the maximum of two values with respect to the …","Returns the element that gives the maximum value from the …","Compares and returns the minimum of two values.","Compares and returns the minimum of two values.","Returns the minimum of two values with respect to the …","Returns the element that gives the minimum value from the …","This method tests for <code>!=</code>. The default implementation is …","This method returns an ordering between <code>self</code> and <code>other</code> …","","","","","","Possible alignments returned by <code>Formatter::align</code>","This structure represents a safely precompiled version of …","<code>b</code> formatting.","Indication that contents should be center-aligned.","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","Format trait for an empty format, <code>{}</code>.","The error type which is returned from formatting a message …","Configuration for formatting.","Indication that contents should be left-aligned.","<code>e</code> formatting.","<code>x</code> formatting.","<code>o</code> formatting.","<code>p</code> formatting.","The type returned by formatter methods.","Indication that contents should be right-aligned.","<code>E</code> formatting.","<code>X</code> formatting.","A trait for writing or formatting into Unicode-accepting …","Flag indicating what form of alignment was requested.","Determines if the <code>#</code> flag was specified.","Get the formatted string, if it has no arguments to be …","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>DebugList</code> builder designed to assist with …","Creates a <code>DebugMap</code> builder designed to assist with …","Creates a <code>DebugSet</code> builder designed to assist with …","Creates a <code>DebugStruct</code> builder designed to assist with …","Creates a <code>DebugTuple</code> builder designed to assist with …","","","Adds the contents of an iterator of entries to the set …","Adds the contents of an iterator of entries to the list …","Adds the contents of an iterator of entries to the map …","Adds a new entry to the set output.","Adds a new entry to the list output.","Adds a new entry to the map output.","","","Adds a new field to the generated struct output.","Adds a new field to the generated tuple struct output.","Character used as ‘fill’ whenever there is alignment.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Marks the struct as non-exhaustive, indicating to the …","Flags for formatting","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","","","","","","The <code>format</code> function takes an <code>Arguments</code> struct and returns …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Adds the key part of a new entry to the map output.","This function takes a string slice and emits it to the …","Performs the correct padding for an integer which has …","","Optionally specified precision for numeric types. …","","Determines if the <code>0</code> flag was specified.","Determines if the <code>-</code> flag was specified.","Determines if the <code>+</code> flag was specified.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the value part of a new entry to the map output.","Optionally specified integer width that the output should …","The <code>write</code> function takes an output stream, and an <code>Arguments</code>…","Writes a <code>char</code> into this writer, returning whether the …","","Glue for usage of the <code>write!</code> macro with implementors of …","Writes some formatted information into this instance.","","Writes a string slice into this writer, returning whether …","","Writes some data to the underlying buffer contained within …","A builder used to create directories in various manners.","Entries returned by the <code>ReadDir</code> iterator.","An object providing access to an open file on the …","Representation of the various timestamps on a file.","A structure representing a type of file with accessors for …","Metadata information about a file.","Options and flags which can be used to configure how a …","Representation of the various permissions on a file.","Iterator over the entries in a directory.","Returns the last access time of this metadata.","Sets the option for the append mode.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the canonical, absolute form of a path with all …","","","","","","","","","","","Copies the contents of one file to another. This function …","Opens a file in write-only mode.","Sets the option to create a new file, or open it if it …","Creates the specified directory with the options …","Creates a new, empty directory at the provided path","Recursively create a directory and all of its parent …","Creates a new file in read-write mode; error if the file …","Sets the option to create a new file, failing if it …","Returns the creation time listed in this metadata.","","","","","","","","Returns the bare file name of this directory entry without …","","Returns the file type for the file that this entry points …","Returns the file type for this metadata.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Creates a new hard link on the filesystem.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns <code>true</code> if this metadata is for a directory. The …","Tests whether this file type represents a directory. The …","","Returns <code>true</code> if this metadata is for a regular file. The …","Tests whether this file type represents a regular file. …","","","","Returns <code>true</code> if this metadata is for a symbolic link.","Tests whether this file type represents a symbolic link. …","","","","Returns the size of the file, in bytes, this metadata is …","Given a path, query the file system to get information …","Queries metadata about the underlying file.","Returns the metadata for the file that this entry points …","","","","","Returns the last modification time listed in this metadata.","","","Creates a blank new set of options ready for configuration.","Create a new <code>FileTimes</code> with no times set.","Creates a new set of options with default mode/security …","","","Attempts to open a file in read-only mode.","Opens a file at <code>path</code> with the options specified by <code>self</code>.","Returns a new OpenOptions object.","Returns the full path to the file that this entry …","Returns the permissions of the file this metadata is for.","","Read the entire contents of a file into a bytes vector.","","","Sets the option for read access.","","","","Returns an iterator over the entries within a directory.","Reads a symbolic link, returning the file that the link …","","","Read the entire contents of a file into a string.","","","","","Returns <code>true</code> if these permissions describe a readonly …","Indicates that directories should be created recursively, …","Removes an empty directory.","Removes a directory at this path, after removing all its …","Removes a file from the filesystem.","Rename a file or directory to a new name, replacing the …","","","Set the last access time of a file.","Truncates or extends the underlying file, updating the …","","Changes the modification time of the underlying file.","Set the last modified time of a file.","Changes the permissions found on a file or a directory.","Changes the permissions on the underlying file.","Modifies the readonly flag for this set of permissions. If …","Changes the timestamps of the underlying file.","","Creates a new symbolic link on the filesystem.","","","","","","","","","","","","","","","","","Query the metadata about a file without following symlinks.","Attempts to sync all OS-internal metadata to disk.","This function is similar to <code>sync_all</code>, except that it might …","","","","","","Sets the option for truncating a previous file.","Creates a new <code>File</code> instance that shares the same …","Returns <code>Ok(true)</code> if the path points at an existing entity.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write a slice as the entire contents of a file.","","","Sets the option for write access.","","","","A trait for creating instances of <code>Hasher</code>.","Used to create a default <code>BuildHasher</code> instance for types …","A hashable type.","Derive macro generating an impl of the trait <code>Hash</code>.","A trait for hashing an arbitrary stream of bytes.","Type of the hasher that will be created.","An implementation of SipHash 2-4.","","","Creates a new hasher.","","","","Returns the hash value for the values written so far.","","","Returns the argument unchanged.","Feeds this value into the given <code>Hasher</code>.","Calculates the hash of a single value.","Feeds a slice of this type into the given <code>Hasher</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>SipHasher</code> with the two initial keys set to 0.","Creates a <code>SipHasher</code> that is keyed off the provided keys.","","","","","Writes some data into this <code>Hasher</code>.","","Writes a single <code>i128</code> into this hasher.","Writes a single <code>i16</code> into this hasher.","Writes a single <code>i32</code> into this hasher.","Writes a single <code>i64</code> into this hasher.","Writes a single <code>i8</code> into this hasher.","Writes a single <code>isize</code> into this hasher.","Writes a length prefix into this hasher, as part of being …","Writes a single <code>str</code> into this hasher.","","Writes a single <code>u128</code> into this hasher.","Writes a single <code>u16</code> into this hasher.","Writes a single <code>u32</code> into this hasher.","Writes a single <code>u64</code> into this hasher.","Writes a single <code>u8</code> into this hasher.","Writes a single <code>usize</code> into this hasher.","A socket address could not be bound because the address is …","A nonexistent interface was requested or the requested …","An entity already exists, often a file.","Program argument list too long.","A borrowed byte buffer which is incrementally filled and …","A writeable view of the unfilled portion of a <code>BorrowedBuf</code>.","The operation failed because a pipe was closed.","A <code>BufRead</code> is a type of <code>Read</code>er which has an internal …","The <code>BufReader&lt;R&gt;</code> struct adds buffering to any reader.","Wraps a writer and buffers its output.","An iterator over <code>u8</code> values of a reader.","Adapter to chain together two readers.","The connection was aborted (terminated) by the remote …","The connection was refused by the remote server.","The connection was reset by the remote server.","Cross-device or cross-filesystem (hard) link or rename.","Sets the offset to the current position plus the specified …","A <code>Cursor</code> wraps an in-memory buffer and provides it with a …","Deadlock (avoided).","A non-empty directory was specified where an empty …","A reader which is always at EOF.","Sets the offset to the size of this object plus the …","The error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…","A list specifying general categories of I/O error.","Executable file is busy.","File larger than allowed or supported.","Loop in the filesystem or IO subsystem; often, too many …","Filesystem quota was exceeded.","The remote host is not reachable.","This operation was interrupted.","An error returned by <code>BufWriter::into_inner</code> which combines …","Data not valid for the operation were encountered.","A filename was invalid.","A parameter was incorrect.","A buffer type used with <code>Write::write_vectored</code>.","A buffer type used with <code>Read::read_vectored</code>.","The filesystem object is, unexpectedly, a directory.","Trait to determine if a descriptor/handle refers to a …","Wraps a writer and buffers output to it, flushing whenever …","An iterator over the lines of an instance of <code>BufRead</code>.","The system’s networking is down.","The network containing the remote host is not reachable.","A filesystem object is, unexpectedly, not a directory.","The network operation failed because it was not connected …","An entity was not found, often a file.","Seek on unseekable file.","A custom error that does not fall under any other I/O …","An operation could not be completed, because it failed to …","The operation lacked the necessary privileges to complete.","The <code>Read</code> trait allows for reading bytes from a source.","The filesystem or storage medium is read-only, but a write …","A reader which yields one byte over and over and over and …","Resource is busy.","A specialized <code>Result</code> type for I/O operations.","The <code>Seek</code> trait provides a cursor which can be moved within …","Enumeration of possible methods to seek within an I/O …","A writer which will move data into the void.","An iterator over the contents of an instance of <code>BufRead</code> …","Stale network file handle.","Sets the offset to the provided number of bytes.","A handle to the standard error stream of a process.","A locked reference to the <code>Stderr</code> handle.","A handle to the standard input stream of a process.","A locked reference to the <code>Stdin</code> handle.","A handle to the global standard output stream of the …","A locked reference to the <code>Stdout</code> handle.","The underlying storage (typically, a filesystem) is full.","Reader adapter which limits the bytes read from an …","The I/O operation’s timeout expired, causing it to be …","Too many (hard) links to the same filesystem object.","An error returned when an operation could not be completed …","This operation is unsupported on this platform.","The operation needs to block to complete, but the blocking …","A trait for objects which are byte-oriented sinks.","An error returned when an operation could not be completed …","Error returned for the buffered data from …","Advance the internal cursor of the slice.","Advance the cursor by asserting that <code>n</code> bytes have been …","Advance the internal cursor of the slice.","Advance a slice of slices.","Advance a slice of slices.","Appends data to the cursor, advancing position within its …","","","","","","","Returns a mutable reference to the whole cursor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the internally buffered data.","Returns a reference to the internally buffered data.","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Returns the number of bytes the internal buffer can hold …","Returns the number of bytes the internal buffer can hold …","Returns the total capacity of the buffer.","Returns the available space in the cursor.","","Creates an adapter which will chain this stream with …","Clears the buffer, resetting the filled region to empty.","","","","","","","","","","","","","","","Tells this buffer that <code>amt</code> bytes have been consumed from …","","","","","","","Copies the entire contents of a reader into a writer.","","","","","","","","","","Attempt to downgrade the inner error to <code>E</code> if any.","","Constructs a new handle to an empty reader.","Initializes all bytes in the cursor.","","","","Returns the error which caused the call to …","Returns the contents of the internal buffer, filling it …","","","","","","","Returns a shared reference to the filled portion of the …","Flush this output stream, ensuring that all intermediately …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Shows a human-readable description of the <code>ErrorKind</code>.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Converts a [<code>alloc::ffi::NulError</code>] into a <code>Error</code>.","Returns the argument unchanged.","Converts an <code>ErrorKind</code> into an <code>Error</code>.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new instance of an <code>Error</code> from a particular OS …","Gets a mutable reference to the underlying reader.","Gets a mutable reference to the underlying writer.","Gets a mutable reference to the underlying writer.","Returns a mutable reference to the inner error wrapped by …","Gets a mutable reference to the underlying value in this …","Gets mutable references to the underlying readers in this …","Gets a mutable reference to the underlying reader.","Gets a reference to the underlying reader.","Gets a reference to the underlying writer.","Gets a reference to the underlying writer.","Returns a reference to the inner error wrapped by this …","Gets a reference to the underlying value in this cursor.","Gets references to the underlying readers in this <code>Chain</code>.","Gets a reference to the underlying reader.","Check if the underlying <code>Read</code> has any data left to be read.","","Returns the length of the initialized part of the buffer.","Returns a mutable reference to the initialized portion of …","Returns a shared reference to the initialized portion of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>IntoInnerError</code> and returns the error which …","Unwraps this <code>BufReader&lt;R&gt;</code>, returning the underlying reader.","Unwraps this <code>BufWriter&lt;W&gt;</code>, returning the underlying writer.","Returns the perhaps-unwritten data.  Some of this data may …","Unwraps this <code>LineWriter</code>, returning the underlying writer.","Consumes the <code>Error</code>, returning its inner error (if any).","Returns the buffered writer instance which generated the …","Consumes this cursor, returning the underlying value.","Consumes the <code>Chain</code>, returning the wrapped readers.","Consumes the <code>Take</code>, returning the wrapped reader.","","","","Disassembles this <code>BufWriter&lt;W&gt;</code>, returning the underlying …","Consumes the <code>IntoInnerError</code> and returns the error which …","Returns <code>true</code> if the remaining slice is empty.","","","","","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","","Returns <code>true</code> if the descriptor/handle refers to a …","","","","","","","","","","","","","","","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","","","","","","","","Returns the corresponding <code>ErrorKind</code> for this error.","Returns an error representing the last OS error which …","Returns the length of the filled part of the buffer.","Returns the number of bytes that can be read before this …","Consumes this handle and returns an iterator over input …","Returns an iterator over the lines of this reader.","Locks this handle to the standard input stream, returning …","Locks this handle to the standard output stream, returning …","Locks this handle to the standard error stream, returning …","Creates a new <code>BufReader&lt;R&gt;</code> with a default buffer capacity. …","Creates a new <code>BufWriter&lt;W&gt;</code> with a default buffer capacity. …","Creates a new <code>LineWriter</code>.","Creates a new I/O error from a known kind of error as well …","Creates a new <code>IoSliceMut</code> wrapping a byte slice.","Creates a new cursor wrapping the provided underlying …","Creates a new <code>IoSlice</code> wrapping a byte slice.","","","","Creates a new I/O error from an arbitrary error payload.","","Returns the current position of this cursor.","The I/O Prelude.","","","","Returns the OS error that this error represents (if any).","Pull some bytes from this source into the specified …","","","","","","","","","","","Pull some bytes from this source into the specified buffer.","","","","Read the exact number of bytes required to fill <code>cursor</code>.","","","","Read the exact number of bytes required to fill <code>buf</code>.","","Locks this handle and reads a line of input, appending it …","","Read all bytes until a newline (the <code>0xA</code> byte) is reached, …","","","","Read all bytes until EOF in this source, placing them into …","Read all bytes from a reader into a new <code>String</code>.","","","","Read all bytes until EOF in this source, appending them to …","","Read all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF is …","","","","","Like <code>read</code>, except that it reads into a slice of buffers.","","","Reborrow this cursor by cloning it with a smaller lifetime.","Returns the remaining slice.","Creates an instance of a reader that infinitely repeats …","Rewind to the beginning of a stream.","Seek to an offset, in bytes, in a stream.","Seek to an offset, in bytes, in the underlying reader.","Seek to the offset, in bytes, in the underlying writer.","","","Seeks relative to the current position. If the new …","Asserts that the first <code>n</code> bytes of the buffer are …","Asserts that the first <code>n</code> unfilled bytes of the cursor are …","Sets the number of bytes that can be read before this …","Sets the position of this cursor.","Creates an instance of a writer which will successfully …","","","Returns an iterator over the contents of this reader split …","Constructs a new handle to the standard error of the …","Constructs a new handle to the standard input of the …","Constructs a new handle to the standard output of the …","Returns the length of this stream (in bytes).","","","Returns the current seek position from the start of the …","Returns the current seek position from the start of the …","","","Creates an adapter which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a cursor over the unfilled part of the buffer.","Returns a mutable reference to the uninitialized part of …","Creates a new <code>BufReader&lt;R&gt;</code> with the specified buffer …","Creates a new <code>BufWriter&lt;W&gt;</code> with at least the specified …","Creates a new <code>LineWriter</code> with at least the specified …","Write a buffer into this writer, returning how many bytes …","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to write an entire buffer into this writer.","","","","","","","","Attempts to write multiple buffers into this writer.","","","","","","Writes a formatted string into this writer, returning any …","","","","","","","","","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","Returns the number of bytes written to this cursor since …","A <code>BufRead</code> is a type of <code>Read</code>er which has an internal …","The <code>Read</code> trait allows for reading bytes from a source.","The <code>Seek</code> trait provides a cursor which can be moved within …","A trait for objects which are byte-oriented sinks.","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Creates an adapter which will chain this stream with …","Tells this buffer that <code>amt</code> bytes have been consumed from …","Returns the contents of the internal buffer, filling it …","Flush this output stream, ensuring that all intermediately …","Check if the underlying <code>Read</code> has any data left to be read.","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","Returns an iterator over the lines of this reader.","Pull some bytes from this source into the specified …","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>cursor</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until a newline (the <code>0xA</code> byte) is reached, …","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Read all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF is …","Like <code>read</code>, except that it reads into a slice of buffers.","Rewind to the beginning of a stream.","Seek to an offset, in bytes, in a stream.","Returns an iterator over the contents of this reader split …","Returns the length of this stream (in bytes).","Returns the current seek position from the start of the …","Creates an adapter which will read at most <code>limit</code> bytes …","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","An iterator over <code>N</code> elements of the iterator at a time.","Like <code>Iterator::by_ref</code>, but requiring <code>Sized</code> so it can …","An iterator that links two iterators together, in a chain.","An iterator that clones the elements of an underlying …","An iterator that copies the elements of an underlying …","An iterator that repeats endlessly.","An iterator able to yield elements from both ends.","An iterator that yields nothing.","An iterator that yields the current count and the element …","An iterator that knows its exact length.","Extend a collection with the contents of an iterator.","An iterator that filters the elements of <code>iter</code> with …","An iterator that uses <code>f</code> to both filter and map elements …","An iterator that maps each element to an iterator, and …","An iterator that flattens one level of nesting in an …","An iterator where each iteration calls the provided …","Conversion from an <code>Iterator</code>.","An iterator that yields <code>None</code> forever after the underlying …","An iterator that always continues to yield <code>None</code> when …","An iterator that calls a function with a reference to each …","An iterator adapter that places a separator between all …","An iterator adapter that places a separator between all …","Which kind of iterator are we turning this into?","Conversion into an <code>Iterator</code>.","The type of the elements being iterated over.","The type of the elements being iterated over.","A trait for dealing with iterators.","An iterator that maps the values of <code>iter</code> with <code>f</code>.","An iterator that only accepts elements while <code>predicate</code> …","An iterator that yields an element exactly once.","An iterator that yields a single element of type <code>A</code> by …","An iterator with a <code>peek()</code> that returns an optional …","Trait to represent types that can be created by …","An iterator that repeats an element endlessly.","An iterator that repeats elements of type <code>A</code> endlessly by …","A double-ended iterator with the direction inverted.","An iterator to maintain state while iterating another …","An iterator that skips over <code>n</code> elements of <code>iter</code>.","An iterator that rejects elements while <code>predicate</code> returns …","Objects that have a notion of <em>successor</em> and <em>predecessor</em> …","An iterator for stepping iterators by a custom amount.","An new iterator where each successive item is computed …","Trait to represent types that can be created by summing up …","An iterator that only iterates over the first <code>n</code> iterations …","An iterator that only accepts elements while <code>predicate</code> …","An iterator that reports an accurate length using …","A type that upholds all invariants of <code>Step</code>.","An iterator that iterates two other iterators …","","","Advances the iterator from the back by <code>n</code> elements.","","","","","","","","","","","Advances the iterator by <code>n</code> elements.","","","","","","","","","","Tests if every element of the iterator matches a predicate.","Tests if any element of the iterator matches a predicate.","Returns an iterator over <code>N</code> elements of the iterator at a …","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Borrows an iterator, rather than consuming it.","Takes two iterators and creates a new iterator over both …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator which <code>clone</code>s all of its elements.","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Transforms an iterator into a collection.","Collects all the items from an iterator into a collection.","Creates an iterator which copies all of its elements.","","","Consumes the iterator, counting the number of iterations …","","","","","","","","","Repeats an iterator endlessly.","","Creates an iterator that yields nothing.","Creates an iterator which gives the current iteration …","Determines if the elements of this <code>Iterator</code> are equal to …","Determines if the elements of this <code>Iterator</code> are equal to …","Extends a collection with the contents of an iterator.","Extends a collection with exactly one element.","Reserves capacity in a collection for the given number of …","Creates an iterator which uses a closure to determine if …","Creates an iterator that both filters and maps.","Searches for an element of an iterator that satisfies a …","","","","Applies function to the elements of iterator and returns …","Creates an iterator that works like map, but flattens …","Creates an iterator that flattens nested structure.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Folds every element into an accumulator by applying an …","","","","","","","","","","","","","","","","","","","","","Calls a closure on each element of an iterator.","","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new iterator where each iteration calls the …","Creates a new iterator where each iteration calls the …","Creates a value from an iterator.","Creates an iterator which ends after the first <code>None</code>.","Determines if the elements of this <code>Iterator</code> are …","Determines if the elements of this <code>Iterator</code> are …","Does something with each element of an iterator, passing …","Creates a new iterator which places a copy of <code>separator</code> …","Creates a new iterator which places an item generated by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an iterator from a value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the remaining elements of the …","Returns <code>true</code> if the iterator is empty.","","","","","","","","","Checks if the elements of this iterator are partitioned …","Checks if the elements of this iterator are sorted.","Checks if the elements of this iterator are sorted using …","Checks if the elements of this iterator are sorted using …","","","Consumes the iterator, returning the last element.","","","","","","Determines if the elements of this <code>Iterator</code> are …","","Returns the exact remaining length of the iterator.","","","","","","","","","","","Determines if the elements of this <code>Iterator</code> are …","Takes a closure and creates an iterator which calls that …","Creates an iterator that both yields elements based on a …","Returns the maximum element of an iterator.","Returns the element that gives the maximum value with …","Returns the element that gives the maximum value from the …","Returns the minimum element of an iterator.","Returns the element that gives the minimum value with …","Returns the element that gives the minimum value from the …","Determines if the elements of this <code>Iterator</code> are unequal to …","Advances the iterator and returns the next value.","","","","","","","","","","","Overflow Behavior","","","","","","","","","","","","","","","","","","","","","","Removes and returns an element from the end of the …","","","","","","","","","","","","","","","","","","","","","","","Advances the iterator and returns an array containing the …","","Returns the <code>n</code>th element of the iterator.","","","","","","","","","","","","Returns the <code>n</code>th element from the end of the iterator.","","","","","","","","","","Creates an iterator that yields an element exactly once.","Creates an iterator that lazily generates a value exactly …","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Consumes an iterator, creating two collections from it.","Reorders the elements of this iterator <em>in-place</em> according …","Creates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …","Searches for an element in an iterator, returning its …","Method which takes an iterator and generates <code>Self</code> from the …","Iterates over the entire iterator, multiplying all the …","Reduces the elements to a single one, by repeatedly …","Creates a new iterator that endlessly repeats a single …","Creates a new iterator that repeats elements of type <code>A</code> …","Reverses an iterator’s direction.","Searches for an element of an iterator from the back that …","","","","","","An iterator method that reduces the iterator’s elements …","","","","","","","","","","","","","","","","Searches for an element in an iterator from the right, …","An iterator adapter similar to <code>fold</code> that holds internal …","","","","","Returns the bounds on the remaining length of the iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator that skips the first <code>n</code> elements.","Creates an iterator that <code>skip</code>s elements based on a …","Creates an iterator starting at the same point, but …","Returns the number of <em>successor</em> steps required to get from …","Creates a new iterator where each successive item is …","Method which takes an iterator and generates <code>Self</code> from the …","Sums the elements of an iterator.","Creates an iterator that yields the first <code>n</code> elements, or …","Creates an iterator that yields elements based on a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fallibly transforms an iterator into a collection, short …","Applies function to the elements of iterator and returns …","","","An iterator method that applies a function as long as it …","","","","","","","","","","","","","","","","","","","","","","An iterator method that applies a fallible function to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reduces the elements to a single one by repeatedly …","","","This is the reverse version of <code>Iterator::try_fold()</code>: it …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts an iterator of pairs into a pair of containers.","Converts the arguments to iterators and zips them.","‘Zips up’ two iterators into a single iterator of …","Assume only that alignment conditions are met.","What transmutation safety conditions shall the compiler …","Are values of a type transmutable into values of another …","Opaque type representing the discriminant of an enum.","Assume only that lifetime conditions are met.","A wrapper to inhibit compiler from automatically calling <code>T</code>…","A wrapper type to construct uninitialized instances of <code>T</code>.","Do not assume that <em>you</em> have ensured any safety properties …","Assume only that safety conditions are met.","Assume only that dynamically-satisfiable validity …","","Returns the ABI-required minimum alignment of a type in …","Returns the ABI-required minimum alignment of the type of …","Returns the ABI-required minimum alignment of the type of …","When <code>true</code>, the compiler assumes that <em>you</em> are ensuring …","Assume both <code>self</code> and <code>other_assumptions</code>.","Extracts the values from an array of <code>MaybeUninit</code> …","Returns the contents of this <code>MaybeUninit</code> as a slice of …","Returns the contents of this <code>MaybeUninit</code> as a mutable …","Gets a mutable pointer to the contained value. Reading …","Gets a pointer to the contained value. Reading from this …","Extracts the value from the <code>MaybeUninit&lt;T&gt;</code> container. This …","Drops the contained value in place.","Gets a mutable (unique) reference to the contained value.","Reads the value from the <code>MaybeUninit&lt;T&gt;</code> container. The …","Gets a shared reference to the contained value.","","","","","","","","","Assume <code>self</code>, excepting <code>other_assumptions</code>.","","","","","","","","","","Bitwise-copies a value.","","","","Returns a value uniquely identifying the enum variant in <code>v</code>.","Disposes of a value.","Manually drops the contained value. This is exactly …","","","","","","","","Takes ownership and “forgets” about the value <strong>without </strong>…","Like <code>forget</code>, but also accepts unsized values.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extracts the value from the <code>ManuallyDrop</code> container.","When <code>true</code>, the compiler assume that <em>you</em> are ensuring that …","Returns the ABI-required minimum alignment of a type in …","Returns the ABI-required minimum alignment of the type of …","Returns <code>true</code> if dropping values of type <code>T</code> matters.","Wrap a value to be manually dropped.","Creates a new <code>MaybeUninit&lt;T&gt;</code> initialized with the given …","","Moves <code>src</code> into the referenced <code>dest</code>, returning the previous …","When <code>true</code>, the compiler assumes that <em>you</em> have ensured that …","Returns the size of a type in bytes.","Returns the size of the pointed-to value in bytes.","Returns the size of the pointed-to value in bytes.","Returns the contents of this slice of <code>MaybeUninit</code> as a …","Returns the contents of this mutable slice of <code>MaybeUninit</code> …","Gets a mutable pointer to the first element of the array.","Gets a pointer to the first element of the array.","Assuming all the elements are initialized, get a mutable …","Assuming all the elements are initialized, get a slice to …","","Swaps the values at two mutable locations, without …","Replaces <code>dest</code> with the default value of <code>T</code>, returning the …","Takes the value from the <code>ManuallyDrop&lt;T&gt;</code> container out.","","","","","Reinterprets the bits of a value of one type as another …","Interprets <code>src</code> as having type <code>&amp;Dst</code>, and then reads <code>src</code> …","Transposes a <code>MaybeUninit&lt;[T; N]&gt;</code> into a <code>[MaybeUninit&lt;T&gt;; N]</code>…","","","","","","","","","","","","","Creates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state.","Create a new array of <code>MaybeUninit&lt;T&gt;</code> items, in an …","Bypasses Rust’s normal memory-initialization checks by …","When <code>true</code>, the compiler assumes that <em>you</em> are ensuring that …","Returns the number of variants in the enum type <code>T</code>.","Sets the value of the <code>MaybeUninit&lt;T&gt;</code>.","Copies the elements from <code>src</code> to <code>this</code>, returning a mutable …","Clones the elements from <code>src</code> to <code>this</code>, returning a mutable …","Returns the value of type <code>T</code> represented by the all-zero …","Creates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state, …","The addition operator <code>+</code>.","The addition assignment operator <code>+=</code>.","APIs like <code>try_for_each</code> don’t need values with <code>Break</code>, so …","The bitwise AND operator <code>&amp;</code>.","The bitwise AND assignment operator <code>&amp;=</code>.","The bitwise OR operator <code>|</code>.","The bitwise OR assignment operator <code>|=</code>.","The bitwise XOR operator <code>^</code>.","The bitwise XOR assignment operator <code>^=</code>.","An endpoint of a range of keys.","Exit the operation without running subsequent phases.","It’s frequently the case that there’s no value needed …","Trait that indicates that this is a pointer or a wrapper …","The generator completed with a return value.","Move on to the next phase of the operation as normal.","Used to tell an operation whether it should exit early or …","Used for immutable dereferencing operations, like <code>*v</code>.","Used for mutable dereferencing operations, like in <code>*v = 1;</code>.","<code>DispatchFromDyn</code> is used in the implementation of object …","The division operator <code>/</code>.","The division assignment operator <code>/=</code>.","Custom code within the destructor.","An exclusive bound.","The version of the call operator that takes an immutable …","The version of the call operator that takes a mutable …","The version of the call operator that takes a by-value …","Used to specify which residuals can be converted into …","The trait implemented by builtin generator types.","The result of a generator resumption.","An inclusive bound.","Used for indexing operations (<code>container[index]</code>) in …","Used for indexing operations (<code>container[index]</code>) in mutable …","The multiplication operator <code>*</code>.","The multiplication assignment operator <code>*=</code>.","The unary negation operator <code>-</code>.","The unary logical negation operator <code>!</code>.","<code>OneSidedRange</code> is implemented for built-in range types that …","The resulting type after applying the <code>+</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>*</code> operator.","The resulting type after applying the <code>/</code> operator.","The resulting type after applying the <code>%</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>!</code> operator.","The resulting type after applying the <code>&amp;</code> operator.","The resulting type after applying the <code>|</code> operator.","The resulting type after applying the <code>^</code> operator.","The resulting type after applying the <code>&lt;&lt;</code> operator.","The resulting type after applying the <code>&gt;&gt;</code> operator.","The returned type after the call operator is used.","The returned type after indexing.","The type of the value produced by <code>?</code> when <em>not</em> …","A (half-open) range bounded inclusively below and …","<code>RangeBounds</code> is implemented by Rust’s built-in range …","A range only bounded inclusively below (<code>start..</code>).","An unbounded range (<code>..</code>).","A range bounded inclusively below and above (<code>start..=end</code>).","A range only bounded exclusively above (<code>..end</code>).","A range only bounded inclusively above (<code>..=end</code>).","The remainder operator <code>%</code>.","The remainder assignment operator <code>%=</code>.","Allows retrieving the canonical type implementing <code>Try</code> that …","The type of the value passed to <code>FromResidual::from_residual</code>","The type of value this generator returns.","The left shift operator <code>&lt;&lt;</code>. Note that because this trait …","The left shift assignment operator <code>&lt;&lt;=</code>.","The right shift operator <code>&gt;&gt;</code>. Note that because this trait …","The right shift assignment operator <code>&gt;&gt;=</code>.","The subtraction operator <code>-</code>.","The subtraction assignment operator <code>-=</code>.","The resulting type after dereferencing.","The <code>?</code> operator and <code>try {}</code> blocks.","The “return” type of this meta-function.","An infinite endpoint. Indicates that there is no bound in …","Implement <code>FromResidual&lt;Yeet&lt;T&gt;&gt;</code> on your type to enable …","The type of value this generator yields.","The generator suspended with a value.","Performs the <code>+</code> operation.","Performs the <code>+=</code> operation.","Performs the <code>&amp;</code> operation.","Performs the <code>&amp;=</code> operation.","Performs the <code>|</code> operation.","Performs the <code>|=</code> operation.","Performs the <code>^</code> operation.","Performs the <code>^=</code> operation.","","","","","","","","","","","","","","","Used in <code>?</code> to decide whether the operator should produce a …","","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …","Performs the call operation.","Performs the call operation.","Performs the call operation.","","","","","","","","","","","","","","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …","","Dereferences the value.","Mutably dereferences the value.","Performs the <code>/</code> operation.","Performs the <code>/=</code> operation.","Executes the destructor for this type.","The upper bound of the range (exclusive).","The upper bound of the range (exclusive).","The upper bound of the range (inclusive)","End index bound.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs the type from its <code>Output</code> type.","","Constructs the type from a compatible <code>Residual</code> type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the indexing (<code>container[index]</code>) operation.","","","","","","","","","Performs the mutable indexing (<code>container[index]</code>) operation.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if this is a <code>Break</code> variant.","Returns <code>true</code> if this is a <code>Continue</code> variant.","Maps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;T, C&gt;</code> by applying a …","Maps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;B, T&gt;</code> by applying a …","Performs the <code>*</code> operation.","Performs the <code>*=</code> operation.","Performs the unary <code>-</code> operation.","","Performs the unary <code>!</code> operation.","","","Performs the <code>%</code> operation.","Performs the <code>%=</code> operation.","Resumes the execution of this generator.","Performs the <code>&lt;&lt;</code> operation.","Performs the <code>&lt;&lt;=</code> operation.","Performs the <code>&gt;&gt;</code> operation.","Performs the <code>&gt;&gt;=</code> operation.","","The lower bound of the range (inclusive).","The lower bound of the range (inclusive).","Start index bound.","","","","","","","","Performs the <code>-</code> operation.","Performs the <code>-=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over a slice in (non-overlapping) chunks (<code>N</code> …","An iterator over a slice in (non-overlapping) mutable …","A windowed iterator over a slice in overlapping chunks (<code>N</code> …","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) mutable …","An iterator over a slice in (non-overlapping) mutable …","Helper trait for <code>[T]::concat</code>.","An iterator over the escaped version of a byte slice.","An iterator over slice in (non-overlapping) chunks …","An iterator over slice in (non-overlapping) mutable chunks …","Immutable slice iterator","Mutable slice iterator.","Helper trait for <code>[T]::join</code>","The resulting type after concatenation","The resulting type after concatenation","The output type returned by methods.","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) mutable …","An iterator over a slice in (non-overlapping) mutable …","An iterator over subslices separated by elements that …","An iterator over the subslices of the vector which are …","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","A helper trait used for indexing operations.","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","An iterator over the mutable subslices of the vector which …","An iterator over the mutable subslices of the vector which …","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","An iterator over overlapping subslices of length <code>size</code>.","Returns a slice which contains items not yet handled by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implementation of <code>[T]::concat</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a reference to T into a slice of length 1 …","Forms a mutable slice from a pointer range.","Forms a slice from a pointer range.","Forms a slice from a pointer and a length.","Performs the same functionality as <code>from_raw_parts</code>, except …","Converts a reference to T into a slice of length 1 …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","","","","","","","","Implementation of <code>[T]::join</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs bounds-checking of a range.","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over the bytes of a string slice.","An iterator over the <code>char</code>s of a string slice, and their …","An iterator over the <code>char</code>s of a string slice.","An iterator of <code>u16</code> over the string encoded as UTF-16.","The associated error which can be returned from parsing.","The return type of <code>str::escape_debug</code>.","The return type of <code>str::escape_default</code>.","The return type of <code>str::escape_unicode</code>.","Parse a value from a string","An iterator over the lines of a string, as string slices.","Created with the method <code>lines_any</code>.","Created with the method <code>match_indices</code>.","Created with the method <code>matches</code>.","An error returned when parsing a <code>bool</code> using <code>from_str</code> fails","Created with the method <code>rmatch_indices</code>.","Created with the method <code>rmatches</code>.","Created with the method <code>rsplit</code>.","Created with the method <code>rsplitn</code>.","Created with the method <code>rsplit_terminator</code>.","Created with the method <code>split</code>.","An iterator over the non-ASCII-whitespace substrings of a …","An iterator over the substrings of a string, terminated by …","Created with the method <code>splitn</code>.","Created with the method <code>split_terminator</code>.","An iterator over the non-whitespace substrings of a string,","An item returned by the <code>Utf8Chunks</code> iterator.","An iterator used to decode a slice of mostly UTF-8 bytes …","Errors which can occur when attempting to interpret a …","","","Returns remainder of the split string","Views the underlying data as a subslice of the original …","Returns remainder of the split string","Returns remainder of the split string","Returns remainder of the split string","Returns remainder of the split string","Returns remainder of the split string","Returns remainder of the split string","Returns remainder of the split string","Returns remainder of the split string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Provides more information about the failure:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a boxed slice of bytes to a boxed string slice …","Parses a string <code>s</code> to return a value of this type.","Converts a slice of bytes to a string slice.","Converts a mutable slice of bytes to a mutable string …","Converts a slice of bytes to a string slice without …","Converts a slice of bytes to a string slice without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the invalid sequence that caused a failure.","","","","","","","","Creates a new iterator to decode the bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the byte position of the next character, or the …","The string Pattern API.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the next validated UTF-8 substring.","Returns the index in the given string up to which valid …","Associated type for <code>&lt;&amp;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Expresses that every byte of the haystack has been …","A marker trait to express that a <code>ReverseSearcher</code> can be …","Expresses that a match of the pattern has been found at …","A string pattern.","Expresses that <code>haystack[a..b]</code> has been rejected as a …","A reverse searcher for a string pattern.","Result of calling <code>Searcher::next()</code> or …","A searcher for a string pattern.","Associated searcher for this pattern","Associated type for <code>&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Getter for the underlying string to be searched in","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs the associated searcher from <code>self</code> and the …","Checks whether the pattern matches anywhere in the haystack","Checks whether the pattern matches at the front of the …","Checks whether the pattern matches at the back of the …","Performs the next search step starting from the front.","","","","","","","Performs the next search step starting from the back.","","","","","","","Finds the next <code>Match</code> result. See <code>next()</code>.","","","","","","","Finds the next <code>Match</code> result. See <code>next_back()</code>.","","","","","","","Finds the next <code>Reject</code> result. See <code>next()</code> and <code>next_match()</code>.","","","","","Finds the next <code>Reject</code> result. See <code>next_back()</code>.","","","","","Removes the pattern from the front of haystack, if it …","Removes the pattern from the back of haystack, if it …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An error returned by <code>LocalKey::try_with</code>.","Thread factory, which can be used in order to configure …","An owned permission to join on a thread (block on its …","A thread local storage key which owns its contents.","A specialized <code>Result</code> type for threads.","A scope to spawn scoped threads in.","An owned permission to join on a scoped thread (block on …","A handle to a thread.","A unique identifier for a running thread.","","This returns a numeric identifier for the thread …","Returns an estimate of the default amount of parallelism a …","","","","","","","","","","","","","","","","","","","","","","","Gets a handle to the thread that invokes it.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a copy of the contained value.","","","Gets the thread’s unique identifier.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the associated thread has finished running its …","Waits for the associated thread to finish.","Names the thread-to-be. Currently the name is used for …","Gets the thread’s name.","","Generates the base configuration for spawning a thread, …","Determines whether the current thread is unwinding because …","Blocks unless or until the current thread’s token is …","Blocks unless or until the current thread’s token is …","Use <code>park_timeout</code>.","","","Replaces the contained value, returning the old value.","Replaces the contained value, returning the old value.","Create a scope for spawning scoped threads.","Sets or initializes the contained value.","Sets or initializes the contained value.","Puts the current thread to sleep for at least the …","Use <code>sleep</code>.","Spawns a new thread, returning a <code>JoinHandle</code> for it.","Spawns a new thread within a scope, returning a …","Spawns a new thread by taking ownership of the <code>Builder</code>, …","Spawns a new scoped thread using the settings set through …","Spawns a new thread without any lifetime restrictions by …","Sets the size of the stack (in bytes) for the new thread.","Takes the contained value, leaving <code>Default::default()</code> in …","Takes the contained value, leaving <code>Default::default()</code> in …","Extracts a handle to the underlying thread.","","","","","","","","","","","","","","","","","","","","","Acquires a reference to the value in this TLS key.","","","","","","","","","Atomically makes the handle’s token available if it is …","Acquires a reference to the value in this TLS key.","Acquires a reference to the contained value.","Acquires a mutable reference to the contained value.","Cooperatively gives up a timeslice to the OS scheduler.","A <code>Duration</code> type to represent a span of time, typically …","A measurement of a monotonically nondecreasing clock. …","The maximum duration.","The duration of one microsecond.","The duration of one millisecond.","The duration of one nanosecond.","The duration of one second.","A measurement of the system clock, useful for talking to …","An error returned from the <code>duration_since</code> and <code>elapsed</code> …","An error which can be returned when converting a …","An anchor in time which can be used to create new …","An anchor in time which can be used to create new …","A duration of zero time.","Panics","Panics","","","","","Returns the total number of whole microseconds contained …","Returns the total number of whole milliseconds contained …","Returns the total number of nanoseconds contained by this …","Returns the number of <em>whole</em> seconds contained by this …","Returns the number of seconds contained by this <code>Duration</code> …","Returns the number of seconds contained by this <code>Duration</code> …","","","","","","","","","","","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …","Checked <code>Duration</code> addition. Computes <code>self + other</code>, …","Checked <code>Duration</code> division. Computes <code>self / other</code>, …","Returns the amount of time elapsed from another instant to …","Checked <code>Duration</code> multiplication. Computes <code>self * other</code>, …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …","Checked <code>Duration</code> subtraction. Computes <code>self - other</code>, …","","","","","","","","","","","","","","","","","","Divide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.","Divide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.","Divide <code>Duration</code> by <code>f32</code>.","Divide <code>Duration</code> by <code>f64</code>.","Returns the positive duration which represents how far …","Returns the amount of time elapsed from another instant to …","Returns the amount of time elapsed from an earlier point …","Returns the amount of time elapsed since this instant was …","Returns the difference between the clock time when this …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of whole …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this <code>Duration</code> spans no time.","","","Multiplies <code>Duration</code> by <code>f32</code>.","Multiplies <code>Duration</code> by <code>f64</code>.","Creates a new <code>Duration</code> from the specified number of whole …","Returns an instant corresponding to “now”.","Returns the system time corresponding to “now”.","","","","","","Saturating <code>Duration</code> addition. Computes <code>self + other</code>, …","Returns the amount of time elapsed from another instant to …","Saturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …","Saturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …","Returns the amount of time elapsed from another instant to …","","","","","","","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in …","","","","","","","","","","","","","","","The checked version of <code>from_secs_f32</code>.","The checked version of <code>from_secs_f64</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,59,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,314,0,0,24,18,45,47,85,116,0,0,0,0,0,55,0,0,0,0,0,0,315,0,24,0,0,0,85,18,0,0,55,47,0,0,0,0,0,0,0,85,13,14,45,0,0,316,317,318,319,320,321,322,323,324,325,326,2,0,0,0,0,18,45,47,85,116,116,0,0,0,0,0,0,0,59,59,0,0,0,59,0,0,0,0,0,0,18,47,116,0,327,45,0,24,13,14,0,0,0,47,0,316,2,2,328,2,2,3,6,7,8,3,6,7,8,6,7,329,329,329,329,10,3,11,13,14,6,7,15,16,17,10,0,329,329,329,329,0,0,0,329,329,329,329,21,22,24,11,26,3,7,10,27,11,28,21,30,31,32,22,22,2,2,27,27,31,22,11,11,3,6,7,24,15,3,6,7,21,10,34,0,0,0,0,0,0,0,0,31,31,22,22,10,10,10,10,10,322,37,17,330,323,37,17,331,37,17,332,67,18,19,20,45,47,61,85,114,116,118,119,2,2,15,28,49,37,13,14,16,50,89,81,51,52,27,27,17,53,10,21,30,30,31,31,32,22,22,11,3,70,48,40,41,42,6,7,54,55,56,8,57,24,58,59,26,34,333,67,18,19,20,45,47,61,85,114,116,118,119,2,15,28,49,37,13,14,16,50,89,81,51,52,27,17,53,10,21,30,30,31,32,22,11,3,70,48,40,41,42,6,7,54,55,56,8,57,24,58,59,26,34,315,40,42,11,15,27,10,329,329,46,22,329,329,15,16,27,17,10,48,2,15,49,37,16,50,51,52,27,17,53,10,21,30,31,32,22,3,40,41,42,6,54,55,56,8,57,24,58,59,34,2,15,27,17,10,30,2,15,49,37,16,50,51,52,27,17,53,10,21,30,31,32,22,11,3,40,41,42,6,54,55,56,8,57,24,58,59,34,24,0,2,16,27,17,53,10,21,30,31,22,11,55,56,26,26,26,11,17,334,10,8,57,16,3,6,7,58,34,31,22,329,329,0,67,2,15,49,37,16,27,17,53,10,21,30,31,32,22,70,48,40,41,42,8,26,327,67,2,49,37,27,31,22,335,49,37,27,46,22,54,56,17,11,319,46,46,46,31,22,46,46,46,46,46,46,31,22,31,22,15,10,16,17,15,16,81,10,31,32,22,3,336,57,8,334,8,8,57,57,11,16,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,49,37,16,27,27,27,27,27,27,27,27,27,27,17,53,10,10,10,10,10,10,10,21,30,31,22,11,11,11,11,11,11,11,11,11,11,11,11,42,54,55,56,8,57,24,59,329,329,11,15,15,49,49,37,37,16,16,27,27,27,17,17,10,10,15,15,16,16,17,17,10,10,15,15,10,10,11,26,26,26,26,26,26,26,26,26,11,11,11,6,7,6,7,337,41,17,16,16,329,329,10,0,162,338,2,2,15,28,49,37,13,14,16,50,89,81,51,52,27,17,53,10,21,30,31,31,31,32,22,22,22,11,3,70,48,40,41,42,6,7,54,54,55,56,56,8,57,24,58,59,26,34,57,58,329,329,6,7,67,18,19,20,45,47,61,85,114,116,118,119,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,15,15,15,28,49,49,49,37,37,37,13,14,16,16,50,89,81,51,52,27,27,27,27,27,27,17,17,53,10,10,10,21,21,21,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,3,70,48,48,48,40,41,42,6,7,54,55,56,56,56,8,57,24,58,59,26,26,34,67,2,2,2,2,15,49,37,16,27,27,27,17,10,31,22,21,26,26,31,32,22,314,27,27,10,10,0,27,21,30,31,22,49,16,17,10,21,8,8,57,57,49,16,49,16,10,21,30,31,22,48,8,8,57,57,26,26,31,22,8,8,57,57,8,8,57,57,27,21,30,31,22,11,0,65,2,16,27,17,53,10,31,22,11,55,56,8,57,24,59,315,65,31,22,326,67,49,16,27,10,8,8,57,57,339,27,10,8,8,57,57,67,49,16,17,10,14,17,67,18,19,20,45,47,61,85,114,116,118,119,2,15,28,49,49,37,37,13,14,16,50,89,81,51,52,27,17,53,10,21,30,31,32,22,3,70,48,40,41,42,6,7,54,55,56,8,57,24,58,59,26,34,27,21,30,48,57,26,18,19,20,45,47,61,85,114,116,118,119,15,15,49,49,49,37,37,16,16,16,50,89,81,51,52,17,17,10,10,10,11,3,6,7,8,57,58,34,15,16,2,11,28,31,32,22,7,15,27,16,15,27,0,46,46,46,11,2,11,17,67,15,16,17,10,3,6,7,8,57,55,11,28,55,55,55,55,55,2,48,11,8,57,6,17,17,11,0,15,16,17,10,11,16,10,28,11,13,14,16,54,50,89,51,52,17,6,7,8,57,58,34,16,16,27,21,30,31,22,67,15,16,50,89,81,51,52,17,10,6,7,26,48,27,21,30,31,22,10,31,22,24,329,329,340,50,89,51,8,57,329,329,0,329,329,11,50,89,51,8,57,329,329,329,329,318,329,329,2,2,2,2,2,2,31,22,321,67,15,49,37,16,27,17,10,21,30,31,32,22,11,70,48,40,41,57,26,31,22,16,17,10,31,22,31,22,31,22,31,22,18,19,20,45,47,61,85,114,116,118,119,50,89,81,51,52,3,6,7,8,57,58,34,50,89,81,51,52,3,6,7,8,57,58,34,3,58,58,70,70,6,7,8,57,58,6,7,8,57,0,0,0,0,0,0,13,14,13,14,13,14,13,14,11,2,2,2,2,2,2,2,2,2,2,2,2,2,16,27,27,27,27,27,27,27,27,27,17,53,10,21,30,31,22,11,11,11,11,11,11,11,11,11,11,11,11,55,56,10,118,15,58,15,58,31,22,15,10,16,17,10,16,17,6,7,46,22,22,54,56,31,32,22,15,27,10,10,16,17,10,16,10,10,10,11,11,320,49,16,17,10,16,17,21,30,30,56,46,46,46,46,46,46,15,27,10,15,27,10,118,10,10,15,16,17,10,10,55,57,58,10,10,6,7,21,324,341,325,342,15,27,10,15,27,10,50,89,81,51,52,3,6,7,8,57,58,34,0,0,0,329,329,329,329,329,329,329,329,46,22,46,16,17,10,57,8,334,8,8,57,57,11,26,0,11,31,32,22,317,37,17,10,21,30,26,10,10,11,17,17,21,30,55,55,0,28,0,2,2,15,49,37,16,50,51,52,27,17,53,10,21,30,31,32,22,11,3,40,41,42,6,54,55,56,8,57,24,58,59,34,11,11,2,2,31,22,54,56,11,10,329,329,30,30,30,329,329,11,57,58,67,18,19,20,45,47,61,85,114,116,118,119,2,15,28,49,37,13,14,16,50,89,81,51,52,27,17,53,10,21,30,31,31,32,22,22,3,70,48,40,41,42,6,7,54,55,56,8,57,24,58,59,26,34,16,67,18,19,20,45,47,61,85,114,116,118,119,2,15,28,49,37,13,14,16,50,89,81,51,52,27,17,53,10,21,30,31,32,22,3,70,48,40,41,42,6,7,54,55,56,8,57,24,58,59,26,34,48,31,22,31,22,31,22,22,15,27,10,15,27,10,57,58,31,22,67,18,19,20,45,47,61,85,114,116,118,119,2,15,28,49,37,13,14,16,50,89,81,51,52,27,17,53,10,21,30,31,32,22,11,3,70,48,40,41,42,6,7,54,55,56,8,57,24,58,59,26,34,30,17,48,31,22,21,32,16,16,70,70,70,70,70,31,32,22,329,329,15,49,37,27,10,49,37,10,11,11,49,37,0,0,0,0,337,10,41,10,337,337,337,337,337,337,337,27,41,337,337,337,337,337,337,337,343,344,344,345,346,346,345,346,346,347,348,348,349,347,347,348,350,351,351,352,353,352,353,353,0,0,120,120,120,120,120,153,120,153,120,153,120,153,120,153,120,120,120,153,153,120,120,153,153,0,0,0,120,153,120,120,120,120,120,120,120,120,153,120,120,120,153,153,120,153,0,120,153,120,153,0,0,55,55,55,0,0,0,0,0,0,0,0,154,154,66,154,154,154,66,154,154,354,154,154,154,355,154,355,154,154,154,355,154,355,154,0,66,0,0,0,66,0,0,354,355,154,154,154,154,154,0,0,0,155,0,0,0,0,0,0,0,0,0,0,155,0,0,0,0,0,155,0,0,0,87,87,156,160,161,159,157,158,87,155,88,156,160,161,159,157,158,87,155,88,156,155,88,156,155,88,156,88,87,87,87,87,87,88,88,159,157,158,159,157,158,155,88,160,161,87,160,161,159,157,158,160,87,162,338,356,357,358,359,360,361,362,155,88,88,156,156,0,160,161,159,157,158,87,155,88,156,88,160,161,159,157,158,87,155,88,156,158,87,87,88,87,88,87,87,87,155,88,156,88,156,160,161,159,157,158,87,155,88,156,160,161,159,157,158,87,155,88,156,160,161,159,157,158,87,155,88,156,158,87,0,163,87,163,87,87,163,87,87,0,0,0,0,0,0,0,0,0,117,165,166,166,117,117,117,117,117,166,172,117,129,165,168,169,170,171,166,172,117,129,165,168,169,170,171,0,117,165,168,169,170,117,165,168,169,170,0,166,165,171,0,0,166,165,117,117,117,165,168,117,169,170,172,172,172,117,166,166,166,172,117,129,165,168,169,170,171,166,166,172,117,129,165,168,169,170,171,169,166,117,0,170,172,117,166,172,117,129,165,168,169,170,171,129,166,170,170,117,170,170,117,170,166,166,170,117,170,166,166,166,117,0,166,172,117,165,169,171,117,117,117,165,168,171,129,117,166,165,166,172,117,117,0,166,166,165,166,166,166,0,0,166,166,0,166,166,166,166,169,171,0,0,0,0,166,166,168,166,169,166,168,0,166,169,166,117,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,0,166,166,117,165,168,169,170,165,166,0,166,172,117,129,165,168,169,170,171,166,172,117,129,165,168,169,170,171,166,172,117,129,165,168,169,170,171,117,0,166,166,165,166,166,166,0,0,0,0,0,315,0,175,175,315,175,175,175,337,175,175,175,65,315,65,175,175,175,175,175,175,175,337,175,337,337,337,337,337,337,337,337,175,337,337,337,337,337,337,190,190,190,190,0,0,190,0,0,0,0,0,190,190,190,190,174,0,190,190,0,174,0,0,190,190,190,190,190,190,0,190,190,190,0,0,190,0,0,0,190,190,190,190,190,190,190,190,190,0,190,0,190,0,0,0,0,0,190,174,0,0,0,0,0,0,190,0,190,190,190,190,190,0,190,0,176,128,177,176,177,128,178,179,180,181,182,183,128,178,179,180,181,182,183,184,185,194,196,44,187,178,179,180,181,182,183,197,176,195,189,190,128,191,192,177,174,188,193,186,198,199,184,185,194,196,44,187,178,179,180,181,182,183,197,176,195,189,190,128,191,192,177,174,188,193,186,198,199,184,185,363,364,363,184,185,187,128,44,363,187,189,190,191,192,177,174,189,189,190,191,192,177,174,190,365,184,179,189,191,188,193,0,189,191,192,176,177,176,194,44,195,44,185,0,128,189,190,174,195,365,184,179,189,191,188,193,187,364,185,196,180,180,181,182,182,183,189,189,189,189,189,128,192,192,184,185,194,194,196,44,44,187,178,179,180,181,182,183,197,176,195,195,189,190,190,128,191,192,177,174,188,193,186,198,199,184,185,194,196,44,44,44,44,187,187,187,178,179,180,181,182,183,197,176,195,189,190,128,191,192,177,174,188,193,186,198,199,44,184,185,196,44,189,188,193,184,185,196,44,189,188,193,365,190,187,128,128,184,185,194,196,44,187,178,179,180,181,182,183,197,176,195,189,190,128,191,192,177,174,188,193,186,198,199,195,184,185,194,196,44,195,189,188,193,186,198,199,185,195,189,184,178,179,197,363,189,366,178,179,180,181,182,183,185,196,180,180,181,182,182,183,364,189,189,189,189,189,192,192,44,44,187,193,178,365,178,180,182,184,185,196,44,176,189,177,186,198,199,44,190,189,0,194,44,195,44,363,184,178,179,197,189,191,188,193,184,197,363,189,191,193,363,184,178,179,363,189,178,179,365,184,178,179,363,0,184,178,179,363,179,365,184,178,179,197,363,189,188,128,189,0,367,367,184,185,189,191,184,187,128,193,189,0,186,44,365,0,0,0,367,189,191,184,367,189,191,363,189,190,191,192,177,174,194,44,195,190,184,185,194,196,44,187,178,179,180,181,182,183,197,176,195,189,190,128,191,192,177,174,188,193,186,198,199,184,185,194,196,44,187,178,179,180,181,182,183,197,176,195,189,190,128,191,192,177,174,188,193,186,198,199,184,185,194,196,44,187,178,179,180,181,182,183,197,176,195,189,190,128,191,192,177,174,188,193,186,198,199,187,128,184,185,196,364,185,196,180,180,181,182,182,183,189,189,189,189,189,128,192,192,185,196,180,180,181,182,182,183,364,196,180,180,181,182,182,183,364,196,180,180,182,182,364,185,196,180,180,181,182,182,183,364,189,189,189,189,189,192,192,128,0,0,0,0,363,364,363,363,365,365,364,365,363,364,365,363,363,363,363,365,363,363,365,363,367,367,365,367,367,363,364,364,364,364,364,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,95,233,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,201,202,368,203,204,205,206,207,208,209,210,201,202,233,203,204,205,211,206,207,208,209,210,233,233,233,369,369,369,201,202,213,214,212,203,204,215,205,211,206,216,217,218,219,220,221,222,207,223,208,224,225,209,226,227,228,229,230,210,231,232,201,202,213,214,212,203,204,215,205,211,206,216,217,218,219,220,221,222,207,223,208,224,225,209,226,227,228,229,230,210,231,232,233,233,201,202,213,214,212,204,215,205,211,206,216,217,218,219,220,221,222,207,223,208,224,225,209,226,227,228,229,230,210,231,232,201,202,213,214,212,204,215,205,211,206,216,217,218,219,220,221,222,207,223,208,224,225,209,226,227,228,229,230,210,231,232,233,233,233,233,233,233,201,202,233,212,204,205,206,216,218,208,210,233,214,0,233,233,233,370,370,370,233,233,233,204,218,207,233,233,233,201,202,213,214,212,203,204,215,205,211,206,216,217,218,219,220,221,222,207,223,208,224,225,209,226,227,228,229,230,210,231,232,201,202,213,233,212,203,204,215,205,206,216,217,218,219,220,221,222,207,223,208,224,225,209,226,233,209,369,369,369,201,202,213,214,212,203,204,215,205,211,206,216,217,218,219,220,221,222,207,223,208,224,225,209,226,227,228,229,230,210,231,232,0,0,371,233,233,233,233,233,233,201,202,213,214,212,203,204,215,205,211,206,216,217,218,219,220,221,222,207,223,208,224,225,209,226,227,228,229,230,210,231,232,95,201,202,213,214,212,203,204,215,205,211,206,216,217,218,219,220,221,222,207,223,208,224,225,209,226,227,228,229,230,210,231,232,212,372,212,215,205,206,218,219,221,207,233,233,233,233,201,202,233,204,205,218,208,210,233,214,372,212,215,205,206,218,219,221,207,229,230,233,233,233,233,233,233,233,233,233,233,233,201,202,213,214,212,203,204,215,205,211,206,216,217,218,219,220,221,222,207,223,208,224,225,209,226,227,228,229,230,210,231,232,368,201,202,214,212,203,204,215,205,206,216,217,218,219,221,207,208,225,209,227,229,230,210,233,205,233,203,204,205,206,218,207,208,225,209,227,210,368,203,204,206,218,207,208,225,209,210,0,0,233,233,233,233,233,233,373,233,233,0,0,233,368,204,218,207,201,202,368,212,203,204,215,205,206,216,217,218,219,221,207,208,225,209,233,233,201,202,213,214,233,212,203,204,215,205,211,206,216,217,218,219,220,221,222,207,223,208,224,225,209,226,227,229,230,210,231,232,233,233,233,369,0,374,233,233,233,201,202,213,214,212,204,215,205,211,206,216,217,218,219,220,221,222,207,223,208,224,225,209,226,227,228,229,230,210,231,232,233,233,201,202,233,212,203,204,215,205,211,206,216,217,218,219,221,222,207,223,208,224,225,209,226,231,233,201,202,213,214,212,203,204,215,205,211,206,216,217,218,219,220,221,222,207,223,208,224,225,209,226,227,228,229,230,210,231,232,201,202,213,214,212,203,204,215,205,211,206,216,217,218,219,220,221,222,207,223,208,224,225,209,226,227,228,229,230,210,231,232,233,201,202,368,212,203,204,215,205,206,216,217,218,219,221,207,208,225,209,201,202,213,214,212,203,204,215,205,211,206,216,217,218,219,220,221,222,207,223,208,224,225,209,226,227,228,229,230,210,231,232,233,0,233,234,0,0,0,234,0,0,234,234,234,234,0,0,0,234,234,35,35,35,35,35,35,35,35,35,35,235,236,35,234,235,236,35,234,234,235,236,35,234,235,236,35,234,236,0,236,236,236,0,0,236,235,236,234,235,236,35,234,0,0,235,236,35,234,235,236,235,236,35,234,236,234,0,0,0,236,35,236,0,234,0,0,0,35,35,35,35,35,35,234,0,0,236,235,236,35,234,0,0,35,235,236,35,234,235,236,35,234,235,236,35,234,35,35,0,234,0,35,35,35,0,35,0,0,237,0,0,0,0,0,0,0,237,237,0,238,237,0,0,0,0,0,0,0,24,0,0,0,0,0,0,24,0,0,0,0,0,0,0,316,317,318,319,320,321,375,322,323,376,324,325,121,326,377,0,0,0,0,0,0,0,0,0,0,377,378,0,0,0,0,0,0,327,0,379,24,0,378,238,316,328,322,330,323,331,376,380,237,238,97,239,240,241,242,237,238,97,239,240,241,242,377,237,237,381,115,121,237,238,97,239,240,241,237,238,97,239,240,241,238,334,239,240,241,237,97,327,335,319,382,383,8,240,241,334,97,239,239,240,240,241,241,237,238,97,239,240,241,237,238,97,239,240,241,242,237,238,97,239,240,241,242,377,237,384,237,97,97,239,239,240,240,241,241,97,97,239,239,240,240,241,241,97,97,239,239,240,240,241,241,97,97,239,239,240,240,241,241,237,238,97,239,240,241,326,97,97,239,239,240,240,241,241,339,97,97,239,239,240,240,241,241,237,238,97,239,240,241,242,239,237,237,237,237,318,385,321,239,375,239,238,320,386,378,324,341,325,342,239,8,239,334,97,239,239,240,240,241,241,317,387,237,238,97,239,240,241,237,238,97,239,240,241,242,237,238,97,239,240,241,242,237,238,97,239,240,241,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,388,389,390,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,243,244,259,260,245,261,262,263,264,265,266,267,246,247,248,254,249,255,250,251,256,252,257,253,258,243,244,259,260,245,261,262,263,264,265,266,267,246,247,248,254,249,255,250,251,256,252,257,253,258,243,244,245,246,247,248,249,250,251,252,253,243,244,245,246,247,248,249,250,251,252,253,388,247,248,254,249,255,250,251,256,252,257,253,258,243,244,259,260,245,261,262,263,264,265,266,267,246,246,247,248,254,249,255,250,251,256,252,257,253,258,246,243,244,259,260,245,261,262,263,264,265,266,267,246,247,248,254,249,255,250,251,256,252,257,253,258,0,0,0,0,0,0,390,390,390,390,390,390,243,244,259,260,245,261,262,263,264,265,266,267,246,247,248,254,249,255,250,251,256,252,257,253,258,243,244,259,260,245,261,262,263,264,265,266,267,246,247,248,254,249,255,250,251,256,252,257,253,258,255,256,258,249,255,250,251,256,253,258,389,266,267,246,247,248,254,249,255,250,251,256,252,257,253,258,243,244,259,260,245,261,262,263,264,265,266,267,246,247,248,254,249,255,250,251,256,252,257,253,258,243,244,259,260,245,261,266,267,246,247,248,254,249,255,250,251,256,252,257,253,258,247,248,254,249,255,250,251,256,252,257,253,258,247,248,254,249,255,250,251,256,252,257,253,258,0,249,251,253,243,244,259,260,245,261,262,263,264,265,266,267,246,247,248,254,249,255,250,251,256,252,257,253,258,243,244,245,246,247,248,249,250,251,252,253,246,246,243,244,259,260,245,261,262,263,264,265,266,267,246,247,248,254,249,255,250,251,256,252,257,253,258,243,244,259,260,245,261,262,263,264,265,266,267,246,247,248,254,249,255,250,251,256,252,257,253,258,243,244,259,260,245,261,262,263,264,265,266,267,246,247,248,254,249,255,250,251,256,252,257,253,258,0,0,0,0,314,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,268,268,269,270,271,272,273,274,275,276,277,278,269,279,280,270,268,271,272,273,274,275,276,281,282,283,284,285,286,277,278,287,288,289,290,291,292,269,279,280,270,268,271,272,273,274,275,276,281,282,283,284,285,286,277,278,287,288,289,290,291,292,269,279,280,270,268,271,272,273,274,275,276,281,282,283,284,285,286,277,278,287,288,289,290,291,292,269,279,280,270,268,271,272,273,274,275,276,281,282,283,284,285,286,277,278,287,288,289,290,291,292,270,268,279,280,279,280,291,279,268,269,279,279,280,280,270,268,271,272,273,274,275,276,281,282,283,284,285,286,277,278,287,288,288,289,289,290,290,291,292,288,289,290,269,279,280,270,268,271,272,273,274,275,276,281,282,283,284,285,286,277,278,287,288,289,290,291,292,0,314,0,0,0,0,269,279,280,270,268,271,272,273,274,275,276,281,282,283,284,285,286,277,278,287,288,289,290,291,292,269,270,268,271,272,273,274,275,276,281,282,283,284,285,286,277,278,287,288,289,290,292,291,268,270,268,285,277,278,268,292,269,270,268,271,272,273,274,275,276,281,282,283,284,285,286,277,278,287,288,289,290,292,269,270,268,271,272,273,274,281,282,283,284,285,286,277,278,268,268,270,0,268,279,280,268,268,270,268,285,286,277,278,287,288,289,290,269,279,280,270,268,271,272,273,274,275,276,281,282,283,284,285,286,277,278,287,288,289,290,291,292,279,280,288,289,290,288,289,290,269,279,280,270,268,271,272,273,274,275,276,281,282,283,284,285,286,277,278,287,288,289,290,291,292,269,279,280,270,268,271,272,273,274,275,276,281,282,283,284,285,286,277,278,287,288,289,290,291,292,269,279,280,270,268,271,272,273,274,275,276,281,282,283,284,285,286,277,278,287,288,289,290,291,292,291,279,0,0,0,0,0,293,0,293,0,293,0,0,0,391,0,293,294,295,296,297,298,299,293,294,295,296,297,298,299,293,294,295,296,297,298,299,293,294,295,296,297,298,299,293,293,294,295,296,297,298,299,293,294,295,296,297,298,299,392,294,295,296,297,298,299,293,294,295,296,297,298,299,391,391,391,391,392,294,295,296,297,298,299,393,294,295,296,297,298,299,392,294,295,296,297,298,299,393,294,295,296,297,298,299,392,295,296,297,298,393,295,296,297,298,391,391,293,294,295,296,297,298,299,293,294,295,296,297,298,299,293,294,295,296,297,298,299,293,294,295,296,297,298,299,0,0,0,0,0,0,0,0,0,0,300,0,304,305,306,307,303,308,300,134,304,305,306,307,303,308,300,134,303,300,134,303,300,134,0,303,300,304,305,306,307,303,303,308,300,134,304,305,306,307,303,308,300,134,304,305,300,134,304,305,306,307,303,308,300,134,307,307,308,134,305,308,0,0,0,0,303,305,304,304,0,304,304,0,0,0,306,308,308,308,308,304,304,307,303,300,134,303,304,305,306,307,303,308,300,134,304,305,306,307,303,308,300,134,304,304,305,306,307,303,308,300,134,134,304,304,304,0,0,0,144,144,144,144,144,0,0,0,0,164,144,309,164,144,309,164,144,144,144,144,144,144,144,309,164,312,144,313,309,164,312,144,313,309,164,144,144,309,144,309,164,144,309,164,312,144,313,309,164,312,144,313,309,164,144,144,312,144,144,144,144,144,144,312,309,164,309,164,309,164,144,313,309,164,312,312,144,313,313,309,164,312,144,313,144,144,144,144,144,144,309,164,144,309,164,312,144,313,144,144,144,144,144,144,309,164,309,164,144,312,313,144,309,144,144,309,309,164,144,309,164,144,144,144,144,144,144,309,164,312,144,313,312,313,309,164,312,144,313,144,144,309,164,312,144,313,309,164,312,144,313],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[[2,[1]],1]],[[[2,[1]],[2,[1]]]],[[]],[[[2,[1]],[2,[1]]]],[[[2,[1]],1]],[[3,4],[[5,[4]]]],[[6,4],[[5,[4]]]],[[7,4],[[5,[4]]]],[[8,4],[[5,[4]]]],[[3,4],[[5,[4]]]],[[6,4],[[5,[4]]]],[[7,4],[[5,[4]]]],[[8,4],[[5,[4]]]],[6,9],[7,9],[[],9],[[],9],[[],9],[[],9],[10],[3],[11,12],[13,13],[14,14],[6,9],[7,9],[[15,15]],[[16,16]],[[17,17]],[[10,10]],0,[[]],[[]],[[],18],[[],18],0,0,0,[[],19],[[],19],[[],20],[[],20],[21],[22,23],[24,24],[11,25],[26,4],[3],[7],[10],[27,25],[11,25],[28,29],[21],[30],[31],[32],[22],[22,33],[2],[[[2,[25]]],11],[27,11],[27,25],[31],[22],[11,25],[11,11],[3],[6],[7],[24,24],[15],[3],[6],[7],[21],[10],[34,1],0,0,0,0,0,0,0,0,[[[31,[35]]],31],[31,31],[22,22],[[[22,[35]]],22],[10,36],[10,36],[10,[[5,[4,4]]]],[10,[[5,[4,4]]]],[10,[[5,[4,4]]]],[[]],[[37,37],37],[[17,17],17],[[]],[[]],[[37,37],37],[[17,17],17],[[]],[[37,37],37],[[17,17],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,25],[[]],[[]],[[]],[[]],[[]],[30,38],[[]],[31],[[]],[[]],[22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[30,39],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[40,41],[42],[11,[[5,[43,44]]]],[15,4],[27,4],[10,4],[[],45],[[],45],[[],[[36,[46]]]],[22,[[36,[46]]]],[[],47],[[],47],[15],[16],[27],[17],[10],[48],[2,2],[15,15],[49,49],[37,37],[16,16],[50,50],[51,51],[52,52],[27,27],[17,17],[53,53],[10,10],[21,21],[30,30],[31,31],[32,32],[22,22],[3,3],[40,40],[41,41],[42,42],[6,6],[54,54],[55,55],[56,56],[8,8],[57,57],[24,24],[58,58],[59,59],[34,34],[[2,2]],[[15,15]],[[27,27]],[[17,17]],[[10,10]],[[30,30]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[11,43]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,24],0,[[2,2],55],[[16,16],55],[[27,27],55],[[17,17],55],[[53,53],55],[[10,10],55],[[21,21],55],[[30,30],55],[[31,31],55],[[22,22],55],[[11,11],55],[[55,55],55],[[56,56],55],[[26,4,4,59],4],[[26,4,4,59,59],[[5,[4,4]]]],[[26,4,4,59,59],[[5,[4,4]]]],[11,60],[17,9],[[],9],[10,9],[8,9],[57,9],[16,9],[3,4],[6,4],[7,4],[58,4],[34,4],[[]],[[]],[[],61],[[],61],[[],62],[[],[[67,[[0,[63,64,65,66]]]]]],[[],2],[[],15],[[],[[49,[68]]]],[[],[[37,[68]]]],[[],[[16,[69]]]],[[],27],[[],[[17,[69]]]],[[],53],[[],[[10,[69]]]],[[],21],[[],30],[[],31],[[],32],[[],22],[[],70],[[],48],[[],40],[[],41],[[],42],[[],8],[[],26],[[]],[67],[2],[49],[37],[27,25],[31],[22],[[]],[49],[37],[27,25],[[],1],[22,1],[54,1],[56,1],[[17,17],71],[11,72],[[]],[[[73,[46,69]]],[[5,[[73,[69]],[73,[46,69]]]]]],[[[73,[46,69]]],[[5,[[73,[69]],[73,[46,69]]]]]],[[[73,[46,69]]],[[5,[[73,[69]],[73,[46,69]]]]]],[[[31,[74]]],[[5,[31,[31,[74]]]]]],[[[22,[74]]],[[5,[22,[22,[74]]]]]],[46,36],[46,36],[46,36],[46,36],[46,36],[46,36],[[[31,[74]]],31],[[[22,[74]]],22],[31,32],[22,75],[15,76],[10,77],[16,78],[17,79],[15,80],[16],[81],[10],[31],[32],[22],[3],[[]],[57],0,[[],24],[8,24],[8,24],[57,24],[57,24],[11,9],[16,13],[[2,2],9],[2,9],[[[2,[11]],25],9],[[[2,[11]],43],9],[[[2,[25]],25],9],[[[2,[25]],11],9],[2,9],[[[2,[25]],27],9],[[[2,[25]],43],9],[[[2,[11]],25],9],[[[2,[25]],11],9],[[[2,[25]],25],9],[[[2,[11]],27],9],[[[2,[1]],1],9],[[[2,[1]],82],9],[[[2,[1]],1],9],[[2,83],9],[[[2,[11]],11],9],[[[2,[11]],11],9],[[49,49],9],[[37,37],9],[[16,16],9],[[27,11],9],[[27,27],9],[[27,1],9],[[27,25],9],[[27,2],9],[[27,11],9],[[27,25],9],[[27,2],9],[[27,43],9],[[27,1],9],[[17,17],9],[[53,53],9],[10,9],[[10,83],9],[10,9],[[10,10],9],[10,9],[10,9],[10,9],[[21,21],9],[[30,30],9],[[31,31],9],[[22,22],9],[[11,2],9],[[11,27],9],[[11,25],9],[[11,25],9],[[11,43],9],[[11,2],9],[[11,2],9],[[11,2],9],[[11,11],9],[[11,43],9],[[11,27],9],[[11,25],9],[[42,42],9],[[54,54],9],[[55,55],9],[[56,56],9],[[8,8],9],[[57,57],9],[[24,24],9],[[59,59],9],[[],36],[[],36],[11,9],[15],[15],[49],[49],[37],[37],[16],[16],[27],[27],[27],[17],[17],[10],[10],[15],[15],[16],[16],[17],[17],[10],[10],[[15,4]],[[15,4]],[[10,4]],[[10,4]],[11,[[36,[25]]]],[[26,4,59],4],[[26,4,59],4],[[26,4,59],4],[[26,4,59],4],[[26,4,59],4],[[26,4,59],4],[[26,4,59],4],[[26,59,59],[[5,[4,4]]]],[[26,4,59],4],[11,[[36,[25]]]],[11,[[36,[25]]]],[11,[[36,[25]]]],[6,36],[7,36],[6,36],[7,36],[[],29],[41,29],[17,36],[16,[[36,[84]]]],[16,36],[[],85],[[],85],[[[10,[86]]],[[5,[44]]]],0,[87,[[5,[88]]]],[87,[[5,[88]]]],[[2,87],[[5,[88]]]],[[2,87],[[5,[88]]]],[[15,87],[[5,[88]]]],[[28,87],[[5,[88]]]],[[49,87],[[5,[88]]]],[[37,87],[[5,[88]]]],[[13,87],[[5,[88]]]],[[14,87],[[5,[88]]]],[[16,87],[[5,[88]]]],[[50,87],[[5,[88]]]],[[89,87],[[5,[88]]]],[[81,87],[[5,[88]]]],[[51,87],[[5,[88]]]],[[52,87],[[5,[88]]]],[[27,87],[[5,[88]]]],[[17,87],[[5,[88]]]],[[53,87],[[5,[88]]]],[[10,87],[[5,[88]]]],[[21,87],[[5,[88]]]],[[30,87],[[5,[88]]]],[[31,87],[[5,[88]]]],[[31,87],[[5,[88]]]],[[31,87],[[5,[88]]]],[[32,87],[[5,[88]]]],[[22,87],[[5,[88]]]],[[22,87],[[5,[88]]]],[[22,87],[[5,[88]]]],[[11,87],[[5,[88]]]],[[3,87],[[5,[88]]]],[[70,87],[[5,[88]]]],[[48,87],[[5,[88]]]],[[40,87],[[5,[88]]]],[[41,87],[[5,[88]]]],[[42,87],[[5,[88]]]],[[6,87],[[5,[88]]]],[[7,87],[[5,[88]]]],[[54,87],[[5,[88]]]],[[54,87],[[5,[88]]]],[[55,87],[[5,[88]]]],[[56,87],[[5,[88]]]],[[56,87],[[5,[88]]]],[[8,87],[[5,[88]]]],[[57,87],[[5,[88]]]],[[24,87],[[5,[88]]]],[[58,87],[[5,[88]]]],[[59,87],[[5,[88]]]],[[26,87],[[5,[88]]]],[[34,87],[[5,[88]]]],[57],[58],[[],5],[[],5],[6],[7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,[[2,[25]]]],[27,[[2,[25]]]],[[]],[43,[[2,[11]]]],[[[83,[69]]],2],[27,[[2,[25]]]],[11,[[2,[11]]]],[82,[[2,[1]]]],[1,[[2,[1]]]],[90,[[2,[91]]]],[82,[[2,[1]]]],[83,2],[90,[[2,[91]]]],[91,[[2,[91]]]],[43,[[2,[11]]]],[[],2],[[],15],[[]],[[[83,[69]]],15],[[]],[[],[[49,[68]]]],[[]],[[[92,[68]]],[[49,[68]]]],[[[93,[68]]],[[37,[68]]]],[[],[[37,[68]]]],[[]],[[]],[[]],[[]],[[],[[16,[69]]]],[[]],[[]],[[]],[[]],[[]],[[[73,[25,69]]],27],[[]],[[[2,[25]]],27],[82,27],[43,27],[[],27],[[]],[[],[[17,[69]]]],[[]],[83,10],[[],[[10,[69]]]],[[]],[94],[[]],[[],21],[94],[[]],[[],30],[25,[[31,[25]]]],[[],31],[[[73,[69]]],31],[90,[[31,[91]]]],[[[83,[69]]],31],[2,31],[[]],[27,[[31,[25]]]],[43,[[31,[11]]]],[[],31],[11,[[31,[11]]]],[1,[[31,[1]]]],[91,[[31,[91]]]],[82,[[31,[1]]]],[94],[[[31,[1]]],31],[[]],[1,[[22,[1]]]],[90,[[22,[91]]]],[[]],[[[83,[69]]],22],[82,[[22,[1]]]],[2,22],[[],22],[94],[27,[[22,[25]]]],[11,[[22,[11]]]],[[[73,[69]]],22],[[[22,[1]]],22],[43,[[22,[11]]]],[[],22],[91,[[22,[91]]]],[25,[[22,[25]]]],[[]],[[]],[[]],[94],[[],48],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[94],[94,56],[[]],[[]],[[]],[[]],[[]],[4,26],[[]],[[]],[95,[[67,[[0,[63,64,65,66]]]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],2],[[],[[2,[1]]]],[[],15],[[],49],[[],37],[[],[[16,[69]]]],[[],27],[[],27],[[],27],[[],[[17,[69]]]],[[],[[10,[69]]]],[[],31],[[],22],[[],21],[4,26],[[]],[[],31],[[],32],[[],22],[1,5],[1,[[5,[27]]]],[[[83,[86,69]]],27],[10,36],[10,36],0,[[27,27],9],[[21,21],9],[[30,30],9],[[31,31],9],[[22,22],9],[49,36],[16,36],[17,36],[[10,4],36],[21],[[[8,[4]]],36],[[[8,[4]],1],36],[[[57,[4]]],36],[[[57,[4]],1],36],[49,36],[16,36],[49,36],[16,36],[[10,4],36],[21],[30],[31,36],[22,36],[48,[[5,[96]]]],[[[8,[4]],1],36],[[[8,[4]]],36],[[[57,[4]]],36],[[[57,[4]],1],36],[26,4],[[]],[31],[22],[[[8,[4]]]],[[[8,[4]],1]],[[[57,[4]]]],[[[57,[4]],1]],[[[8,[4]],1]],[[[8,[4]]]],[[[57,[4]]]],[[[57,[4]],1]],[[27,27],9],[[21,21],9],[[30,30],9],[[31,31],9],[[22,22],9],[11,9],0,[[]],[2],[16],[27],[17],[53],[10],[31],[22],[11],[55],[56],[8],[57],[24],[59],[[],29],[[]],[[]],[[]],[[]],[[[67,[[0,[64,65,66]]]]],4],[49],[16],[[27,97],25],[[10,4]],[[[8,[4]]]],[[[8,[4]],1]],[[[57,[4]]]],[[[57,[4]],1]],[[]],[[27,97],25],[[10,4]],[[[8,[4]]]],[[[8,[4]],1]],[[[57,[4]],1]],[[[57,[4]]]],[[[67,[[0,[63,64,65,66]]]],[0,[63,64,65,66]]],4],[49,36],[16,36],[17,9],[[10,4]],[14,98],[[17,17],99],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[49,[68]]],[[92,[68]]]],[[]],[[]],[[[37,[68]]],[[93,[68]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,[[73,[25,69]]]],[21],[30],[48,[[5,[96]]]],[57],[26,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,100],[15,101],[49],[49],[49],[37],[37],[16,81],[16,89],[16,50],[[]],[[]],[[]],[[]],[[]],[17,102],[17,103],[10,104],[10,105],[10,106],[11,107],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,108],[16,109],[2],[[[73,[11,69]]],43],[28,29],[31],[32],[22],[7],[15,[[83,[69]]]],[27,[[5,[82,27]]]],[16,110],[15,[[83,[69]]]],[27,[[83,[86,69]]]],0,[46,9],[46,9],[46,9],[11,9],[2,9],[11,9],[[17,17],9],[[[67,[[0,[63,64,65,66]]]]],9],[15,9],[16,9],[17,9],[10,9],[3,9],[6,9],[7,9],[8,9],[57,9],[55,9],[11,9],[28,9],[55,9],[55,9],[55,9],[55,9],[55,9],[2,9],[48,9],[11,9],[8,9],[57,9],[6,9],[[17,17],9],[[17,17],9],[11,9],0,[15,101],[16,50],[17,102],[10,106],[11,107],[16,89],[10,104],[28,[[5,[[73,[74,69]]]]]],[11,43],[13],[14],[16,51],[54,111],[50,36],[89,36],[51,36],[52,36],[17,36],[6,36],[7,36],[8,36],[57,36],[58,36],[34,[[36,[112]]]],[16,[[36,[84]]]],[16,36],[[27,27],9],[[21,21],9],[[30,30],9],[[31,31],9],[[22,22],9],[[[67,[[0,[63,64,65,66]]]]],4],[15,4],[16,4],[50,4],[89,4],[81,4],[51,4],[52,4],[17,4],[10,4],[6,4],[7,4],[[26,59],4],[48,[[5,[113,[96,[113]]]]]],[[27,27],9],[[21,21],9],[[30,30],9],[[31,31],9],[[22,22],9],[10],[31],[22],[24,24],[[],114],[[],114],[115,5],[50,36],[89,36],[51,36],[8,36],[57,36],[[],[[5,[36]]]],[[],[[5,[36]]]],0,[[],116],[[],116],[11,[[5,[117,44]]]],[50,36],[89,36],[51,36],[8,36],[57,36],[[],36],[[],36],[[],[[5,[36]]]],[[],[[5,[36]]]],[[]],[[],118],[[],118],[2,9],[[[2,[1]],1],9],[[[2,[1]],1],9],[[[2,[1]],82],9],[2,9],[[2,83],9],[[31,31],9],[[22,22],9],[[]],[[],[[67,[[0,[63,64,65,66]]]]]],[[],15],[[],[[49,[68]]]],[[],[[37,[68]]]],[[],[[16,[69]]]],[[],27],[[],[[17,[69]]]],[[],[[10,[69]]]],[[],21],[[],30],[[],31],[[],32],[[],22],[[],11],[[],70],[[],48],[[],40],[[],41],[[],57],[4,26],[[],31],[[],22],[[],16],[[],17],[[],10],[[],[[31,[35]]]],[[],[[22,[35]]]],[4,31],[4,22],[[],[[31,[35]]]],[[],[[22,[35]]]],[4,31],[4,22],[18,36],[19,36],[20,36],[45,36],[47,36],[61,36],[85,36],[114,[[36,[5]]]],[116,36],[118,36],[119,36],[50,36],[89,36],[81,36],[51,36],[52,36],[3,36],[6,36],[7,36],[8,36],[57,36],[58,36],[34,[[36,[112]]]],[50,36],[89,36],[81,36],[51,36],[52,36],[3,36],[6,36],[7,36],[8,36],[57,36],[58,36],[34,[[36,[112]]]],[3,[[5,[120]]]],[[58,121],36],[58,36],[70],[70],[[6,4],36],[[7,4],36],[[8,4],36],[[57,4],36],[[58,4],36],[[6,4],36],[[7,4],36],[[8,4],36],[[57,4],36],0,0,0,0,[5],0,[13],[14],[13],[14],[13],[14],[13],[14],[11,[[36,[11]]]],[[[2,[11]],27],[[36,[55]]]],[[[2,[11]],11],[[36,[55]]]],[[[2,[25]],43],[[36,[55]]]],[[[2,[25]],11],[[36,[55]]]],[[[2,[25]],11],[[36,[55]]]],[[[2,[25]],27],[[36,[55]]]],[[[2,[11]],25],[[36,[55]]]],[[[2,[25]],25],[[36,[55]]]],[[[2,[11]],25],[[36,[55]]]],[[[2,[11]],43],[[36,[55]]]],[[[2,[25]],25],[[36,[55]]]],[[2,2],[[36,[55]]]],[[[2,[11]],11],[[36,[55]]]],[[16,16],[[36,[55]]]],[[27,11],[[36,[55]]]],[[27,25],[[36,[55]]]],[[27,43],[[36,[55]]]],[[27,11],[[36,[55]]]],[[27,1],[[36,[55]]]],[[27,27],[[36,[55]]]],[[27,25],[[36,[55]]]],[[27,2],[[36,[55]]]],[[27,2],[[36,[55]]]],[[17,17],[[36,[55]]]],[[53,53],[[36,[55]]]],[[10,10],[[36,[55]]]],[[21,21],[[36,[55]]]],[[30,30],[[36,[55]]]],[[31,31],[[36,[55]]]],[[22,22],[[36,[55]]]],[[11,11],[[36,[55]]]],[[11,27],[[36,[55]]]],[[11,25],[[36,[55]]]],[[11,43],[[36,[55]]]],[[11,2],[[36,[55]]]],[[11,43],[[36,[55]]]],[[11,2],[[36,[55]]]],[[11,27],[[36,[55]]]],[[11,25],[[36,[55]]]],[[11,2],[[36,[55]]]],[[11,2],[[36,[55]]]],[[11,25],[[36,[55]]]],[[55,55],[[36,[55]]]],[[56,56],[[36,[55]]]],[10,4],[118,36],[15,36],[58,36],[15,[[36,[122]]]],[58,36],[[],[[123,[31]]]],[[],[[123,[22]]]],[15,36],[10,36],[16,36],[17,36],[10,36],[16,36],[17,36],[6,[[36,[4]]]],[7,[[36,[4]]]],[124],[[22,124]],[124],[124],[124],[[31,31],9],[[32,32],9],[[22,22],9],[15],[27],[10],[10],[16,125],[17,126],[10,106],[16,127],[10,104],[[[10,[86]]],[[5,[4,44]]]],[[[10,[86]],128],[[5,[44]]]],[11,[[5,[129,44]]]],[11,[[5,[43,44]]]],[[]],[49,36],[16,36],[17,9],[[10,4],36],[16,36],[17,36],[21],[30],[30],[56,130],[46,36],[46,36],[46,36],[46,36],[46,36],[46,36],[[15,4]],[[27,4]],[[10,4]],[[15,4]],[[27,4]],[[10,4]],[118],[[10,4]],[[10,4,115]],[15],[16],[17],[10],[10],[55,55],[57],[58],[[10,4]],[[10,4]],[6,[[36,[4]]]],[7,[[36,[4]]]],[21],[[]],[[]],[[]],[[]],[[15,4]],[[27,4]],[[10,4]],[15],[27],[10],[50],[89],[81],[51],[52],[3],[6],[7],[8],[57],[58],[34],0,0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],[[36,[46]]]],[22,[[36,[46]]]],[46,131],[16,16],[17,17],[[10,4],10],[57],0,[[],24],[8,24],[8,24],[57,24],[57,24],[11,9],[[26,4,59]],0,[11,[[5,[11,132]]]],[31,4],[32,4],[22,4],[[]],[[37,37],37],[[17,17],17],[[10,4,4]],[[21,21]],[[30,30]],[[26,4,59],4],[[10,4],36],[[10,4],36],[11,[[5,[117,44]]]],[[17,17],133],[17,36],[21],[30],[[55,55],55],[55,55],0,[28,134],0,[2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,43],[11,[[36,[1]]]],[[],82],[[[2,[1]]],82],[[],82],[[],82],[[],82],[[],82],[11,[[2,[1]]]],[[10,4]],[[],5],[[],5],[30,[[5,[38,135]]]],[30,[[5,[39,136]]]],[30,[[5,[135]]]],[[],5],[[],5],[11,[[5,[9,44]]]],[57],[58],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[31,[[5,[31]]]],[[],5],[[],5],[[],5],[22,[[5,[22]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[16,[[5,[137]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[48,[[5,[113,[138,[113]]]]]],[[],[[5,[31,139]]]],[[],[[5,[22,139]]]],[[],[[5,[[31,[35]],139]]]],[[],[[5,[[22,[35]],139]]]],[[],[[5,[[31,[35]],139]]]],[[],[[5,[[22,[35]],139]]]],[[],[[5,[[123,[22]],139]]]],[[15,4],[[5,[140]]]],[[27,4],[[5,[140]]]],[[10,4],[[5,[140]]]],[[15,4],[[5,[140]]]],[[27,4],[[5,[140]]]],[[10,4],[[5,[140]]]],[57],[58],[31,[[5,[31]]]],[22,[[5,[22]]]],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[30],[[17,17],142],[113],[31],[22],[21],[32,[[36,[31]]]],[16,52],[16,143],[[70,113],[[5,[113,[96,[113]]]]]],[[70,113,144],[[5,[96]]]],[[70,113,145],[[5,[96]]]],[[70,113,144],[[5,[96]]]],[[70,113],[[5,[113,[96,[113]]]]]],[31,4],[32,4],[22,4],[[],119],[[],119],[4,15],[4,[[49,[68]]]],[4,[[37,[68]]]],[4,27],[4,[[10,[69]]]],[4,49],[4,37],[4,10],[11,43],[11,43],[[],49],[[],37],0,0,0,0,[[]],[[[10,[86]]],[[5,[4,44]]]],[41],[[[10,[86]]],[[5,[44]]]],[146],[147],[33],[148],[149],[150],[4],[[27,1],[[5,[88]]]],[[41,1]],[1],[151],[152],[145],[29],[86],[4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[120,4],[[5,[4]]]],[[120,4],[[5,[4]]]],[120],[120],[[]],[[]],[[]],[[]],[120,120],[153,153],[[]],[[]],[120,4],[153,1],[120],[[],120],[[120,87],[[5,[88]]]],[[153,87],[[5,[88]]]],[[153,87],[[5,[88]]]],[120],[[]],[[]],[56,153],[[]],[[]],[[]],[[]],[[]],[[]],[120,9],[120,36],[120,4],[[],120],[[[8,[4]]],120],[120,36],[120,36],[124],[120],[120],[[]],[[]],[[],82],[[],5],[[],5],[[]],[[],5],[[],5],[[],141],[[],141],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[154,154],[[154,154]],[[]],[[],55],[[154,154],55],[[],154],[[],9],[[154,154],9],[[154,87],[[5,[88]]]],[[]],[[],9],[[154,154],9],[[],9],[[154,154],9],[154],[[]],[[],9],[[154,154],9],[[],9],[[154,154],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],[[36,[55]]]],[[154,154],[[36,[55]]]],[[]],[[],5],[[],5],[[],141],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[87,[[36,[155]]]],[87,9],[156,[[36,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[155,155],[88,88],[156,156],[[]],[[]],[[]],[[88,88],55],[87,157],[87,158],[87,159],[[87,1],160],[[87,1],161],[[],88],[88,1],[159,159],[157,157],[158,158],[[159,162],159],[[157,162],157],[[158,162,162],158],[[155,155],9],[[88,88],9],[[160,1,162],160],[[161,162],161],[87,112],[160,[[5,[88]]]],[161,[[5,[88]]]],[159,[[5,[88]]]],[157,[[5,[88]]]],[158,[[5,[88]]]],[160,[[5,[88]]]],[87,145],[87,[[5,[88]]]],[87,[[5,[88]]]],[87,[[5,[88]]]],[87,[[5,[88]]]],[87,[[5,[88]]]],[87,[[5,[88]]]],[87,[[5,[88]]]],[87,[[5,[88]]]],[87,[[5,[88]]]],[[155,87],[[5,[88]]]],[[88,87],[[5,[88]]]],[[88,87],[[5,[88]]]],[[156,87],[[5,[88]]]],[[156,87],[[5,[88]]]],[156,82],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[88],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[158,162],158],[[87,1],[[5,[88]]]],[[87,9,1,1],[[5,[88]]]],[[88,88],[[36,[55]]]],[87,[[36,[4]]]],[124],[87,9],[87,9],[87,9],[[]],[[]],[[]],[[],82],[[],82],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[158,162],158],[87,[[36,[4]]]],[[163,156],[[5,[88]]]],[112,[[5,[88]]]],[[87,112],[[5,[88]]]],[156,[[5,[88]]]],[[87,156],[[5,[88]]]],[[87,156],[[5,[88]]]],[1,[[5,[88]]]],[[87,1],[[5,[88]]]],[[87,1],[[5,[88]]]],0,0,0,0,0,0,0,0,0,[117,[[5,[164,44]]]],[[165,9],165],[166,23],[166,33],[117,167],[117,148],[117,148],[117,29],[117,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[5,[43,44]]]],[117,117],[165,165],[168,168],[169,169],[170,170],[[]],[[]],[[]],[[]],[[]],[[],[[5,[29,44]]]],[[],[[5,[166,44]]]],[[165,9],165],[171,[[5,[44]]]],[[],[[5,[44]]]],[[],[[5,[44]]]],[[],[[5,[166,44]]]],[[165,9],165],[117,[[5,[164,44]]]],[117,148],[117,148],[[165,33],165],[[],168],[117,29],[[169,169],9],[[170,170],9],[172,27],[172,25],[172,[[5,[170,44]]]],[117,170],[166,[[5,[44]]]],[166,[[5,[44]]]],[[166,87],[[5,[88]]]],[[172,87],[[5,[88]]]],[[117,87],[[5,[88]]]],[[129,87],[[5,[88]]]],[[165,87],[[5,[88]]]],[[168,87],[[5,[88]]]],[[169,87],[[5,[88]]]],[[170,87],[[5,[88]]]],[[171,87],[[5,[88]]]],[173,166],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[145,169],[33,166],[117,145],[[],[[5,[44]]]],[170],[172,29],[117,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[166,33],[170,9],[170,9],[117,9],[170,9],[170,9],[117,9],[170,9],[166,9],[166,9],[170,9],[117,9],[170,9],[166,9],[166,9],[166,9],[117,29],[[],[[5,[117,44]]]],[166,[[5,[117,44]]]],[172,[[5,[117,44]]]],[117,145],[[165,145],165],[169,145],[[171,145],171],[117,[[5,[164,44]]]],[117,148],[117,148],[[],165],[[],168],[[],171],[129,[[36,[[5,[172,44]]]]]],[117,29],[[],[[5,[166,44]]]],[165,[[5,[166,44]]]],[[],165],[172,43],[117,169],[117,29],[[],[[5,[[83,[86,69]],44]]]],[166,[[5,[4,44]]]],[166,[[5,[4,44]]]],[[165,9],165],[[166,29],[[5,[4,44]]]],[[166,128],[[5,[44]]]],[[166,128],[[5,[44]]]],[[],[[5,[129,44]]]],[[],[[5,[43,44]]]],[[166,83],[[5,[4,44]]]],[[166,83],[[5,[4,44]]]],[[],[[5,[82,44]]]],[[166,82],[[5,[4,44]]]],[[166,82],[[5,[4,44]]]],[166,[[5,[4,44]]]],[166,[[5,[4,44]]]],[169,9],[[171,9],171],[[],[[5,[44]]]],[[],[[5,[44]]]],[[],[[5,[44]]]],[[],[[5,[44]]]],[[166,174],[[5,[29,44]]]],[[166,174],[[5,[29,44]]]],[[168,164],168],[[166,29],[[5,[44]]]],[[169,145]],[[166,164],[[5,[44]]]],[[168,164],168],[169,[[5,[44]]]],[[166,169],[[5,[44]]]],[[169,9]],[[166,168],[[5,[44]]]],[117,29],[[],[[5,[44]]]],[117,148],[117,148],[117,29],[117,29],[117,148],[117,148],[117,29],[117,145],[117,29],[117,145],[117,148],[117,148],[117,29],[117,29],[117,29],[117,145],[[],[[5,[117,44]]]],[166,[[5,[44]]]],[166,[[5,[44]]]],[[]],[[]],[[]],[[]],[[]],[[165,9],165],[166,[[5,[166,44]]]],[[],[[5,[9,44]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[117,145],[[],[[5,[44]]]],[166,[[5,[4,44]]]],[166,[[5,[4,44]]]],[[165,9],165],[[166,29],[[5,[4,44]]]],[166,[[5,[4,44]]]],[166,[[5,[4,44]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[175,175],[[]],[[],175],[[],29],[175,29],[[175,87],[[5,[88]]]],[[]],[[]],[[],29],[[]],[[]],[[],175],[[29,29],175],[[]],[[],5],[[],5],[[],141],[[]],[175],[146],[147],[33],[148],[149],[150],[4],[1],[[175,1]],[151],[152],[145],[29],[86],[4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[176,4]],[[128,4],128],[[177,4]],[4],[4],[128],[178,23],[179,23],[180,23],[181,23],[182,23],[183,23],[128],[178,33],[179,33],[180,33],[181,33],[182,33],[183,33],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[184],[185],[[]],[[]],[[],186],[184,4],[185,4],[187,4],[128,4],[44,[[36,[46]]]],[[],188],[187,187],[189,189],[190,190],[191,191],[192,192],[177,177],[174,174],[[189,189]],[[]],[[]],[[]],[[]],[[]],[[]],[[190,190],55],[4],[[184,4]],[[179,4]],[[189,4]],[[191,4]],[[188,4]],[[193,4]],[[],[[5,[29,44]]]],[[],189],[[],191],[[],192],[176],[177],[176],[194,1],[44,1],[195,1],[44,[[5,[[73,[69]],44]]]],[185],[[],191],[128,128],[[189,189],9],[[190,190],9],[[174,174],9],[195,44],[[],[[5,[44]]]],[184,[[5,[44]]]],[179,[[5,[44]]]],[189,[[5,[44]]]],[191,[[5,[44]]]],[188,[[5,[44]]]],[193,[[5,[44]]]],[187],[[],[[5,[44]]]],[185,[[5,[44]]]],[196,[[5,[44]]]],[180,[[5,[44]]]],[180,[[5,[44]]]],[181,[[5,[44]]]],[182,[[5,[44]]]],[182,[[5,[44]]]],[183,[[5,[44]]]],[[[189,[83]]],[[5,[44]]]],[189,[[5,[44]]]],[[[189,[73]]],[[5,[44]]]],[[[189,[[83,[86]]]]],[[5,[44]]]],[189,[[5,[44]]]],[128,[[5,[44]]]],[192,[[5,[44]]]],[192,[[5,[44]]]],[[184,87],[[5,[88]]]],[[185,87],[[5,[88]]]],[[194,87],[[5,[88]]]],[[194,87],[[5,[88]]]],[[196,87],[[5,[88]]]],[[44,87],[[5,[88]]]],[[44,87],[[5,[88]]]],[[187,87],[[5,[88]]]],[[178,87],[[5,[88]]]],[[179,87],[[5,[88]]]],[[180,87],[[5,[88]]]],[[181,87],[[5,[88]]]],[[182,87],[[5,[88]]]],[[183,87],[[5,[88]]]],[[197,87],[[5,[88]]]],[[176,87],[[5,[88]]]],[[195,87],[[5,[88]]]],[[195,87],[[5,[88]]]],[[189,87],[[5,[88]]]],[[190,87],[[5,[88]]]],[[190,87],[[5,[88]]]],[[128,87],[[5,[88]]]],[[191,87],[[5,[88]]]],[[192,87],[[5,[88]]]],[[177,87],[[5,[88]]]],[[174,87],[[5,[88]]]],[[188,87],[[5,[88]]]],[[193,87],[[5,[88]]]],[[186,87],[[5,[88]]]],[[198,87],[[5,[88]]]],[[199,87],[[5,[88]]]],[[]],[[]],[[]],[[]],[195,44],[200,44],[[]],[190,44],[[],187],[[]],[[],187],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,44],[184],[185],[196],[44,[[36,[46]]]],[189],[188],[193],[184],[185],[196],[44,[[36,[46]]]],[189],[188],[193],[[],[[5,[9,44]]]],[190],[187,4],[128],[128],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[195,44],[184],[185,[[5,[[195,[185]]]]]],[194,[[83,[86,69]]]],[196,[[5,[[195,[196]]]]]],[44,[[36,[[73,[46,69]]]]]],[195],[189],[188],[193],[[]],[[]],[[]],[185],[195],[189,9],[184,9],[178,9],[179,9],[197,9],[[],9],[189,9],[[],9],[178,9],[179,9],[180,9],[181,9],[182,9],[183,9],[185,9],[196,9],[180,9],[180,9],[181,9],[182,9],[182,9],[183,9],[[],9],[[[189,[83]]],9],[[[189,[[83,[86]]]]],9],[189,9],[189,9],[[[189,[73]]],9],[192,9],[192,9],[44,190],[[],44],[187,4],[193,29],[178,[[199,[179]]]],[[],199],[178,179],[180,181],[182,183],[[],184],[[],185],[[],196],[190,44],[[],176],[[],189],[[],177],[186,[[36,[[5,[86,44]]]]]],[198,[[36,[[5,[[83,[86,69]],44]]]]]],[199,[[36,[[5,[82,44]]]]]],[[],44],[[190,190],[[36,[55]]]],[189,29],0,[124],[124],[124],[44,[[36,[33]]]],[[],[[5,[4,44]]]],[184,[[5,[4,44]]]],[178,[[5,[4,44]]]],[179,[[5,[4,44]]]],[197,[[5,[4,44]]]],[189,[[5,[4,44]]]],[191,[[5,[4,44]]]],[188,[[5,[4,44]]]],[193,[[5,[4,44]]]],[[184,128],[[5,[44]]]],[[197,128],[[5,[44]]]],[128,[[5,[44]]]],[[189,128],[[5,[44]]]],[[191,128],[[5,[44]]]],[[193,128],[[5,[44]]]],[128,[[5,[44]]]],[184,[[5,[44]]]],[178,[[5,[44]]]],[179,[[5,[44]]]],[[],[[5,[44]]]],[189,[[5,[44]]]],[[178,82],[[5,[4,44]]]],[[179,82],[[5,[4,44]]]],[82,[[5,[4,44]]]],[[184,83],[[5,[4,44]]]],[[178,83],[[5,[4,44]]]],[[179,83],[[5,[4,44]]]],[83,[[5,[4,44]]]],[[],[[5,[82,44]]]],[[184,82],[[5,[4,44]]]],[[178,82],[[5,[4,44]]]],[[179,82],[[5,[4,44]]]],[82,[[5,[4,44]]]],[[179,86,83],[[5,[4,44]]]],[[86,83],[[5,[4,44]]]],[184,[[5,[4,44]]]],[178,[[5,[4,44]]]],[179,[[5,[4,44]]]],[197,[[5,[4,44]]]],[[],[[5,[4,44]]]],[189,[[5,[4,44]]]],[188,[[5,[4,44]]]],[128,128],[189],[86,197],[[],[[5,[44]]]],[174,[[5,[29,44]]]],[[184,174],[[5,[29,44]]]],[[185,174],[[5,[29,44]]]],[[189,174],[[5,[29,44]]]],[[191,174],[[5,[29,44]]]],[[184,148],[[5,[44]]]],[[187,4],187],[[128,4],128],[[193,29]],[[189,29]],[[],192],[186],[44,[[36,[46]]]],[86,198],[[],182],[[],178],[[],180],[[],[[5,[29,44]]]],[189,[[5,[29,44]]]],[191,[[5,[29,44]]]],[184,[[5,[29,44]]]],[[],[[5,[29,44]]]],[189,[[5,[29,44]]]],[191,[[5,[29,44]]]],[29,193],[[]],[[]],[[]],[[]],[[]],[[]],[[],82],[[],82],[[],82],[[],82],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[187,128],[128],[4,184],[4,185],[4,196],[[],[[5,[4,44]]]],[185,[[5,[4,44]]]],[196,[[5,[4,44]]]],[180,[[5,[4,44]]]],[180,[[5,[4,44]]]],[181,[[5,[4,44]]]],[182,[[5,[4,44]]]],[182,[[5,[4,44]]]],[183,[[5,[4,44]]]],[189,[[5,[4,44]]]],[[[189,[83]]],[[5,[4,44]]]],[[[189,[[83,[86]]]]],[[5,[4,44]]]],[[[189,[73]]],[[5,[4,44]]]],[189,[[5,[4,44]]]],[128,[[5,[4,44]]]],[192,[[5,[4,44]]]],[192,[[5,[4,44]]]],[185,[[5,[44]]]],[196,[[5,[44]]]],[180,[[5,[44]]]],[180,[[5,[44]]]],[181,[[5,[44]]]],[182,[[5,[44]]]],[182,[[5,[44]]]],[183,[[5,[44]]]],[[],[[5,[44]]]],[196,[[5,[44]]]],[180,[[5,[44]]]],[180,[[5,[44]]]],[181,[[5,[44]]]],[182,[[5,[44]]]],[182,[[5,[44]]]],[183,[[5,[44]]]],[[],[[5,[44]]]],[[196,156],[[5,[44]]]],[[180,156],[[5,[44]]]],[[180,156],[[5,[44]]]],[[182,156],[[5,[44]]]],[[182,156],[[5,[44]]]],[156,[[5,[44]]]],[185,[[5,[4,44]]]],[196,[[5,[4,44]]]],[180,[[5,[4,44]]]],[180,[[5,[4,44]]]],[181,[[5,[4,44]]]],[182,[[5,[4,44]]]],[182,[[5,[4,44]]]],[183,[[5,[4,44]]]],[[],[[5,[4,44]]]],[[[189,[83]]],[[5,[4,44]]]],[189,[[5,[4,44]]]],[[[189,[[83,[86]]]]],[[5,[4,44]]]],[189,[[5,[4,44]]]],[[[189,[73]]],[[5,[4,44]]]],[192,[[5,[4,44]]]],[192,[[5,[4,44]]]],[128,4],0,0,0,0,[[]],[[]],[[],186],[[],188],[4],[[],[[5,[44]]]],[[],[[5,[44]]]],[[],[[5,[9,44]]]],[[],9],[[],9],[[],199],[[],[[5,[4,44]]]],[128,[[5,[44]]]],[128,[[5,[44]]]],[[],[[5,[44]]]],[82,[[5,[4,44]]]],[83,[[5,[4,44]]]],[82,[[5,[4,44]]]],[[86,83],[[5,[4,44]]]],[[],[[5,[4,44]]]],[[],[[5,[44]]]],[174,[[5,[29,44]]]],[86,198],[[],[[5,[29,44]]]],[[],[[5,[29,44]]]],[29,193],[[],[[5,[4,44]]]],[[],[[5,[44]]]],[[],[[5,[44]]]],[156,[[5,[44]]]],[[],[[5,[4,44]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[201,4],[[5,[4]]]],[[202,4],[[5,[4]]]],[4,[[5,[4]]]],[[203,4],[[5,[4]]]],[[204,4],[[5,[4]]]],[[205,4],[[5,[4]]]],[[206,4],[[5,[4]]]],[[207,4],[[5,[4]]]],[[208,4],[[5,[4]]]],[[209,4],[[5,[4]]]],[[210,4],[[5,[4]]]],[[201,4],[[5,[4]]]],[[202,4],[[5,[4]]]],[4,[[5,[4]]]],[[203,4],[[5,[4]]]],[[204,4],[[5,[4]]]],[[205,4],[[5,[4]]]],[[211,4],[[5,[4]]]],[[206,4],[[5,[4]]]],[[207,4],[[5,[4]]]],[[208,4],[[5,[4]]]],[[209,4],[[5,[4]]]],[[210,4],[[5,[4]]]],[[],9],[[],9],[[],212],[4],[4,36],[4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],204],[201,201],[202,202],[213,213],[214,214],[212,212],[204,204],[215,215],[205,205],[211,211],[206,206],[216,216],[217,217],[218,218],[219,219],[220,220],[221,221],[222,222],[207,207],[223,223],[208,208],[224,224],[225,225],[209,209],[226,226],[227,227],[228,228],[229,229],[230,230],[210,210],[231,231],[232,232],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],215],[[],55],[[],55],[[]],[[]],[[],205],[201,4],[202,4],[[],4],[212,4],[204,4],[205,4],[206,4],[216,4],[218,4],[208,4],[210,4],[[],211],[[],214],[[],214],[[],206],[[],9],[[],9],[[]],[[]],[4],[[],216],[[],217],[[],36],[204,36],[218,36],[207,36],[[],36],[[],201],[[],202],[[201,87],[[5,[88]]]],[[202,87],[[5,[88]]]],[[213,87],[[5,[88]]]],[[214,87],[[5,[88]]]],[[212,87],[[5,[88]]]],[[203,87],[[5,[88]]]],[[204,87],[[5,[88]]]],[[215,87],[[5,[88]]]],[[205,87],[[5,[88]]]],[[211,87],[[5,[88]]]],[[206,87],[[5,[88]]]],[[216,87],[[5,[88]]]],[[217,87],[[5,[88]]]],[[218,87],[[5,[88]]]],[[219,87],[[5,[88]]]],[[220,87],[[5,[88]]]],[[221,87],[[5,[88]]]],[[222,87],[[5,[88]]]],[[207,87],[[5,[88]]]],[[223,87],[[5,[88]]]],[[208,87],[[5,[88]]]],[[224,87],[[5,[88]]]],[[225,87],[[5,[88]]]],[[209,87],[[5,[88]]]],[[226,87],[[5,[88]]]],[[227,87],[[5,[88]]]],[[228,87],[[5,[88]]]],[[229,87],[[5,[88]]]],[[230,87],[[5,[88]]]],[[210,87],[[5,[88]]]],[[231,87],[[5,[88]]]],[[232,87],[[5,[88]]]],[201],[202],[213],[[]],[212],[203],[204],[215],[205],[206],[216],[217],[218],[219],[220],[221],[222],[207],[223],[208],[224],[225],[209],[226],[[]],[209],[4],[4,36],[4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],228],[[],233],[[]],[[],218],[[],9],[[],9],[[],219],[[],220],[[],213],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[212,[[36,[120]]]],[[],9],[212,9],[215,9],[205,9],[206,9],[218,9],[219,9],[221,9],[207,9],[[],9],[[],9],[[],9],[[],9],[201,36],[202,36],[[],36],[204,36],[205,36],[218,36],[208,36],[210,36],[[],9],[214,4],[[],4],[212,4],[215,4],[205,4],[206,4],[218,4],[219,4],[221,4],[207,4],[229,4],[230,4],[[],9],[[],221],[[],222],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],9],[[],36],[201,36],[202,36],[213,36],[214,36],[212,36],[203,36],[204,36],[215,36],[205,36],[211,36],[206,36],[216,36],[217,36],[218,36],[219,36],[220,36],[221,36],[222,36],[207,36],[223,36],[208,36],[224,36],[225,36],[209,36],[226,36],[227,36],[228,36],[229,36],[230,36],[210,36],[231,36],[232,36],[[],36],[201,36],[202,36],[214,36],[212,36],[203,36],[204,36],[215,36],[205,36],[206,36],[216,36],[217,36],[218,36],[219,36],[221,36],[207,36],[208,36],[225,36],[209,36],[227,36],[229,36],[230,36],[210,36],[[],[[5,[120]]]],[205,[[5,[120]]]],[4,36],[[203,4],36],[[204,4],36],[[205,4],36],[[206,4],36],[[218,4],36],[[207,4],36],[[208,4],36],[[225,4],36],[[209,4],36],[[227,4],36],[[210,4],36],[4,36],[[203,4],36],[[204,4],36],[[206,4],36],[[218,4],36],[[207,4],36],[[208,4],36],[[225,4],36],[[209,4],36],[[210,4],36],[[],229],[[],230],[[],[[36,[55]]]],[[],[[36,[55]]]],[[]],[[],4],[[],58],[[],[[36,[4]]]],[[]],[[]],[[],36],[[],210],[[],231],[[],207],[[],36],[204,36],[218,36],[207,36],[201],[202],[[]],[212],[203],[204],[215],[205],[206],[216],[217],[218],[219],[221],[207],[208],[225],[209],[[],[[36,[4]]]],[[],223],[201],[202],[213],[214],[[]],[212],[203],[204],[215],[205],[211],[206],[216],[217],[218],[219],[220],[221],[222],[207],[223],[208],[224],[225],[209],[226],[227],[229],[230],[210],[231],[232],[4,208],[[],224],[4,225],[[],[[36,[4]]]],[36,232],[[]],[[]],[4,209],[[],226],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[201],[202],[[]],[212],[203],[204],[215],[205],[211],[206],[216],[217],[218],[219],[221],[222],[207],[223],[208],[224],[225],[209],[226],[231],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[201],[202],[[]],[212],[203],[204],[215],[205],[206],[216],[217],[218],[219],[221],[207],[208],[225],[209],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[]],[[],227],[[],227],0,0,0,0,0,0,0,0,0,0,[[234,234],234],[[],4],[[],4],[[],4],0,[[234,234],234],[[]],[35],[35],[35],[35],[35],[35],[35],[35],[35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[234,234],234],[235,235],[236,236],[35,35],[234,234],[[]],[[]],[[]],[[]],[[236,236],55],[[]],[[],236],[236],[236],[[],235],[[]],[236],[[235,235],9],[[236,236],9],[[234,234],9],[[235,87],[[5,[88]]]],[[236,87],[[5,[88]]]],[[35,87],[[5,[88]]]],[[234,87],[[5,[88]]]],[[]],[[]],[[]],[[]],[[]],[[]],[235],[236],[[]],[[]],[[]],[[]],[236],0,[[],4],[[],4],[[],9],[[],236],[[],35],[[236,236],[[36,[55]]]],[[]],0,[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[234,234],234],[[]],[[]],[236],[[]],[[]],[[]],[[]],[[]],[[]],[35],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],141],[[],141],[[],141],[[],141],[[],35],[[]],[[]],0,[[],4],[35],[[]],[[]],[[]],[[],35],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],237],[237,237],[237,36],[[]],[[]],[[]],[237,237],[238,238],[97,97],[239,239],[240,240],[241,241],[[]],[[]],[[]],[[]],[[]],[[]],[[238,238],55],[[],9],[239,9],[240,9],[241,9],[237,36],[[],97],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],24],[97,24],[239,24],[239,24],[240,24],[240,24],[241,24],[241,24],[[237,237],9],[[238,238],9],[[97,97],9],[[239,239],9],[[240,240],9],[[241,241],9],[[237,87],[[5,[88]]]],[[238,87],[[5,[88]]]],[[97,87],[[5,[88]]]],[[239,87],[[5,[88]]]],[[240,87],[[5,[88]]]],[[241,87],[[5,[88]]]],[[242,87],[[5,[88]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],237],[[]],[[[237,[56]]],237],[[97,1],36],[97,36],[[[239,[4]],1],36],[[[239,[4]]],36],[[[240,[4]]],36],[[[240,[4]],1],36],[[[241,[4]],1],36],[[[241,[4]]],36],[[97,1],36],[97,36],[[[239,[4]],1],36],[[[239,[4]]],36],[[[240,[4]],1],36],[[[240,[4]]],36],[[[241,[4]],1],36],[[[241,[4]]],36],[97],[[97,1]],[[[239,[4]]]],[[[239,[4]],1]],[[[240,[4]],1]],[[[240,[4]]]],[[[241,[4]],1]],[[[241,[4]]]],[[97,1]],[97],[[[239,[4]]]],[[[239,[4]],1]],[[[240,[4]],1]],[[[240,[4]]]],[[[241,[4]],1]],[[[241,[4]]]],[237],[238],[97],[239],[240],[241],[[]],[97],[[97,1]],[[[239,[4]],1]],[[[239,[4]]]],[[[240,[4]],1]],[[[240,[4]]]],[[[241,[4]],1]],[[[241,[4]]]],[[]],[97],[[97,1]],[[[239,[4]]]],[[[239,[4]],1]],[[[240,[4]]]],[[[240,[4]],1]],[[[241,[4]]]],[[[241,[4]],1]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[237,9],[237,9],[237,237],[237,237],[[]],[[]],[[]],[239,36],[[]],[[239,4],36],[[238,238],[[36,[55]]]],[[]],[[]],[123,238],[[]],[[]],[[]],[[]],[239],0,0,[[],24],[97,24],[239,24],[239,24],[240,24],[240,24],[241,24],[241,24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[243],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[243,243],[244,244],[245,245],[246,246],[247,247],[248,248],[249,249],[250,250],[251,251],[252,252],[253,253],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[247,4],[248,4],[254,4],[249,4],[255,4],[250,4],[251,4],[256,4],[252,4],[257,4],[253,4],[258,4],[[243,87],[[5,[88]]]],[[244,87],[[5,[88]]]],[[259,87],[[5,[88]]]],[[260,87],[[5,[88]]]],[[245,87],[[5,[88]]]],[[261,87],[[5,[88]]]],[[262,87],[[5,[88]]]],[[263,87],[[5,[88]]]],[[264,87],[[5,[88]]]],[[265,87],[[5,[88]]]],[[266,87],[[5,[88]]]],[[267,87],[[5,[88]]]],[[246,87],[[5,[88]]]],[[246,87],[[5,[88]]]],[[247,87],[[5,[88]]]],[[248,87],[[5,[88]]]],[[254,87],[[5,[88]]]],[[249,87],[[5,[88]]]],[[255,87],[[5,[88]]]],[[250,87],[[5,[88]]]],[[251,87],[[5,[88]]]],[[256,87],[[5,[88]]]],[[252,87],[[5,[88]]]],[[257,87],[[5,[88]]]],[[253,87],[[5,[88]]]],[[258,87],[[5,[88]]]],[246],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8],[8],[4],[4],[[]],[[],36],[[],36],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[255],[256],[258],[249,9],[255,9],[250,9],[251,9],[256,9],[253,9],[258,9],[[]],[266,36],[267,36],[246,[[36,[86]]]],[247,36],[248,36],[254,36],[249,36],[255,36],[250,36],[251,36],[256,36],[252,36],[257,36],[253,36],[258,36],[243,36],[244,36],[259,36],[260,36],[245,36],[261,36],[262,36],[263,36],[264,36],[265,36],[266,36],[267,36],[246,[[36,[86]]]],[247,36],[248,36],[254,36],[249,36],[255,36],[250,36],[251,36],[256,36],[252,36],[257,36],[253,36],[258,36],[243,36],[244,36],[259,36],[260,36],[245,36],[261,36],[266,36],[267,36],[246,[[36,[86]]]],[247,36],[248,36],[254,36],[249,36],[255,36],[250,36],[251,36],[256,36],[252,36],[257,36],[253,36],[258,36],[[247,4],36],[[248,4],36],[[254,4],36],[[249,4],36],[[255,4],36],[[250,4],36],[[251,4],36],[[256,4],36],[[252,4],36],[[257,4],36],[[253,4],36],[[258,4],36],[[247,4],36],[[248,4],36],[[254,4],36],[[249,4],36],[[255,4],36],[[250,4],36],[[251,4],36],[[256,4],36],[[252,4],36],[[257,4],36],[[253,4],36],[[258,4],36],[[[240,[4]]],[[8,[4]]]],[249],[251],[253],[243],[244],[259],[260],[245],[261],[262],[263],[264],[265],[266],[267],[246],[247],[248],[254],[249],[255],[250],[251],[256],[252],[257],[253],[258],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],82],[246],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[268,9],[268,9],[269,1],[270,1],[271,1],[272,1],[273,1],[274,1],[275,1],[276,1],[277,1],[278,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[269,269],[279,279],[280,280],[270,270],[268,268],[271,271],[272,272],[273,273],[274,274],[275,275],[276,276],[281,281],[282,282],[283,283],[284,284],[285,285],[286,286],[277,277],[278,278],[287,287],[288,288],[289,289],[290,290],[291,291],[292,292],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[270,4],[268,4],[279,1],[280,1],[[279,279],9],[[280,280],9],[[291,291],9],[279,[[36,[4]]]],[268,36],[[269,87],[[5,[88]]]],[[279,87],[[5,[88]]]],[[279,87],[[5,[88]]]],[[280,87],[[5,[88]]]],[[280,87],[[5,[88]]]],[[270,87],[[5,[88]]]],[[268,87],[[5,[88]]]],[[271,87],[[5,[88]]]],[[272,87],[[5,[88]]]],[[273,87],[[5,[88]]]],[[274,87],[[5,[88]]]],[[275,87],[[5,[88]]]],[[276,87],[[5,[88]]]],[[281,87],[[5,[88]]]],[[282,87],[[5,[88]]]],[[283,87],[[5,[88]]]],[[284,87],[[5,[88]]]],[[285,87],[[5,[88]]]],[[286,87],[[5,[88]]]],[[277,87],[[5,[88]]]],[[278,87],[[5,[88]]]],[[287,87],[[5,[88]]]],[[288,87],[[5,[88]]]],[[288,87],[[5,[88]]]],[[289,87],[[5,[88]]]],[[289,87],[[5,[88]]]],[[290,87],[[5,[88]]]],[[290,87],[[5,[88]]]],[[291,87],[[5,[88]]]],[[292,87],[[5,[88]]]],[288],[289],[290],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[73,[69]]],[[73,[1,69]]]],[1,5],[[],[[5,[1,279]]]],[[],[[5,[1,279]]]],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[291],[268,9],[270,36],[268,36],[285,[[36,[1]]]],[277,[[36,[1]]]],[278,[[36,[1]]]],[268,4],[[],292],[269,[[36,[1]]]],[270,36],[268,[[36,[86]]]],[271,[[36,[1]]]],[272,[[36,[1]]]],[273,[[36,[1]]]],[274,[[36,[1]]]],[275,[[36,[1]]]],[276,[[36,[1]]]],[281,36],[282,36],[283,[[36,[1]]]],[284,[[36,[1]]]],[285,[[36,[1]]]],[286,[[36,[1]]]],[277,[[36,[1]]]],[278,[[36,[1]]]],[287,[[36,[152]]]],[288,[[36,[112]]]],[289,[[36,[112]]]],[290,[[36,[112]]]],[292,[[36,[291]]]],[269,[[36,[1]]]],[270,36],[268,[[36,[86]]]],[271,[[36,[1]]]],[272,[[36,[1]]]],[273,[[36,[1]]]],[274,[[36,[1]]]],[281,36],[282,36],[283,[[36,[1]]]],[284,[[36,[1]]]],[285,[[36,[1]]]],[286,[[36,[1]]]],[277,[[36,[1]]]],[278,[[36,[1]]]],[[268,4],36],[[268,4],36],[270,4],0,[268,[[36,[4]]]],[124],[124],[268,36],[268,[[36,[4]]]],[270],[268],[285],[286],[277],[278],[287],[288],[289],[290],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],82],[[],82],[[],82],[[],82],[[],82],[288],[289],[290],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[291,1],[279,4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[293,293],[294,294],[295,295],[296,296],[297,297],[298,298],[299,299],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[293,293],9],[[293,87],[[5,[88]]]],[[294,87],[[5,[88]]]],[[295,87],[[5,[88]]]],[[296,87],[[5,[88]]]],[[297,87],[[5,[88]]]],[[298,87],[[5,[88]]]],[[299,87],[[5,[88]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[294,1],[295,1],[296,1],[297,1],[298,1],[299,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[1,9],[1,9],[1,9],[[],293],[294,293],[295,293],[296,293],[297,293],[298,293],[299,293],[[],293],[294,293],[295,293],[296,293],[297,293],[298,293],[299,293],[[],36],[294,36],[295,36],[296,36],[297,36],[298,36],[299,36],[[],36],[294,36],[295,36],[296,36],[297,36],[298,36],[299,36],[[],36],[295,36],[296,36],[297,36],[298,36],[[],36],[295,36],[296,36],[297,36],[298,36],[1,[[36,[1]]]],[1,[[36,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],0,0,0,0,0,0,0,0,0,0,[300,301],[[],[[5,[302,44]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[303,303],[300,300],[134,134],[[]],[[]],[[]],[[],134],[[303,303],9],[[300,300],9],[[304,87],[[5,[88]]]],[[305,87],[[5,[88]]]],[[306,87],[[5,[88]]]],[[307,87],[[5,[88]]]],[[303,87],[[5,[88]]]],[[303,87],[[5,[88]]]],[[308,87],[[5,[88]]]],[[300,87],[[5,[88]]]],[[134,87],[[5,[88]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[304,[21]]]],[305,36],[300],[134,300],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[307,9],[307,[[5,[[73,[74,69]]]]]],[[308,82],308],[134,[[36,[1]]]],[[],305],[[],308],[[],9],[[]],[144],[145],[124],[86],[[[304,[21]]]],[[[304,[30]]]],[[]],[[[304,[30]]]],[[[304,[21]]]],[144],[145],[[],28],[306,307],[308,[[5,[28,44]]]],[[308,306],[[5,[307,44]]]],[308,[[5,[28,44]]]],[[308,4],308],[[[304,[30]]]],[[[304,[21]]]],[307,134],[[]],[[]],[[]],[[],82],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[304,[[5,[303]]]],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[[],141],[134],[304],[[[304,[30]]]],[[[304,[30]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[309,144],309],[[164,144],164],[[144,144],144],[[309,144]],[[164,144]],[[144,144]],[144,151],[144,151],[144,151],[144,29],[144,310],[144,311],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[309,144],[[36,[309]]]],[[164,144],[[36,[164]]]],[[144,144],[[36,[144]]]],[[144,145],[[36,[144]]]],[[309,309],[[36,[144]]]],[[144,145],[[36,[144]]]],[[309,144],[[36,[309]]]],[[164,144],[[36,[164]]]],[[144,144],[[36,[144]]]],[309,309],[164,164],[312,312],[144,144],[313,313],[[]],[[]],[[]],[[]],[[]],[[309,309],55],[[164,164],55],[[144,144],55],[[],144],[312,1],[[144,145],144],[[144,145]],[[144,144],310],[[144,144],311],[[144,310],144],[[144,311],144],[312,144],[[309,309],144],[[164,164],[[5,[144,312]]]],[309,144],[164,[[5,[144,312]]]],[[309,309],9],[[164,164],9],[[144,144],9],[[313,313],9],[[309,87],[[5,[88]]]],[[164,87],[[5,[88]]]],[[312,87],[[5,[88]]]],[[312,87],[[5,[88]]]],[[144,87],[[5,[88]]]],[[313,87],[[5,[88]]]],[[313,87],[[5,[88]]]],[[]],[[]],[[]],[[]],[[]],[29,144],[29,144],[29,144],[29,144],[310,144],[311,144],[309],[164],[144],[[]],[[]],[[]],[[]],[[]],[144,9],[[144,145],144],[[144,145]],[[144,310],144],[[144,311],144],[[29,145],144],[[],309],[[],164],[[309,309],[[36,[55]]]],[[164,164],[[36,[55]]]],[[144,144],[[36,[55]]]],[124],[124],[[144,144],144],[[309,309],144],[[144,145],144],[[144,144],144],[[309,309],144],[[309,144],309],[[164,144],164],[[144,144],144],[[309,144]],[[164,144]],[[144,144]],[144,145],[144,145],[144,145],[[],144],[[],144],[[]],[[]],[[]],[[]],[[]],[[],82],[[],82],[[],5],[[],5],[[],5],[[],5],[[],5],[310,[[5,[144,313]]]],[311,[[5,[144,313]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],141],[[],141],[[],141],[[],141],[[],141]],"p":[[15,"str"],[4,"Cow"],[3,"VecIntoIter"],[15,"usize"],[4,"Result"],[3,"SliceIter"],[3,"SliceIterMut"],[3,"Range"],[15,"bool"],[3,"VecDeque"],[3,"Path"],[3,"Ancestors"],[4,"BTreeEntry"],[4,"HashMapEntry"],[3,"BinaryHeap"],[3,"BTreeMap"],[3,"BTreeSet"],[4,"ArrayCombinations"],[3,"ArrayWindows"],[3,"Arrays"],[3,"Cell"],[3,"Arc"],[3,"BorrowedFd"],[4,"Bound"],[3,"OsStr"],[3,"AtomicUsize"],[3,"OsString"],[3,"JoinHandle"],[15,"u64"],[3,"RefCell"],[3,"Rc"],[3,"RcWeak"],[15,"i32"],[3,"Chars"],[19,"MaybeUninit"],[4,"Option"],[3,"HashSet"],[3,"Ref"],[3,"RefMut"],[3,"RandomHasher"],[3,"DefaultHasher"],[3,"BuildHasherDefault"],[3,"PathBuf"],[3,"Error"],[4,"CartesianProduct"],[8,"Error"],[4,"CircularArrayWindows"],[3,"Mutex"],[3,"HashMap"],[3,"BTreeIter"],[3,"BTreeKeys"],[3,"BTreeValues"],[3,"PhantomData"],[3,"ParseIntError"],[4,"Ordering"],[4,"Infallible"],[3,"RangeInclusive"],[3,"Peekable"],[4,"AtomicOrdering"],[3,"Components"],[3,"DedupConsecutive"],[8,"Default"],[8,"Clone"],[8,"Eq"],[8,"Hash"],[8,"Ord"],[3,"MapToIndex"],[3,"RandomState"],[3,"Global"],[3,"Condvar"],[3,"Difference"],[3,"Display"],[3,"Box"],[8,"Any"],[3,"Weak"],[3,"Drain"],[3,"Drain"],[3,"DrainFilter"],[3,"DrainFilter"],[3,"DrainSorted"],[3,"BTreeIntoIter"],[3,"String"],[3,"Vec"],[3,"OccupiedEntry"],[4,"FlattenOk"],[15,"u8"],[3,"Formatter"],[3,"Error"],[3,"BTreeIterMut"],[3,"CString"],[3,"CStr"],[3,"HashMap"],[3,"HashSet"],[15,"never"],[8,"IntoIterator"],[3,"PoisonError"],[3,"RangeFull"],[3,"OccupiedEntry"],[3,"Intersection"],[3,"IntoIter"],[3,"Iter"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"Iter"],[3,"IntoIterSorted"],[3,"IntoKeys"],[3,"IntoValues"],[4,"IntErrorKind"],[15,"char"],[3,"MutexGuard"],[3,"MapOk"],[8,"FnMut"],[4,"MergeConsecutive"],[3,"Metadata"],[3,"MultiPeek"],[3,"WhileSome"],[3,"IntoIter"],[8,"FnOnce"],[3,"PeekMut"],[3,"Pin"],[3,"Demand"],[3,"Range"],[3,"Range"],[3,"RangeMut"],[3,"BorrowedCursor"],[3,"ReadDir"],[3,"ExitCode"],[3,"Source"],[3,"StripPrefixError"],[3,"SymmetricDifference"],[3,"Thread"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"OccupiedError"],[4,"TryLockError"],[3,"AllocError"],[3,"TryReserveError"],[3,"TypeId"],[3,"Union"],[3,"ValuesMut"],[3,"Duration"],[15,"u32"],[15,"i128"],[15,"i16"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[3,"TryFromSliceError"],[3,"Reverse"],[4,"Alignment"],[3,"Arguments"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"],[8,"Debug"],[8,"Write"],[3,"SystemTime"],[3,"OpenOptions"],[3,"File"],[3,"stat"],[3,"FileTimes"],[3,"Permissions"],[3,"FileType"],[3,"DirBuilder"],[3,"DirEntry"],[3,"OwnedFd"],[4,"SeekFrom"],[3,"SipHasher"],[3,"IoSliceMut"],[3,"IoSlice"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[3,"BufReader"],[3,"BufWriter"],[3,"Bytes"],[3,"BorrowedBuf"],[3,"Chain"],[3,"Cursor"],[4,"ErrorKind"],[3,"Empty"],[3,"Sink"],[3,"Take"],[3,"WriterPanicked"],[3,"IntoInnerError"],[3,"LineWriter"],[3,"Repeat"],[3,"Split"],[3,"Lines"],[3,"NulError"],[3,"FlatMap"],[3,"Flatten"],[3,"ByRefSized"],[3,"Chain"],[3,"Copied"],[3,"Enumerate"],[3,"Rev"],[3,"Skip"],[3,"Take"],[3,"Repeat"],[3,"Cycle"],[3,"ArrayChunks"],[3,"IntersperseWith"],[3,"Empty"],[3,"Cloned"],[3,"Filter"],[3,"FilterMap"],[3,"Fuse"],[3,"Inspect"],[3,"Intersperse"],[3,"Map"],[3,"MapWhile"],[3,"Scan"],[3,"SkipWhile"],[3,"StepBy"],[3,"TakeWhile"],[3,"Zip"],[3,"FromFn"],[3,"Once"],[3,"OnceWith"],[3,"RepeatWith"],[3,"Successors"],[8,"Iterator"],[3,"Assume"],[3,"Discriminant"],[3,"ManuallyDrop"],[4,"ControlFlow"],[4,"GeneratorState"],[3,"RangeFrom"],[3,"RangeTo"],[3,"RangeToInclusive"],[3,"Yeet"],[3,"Split"],[3,"SplitInclusive"],[3,"RSplit"],[3,"EscapeAscii"],[3,"Windows"],[3,"Chunks"],[3,"ChunksExact"],[3,"ArrayWindows"],[3,"ArrayChunks"],[3,"RChunks"],[3,"RChunksExact"],[3,"ChunksMut"],[3,"ChunksExactMut"],[3,"ArrayChunksMut"],[3,"RChunksMut"],[3,"RChunksExactMut"],[3,"SplitMut"],[3,"SplitInclusiveMut"],[3,"RSplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"GroupBy"],[3,"GroupByMut"],[3,"Bytes"],[3,"SplitInclusive"],[3,"CharIndices"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitWhitespace"],[3,"SplitAsciiWhitespace"],[3,"Utf8Error"],[3,"ParseBoolError"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"EncodeUtf16"],[3,"EscapeDebug"],[3,"EscapeDefault"],[3,"EscapeUnicode"],[3,"Utf8Chunk"],[3,"Utf8Chunks"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharArraySearcher"],[3,"CharArrayRefSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ThreadId"],[3,"NonZeroU64"],[3,"NonZeroUsize"],[3,"AccessError"],[3,"LocalKey"],[3,"__FastLocalKeyInner"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"Builder"],[3,"Instant"],[15,"f32"],[15,"f64"],[3,"SystemTimeError"],[3,"TryFromFloatSecsError"],[8,"FromStr"],[8,"BuildHasher"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"BitAnd"],[8,"BitOr"],[8,"Shl"],[8,"Shr"],[8,"Index"],[8,"Deref"],[8,"AddAssign"],[8,"IteratorExt"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"Borrow"],[8,"BorrowMut"],[8,"RangeBounds"],[8,"DerefMut"],[8,"ResultEither"],[8,"Hasher"],[8,"Display"],[8,"IndexMut"],[8,"ResultMapRef"],[8,"ShlAssign"],[8,"ShrAssign"],[13,"Start"],[13,"Iterating"],[13,"One"],[13,"Two"],[13,"Main"],[13,"Wrap"],[13,"Start"],[13,"Inner"],[13,"Nested"],[13,"Start"],[13,"Prev"],[8,"PartialEq"],[8,"PartialOrd"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[8,"Read"],[8,"Write"],[8,"BufRead"],[8,"IsTerminal"],[8,"Seek"],[8,"DoubleEndedIterator"],[8,"Step"],[8,"Extend"],[8,"FromIterator"],[8,"ExactSizeIterator"],[8,"Product"],[8,"Sum"],[8,"Not"],[8,"BitXor"],[8,"Try"],[8,"Generator"],[8,"Residual"],[8,"BitXorAssign"],[8,"Fn"],[8,"DivAssign"],[8,"Drop"],[8,"FromResidual"],[8,"MulAssign"],[8,"RemAssign"],[8,"SubAssign"],[8,"Concat"],[8,"Join"],[8,"SliceIndex"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"]],"a":{"!":[3992],"!=":[1884,1892],"%":[132,4016,4017],"%=":[4017],"&":[30,3960],"&*":[50,3973],"&=":[31,3961],"*":[50,51,91,3973,3974,3989,3990],"*=":[3990],"+":[13,14,3957,3958],"+=":[14,3958],"-":[94,145,3991,4025,4026],"-=":[4026],"..":[124,4009,4011,4012,4014],"..=":[126,4013,4015],"/":[53,3976,3977],"/=":[3977],"<":[1889,1894],"<<":[136,4021],"<<=":[137,4022],"<=":[1889,1894],"==":[1884,1892],">":[1889,1894],">=":[1889,1894],">>":[138,4023],">>=":[139,4024],"?":[4028],"[":[79,80,3987,3988],"[]":[79,80,3987,3988],"]":[79,80,3987,3988],"^":[3964],"^=":[3965],"available_concurrency":[5279],"basename":[683],"dirname":[1329],"drop_while":[3651],"errno":[2763],"foldl":[3323],"foldr":[3600],"futimens":[2273],"futimes":[2273],"getfinalpathnamebyhandle":[2134],"getlasterror":[2763],"hardware_concurrency":[5279],"inject":[3323],"mkdir":[2149],"num_cpus":[5279],"realpath":[2134],"reverse":[3593],"rmdir":[2259],"setfiletime":[2273],"{:?}":[46,1939],"{}":[52,1946],"|":[32,3962],"|=":[33,3963]}},\
"aoc_nums":{"doc":"","t":[18,3,3,18,18,18,8,8,8,8,8,8,8,8,8,8,18,18,18,18,6,18,16,16,16,16,16,3,8,8,18,18,16,18,18,8,8,8,8,8,8,8,8,8,8,16,18,10,11,11,11,11,11,11,11,11,11,10,10,10,10,10,11,11,0,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,11,10,10,18,3,3,18,18,18,8,8,8,8,8,18,18,18,18,2,18,16,16,16,16,16,2,8,8,18,18,16,18,18,8,8,8,8,8,8,8,8,8,8,16,18,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,10,10,10,10,10,10,11,11,11,11,11,10,10],"n":["BITS","BitPopper","BitPusher","EIGHT","FIVE","FOUR","Int","IntConv","IntOps","IntOpsRust","IntOpsSafe","IntOpsTry","IntSigned","IntSized","IntUnsigned","IteratorNums","MAX","MIN","NEG_ONE","NINE","NumResult","ONE","Output","Output","Output","Output","Output","Overflow","QuickFrom","QuickInto","SEVEN","SIX","Signed","THREE","TWO","TryAdd","TryAddAssign","TryDiv","TryDivAssign","TryMul","TryMulAssign","TryRem","TryRemAssign","TrySub","TrySubAssign","Unsigned","ZERO","add_signed","borrow","borrow_mut","clone","clone_into","cmp","eq","fmt","fmt","from","from_char","from_isize","from_u8","from_usize","gen_count_ones","into","partial_cmp","prelude","provide","qck_f32","qck_f64","qck_i128","qck_i16","qck_i32","qck_i64","qck_i8","qck_isize","qck_u128","qck_u16","qck_u32","qck_u64","qck_u8","qck_usize","quick_from","quick_into","safe_add","safe_sub","signed_diff","signum","sub_signed","to_char","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","try_add","try_add_assign","try_div","try_div_assign","try_from","try_into","try_mul","try_mul_assign","try_rem","try_rem_assign","try_sub","try_sub_assign","type_id","unsigned_abs","unsigned_diff","BITS","BitPopper","BitPusher","EIGHT","FIVE","FOUR","Int","IntConv","IntSigned","IntUnsigned","IteratorNums","MAX","MIN","NEG_ONE","NINE","NumResult","ONE","Output","Output","Output","Output","Output","Overflow","QuickFrom","QuickInto","SEVEN","SIX","Signed","THREE","TWO","TryAdd","TryAddAssign","TryDiv","TryDivAssign","TryMul","TryMulAssign","TryRem","TryRemAssign","TrySub","TrySubAssign","Unsigned","ZERO","add_signed","bit_clear_assign","bit_clear_assign","bit_clear_assign","bit_set_assign","bit_set_assign","bit_set_assign","borrow","borrow","borrow_mut","borrow_mut","bound_end_assign","bound_end_assign","bound_end_assign","bound_start_assign","bound_start_assign","bound_start_assign","bounds_assign","bounds_assign","bounds_assign","check_bit","check_bit","check_bit","default","finish","from","from","from_char","from_isize","from_u8","from_usize","gcd","gcd","gcd","gen_count_ones","into","into","lcm","lcm","lcm","new","new","pan_char","pan_char","pan_char","pan_f32","pan_f32","pan_f32","pan_f64","pan_f64","pan_f64","pan_i128","pan_i128","pan_i128","pan_i16","pan_i16","pan_i16","pan_i32","pan_i32","pan_i32","pan_i64","pan_i64","pan_i64","pan_i8","pan_i8","pan_i8","pan_isize","pan_isize","pan_isize","pan_u128","pan_u128","pan_u128","pan_u16","pan_u16","pan_u16","pan_u32","pan_u32","pan_u32","pan_u64","pan_u64","pan_u64","pan_u8","pan_u8","pan_u8","pan_usize","pan_usize","pan_usize","pop","push","qck_f32","qck_f64","qck_i128","qck_i16","qck_i32","qck_i64","qck_i8","qck_isize","qck_u128","qck_u16","qck_u32","qck_u64","qck_u8","qck_usize","quick_from","quick_into","signed_diff","signum","sub_signed","to_char","to_f32","to_f32","to_f32","to_f64","to_f64","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","try_add","try_add_assign","try_div","try_div_assign","try_from","try_from","try_into","try_into","try_mul","try_mul_assign","try_rem","try_rem_assign","try_sub","try_sub_assign","try_sum","try_sum","try_sum","type_id","type_id","unsigned_abs","unsigned_diff"],"q":["aoc_nums","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_nums::preluded":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add a signed number","","","","","","","","","Returns the argument unchanged.","","","","Safely convert from <code>usize</code>","Generic wrapper for primitive <code>count_ones</code> function.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Signed difference between two numbers","","Subtract a signed number","","Safely convert to <code>i128</code>","Safely convert to <code>i16</code>","Safely convert to <code>i32</code>","Safely convert to <code>i64</code>","Safely convert to <code>i8</code>","Safely convert to <code>isize</code>","","","Safely convert to <code>u128</code>","Safely convert to <code>u16</code>","Safely convert to <code>u32</code>","Safely convert to <code>u64</code>","Safely convert to <code>u8</code>","Safely convert to <code>usize</code>","","","","","","","","","","","","","","","Unsigned difference between two numbers","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add a signed number","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Safely convert from <code>usize</code>","","","","Generic wrapper for primitive <code>count_ones</code> function.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Signed difference between two numbers","","Subtract a signed number","","Safely convert to <code>f32</code>","Safely convert to <code>f32</code>","Safely convert to <code>f32</code>","Safely convert to <code>f64</code>","Safely convert to <code>f64</code>","Safely convert to <code>f64</code>","Safely convert to <code>i128</code>","Safely convert to <code>i16</code>","Safely convert to <code>i32</code>","Safely convert to <code>i64</code>","Safely convert to <code>i8</code>","Safely convert to <code>isize</code>","Safely convert to <code>u128</code>","Safely convert to <code>u16</code>","Safely convert to <code>u32</code>","Safely convert to <code>u64</code>","Safely convert to <code>u8</code>","Safely convert to <code>usize</code>","","","","","","","","","","","","","","","","","","","","","Unsigned difference between two numbers"],"i":[28,0,0,28,28,28,0,0,0,0,0,0,0,0,0,0,28,28,33,28,0,28,34,35,36,37,38,0,0,0,28,28,28,28,28,0,0,0,0,0,0,0,0,0,0,28,28,28,2,2,2,2,2,2,2,2,2,39,39,39,39,28,2,2,0,2,39,39,39,39,39,39,39,39,39,39,39,39,39,39,31,32,40,40,28,28,28,39,39,39,39,39,39,39,2,2,39,39,39,39,39,39,34,41,35,42,2,2,36,43,37,44,38,45,2,28,28,28,0,0,28,28,28,0,0,0,0,0,28,28,33,28,0,28,34,35,36,37,38,0,0,0,28,28,28,28,28,0,0,0,0,0,0,0,0,0,0,28,28,28,28,28,28,28,28,28,29,30,29,30,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,30,39,39,39,39,28,28,28,28,29,30,28,28,28,29,30,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,30,29,39,39,39,39,39,39,39,39,39,39,39,39,39,39,31,32,28,28,28,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,34,41,35,42,29,30,29,30,36,43,37,44,38,45,46,46,46,29,30,28,28],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[]],[[]],[2,2],[[]],[[2,2],3],[[2,2],4],[[2,5],6],[[2,5],6],[[]],[7,1],[8,1],[9,1],[10,1],[[],11],[[]],[[2,2],[[12,[3]]]],0,[13],[[],14],[[],15],[[],16],[[],17],[[],18],[[],19],[[],20],[[],8],[[],21],[[],22],[[],11],[[],23],[[],9],[[],10],[[]],[[]],[[]],[[]],[[],1],[[]],[[],1],[[],[[1,[7]]]],[[],[[1,[16]]]],[[],[[1,[17]]]],[[],[[1,[18]]]],[[],[[1,[19]]]],[[],[[1,[20]]]],[[],[[1,[8]]]],[[]],[[],24],[[],[[1,[21]]]],[[],[[1,[22]]]],[[],[[1,[11]]]],[[],[[1,[23]]]],[[],[[1,[9]]]],[[],[[1,[10]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],25],[[],25],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],26],[[]],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[11],[11],[11],[11],[11],[11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27],[27],[27],[11,4],[11,4],[11,4],[[],[[29,[28]]]],[[[29,[28]]],28],[[]],[[]],[7,1],[8,1],[9,1],[10,1],[[]],[[]],[[]],[[],11],[[]],[[]],[[]],[[]],[[]],[[],[[29,[28]]]],[28,[[30,[28]]]],[[],7],[[],7],[[],7],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],8],[[],8],[[],8],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],11],[[],11],[[],11],[[],23],[[],23],[[],23],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[[30,[28]],11],[[0,[28,[31,[28]]]]]],[[[29,[28]],[0,[28,[32,[28]]]],11]],[[],14],[[],15],[[],16],[[],17],[[],18],[[],19],[[],20],[[],8],[[],21],[[],22],[[],11],[[],23],[[],9],[[],10],[[]],[[]],[[],1],[[]],[[],1],[[],[[1,[7]]]],[[],[[1,[14]]]],[[],[[1,[14]]]],[[],[[1,[14]]]],[[],[[1,[15]]]],[[],[[1,[15]]]],[[],[[1,[15]]]],[[],[[1,[16]]]],[[],[[1,[17]]]],[[],[[1,[18]]]],[[],[[1,[19]]]],[[],[[1,[20]]]],[[],[[1,[8]]]],[[],[[1,[21]]]],[[],[[1,[22]]]],[[],[[1,[11]]]],[[],[[1,[23]]]],[[],[[1,[9]]]],[[],[[1,[10]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],25],[[],25],[[],25],[[],25],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],1],[[],1],[[],1],[[],26],[[],26],[[]],[[],1]],"p":[[6,"NumResult"],[3,"Overflow"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"char"],[15,"isize"],[15,"u8"],[15,"usize"],[15,"u32"],[4,"Option"],[3,"Demand"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"u128"],[15,"u16"],[15,"u64"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"RangeBounds"],[8,"Int"],[3,"BitPusher"],[3,"BitPopper"],[8,"QuickFrom"],[8,"QuickInto"],[8,"IntSigned"],[8,"TryAdd"],[8,"TryDiv"],[8,"TryMul"],[8,"TryRem"],[8,"TrySub"],[8,"IntConv"],[8,"IntOpsSafe"],[8,"TryAddAssign"],[8,"TryDivAssign"],[8,"TryMulAssign"],[8,"TryRemAssign"],[8,"TrySubAssign"],[8,"IteratorNums"]]},\
"aoc_ocr":{"doc":"","t":[3,11,11,11,11,11,11,5,5,5,11,11,11,11],"n":["DrawDots","borrow","borrow_mut","fmt","from","into","quick_into","read_auto","read_fixed","read_fixed_real","to_string","try_from","try_into","type_id"],"q":["aoc_ocr","","","","","","","","","","","","",""],"d":["","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,1,1,1,1,1,1,0,0,0,1,1,1,1],"f":[0,[[]],[[]],[[1,2],3],[[]],[[]],[[]],[4,[[6,[5]]]],[4,[[6,[5]]]],[7,[[6,[5]]]],[[],5],[[],8],[[],8],[[],9]],"p":[[3,"DrawDots"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[3,"String"],[6,"GenResult"],[3,"Vec"],[4,"Result"],[3,"TypeId"]]},\
"aoc_parallel":{"doc":"","t":[8,3,11,11,11,11,11,11,11,5,5,0,11,11,11,11,11,2,2],"n":["IteratorThreadMap","ThreadMap","borrow","borrow_mut","drop","from","into","into_iter","next","num_cpus","num_cpus_max","prelude","start","thread_map","try_from","try_into","type_id","IteratorThreadMap","ThreadMap"],"q":["aoc_parallel","","","","","","","","","","","","","","","","","aoc_parallel::prelude",""],"d":["","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,0,0,0,1,9,1,1,1,0,0],"f":[0,0,[[]],[[]],[1],[[]],[[]],[[]],[1,2],[[],[[2,[3]]]],[[]],0,[[[0,[4,5,6]],3],1],[3,1],[[],7],[[],7],[[],8],0,0],"p":[[3,"ThreadMap"],[4,"Option"],[15,"usize"],[8,"Fn"],[8,"Clone"],[8,"Send"],[4,"Result"],[3,"TypeId"],[8,"IteratorThreadMap"]]},\
"aoc_parser":{"doc":"","t":[13,3,3,8,8,13,8,4,6,3,3,13,4,3,3,8,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,14,14,11,11,11,11,11,14,14,14,14,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,14,5,14,14,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,14,11,11,11,11,0,11,11,11,11,11,11,11,11,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ConfirmedError","DisplayDelim","DisplayDelimWith","FromParser","IntoIteratorDisplayDelim","Item","ParseDelimiter","ParseError","ParseResult","ParseWhitespace","Parser","Parser","ParserAny","ParserDelim","ParserRepeat","ResultParser","Simple","Wrapped","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_range","check_range_error","clone","clone_into","display","display","display_delim","display_delim","display_delim_with","display_delim_with","done","enum_decl_parser_display","enum_display","enum_parser","enum_parser_display","expect","expect","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_parser","from_parser_to_from_str","input_param","input_params","input_params","into","into","into","into","into","into","into","into_iter","into_iter","is_valid","is_valid","map_parse_err","map_parse_err_auto","map_parse_err_line","next","next","of","parse","parse_from_lines","parse_from_lines","parse_from_str","parse_from_str","prelude","provide","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","struct_display","struct_parser","struct_parser_display","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_params","Parser","any","borrow","borrow_mut","clone","clone_into","confirm","delim_fn","delim_ints","delim_items","delim_uints","end","err","expect","expect_next","expect_word","from","int","into","item","item_range","nest","new","new_lines","next","opt_fn","peek","peek_rest","peek_word","quick_into","repeat","set_ignore_whitespace","set_word_pred","skip_whitespace","take_exactly","take_rest","take_rest_while","to_owned","try_from","try_into","type_id","uint","word","word_if","word_into","wrap","wrap_auto","wrap_lines","wrap_lines_auto","wrap_lines_auto_items"],"q":["aoc_parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_parser::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","Trait implemented by types which can be produced by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Utility method to parse a parameter from the start of an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Map error from <code>ParseError</code> to <code>Box &lt;dyn Error&gt;</code> using the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Utility method to prepend parameters to an example","","","","","","","","","","","","Assert that there is no more input to consume","Return a <code>ParseError</code> with the current position","Consume a specific string from the input","Consume and return the next character from the input","Consume a specific word from the input","Returns the argument unchanged.","Consume and return a decimal integer from the input","Calls <code>U::from(self)</code>.","","","","","","Consume and return the next character from the input","","Return the next character from the input without consuming …","","Return a word from the input without consuming it","","","","","Consume any whitespace from the start of the remaining …","","","","","","","","Consume and return an unsigned decimal integer from the …","Consume and return a single word from the input","Consume and return a single word from the input, …","Consume and return a single word from the input, …","","","","",""],"i":[11,0,0,0,0,11,0,0,0,0,0,11,0,0,0,0,16,16,23,25,9,10,11,8,16,23,25,9,10,11,8,16,0,0,8,8,0,0,37,37,37,37,11,0,0,0,0,38,8,9,10,8,8,16,16,23,25,9,10,11,8,16,16,16,16,16,36,0,0,0,0,23,25,9,10,11,8,16,23,25,38,38,39,39,39,23,25,11,0,36,36,36,36,0,16,23,25,9,10,11,8,16,0,0,0,8,9,10,8,16,23,25,9,10,11,8,16,23,25,9,10,11,8,16,23,25,9,10,11,8,16,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,[0,[2,[5,[[0,[2,3,4]]]]]]],6],[[1,[0,[2,[5,[[0,[2,3,4]]]]]]],7],[8,8],[[]],0,0,[[],9],[[],9],[[],10],[[],10],[11,12],0,0,0,0,[13,12],[[8,13],12],[[9,14],15],[[10,14],15],[[8,14],15],[[8,14],15],[[16,14],15],[[16,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[1,16],[17,16],[[]],[18,16],[7,16],[13,12],0,[[1,[20,[19]]],[[6,[19]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],6],[13,6],[[22,1],6],[23,24],[25,24],[11,11],0,[[],6],[[],6],[1,6],[1,6],0,[26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[],7],[[],7],[[],7],[[],7],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],[[29,[1]]]],0,[13,11],[[]],[[]],[13,13],[[]],[13,13],[13,23],[13,[[23,[19,30]]]],[13,[[23,[30]]]],[13,[[23,[19,30]]]],[13,12],[13,16],[[13,1],[[12,[13]]]],[13,[[12,[31]]]],[[13,1],[[12,[13]]]],[[]],[13,12],[[]],[13,12],[[13,5],12],[13,12],[1,13],[[],13],[13,[[24,[31]]]],[13],[13,[[24,[31]]]],[13,1],[13,[[24,[1]]]],[[]],[13,25],[[13,21],13],[13,13],[[13,[5,[32]]],[[12,[13]]]],[[13,32],[[12,[33]]]],[13,33],[[13,[5,[32]]],[[12,[33]]]],[[]],[[],27],[[],27],[[],28],[13,12],[13,[[12,[1]]]],[[13,34],[[12,[1]]]],[13,12],[1,12],[1,6],[[],6],[35,[[6,[29]]]],[35,[[6,[[29,[36]]]]]]],"p":[[15,"str"],[8,"Debug"],[8,"Display"],[8,"Ord"],[8,"RangeBounds"],[6,"GenResult"],[3,"String"],[3,"ParseWhitespace"],[3,"DisplayDelim"],[3,"DisplayDelimWith"],[4,"ParserAny"],[6,"ParseResult"],[3,"Parser"],[3,"Formatter"],[6,"Result"],[4,"ParseError"],[6,"GenError"],[3,"Overflow"],[8,"FromStr"],[8,"Into"],[15,"bool"],[15,"usize"],[3,"ParserDelim"],[4,"Option"],[3,"ParserRepeat"],[3,"Demand"],[4,"Result"],[3,"TypeId"],[3,"Vec"],[8,"FnMut"],[15,"char"],[15,"u32"],[4,"InpStr"],[8,"FnOnce"],[8,"Iterator"],[8,"FromParser"],[8,"IntoIteratorDisplayDelim"],[8,"ParseDelimiter"],[8,"ResultParser"]]},\
"aoc_pos":{"doc":"","tn":["Around","Around","Axis","AxisRowCol","AxisWXYZ","AxisXY","AxisXYZ","AxisXYZT","AxisXYZW","Col","Dir2d","DirGeo","DirGeoHexLat","Down","East","East","GenAxis","GenPos","HardLeft","HardRight","Left","Left","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","None","None","North","NorthEast","NorthWest","PosGeo","PosGeoHexLat","PosRowCol","PosWXYZ","PosXY","PosXYZ","PosXYZT","PosXYZW","PosYX","Right","Right","Row","SoftLeft","SoftRight","South","SouthEast","SouthWest","T","Turn2d","TurnHex","Up","Val","W","W","West","West","X","X","X","X","X","Y","Y","Y","Y","Y","Z","Z","Z","Z","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","adjacent","adjacent_4","adjacent_4","adjacent_4","adjacent_4","adjacent_8","adjacent_8","after","ahead","ahead","ahead","ahead","around","around","around","around","as_array","as_array","before","behind","behind","behind","behind","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","col","default","default","default","default","default","default","default","default","default","down","down","down","down","down","down","down","e","e","east","east","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hard_left","hard_right","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","left","left","left","left","left","left","left","left","left","left","mul","mul","mul","mul","mul","mul","mul","mul","mul","n","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","north","north_east","north_west","nw","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","quick_into","rem","rem","rem","rem","rem","rem","rem","rem","rem","right","right","right","right","right","right","right","right","right","right","row","soft_left","soft_right","south","south_east","south_west","sub","sub","sub","sub","sub","sub","sub","sub","sub","t","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_add","try_add","try_add","try_add","try_add","try_add","try_add","try_add","try_add","try_add","try_add","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_mul","try_mul","try_mul","try_mul","try_mul","try_mul","try_mul","try_mul","try_mul","try_sub","try_sub","try_sub","try_sub","try_sub","try_sub","try_sub","try_sub","try_sub","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","up","up","up","up","up","up","up","w","w","wane","wane","wax","wax","west","west","x","x","x","x","x","x","y","y","y","y","y","y","z","z","z","z","zero","zero"],"q":["aoc_posdeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[5,11,40,0,0,0,0,0,0,21,0,0,0,13,8,10,0,0,11,11,5,13,40,2,3,6,9,12,14,15,16,17,40,2,3,6,9,12,14,15,16,17,5,11,8,10,10,0,0,0,0,0,0,0,0,0,5,13,21,11,11,8,10,10,24,0,0,13,40,23,25,8,10,19,22,23,24,25,19,22,23,24,25,22,23,24,25,40,2,3,6,9,12,14,15,16,17,2,3,3,6,6,8,9,10,12,13,14,15,16,17,2,3,6,9,12,14,15,16,17,9,2,3,6,12,3,12,16,14,15,16,17,6,8,10,13,40,40,16,14,15,16,17,5,11,19,2,3,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,5,11,19,2,3,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,5,11,19,2,3,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,5,11,19,2,3,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,2,3,6,9,12,13,14,15,16,17,12,2,3,6,9,12,14,15,16,17,2,3,12,14,15,16,17,6,9,6,9,5,11,19,2,3,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,5,11,19,2,3,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,5,11,19,2,2,3,3,3,6,6,6,8,9,9,10,21,12,12,12,13,22,14,14,23,15,15,24,16,16,25,17,17,10,10,2,3,6,9,12,13,14,15,16,17,2,12,14,15,16,17,2,12,14,15,16,17,5,11,19,2,3,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,40,40,2,3,6,8,12,13,14,15,16,17,2,3,6,9,12,14,15,16,17,6,2,3,6,9,12,14,15,16,17,2,3,6,9,12,14,15,16,17,6,9,9,9,2,3,6,9,12,13,14,15,16,17,5,11,19,2,3,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,2,3,6,9,12,14,15,16,17,2,3,6,8,12,13,14,15,16,17,12,10,10,6,9,9,2,3,6,9,12,14,15,16,17,16,5,11,19,2,3,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,2,3,3,6,9,12,12,14,15,16,17,5,11,19,2,3,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,5,11,19,2,3,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,2,3,6,9,12,14,15,16,17,2,3,6,9,12,14,15,16,17,5,11,19,2,3,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,2,3,12,14,15,16,17,15,17,15,17,15,17,6,9,2,3,14,15,16,17,2,3,14,15,16,17,14,15,16,17,40,40],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[3,[1]],[3,[1]]],[[3,[1]]]],[[[3,[4]],5],[[3,[4]]]],[[[6,[1]]],[[7,[[6,[1]]]]]],[[[6,[1]],[6,[1]]],[[6,[1]]]],[[8,5],8],[[[9,[1]],[9,[1]]],[[9,[1]]]],[[10,11],10],[[[12,[1]],[12,[1]]],[[12,[1]]]],[[13,5],13],[[[14,[1]],[14,[1]]],[[14,[1]]]],[[[15,[1]],[15,[1]]],[[15,[1]]]],[[[16,[1]],[16,[1]]],[[16,[1]]]],[[[17,[1]],[17,[1]]],[[17,[1]]]],[[[2,[1]],[2,[1]]]],[[[3,[1]],[3,[1]]]],[[[6,[1]],[6,[1]]]],[[[9,[1]],[9,[1]]]],[[[12,[1]],[12,[1]]]],[[[14,[1]],[14,[1]]]],[[[15,[1]],[15,[1]]]],[[[16,[1]],[16,[1]]]],[[[17,[1]],[17,[1]]]],[[[9,[1]]],[[18,[[9,[1]]]]]],[[[2,[1]]],[[18,[[2,[1]]]]]],[[[3,[1]]],[[18,[[3,[1]]]]]],[[[6,[1]]],[[18,[[6,[1]]]]]],[[[12,[1]]],[[18,[[12,[1]]]]]],[[[3,[1]]],[[18,[[3,[1]]]]]],[[[12,[1]]],[[18,[[12,[1]]]]]],[[[16,[1]],1],[[7,[[16,[1]]]]]],[[[14,[1]],1],[[7,[[14,[1]]]]]],[[[15,[1]],1],[[7,[[15,[1]]]]]],[[[16,[1]],1],[[7,[[16,[1]]]]]],[[[17,[1]],1],[[7,[[17,[1]]]]]],[[[6,[1]]],[[6,[1]]]],[8,8],[10,10],[13,13],[[]],[[]],[[[16,[1]],1],[[7,[[16,[1]]]]]],[[[14,[1]],1],[[7,[[14,[1]]]]]],[[[15,[1]],1],[[7,[[15,[1]]]]]],[[[16,[1]],1],[[7,[[16,[1]]]]]],[[[17,[1]],1],[[7,[[17,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[11,11],[19,19],[[[2,[20]]],[[2,[20]]]],[[[3,[20]]],[[3,[20]]]],[[[6,[20]]],[[6,[20]]]],[8,8],[[[9,[20]]],[[9,[20]]]],[10,10],[21,21],[[[12,[20]]],[[12,[20]]]],[13,13],[22,22],[[[14,[20]]],[[14,[20]]]],[23,23],[[[15,[20]]],[[15,[20]]]],[24,24],[[[16,[20]]],[[16,[20]]]],[25,25],[[[17,[20]]],[[17,[20]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[26]],2],27],[[[3,[26]],3],27],[[[6,[26]],6],27],[[[9,[26]],9],27],[[[12,[26]],12],27],[[13,13],27],[[[14,[26]],14],27],[[[15,[26]],15],27],[[[16,[26]],16],27],[[[17,[26]],17],27],0,[[],[[2,[1]]]],[[],[[3,[1]]]],[[],[[6,[1]]]],[[],[[9,[1]]]],[[],[[12,[1]]]],[[],[[14,[1]]]],[[],[[15,[1]]]],[[],[[16,[1]]]],[[],[[17,[1]]]],[[[2,[1]],1],[[7,[[2,[1]]]]]],[[[3,[1]],1],[[7,[[3,[1]]]]]],[[[12,[1]],1],[[7,[[12,[1]]]]]],[[[14,[1]],1],[[7,[[14,[1]]]]]],[[[15,[1]],1],[[7,[[15,[1]]]]]],[[[16,[1]],1],[[7,[[16,[1]]]]]],[[[17,[1]],1],[[7,[[17,[1]]]]]],0,0,[[[6,[1]],1],[[7,[[6,[1]]]]]],[[[9,[1]],1],[[7,[[9,[1]]]]]],[[5,5],28],[[11,11],28],[[19,19],28],[[[2,[29]],2],28],[[[3,[29]],3],28],[[[6,[29]],6],28],[[8,8],28],[[[9,[29]],9],28],[[10,10],28],[[21,21],28],[[[12,[29]],12],28],[[13,13],28],[[22,22],28],[[[14,[29]],14],28],[[23,23],28],[[[15,[29]],15],28],[[24,24],28],[[[16,[29]],16],28],[[25,25],28],[[[17,[29]],17],28],[[5,30],31],[[11,30],31],[[19,30],31],[[[2,[1]],30],31],[[[3,[1]],30],31],[[[6,[1]],30],31],[[8,30],31],[[[9,[1]],30],31],[[10,30],31],[[21,30],31],[[[12,[1]],30],31],[[13,30],31],[[22,30],31],[[[14,[1]],30],31],[[23,30],31],[[[15,[1]],30],31],[[24,30],31],[[[16,[1]],30],31],[[25,30],31],[[[17,[1]],30],31],[[]],[[]],[[]],[[],[[2,[1]]]],[[]],[[]],[[],[[3,[1]]]],[13,[[3,[[0,[1,4]]]]]],[8,[[6,[[0,[1,4]]]]]],[[]],[[],[[6,[1]]]],[[]],[[]],[[],[[9,[1]]]],[[]],[[]],[13,[[12,[[0,[1,4]]]]]],[[],[[12,[1]]]],[[]],[[]],[[]],[[]],[[],[[14,[1]]]],[[]],[[],[[15,[1]]]],[[]],[[]],[[]],[[],[[16,[1]]]],[[]],[[]],[[],[[17,[1]]]],[10,10],[10,10],[[[2,[32]]]],[[[3,[32]]]],[[[6,[32]]]],[[[9,[32]]]],[[[12,[32]]]],[13],[[[14,[32]]]],[[[15,[32]]]],[[[16,[32]]]],[[[17,[32]]]],[[[2,[1]],19]],[[[12,[1]],21]],[[[14,[1]],22]],[[[15,[1]],23]],[[[16,[1]],24]],[[[17,[1]],25]],[[[2,[1]],19]],[[[12,[1]],21]],[[[14,[1]],22]],[[[15,[1]],23]],[[[16,[1]],24]],[[[17,[1]],25]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[[2,[1]],1],[[7,[[2,[1]]]]]],[[[3,[1]],1],[[7,[[3,[1]]]]]],[[[6,[1]]],[[6,[1]]]],[8,8],[[[12,[1]],1],[[7,[[12,[1]]]]]],[13,13],[[[14,[1]],1],[[7,[[14,[1]]]]]],[[[15,[1]],1],[[7,[[15,[1]]]]]],[[[16,[1]],1],[[7,[[16,[1]]]]]],[[[17,[1]],1],[[7,[[17,[1]]]]]],[[[2,[1]],1],[[2,[1]]]],[[[3,[1]],1],[[3,[1]]]],[[[6,[1]],1],[[6,[1]]]],[[[9,[1]],1],[[9,[1]]]],[[[12,[1]],1],[[12,[1]]]],[[[14,[1]],1],[[14,[1]]]],[[[15,[1]],1],[[15,[1]]]],[[[16,[1]],1],[[16,[1]]]],[[[17,[1]],1],[[17,[1]]]],0,[[[2,[[0,[1,34]]]]],[[2,[[0,[1,34]]]]]],[[[3,[[0,[1,34]]]]],[[3,[[0,[1,34]]]]]],[[[6,[[0,[1,34]]]]],[[6,[[0,[1,34]]]]]],[[[9,[[0,[1,34]]]]],[[9,[[0,[1,34]]]]]],[[[12,[[0,[1,34]]]]],[[12,[[0,[1,34]]]]]],[[[14,[[0,[1,34]]]]],[[14,[[0,[1,34]]]]]],[[[15,[[0,[1,34]]]]],[[15,[[0,[1,34]]]]]],[[[16,[[0,[1,34]]]]],[[16,[[0,[1,34]]]]]],[[[17,[[0,[1,34]]]]],[[17,[[0,[1,34]]]]]],[[1,1],[[2,[1]]]],[[1,1],[[3,[1]]]],[[1,1],[[6,[1]]]],[[1,1],[[9,[1]]]],[[1,1],[[12,[1]]]],[[1,1,1],[[14,[1]]]],[[1,1,1,1],[[15,[1]]]],[[1,1,1,1],[[16,[1]]]],[[1,1,1,1],[[17,[1]]]],[[[6,[1]],1],[[7,[[6,[1]]]]]],[[[9,[1]],1],[[7,[[9,[1]]]]]],[[[9,[1]],1],[[7,[[9,[1]]]]]],0,[[[2,[35]],2],[[36,[27]]]],[[[3,[35]],3],[[36,[27]]]],[[[6,[35]],6],[[36,[27]]]],[[[9,[35]],9],[[36,[27]]]],[[[12,[35]],12],[[36,[27]]]],[[13,13],[[36,[27]]]],[[[14,[35]],14],[[36,[27]]]],[[[15,[35]],15],[[36,[27]]]],[[[16,[35]],16],[[36,[27]]]],[[[17,[35]],17],[[36,[27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[3,[1]],[3,[1]]],[[3,[1]]]],[[[6,[1]],[6,[1]]],[[6,[1]]]],[[[9,[1]],[9,[1]]],[[9,[1]]]],[[[12,[1]],[12,[1]]],[[12,[1]]]],[[[14,[1]],[14,[1]]],[[14,[1]]]],[[[15,[1]],[15,[1]]],[[15,[1]]]],[[[16,[1]],[16,[1]]],[[16,[1]]]],[[[17,[1]],[17,[1]]],[[17,[1]]]],[[[2,[1]],1],[[7,[[2,[1]]]]]],[[[3,[1]],1],[[7,[[3,[1]]]]]],[[[6,[1]]],[[6,[1]]]],[8,8],[[[12,[1]],1],[[7,[[12,[1]]]]]],[13,13],[[[14,[1]],1],[[7,[[14,[1]]]]]],[[[15,[1]],1],[[7,[[15,[1]]]]]],[[[16,[1]],1],[[7,[[16,[1]]]]]],[[[17,[1]],1],[[7,[[17,[1]]]]]],0,[10,10],[10,10],[[[6,[1]],1],[[7,[[6,[1]]]]]],[[[9,[1]],1],[[7,[[9,[1]]]]]],[[[9,[1]],1],[[7,[[9,[1]]]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[3,[1]],[3,[1]]],[[3,[1]]]],[[[6,[1]],[6,[1]]],[[6,[1]]]],[[[9,[1]],[9,[1]]],[[9,[1]]]],[[[12,[1]],[12,[1]]],[[12,[1]]]],[[[14,[1]],[14,[1]]],[[14,[1]]]],[[[15,[1]],[15,[1]]],[[15,[1]]]],[[[16,[1]],[16,[1]]],[[16,[1]]]],[[[17,[1]],[17,[1]]],[[17,[1]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]],[2,[1]]],[[7,[[2,[1]]]]]],[[[3,[1]],[3,[1]]],[[7,[[3,[1]]]]]],[[[3,[1]]],[[7,[[3,[1]]]]]],[[[6,[1]],[6,[1]]],[[7,[[6,[1]]]]]],[[[9,[1]],[9,[1]]],[[7,[[9,[1]]]]]],[[[12,[1]]],[[7,[[12,[1]]]]]],[[[12,[1]],[12,[1]]],[[7,[[12,[1]]]]]],[[[14,[1]],[14,[1]]],[[7,[[14,[1]]]]]],[[[15,[1]],[15,[1]]],[[7,[[15,[1]]]]]],[[[16,[1]],[16,[1]]],[[7,[[16,[1]]]]]],[[[17,[1]],[17,[1]]],[[7,[[17,[1]]]]]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[[2,[[0,[1,38]]]],[0,[1,38]]],[[7,[[2,[[0,[1,38]]]]]]]],[[[3,[[0,[1,38]]]],[0,[1,38]]],[[7,[[3,[[0,[1,38]]]]]]]],[[[6,[[0,[1,38]]]],[0,[1,38]]],[[7,[[6,[[0,[1,38]]]]]]]],[[[9,[[0,[1,38]]]],[0,[1,38]]],[[7,[[9,[[0,[1,38]]]]]]]],[[[12,[[0,[1,38]]]],[0,[1,38]]],[[7,[[12,[[0,[1,38]]]]]]]],[[[14,[[0,[1,38]]]],[0,[1,38]]],[[7,[[14,[[0,[1,38]]]]]]]],[[[15,[[0,[1,38]]]],[0,[1,38]]],[[7,[[15,[[0,[1,38]]]]]]]],[[[16,[[0,[1,38]]]],[0,[1,38]]],[[7,[[16,[[0,[1,38]]]]]]]],[[[17,[[0,[1,38]]]],[0,[1,38]]],[[7,[[17,[[0,[1,38]]]]]]]],[[[2,[1]],[2,[1]]],[[7,[[2,[1]]]]]],[[[3,[1]],[3,[1]]],[[7,[[3,[1]]]]]],[[[6,[1]],[6,[1]]],[[7,[[6,[1]]]]]],[[[9,[1]],[9,[1]]],[[7,[[9,[1]]]]]],[[[12,[1]],[12,[1]]],[[7,[[12,[1]]]]]],[[[14,[1]],[14,[1]]],[[7,[[14,[1]]]]]],[[[15,[1]],[15,[1]]],[[7,[[15,[1]]]]]],[[[16,[1]],[16,[1]]],[[7,[[16,[1]]]]]],[[[17,[1]],[17,[1]]],[[7,[[17,[1]]]]]],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[[2,[1]],1],[[7,[[2,[1]]]]]],[[[3,[1]],1],[[7,[[3,[1]]]]]],[[[12,[1]],1],[[7,[[12,[1]]]]]],[[[14,[1]],1],[[7,[[14,[1]]]]]],[[[15,[1]],1],[[7,[[15,[1]]]]]],[[[16,[1]],1],[[7,[[16,[1]]]]]],[[[17,[1]],1],[[7,[[17,[1]]]]]],0,0,[[[15,[1]],1],[[7,[[15,[1]]]]]],[[[17,[1]],1],[[7,[[17,[1]]]]]],[[[15,[1]],1],[[7,[[15,[1]]]]]],[[[17,[1]],1],[[7,[[17,[1]]]]]],[[[6,[1]],1],[[7,[[6,[1]]]]]],[[[9,[1]],1],[[7,[[9,[1]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]]],"p":[[8,"Int"],[3,"PosXY"],[3,"PosYX"],[8,"IntSigned"],[4,"Turn2d"],[3,"PosGeo"],[6,"NumResult"],[4,"DirGeo"],[3,"PosGeoHexLat"],[4,"DirGeoHexLat"],[4,"TurnHex"],[3,"PosRowCol"],[4,"Dir2d"],[3,"PosXYZ"],[3,"PosWXYZ"],[3,"PosXYZT"],[3,"PosXYZW"],[3,"TinyVec"],[4,"AxisXY"],[8,"Clone"],[4,"AxisRowCol"],[4,"AxisXYZ"],[4,"AxisWXYZ"],[4,"AxisXYZT"],[4,"AxisXYZW"],[8,"Ord"],[4,"Ordering"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[3,"IntoIter"],[8,"Neg"],[8,"PartialOrd"],[4,"Option"],[4,"Result"],[8,"TryMul"],[3,"TypeId"],[8,"GenPos"]]},\
"aoc_puzzle":{"doc":"","t":[0,0,0,14,0,0,3,11,11,11,11,11,11,11,11,11,11,11,2,2,14,3,8,11,11,11,10,10,11,11,11,11,11,12,11,11,11,10,10,11,11,11,11,12,11,11,10,11,11,11,10,3,3,11,11,11,11,11,11,12,11,11,5,11,12,11,11,5,11,11,11,11,11,11],"n":["command","prelude","puzzle","puzzle_info","run","year","PuzzleCommand","borrow","borrow_mut","from","into","invoke","name","new","quick_into","try_from","try_into","type_id","Puzzle","PuzzleCommand","puzzle_info","Args","Puzzle","borrow","borrow_mut","commands","day","dyn_puzzle","find_input","find_input_or_arg","find_input_or_default","fmt","from","input","into","invoke","load_input","name","num_parts","parse","part_one","part_two","quick_into","repeat","set_default_params","set_param","set_param_real","try_from","try_into","type_id","year","Args","RunStats","borrow","borrow","borrow_mut","borrow_mut","from","from","input_dir","into","into","main","parse","plain","quick_into","quick_into","run","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_puzzle","","","","","","aoc_puzzle::command","","","","","","","","","","","","aoc_puzzle::prelude","","","aoc_puzzle::puzzle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_puzzle::year","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,13,13,10,10,10,10,10,10,13,13,13,13,10,10,10,10,13,10,10,13,13,10,10,10,13,13,13,10,0,0,23,22,23,22,23,22,22,23,22,0,22,22,23,22,0,23,22,23,22,23,22],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[1,2],3],[1,4],[[4,5],1],[[]],[[],6],[[],6],[[],7],0,0,0,0,0,[[]],[[]],[[],[[8,[1]]]],[[],9],[[],10],[[],[[3,[11]]]],[12,11],[[],11],[[13,14],15],[[]],0,[[]],[[],3],[[],[[3,[16]]]],[[],4],[[],17],[[],[[6,[13,18]]]],[[],[[3,[16]]]],[[],[[3,[16]]]],[[]],0,[[]],[[4,16]],[[16,16]],[[],6],[[],6],[[],7],[[],19],0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[20,21],[[],[[6,[22,18]]]],0,[[]],[[]],[22,[[3,[23]]]],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7]],"p":[[3,"PuzzleCommand"],[8,"Iterator"],[6,"GenResult"],[15,"str"],[8,"Fn"],[4,"Result"],[3,"TypeId"],[3,"Vec"],[15,"u8"],[8,"Puzzle"],[3,"PathBuf"],[4,"Option"],[3,"Args"],[3,"Formatter"],[6,"Result"],[3,"String"],[15,"usize"],[4,"ArgsParseError"],[15,"u16"],[15,"bool"],[3,"ExitCode"],[3,"Args"],[3,"RunStats"]]},\
"aoc_search":{"doc":"Iterative search algorithms for solutions in a problem …","t":[0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,2,16,13,3,3,8,8,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11],"n":["pairs_map","permutations","prelude","priority","PairsMap","borrow","borrow_mut","from","from_iter","index","into","is_empty","keys","len","quick_into","try_from","try_into","type_id","values","PermutationsHelper","borrow","borrow_mut","clone","clone_into","deref","fmt","from","into","new","new_circular","new_mirror","next","quick_into","to_owned","try_from","try_into","type_id","PairsMap","PermutationsHelper","PrioritySearch","PrioritySearchAdder","Item","New","PrioritySearch","PrioritySearchAdder","PrioritySearchVisitor","Seen","SeenState","Unvisited","Visited","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","from","from","from","into","into","into","into_iter","is_empty","len","next","push","quick_into","quick_into","quick_into","seen_get_mut","seen_push","seen_visited","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","visit","with_grid_range","with_grid_size","with_hash_map"],"q":["aoc_search","","","","aoc_search::pairs_map","","","","","","","","","","","","","","","aoc_search::permutations","","","","","","","","","","","","","","","","","","aoc_search::prelude","","","","aoc_search::priority","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Generate permutations of <code>usize</code> from <code>0 .. len</code>.","Standard prelude for wildcard imports.","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","The <code>PermutationsHelper</code> type. See the module level …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new <code>PermutationsHelper</code>.","Create a new <code>PermutationsHelper</code> in “circular” mode.","Create a new <code>PermutationsHelper</code> in “mirror” mode.","Find the next permutation in the sequence.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,20,12,0,0,0,0,0,12,12,10,13,10,12,13,10,12,12,12,12,13,10,12,13,10,12,13,13,13,13,13,13,10,12,21,21,21,12,13,10,12,13,10,12,13,10,12,20,13,13,13],"f":[0,0,0,0,0,[[]],[[]],[[]],[1,2],[2],[[]],[2,3],[2],[2,4],[[]],[[],5],[[],5],[[],6],[2],0,[[]],[[]],[7,7],[[]],[7],[[7,8],9],[[]],[[]],[4,7],[4,7],[4,7],[7,3],[[]],[[]],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,0,[10],[[]],[[]],[[]],[[]],[[]],[[]],[[[12,[[0,[11,11]]]]],[[12,[[0,[11,11]]]]]],[[]],[[],[[12,[11]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,3],[13,4],[13,14],[13,13],[[]],[[]],[[]],[[],12],[[],3],[[],3],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[10],[[],[[18,[[13,[15,[17,[[16,[12]]]]]]]]]],[[],[[13,[15,[17,[[16,[12]]]]]]]],[[],[[13,[[19,[12]]]]]]],"p":[[8,"IntoIterator"],[3,"PairsMap"],[15,"bool"],[15,"usize"],[4,"Result"],[3,"TypeId"],[3,"PermutationsHelper"],[3,"Formatter"],[6,"Result"],[3,"PrioritySearchAdder"],[8,"Clone"],[4,"SeenState"],[3,"PrioritySearch"],[4,"Option"],[3,"GridCursor"],[3,"Vec"],[3,"GridBuf"],[6,"NumResult"],[3,"AHashMap"],[8,"PrioritySearchVisitor"],[8,"Seen"]]},\
"aoc_stvec":{"doc":"","t":[3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,14,14],"n":["MiniIntoIter","MiniVec","TinyIntoIter","TinyVec","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clone","clone","clone_into","clone_into","cmp","cmp","default","default","deref","deref","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","extend","extend","extend","extend","fmt","fmt","from","from","from","from","from","from","from","from","from_iter","from_iter","hash","hash","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_full","is_full","len","len","len","len","mini_vec","native_len","native_len","new","new","next","next","next_back","next_back","partial_cmp","partial_cmp","pop","pop","prelude","push","push","retain","retain","size_hint","size_hint","tiny_vec","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","MiniVec","TinyVec","mini_vec","tiny_vec"],"q":["aoc_stvec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_stvec::prelude","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,2,2,1,1,2,2,1,1,4,2,2,5,1,1,4,2,2,5,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,4,2,5,1,2,1,1,2,2,1,2,1,1,1,4,2,2,2,5,1,2,1,2,1,4,2,5,1,1,4,2,2,5,1,2,1,2,1,4,2,5,0,1,2,1,2,4,5,4,5,1,2,1,2,0,1,2,1,2,4,5,0,1,2,1,4,2,5,1,4,2,5,1,4,2,5,0,0,0,0],"f":[0,0,0,0,[1,1],[1],[2],[2,2],[1,1],[1],[2,2],[2],[1],[[]],[[]],[[]],[2],[[]],[1],[[]],[[]],[[]],[2],[[]],[1],[2],[1,1],[2,2],[[]],[[]],[[1,1],3],[[2,2],3],[[],1],[[],2],[1],[2],[1],[2],[1],[4],[2],[5],[[1,1],6],[[2,2],6],[1],[1],[2],[2],[[1,7],8],[[2,7],8],[[]],[[],1],[[],1],[[]],[[]],[[],2],[[],2],[[]],[9,1],[9,2],[1],[2],[[]],[[]],[[]],[[]],[1,10],[1,4],[[]],[2,5],[2,10],[[]],[1,6],[2,6],[1,6],[2,6],[1,11],[4,11],[2,11],[5,11],0,[1,12],[2,13],[[],1],[[],2],[4,14],[5,14],[4,14],[5,14],[[1,1],[[14,[3]]]],[[2,2],[[14,[3]]]],[1,14],[2,14],0,[1],[2],[[1,15]],[[2,15]],[4],[5],0,[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[[],17],0,0,0,0],"p":[[3,"TinyVec"],[3,"MiniVec"],[4,"Ordering"],[3,"TinyIntoIter"],[3,"MiniIntoIter"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[3,"Iter"],[15,"usize"],[15,"u8"],[15,"u16"],[4,"Option"],[8,"FnMut"],[4,"Result"],[3,"TypeId"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"p":[]},\
"getrandom":{"doc":"Interface to the operating system’s random number …","t":[18,18,3,18,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11],"n":["CUSTOM_START","ERRNO_NOT_POSITIVE","Error","FAILED_RDRAND","INTERNAL_START","IOS_SEC_RANDOM","NODE_CRYPTO","NODE_ES_MODULE","NODE_RANDOM_FILL_SYNC","NO_RDRAND","UNSUPPORTED","VXWORKS_RAND_SECURE","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","WINDOWS_RTL_GEN_RANDOM","borrow","borrow_mut","clone","code","eq","fmt","fmt","from","from","getrandom","into","raw_os_error","try_from","try_into","type_id"],"q":["getrandom","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Codes at or above this point can be used by users to …","The platform-specific <code>errno</code> returned a non-positive value.","A small and <code>no_std</code> compatible error type","RDRAND instruction failed due to a hardware issue.","Codes below this point represent OS Errors (i.e. positive …","Call to iOS <code>SecRandomCopyBytes</code> failed.","Node.js does not have the <code>crypto</code> CommonJS module.","Called from an ES module on Node.js. This is unsupported, …","Calling Node.js function <code>crypto.randomFillSync</code> failed.","RDRAND instruction unsupported on this target.","This target/platform is not supported by <code>getrandom</code>.","On VxWorks, call to <code>randSecure</code> failed (random number …","The environment does not support the Web Crypto API.","Calling Web Crypto API <code>crypto.getRandomValues</code> failed.","Call to Windows <code>RtlGenRandom</code> failed.","","","","Extract the bare error code.","","","","","Returns the argument unchanged.","Fill <code>dest</code> with random bytes from the system’s preferred …","Calls <code>U::from(self)</code>.","Extract the raw OS error code (if this error came from the …","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[1,2],[[1,1],3],[[1,4],5],[[1,4],5],[2,1],[[]],[[],[[6,[1]]]],[[]],[1,[[8,[7]]]],[[],6],[[],6],[[],9]],"p":[[3,"Error"],[3,"NonZeroU32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[15,"i32"],[4,"Option"],[3,"TypeId"]]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","tn":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ABS_CNT","ABS_MAX","ACCOUNTING","ADDR_COMPAT_LAYOUT","ADDR_LIMIT_32BIT","ADDR_LIMIT_3GB","ADDR_NO_RANDOMIZE","ADFS_SUPER_MAGIC","ADJ_ESTERROR","ADJ_FREQUENCY","ADJ_MAXERROR","ADJ_MICRO","ADJ_NANO","ADJ_OFFSET","ADJ_OFFSET_SINGLESHOT","ADJ_OFFSET_SS_READ","ADJ_SETOFFSET","ADJ_STATUS","ADJ_TAI","ADJ_TICK","ADJ_TIMECONST","AFFS_SUPER_MAGIC","AFS_SUPER_MAGIC","AF_ALG","AF_APPLETALK","AF_ASH","AF_ATMPVC","AF_ATMSVC","AF_AX25","AF_BLUETOOTH","AF_BRIDGE","AF_CAIF","AF_CAN","AF_DECnet","AF_ECONET","AF_IB","AF_IEEE802154","AF_INET","AF_INET6","AF_IPX","AF_IRDA","AF_ISDN","AF_IUCV","AF_KEY","AF_LLC","AF_LOCAL","AF_MPLS","AF_NETBEUI","AF_NETLINK","AF_NETROM","AF_NFC","AF_PACKET","AF_PHONET","AF_PPPOX","AF_RDS","AF_ROSE","AF_ROUTE","AF_RXRPC","AF_SECURITY","AF_SNA","AF_TIPC","AF_UNIX","AF_UNSPEC","AF_VSOCK","AF_WANPIPE","AF_X25","AF_XDP","AIO_ALLDONE","AIO_CANCELED","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_V4MAPPED","ALG_OP_DECRYPT","ALG_OP_ENCRYPT","ALG_SET_AEAD_ASSOCLEN","ALG_SET_AEAD_AUTHSIZE","ALG_SET_IV","ALG_SET_KEY","ALG_SET_OP","ALT_DIGITS","AM_STR","ARPD_FLUSH","ARPD_LOOKUP","ARPD_UPDATE","ARPHRD_ADAPT","ARPHRD_APPLETLK","ARPHRD_ARCNET","ARPHRD_ASH","ARPHRD_ATM","ARPHRD_AX25","ARPHRD_BIF","ARPHRD_CAN","ARPHRD_CHAOS","ARPHRD_CISCO","ARPHRD_CSLIP","ARPHRD_CSLIP6","ARPHRD_DDCMP","ARPHRD_DLCI","ARPHRD_ECONET","ARPHRD_EETHER","ARPHRD_ETHER","ARPHRD_EUI64","ARPHRD_FCAL","ARPHRD_FCFABRIC","ARPHRD_FCPL","ARPHRD_FCPP","ARPHRD_FDDI","ARPHRD_FRAD","ARPHRD_HDLC","ARPHRD_HIPPI","ARPHRD_HWX25","ARPHRD_IEEE1394","ARPHRD_IEEE802","ARPHRD_IEEE80211","ARPHRD_IEEE80211_PRISM","ARPHRD_IEEE80211_RADIOTAP","ARPHRD_IEEE802154","ARPHRD_IEEE802_TR","ARPHRD_INFINIBAND","ARPHRD_IPDDP","ARPHRD_IPGRE","ARPHRD_IRDA","ARPHRD_LAPB","ARPHRD_LOCALTLK","ARPHRD_LOOPBACK","ARPHRD_METRICOM","ARPHRD_NETROM","ARPHRD_NONE","ARPHRD_PIMREG","ARPHRD_PPP","ARPHRD_PRONET","ARPHRD_RAWHDLC","ARPHRD_ROSE","ARPHRD_RSRVD","ARPHRD_SIT","ARPHRD_SKIP","ARPHRD_SLIP","ARPHRD_SLIP6","ARPHRD_TUNNEL","ARPHRD_TUNNEL6","ARPHRD_VOID","ARPHRD_X25","ARPOP_InREPLY","ARPOP_InREQUEST","ARPOP_NAK","ARPOP_REPLY","ARPOP_REQUEST","ARPOP_RREPLY","ARPOP_RREQUEST","ATF_COM","ATF_DONTPUB","ATF_MAGIC","ATF_NETMASK","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","AT_BASE","AT_BASE_PLATFORM","AT_CLKTCK","AT_EACCESS","AT_EGID","AT_EMPTY_PATH","AT_ENTRY","AT_EUID","AT_EXECFD","AT_EXECFN","AT_FDCWD","AT_FLAGS","AT_GID","AT_HWCAP","AT_HWCAP2","AT_IGNORE","AT_NOTELF","AT_NO_AUTOMOUNT","AT_NULL","AT_PAGESZ","AT_PHDR","AT_PHENT","AT_PHNUM","AT_PLATFORM","AT_RANDOM","AT_REMOVEDIR","AT_SECURE","AT_STATX_DONT_SYNC","AT_STATX_FORCE_SYNC","AT_STATX_SYNC_AS_STAT","AT_STATX_SYNC_TYPE","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","AT_UID","AUTOFS_SUPER_MAGIC","B0","B1000000","B110","B115200","B1152000","B1200","B134","B150","B1500000","B1800","B19200","B200","B2000000","B230400","B2400","B2500000","B300","B3000000","B3500000","B38400","B4000000","B460800","B4800","B50","B500000","B57600","B576000","B600","B75","B921600","B9600","BINDERFS_SUPER_MAGIC","BLKIOMIN","BLKIOOPT","BLKPBSZGET","BLKSSZGET","BOOT_TIME","BOTHER","BPF_ABS","BPF_ADD","BPF_ALU","BPF_AND","BPF_B","BPF_DIV","BPF_FS_MAGIC","BPF_H","BPF_IMM","BPF_IND","BPF_JA","BPF_JEQ","BPF_JGE","BPF_JGT","BPF_JMP","BPF_JSET","BPF_JUMP","BPF_K","BPF_LD","BPF_LDX","BPF_LEN","BPF_LL_OFF","BPF_LSH","BPF_MAXINSNS","BPF_MEM","BPF_MEMWORDS","BPF_MISC","BPF_MISCOP","BPF_MOD","BPF_MSH","BPF_MUL","BPF_NEG","BPF_NET_OFF","BPF_OR","BPF_RET","BPF_RSH","BPF_RVAL","BPF_ST","BPF_STMT","BPF_STX","BPF_SUB","BPF_W","BPF_X","BPF_XOR","BRKINT","BS0","BS1","BSDLY","BTRFS_SUPER_MAGIC","BUFSIZ","BUS_ADRALN","BUS_ADRERR","BUS_MCEERR_AO","BUS_MCEERR_AR","BUS_OBJERR","CANFD_BRS","CANFD_ESI","CANFD_MAX_DLC","CANFD_MAX_DLEN","CANFD_MTU","CAN_BCM","CAN_EFF_FLAG","CAN_EFF_ID_BITS","CAN_EFF_MASK","CAN_ERR_FLAG","CAN_ERR_MASK","CAN_INV_FILTER","CAN_ISOTP","CAN_J1939","CAN_MAX_DLC","CAN_MAX_DLEN","CAN_MCNET","CAN_MTU","CAN_NPROTO","CAN_RAW","CAN_RAW_ERR_FILTER","CAN_RAW_FD_FRAMES","CAN_RAW_FILTER","CAN_RAW_FILTER_MAX","CAN_RAW_JOIN_FILTERS","CAN_RAW_LOOPBACK","CAN_RAW_RECV_OWN_MSGS","CAN_RTR_FLAG","CAN_SFF_ID_BITS","CAN_SFF_MASK","CAN_TP16","CAN_TP20","CBAUD","CBAUDEX","CGROUP2_SUPER_MAGIC","CGROUP_SUPER_MAGIC","CIBAUD","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCK_BOOTTIME","CLOCK_BOOTTIME_ALARM","CLOCK_MONOTONIC","CLOCK_MONOTONIC_COARSE","CLOCK_MONOTONIC_RAW","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_REALTIME_ALARM","CLOCK_REALTIME_COARSE","CLOCK_TAI","CLOCK_THREAD_CPUTIME_ID","CLONE_CHILD_CLEARTID","CLONE_CHILD_SETTID","CLONE_DETACHED","CLONE_FILES","CLONE_FS","CLONE_IO","CLONE_NEWCGROUP","CLONE_NEWIPC","CLONE_NEWNET","CLONE_NEWNS","CLONE_NEWPID","CLONE_NEWUSER","CLONE_NEWUTS","CLONE_PARENT","CLONE_PARENT_SETTID","CLONE_PIDFD","CLONE_PTRACE","CLONE_SETTLS","CLONE_SIGHAND","CLONE_SYSVSEM","CLONE_THREAD","CLONE_UNTRACED","CLONE_VFORK","CLONE_VM","CLOSE_RANGE_CLOEXEC","CLOSE_RANGE_UNSHARE","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CMSPAR","CODA_SUPER_MAGIC","CODESET","CPU_ALLOC_SIZE","CPU_CLR","CPU_COUNT","CPU_COUNT_S","CPU_EQUAL","CPU_ISSET","CPU_SET","CPU_SETSIZE","CPU_ZERO","CR0","CR1","CR2","CR3","CRAMFS_MAGIC","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","CTRL_ATTR_FAMILY_ID","CTRL_ATTR_FAMILY_NAME","CTRL_ATTR_HDRSIZE","CTRL_ATTR_MAXATTR","CTRL_ATTR_MCAST_GROUPS","CTRL_ATTR_MCAST_GRP_ID","CTRL_ATTR_MCAST_GRP_NAME","CTRL_ATTR_MCAST_GRP_UNSPEC","CTRL_ATTR_OPS","CTRL_ATTR_OP_FLAGS","CTRL_ATTR_OP_ID","CTRL_ATTR_OP_UNSPEC","CTRL_ATTR_UNSPEC","CTRL_ATTR_VERSION","CTRL_CMD_DELFAMILY","CTRL_CMD_DELMCAST_GRP","CTRL_CMD_DELOPS","CTRL_CMD_GETFAMILY","CTRL_CMD_GETMCAST_GRP","CTRL_CMD_GETOPS","CTRL_CMD_NEWFAMILY","CTRL_CMD_NEWMCAST_GRP","CTRL_CMD_NEWOPS","CTRL_CMD_UNSPEC","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DCCP_SERVICE_LIST_MAX_LEN","DCCP_SOCKOPT_AVAILABLE_CCIDS","DCCP_SOCKOPT_CCID","DCCP_SOCKOPT_CCID_RX_INFO","DCCP_SOCKOPT_CCID_TX_INFO","DCCP_SOCKOPT_CHANGE_L","DCCP_SOCKOPT_CHANGE_R","DCCP_SOCKOPT_GET_CUR_MPS","DCCP_SOCKOPT_PACKET_SIZE","DCCP_SOCKOPT_QPOLICY_ID","DCCP_SOCKOPT_QPOLICY_TXQLEN","DCCP_SOCKOPT_RECV_CSCOV","DCCP_SOCKOPT_RX_CCID","DCCP_SOCKOPT_SEND_CSCOV","DCCP_SOCKOPT_SERVER_TIMEWAIT","DCCP_SOCKOPT_SERVICE","DCCP_SOCKOPT_TX_CCID","DEAD_PROCESS","DEBUGFS_MAGIC","DEVPTS_SUPER_MAGIC","DIR","DS","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EADV","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EBADE","EBADF","EBADFD","EBADMSG","EBADR","EBADRQC","EBADSLT","EBFONT","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECHRNG","ECOMM","ECONNABORTED","ECONNREFUSED","ECONNRESET","ECRYPTFS_SUPER_MAGIC","EDEADLK","EDEADLOCK","EDESTADDRREQ","EDOM","EDOTDOT","EDQUOT","EEXIST","EFAULT","EFBIG","EFD_CLOEXEC","EFD_NONBLOCK","EFD_SEMAPHORE","EFLAGS","EFS_SUPER_MAGIC","EHOSTDOWN","EHOSTUNREACH","EHWPOISON","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","EISNAM","EI_ABIVERSION","EI_CLASS","EI_DATA","EI_MAG0","EI_MAG1","EI_MAG2","EI_MAG3","EI_NIDENT","EI_OSABI","EI_PAD","EI_VERSION","EKEYEXPIRED","EKEYREJECTED","EKEYREVOKED","EL2HLT","EL2NSYNC","EL3HLT","EL3RST","ELFCLASS32","ELFCLASS64","ELFCLASSNONE","ELFCLASSNUM","ELFDATA2LSB","ELFDATA2MSB","ELFDATANONE","ELFDATANUM","ELFMAG0","ELFMAG1","ELFMAG2","ELFMAG3","ELFOSABI_AIX","ELFOSABI_ARM","ELFOSABI_ARM_AEABI","ELFOSABI_FREEBSD","ELFOSABI_GNU","ELFOSABI_HPUX","ELFOSABI_IRIX","ELFOSABI_LINUX","ELFOSABI_MODESTO","ELFOSABI_NETBSD","ELFOSABI_NONE","ELFOSABI_OPENBSD","ELFOSABI_SOLARIS","ELFOSABI_STANDALONE","ELFOSABI_SYSV","ELFOSABI_TRU64","ELIBACC","ELIBBAD","ELIBEXEC","ELIBMAX","ELIBSCN","ELNRNG","ELOOP","EMEDIUMTYPE","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","EM_386","EM_68HC05","EM_68HC08","EM_68HC11","EM_68HC12","EM_68HC16","EM_68K","EM_860","EM_88K","EM_960","EM_AARCH64","EM_ALPHA","EM_ARC","EM_ARC_A5","EM_ARM","EM_AVR","EM_COLDFIRE","EM_CRIS","EM_D10V","EM_D30V","EM_FAKE_ALPHA","EM_FIREPATH","EM_FR20","EM_FR30","EM_FX66","EM_H8S","EM_H8_300","EM_H8_300H","EM_H8_500","EM_HUANY","EM_IA_64","EM_JAVELIN","EM_M32","EM_M32R","EM_ME16","EM_MIPS","EM_MIPS_RS3_LE","EM_MIPS_X","EM_MMA","EM_MMIX","EM_MN10200","EM_MN10300","EM_NCPU","EM_NDR1","EM_NONE","EM_OPENRISC","EM_PARISC","EM_PCP","EM_PDSP","EM_PJ","EM_PPC","EM_PPC64","EM_PRISM","EM_RCE","EM_RH32","EM_S370","EM_S390","EM_SH","EM_SPARC","EM_SPARC32PLUS","EM_SPARCV9","EM_ST100","EM_ST19","EM_ST7","EM_ST9PLUS","EM_STARCORE","EM_SVX","EM_TILEGX","EM_TILEPRO","EM_TINYJ","EM_TRICORE","EM_V800","EM_V850","EM_VAX","EM_VPP500","EM_X86_64","EM_XTENSA","EM_ZSP","ENAMETOOLONG","ENAVAIL","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOANO","ENOATTR","ENOBUFS","ENOCSI","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENONET","ENOPKG","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTNAM","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENOTUNIQ","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPOLLERR","EPOLLET","EPOLLEXCLUSIVE","EPOLLHUP","EPOLLIN","EPOLLMSG","EPOLLONESHOT","EPOLLOUT","EPOLLPRI","EPOLLRDBAND","EPOLLRDHUP","EPOLLRDNORM","EPOLLWAKEUP","EPOLLWRBAND","EPOLLWRNORM","EPOLL_CLOEXEC","EPOLL_CTL_ADD","EPOLL_CTL_DEL","EPOLL_CTL_MOD","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMCHG","EREMOTE","EREMOTEIO","ERESTART","ERFKILL","EROFS","ES","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESRMNT","ESTALE","ESTRPIPE","ETH_ALEN","ETH_DATA_LEN","ETH_FCS_LEN","ETH_FRAME_LEN","ETH_HLEN","ETH_P_1588","ETH_P_8021AD","ETH_P_8021AH","ETH_P_8021Q","ETH_P_80221","ETH_P_802_2","ETH_P_802_3","ETH_P_802_3_MIN","ETH_P_802_EX1","ETH_P_AARP","ETH_P_AF_IUCV","ETH_P_ALL","ETH_P_AOE","ETH_P_ARCNET","ETH_P_ARP","ETH_P_ATALK","ETH_P_ATMFATE","ETH_P_ATMMPOA","ETH_P_AX25","ETH_P_BATMAN","ETH_P_BPQ","ETH_P_CAIF","ETH_P_CANFD","ETH_P_CONTROL","ETH_P_CUST","ETH_P_DDCMP","ETH_P_DEC","ETH_P_DIAG","ETH_P_DNA_DL","ETH_P_DNA_RC","ETH_P_DNA_RT","ETH_P_DSA","ETH_P_ECONET","ETH_P_EDSA","ETH_P_FCOE","ETH_P_FIP","ETH_P_HDLC","ETH_P_IEEE802154","ETH_P_IEEEPUP","ETH_P_IEEEPUPAT","ETH_P_IP","ETH_P_IPV6","ETH_P_IPX","ETH_P_IRDA","ETH_P_LAT","ETH_P_LINK_CTL","ETH_P_LOCALTALK","ETH_P_LOOP","ETH_P_LOOPBACK","ETH_P_MACSEC","ETH_P_MOBITEX","ETH_P_MPLS_MC","ETH_P_MPLS_UC","ETH_P_MVRP","ETH_P_PAE","ETH_P_PAUSE","ETH_P_PHONET","ETH_P_PPPTALK","ETH_P_PPP_DISC","ETH_P_PPP_MP","ETH_P_PPP_SES","ETH_P_PRP","ETH_P_PUP","ETH_P_PUPAT","ETH_P_QINQ1","ETH_P_QINQ2","ETH_P_QINQ3","ETH_P_RARP","ETH_P_SCA","ETH_P_SLOW","ETH_P_SNAP","ETH_P_TDLS","ETH_P_TEB","ETH_P_TIPC","ETH_P_TRAILER","ETH_P_TR_802_2","ETH_P_WAN_PPP","ETH_P_WCCP","ETH_P_X25","ETH_ZLEN","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","ET_CORE","ET_DYN","ET_EXEC","ET_HIOS","ET_HIPROC","ET_LOOS","ET_LOPROC","ET_NONE","ET_NUM","ET_REL","EUCLEAN","EUNATCH","EUSERS","EV_CNT","EV_CURRENT","EV_MAX","EV_NONE","EV_NUM","EWOULDBLOCK","EXDEV","EXFULL","EXIT_FAILURE","EXIT_SUCCESS","EXT2_SUPER_MAGIC","EXT3_SUPER_MAGIC","EXT4_SUPER_MAGIC","EXTA","EXTB","EXTPROC","Elf32_Addr","Elf32_Chdr","Elf32_Ehdr","Elf32_Half","Elf32_Off","Elf32_Phdr","Elf32_Section","Elf32_Shdr","Elf32_Sym","Elf32_Word","Elf64_Addr","Elf64_Chdr","Elf64_Ehdr","Elf64_Half","Elf64_Off","Elf64_Phdr","Elf64_Section","Elf64_Shdr","Elf64_Sxword","Elf64_Sym","Elf64_Word","Elf64_Xword","F2FS_SUPER_MAGIC","FALLOC_FL_COLLAPSE_RANGE","FALLOC_FL_INSERT_RANGE","FALLOC_FL_KEEP_SIZE","FALLOC_FL_PUNCH_HOLE","FALLOC_FL_UNSHARE_RANGE","FALLOC_FL_ZERO_RANGE","FANOTIFY_METADATA_VERSION","FAN_ACCESS","FAN_ACCESS_PERM","FAN_ALLOW","FAN_CLASS_CONTENT","FAN_CLASS_NOTIF","FAN_CLASS_PRE_CONTENT","FAN_CLOEXEC","FAN_CLOSE","FAN_CLOSE_NOWRITE","FAN_CLOSE_WRITE","FAN_DENY","FAN_EVENT_ON_CHILD","FAN_MARK_ADD","FAN_MARK_DONT_FOLLOW","FAN_MARK_FILESYSTEM","FAN_MARK_FLUSH","FAN_MARK_IGNORED_MASK","FAN_MARK_IGNORED_SURV_MODIFY","FAN_MARK_INODE","FAN_MARK_MOUNT","FAN_MARK_ONLYDIR","FAN_MARK_REMOVE","FAN_MODIFY","FAN_NOFD","FAN_NONBLOCK","FAN_ONDIR","FAN_OPEN","FAN_OPEN_PERM","FAN_Q_OVERFLOW","FAN_UNLIMITED_MARKS","FAN_UNLIMITED_QUEUE","FDPIC_FUNCPTRS","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FF_CNT","FF_MAX","FICLONE","FICLONERANGE","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIONBIO","FIONCLEX","FIONREAD","FIOQSIZE","FLUSHO","FOPEN_MAX","FS","FS_BASE","FUSE_SUPER_MAGIC","FUTEXFS_SUPER_MAGIC","FUTEX_CLOCK_REALTIME","FUTEX_CMD_MASK","FUTEX_CMP_REQUEUE","FUTEX_CMP_REQUEUE_PI","FUTEX_FD","FUTEX_LOCK_PI","FUTEX_LOCK_PI2","FUTEX_PRIVATE_FLAG","FUTEX_REQUEUE","FUTEX_TRYLOCK_PI","FUTEX_UNLOCK_PI","FUTEX_WAIT","FUTEX_WAIT_BITSET","FUTEX_WAIT_REQUEUE_PI","FUTEX_WAKE","FUTEX_WAKE_BITSET","FUTEX_WAKE_OP","F_ADD_SEALS","F_CANCELLK","F_DUPFD","F_DUPFD_CLOEXEC","F_GETFD","F_GETFL","F_GETLEASE","F_GETLK","F_GETOWN","F_GETPIPE_SZ","F_GET_SEALS","F_LOCK","F_NOTIFY","F_OFD_GETLK","F_OFD_SETLK","F_OFD_SETLKW","F_OK","F_RDLCK","F_SEAL_FUTURE_WRITE","F_SEAL_GROW","F_SEAL_SEAL","F_SEAL_SHRINK","F_SEAL_WRITE","F_SETFD","F_SETFL","F_SETLEASE","F_SETLK","F_SETLKW","F_SETOWN","F_SETPIPE_SZ","F_TEST","F_TLOCK","F_ULOCK","F_UNLCK","F_WRLCK","GENL_ADMIN_PERM","GENL_CMD_CAP_DO","GENL_CMD_CAP_DUMP","GENL_CMD_CAP_HASPOL","GENL_ID_CTRL","GENL_ID_PMCRAID","GENL_ID_VFS_DQUOT","GENL_MAX_ID","GENL_MIN_ID","GENL_NAMSIZ","GENL_UNS_ADMIN_PERM","GLOB_ABORTED","GLOB_APPEND","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GRND_INSECURE","GRND_NONBLOCK","GRND_RANDOM","GRPQUOTA","GS","GS_BASE","HOSTFS_SUPER_MAGIC","HPFS_SUPER_MAGIC","HUGETLBFS_MAGIC","HUGETLB_FLAG_ENCODE_16GB","HUGETLB_FLAG_ENCODE_16MB","HUGETLB_FLAG_ENCODE_1GB","HUGETLB_FLAG_ENCODE_1MB","HUGETLB_FLAG_ENCODE_256MB","HUGETLB_FLAG_ENCODE_2GB","HUGETLB_FLAG_ENCODE_2MB","HUGETLB_FLAG_ENCODE_32MB","HUGETLB_FLAG_ENCODE_512KB","HUGETLB_FLAG_ENCODE_512MB","HUGETLB_FLAG_ENCODE_64KB","HUGETLB_FLAG_ENCODE_8MB","HUGETLB_FLAG_ENCODE_MASK","HUGETLB_FLAG_ENCODE_SHIFT","HUPCL","IBSHIFT","ICANON","ICRNL","IEXTEN","IFA_ADDRESS","IFA_ANYCAST","IFA_BROADCAST","IFA_CACHEINFO","IFA_FLAGS","IFA_F_DADFAILED","IFA_F_DEPRECATED","IFA_F_HOMEADDRESS","IFA_F_MANAGETEMPADDR","IFA_F_MCAUTOJOIN","IFA_F_NODAD","IFA_F_NOPREFIXROUTE","IFA_F_OPTIMISTIC","IFA_F_PERMANENT","IFA_F_SECONDARY","IFA_F_STABLE_PRIVACY","IFA_F_TEMPORARY","IFA_F_TENTATIVE","IFA_LABEL","IFA_LOCAL","IFA_MULTICAST","IFA_UNSPEC","IFF_ALLMULTI","IFF_ATTACH_QUEUE","IFF_AUTOMEDIA","IFF_BROADCAST","IFF_DEBUG","IFF_DETACH_QUEUE","IFF_DORMANT","IFF_DYNAMIC","IFF_ECHO","IFF_LOOPBACK","IFF_LOWER_UP","IFF_MASTER","IFF_MULTICAST","IFF_MULTI_QUEUE","IFF_NOARP","IFF_NOFILTER","IFF_NOTRAILERS","IFF_NO_PI","IFF_ONE_QUEUE","IFF_PERSIST","IFF_POINTOPOINT","IFF_PORTSEL","IFF_PROMISC","IFF_RUNNING","IFF_SLAVE","IFF_TAP","IFF_TUN","IFF_TUN_EXCL","IFF_UP","IFF_VNET_HDR","IFLA_ADDRESS","IFLA_AF_SPEC","IFLA_ALT_IFNAME","IFLA_BROADCAST","IFLA_CARRIER","IFLA_CARRIER_CHANGES","IFLA_CARRIER_DOWN_COUNT","IFLA_CARRIER_UP_COUNT","IFLA_COST","IFLA_EVENT","IFLA_EXT_MASK","IFLA_GROUP","IFLA_GSO_MAX_SEGS","IFLA_GSO_MAX_SIZE","IFLA_IFALIAS","IFLA_IFNAME","IFLA_IF_NETNSID","IFLA_INFO_DATA","IFLA_INFO_KIND","IFLA_INFO_SLAVE_DATA","IFLA_INFO_SLAVE_KIND","IFLA_INFO_UNSPEC","IFLA_INFO_XSTATS","IFLA_LINK","IFLA_LINKINFO","IFLA_LINKMODE","IFLA_LINK_NETNSID","IFLA_MAP","IFLA_MASTER","IFLA_MAX_MTU","IFLA_MIN_MTU","IFLA_MTU","IFLA_NET_NS_FD","IFLA_NET_NS_PID","IFLA_NEW_IFINDEX","IFLA_NEW_NETNSID","IFLA_NUM_RX_QUEUES","IFLA_NUM_TX_QUEUES","IFLA_NUM_VF","IFLA_OPERSTATE","IFLA_PAD","IFLA_PERM_ADDRESS","IFLA_PHYS_PORT_ID","IFLA_PHYS_PORT_NAME","IFLA_PHYS_SWITCH_ID","IFLA_PORT_SELF","IFLA_PRIORITY","IFLA_PROMISCUITY","IFLA_PROP_LIST","IFLA_PROTINFO","IFLA_PROTO_DOWN","IFLA_PROTO_DOWN_REASON","IFLA_QDISC","IFLA_STATS","IFLA_STATS64","IFLA_TARGET_NETNSID","IFLA_TXQLEN","IFLA_UNSPEC","IFLA_VFINFO_LIST","IFLA_VF_PORTS","IFLA_WEIGHT","IFLA_WIRELESS","IFLA_XDP","IFNAMSIZ","IF_NAMESIZE","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INPCK","INPUT_PROP_CNT","INPUT_PROP_MAX","INT_MAX","INT_MIN","IN_ACCESS","IN_ALL_EVENTS","IN_ATTRIB","IN_CLOEXEC","IN_CLOSE","IN_CLOSE_NOWRITE","IN_CLOSE_WRITE","IN_CREATE","IN_DELETE","IN_DELETE_SELF","IN_DONT_FOLLOW","IN_IGNORED","IN_ISDIR","IN_MODIFY","IN_MOVE","IN_MOVED_FROM","IN_MOVED_TO","IN_MOVE_SELF","IN_NONBLOCK","IN_ONESHOT","IN_ONLYDIR","IN_OPEN","IN_Q_OVERFLOW","IN_UNMOUNT","IP6T_SO_ORIGINAL_DST","IPC_CREAT","IPC_EXCL","IPC_INFO","IPC_NOWAIT","IPC_PRIVATE","IPC_RMID","IPC_SET","IPC_STAT","IPDEFTTL","IPOPT_CLASS","IPOPT_CLASS_MASK","IPOPT_CONTROL","IPOPT_COPIED","IPOPT_COPY","IPOPT_END","IPOPT_EOL","IPOPT_LSRR","IPOPT_MEASUREMENT","IPOPT_MINOFF","IPOPT_NOOP","IPOPT_NOP","IPOPT_NUMBER","IPOPT_NUMBER_MASK","IPOPT_OFFSET","IPOPT_OLEN","IPOPT_OPTVAL","IPOPT_RA","IPOPT_RESERVED1","IPOPT_RESERVED2","IPOPT_RR","IPOPT_SEC","IPOPT_SID","IPOPT_SSRR","IPOPT_TIMESTAMP","IPOPT_TS","IPOPT_TS_PRESPEC","IPOPT_TS_TSANDADDR","IPOPT_TS_TSONLY","IPPROTO_AH","IPPROTO_BEETPH","IPPROTO_COMP","IPPROTO_DCCP","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_ENCAP","IPPROTO_ESP","IPPROTO_FRAGMENT","IPPROTO_GRE","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IGMP","IPPROTO_IP","IPPROTO_IPIP","IPPROTO_IPV6","IPPROTO_MAX","IPPROTO_MH","IPPROTO_MPLS","IPPROTO_MPTCP","IPPROTO_MTP","IPPROTO_NONE","IPPROTO_PIM","IPPROTO_PUP","IPPROTO_RAW","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_SCTP","IPPROTO_TCP","IPPROTO_TP","IPPROTO_UDP","IPPROTO_UDPLITE","IPTOS_ECN","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOT_ECT","IPTOS_LOWDELAY","IPTOS_MINCOST","IPTOS_PREC","IPTOS_PREC_CRITIC_ECP","IPTOS_PREC_FLASH","IPTOS_PREC_FLASHOVERRIDE","IPTOS_PREC_IMMEDIATE","IPTOS_PREC_INTERNETCONTROL","IPTOS_PREC_MASK","IPTOS_PREC_NETCONTROL","IPTOS_PREC_PRIORITY","IPTOS_PREC_ROUTINE","IPTOS_RELIABILITY","IPTOS_THROUGHPUT","IPTOS_TOS","IPTOS_TOS_MASK","IPV6_2292DSTOPTS","IPV6_2292HOPLIMIT","IPV6_2292HOPOPTS","IPV6_2292PKTINFO","IPV6_2292PKTOPTIONS","IPV6_2292RTHDR","IPV6_ADDRFORM","IPV6_ADDR_PREFERENCES","IPV6_ADD_MEMBERSHIP","IPV6_AUTHHDR","IPV6_AUTOFLOWLABEL","IPV6_CHECKSUM","IPV6_DONTFRAG","IPV6_DROP_MEMBERSHIP","IPV6_DSTOPTS","IPV6_FLOWINFO","IPV6_FLOWINFO_FLOWLABEL","IPV6_FLOWINFO_PRIORITY","IPV6_FLOWINFO_SEND","IPV6_FLOWLABEL_MGR","IPV6_FREEBIND","IPV6_HDRINCL","IPV6_HOPLIMIT","IPV6_HOPOPTS","IPV6_IPSEC_POLICY","IPV6_JOIN_ANYCAST","IPV6_LEAVE_ANYCAST","IPV6_MINHOPCOUNT","IPV6_MTU","IPV6_MTU_DISCOVER","IPV6_MULTICAST_ALL","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_NEXTHOP","IPV6_ORIGDSTADDR","IPV6_PATHMTU","IPV6_PKTINFO","IPV6_PMTUDISC_DO","IPV6_PMTUDISC_DONT","IPV6_PMTUDISC_INTERFACE","IPV6_PMTUDISC_OMIT","IPV6_PMTUDISC_PROBE","IPV6_PMTUDISC_WANT","IPV6_PREFER_SRC_CGA","IPV6_PREFER_SRC_COA","IPV6_PREFER_SRC_HOME","IPV6_PREFER_SRC_NONCGA","IPV6_PREFER_SRC_PUBLIC","IPV6_PREFER_SRC_PUBTMP_DEFAULT","IPV6_PREFER_SRC_TMP","IPV6_RECVDSTOPTS","IPV6_RECVERR","IPV6_RECVFRAGSIZE","IPV6_RECVHOPLIMIT","IPV6_RECVHOPOPTS","IPV6_RECVORIGDSTADDR","IPV6_RECVPATHMTU","IPV6_RECVPKTINFO","IPV6_RECVRTHDR","IPV6_RECVTCLASS","IPV6_ROUTER_ALERT","IPV6_ROUTER_ALERT_ISOLATE","IPV6_RTHDR","IPV6_RTHDRDSTOPTS","IPV6_RTHDR_LOOSE","IPV6_RTHDR_STRICT","IPV6_TCLASS","IPV6_TRANSPARENT","IPV6_UNICAST_HOPS","IPV6_UNICAST_IF","IPV6_V6ONLY","IPV6_XFRM_POLICY","IPVERSION","IP_ADD_MEMBERSHIP","IP_ADD_SOURCE_MEMBERSHIP","IP_BIND_ADDRESS_NO_PORT","IP_BLOCK_SOURCE","IP_CHECKSUM","IP_DEFAULT_MULTICAST_LOOP","IP_DEFAULT_MULTICAST_TTL","IP_DROP_MEMBERSHIP","IP_DROP_SOURCE_MEMBERSHIP","IP_FREEBIND","IP_HDRINCL","IP_IPSEC_POLICY","IP_MINTTL","IP_MSFILTER","IP_MTU","IP_MTU_DISCOVER","IP_MULTICAST_ALL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_NODEFRAG","IP_OPTIONS","IP_ORIGDSTADDR","IP_PASSSEC","IP_PKTINFO","IP_PKTOPTIONS","IP_PMTUDISC_DO","IP_PMTUDISC_DONT","IP_PMTUDISC_INTERFACE","IP_PMTUDISC_OMIT","IP_PMTUDISC_PROBE","IP_PMTUDISC_WANT","IP_RECVERR","IP_RECVFRAGSIZE","IP_RECVOPTS","IP_RECVORIGDSTADDR","IP_RECVTOS","IP_RECVTTL","IP_RETOPTS","IP_ROUTER_ALERT","IP_TOS","IP_TRANSPARENT","IP_TTL","IP_UNBLOCK_SOURCE","IP_UNICAST_IF","IP_XFRM_POLICY","ISIG","ISOFS_SUPER_MAGIC","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUTF8","IXANY","IXOFF","IXON","J1939_EE_INFO_NONE","J1939_EE_INFO_RX_ABORT","J1939_EE_INFO_RX_DPO","J1939_EE_INFO_RX_RTS","J1939_EE_INFO_TX_ABORT","J1939_FILTER_MAX","J1939_IDLE_ADDR","J1939_MAX_UNICAST_ADDR","J1939_NLA_BYTES_ACKED","J1939_NLA_DEST_ADDR","J1939_NLA_DEST_NAME","J1939_NLA_PAD","J1939_NLA_PGN","J1939_NLA_SRC_ADDR","J1939_NLA_SRC_NAME","J1939_NLA_TOTAL_SIZE","J1939_NO_ADDR","J1939_NO_NAME","J1939_NO_PGN","J1939_PGN_ADDRESS_CLAIMED","J1939_PGN_ADDRESS_COMMANDED","J1939_PGN_MAX","J1939_PGN_PDU1_MAX","J1939_PGN_REQUEST","JFFS2_SUPER_MAGIC","KEYCTL_ASSUME_AUTHORITY","KEYCTL_CAPABILITIES","KEYCTL_CAPS0_BIG_KEY","KEYCTL_CAPS0_CAPABILITIES","KEYCTL_CAPS0_DIFFIE_HELLMAN","KEYCTL_CAPS0_INVALIDATE","KEYCTL_CAPS0_MOVE","KEYCTL_CAPS0_PERSISTENT_KEYRINGS","KEYCTL_CAPS0_PUBLIC_KEY","KEYCTL_CAPS0_RESTRICT_KEYRING","KEYCTL_CAPS1_NS_KEYRING_NAME","KEYCTL_CAPS1_NS_KEY_TAG","KEYCTL_CHOWN","KEYCTL_CLEAR","KEYCTL_DESCRIBE","KEYCTL_DH_COMPUTE","KEYCTL_GET_KEYRING_ID","KEYCTL_GET_PERSISTENT","KEYCTL_GET_SECURITY","KEYCTL_INSTANTIATE","KEYCTL_INSTANTIATE_IOV","KEYCTL_INVALIDATE","KEYCTL_JOIN_SESSION_KEYRING","KEYCTL_LINK","KEYCTL_MOVE","KEYCTL_NEGATE","KEYCTL_PKEY_DECRYPT","KEYCTL_PKEY_ENCRYPT","KEYCTL_PKEY_QUERY","KEYCTL_PKEY_SIGN","KEYCTL_PKEY_VERIFY","KEYCTL_READ","KEYCTL_REJECT","KEYCTL_RESTRICT_KEYRING","KEYCTL_REVOKE","KEYCTL_SEARCH","KEYCTL_SESSION_TO_PARENT","KEYCTL_SETPERM","KEYCTL_SET_REQKEY_KEYRING","KEYCTL_SET_TIMEOUT","KEYCTL_SUPPORTS_DECRYPT","KEYCTL_SUPPORTS_ENCRYPT","KEYCTL_SUPPORTS_SIGN","KEYCTL_SUPPORTS_VERIFY","KEYCTL_UNLINK","KEYCTL_UPDATE","KEY_CNT","KEY_MAX","KEY_REQKEY_DEFL_DEFAULT","KEY_REQKEY_DEFL_GROUP_KEYRING","KEY_REQKEY_DEFL_NO_CHANGE","KEY_REQKEY_DEFL_PROCESS_KEYRING","KEY_REQKEY_DEFL_REQUESTOR_KEYRING","KEY_REQKEY_DEFL_SESSION_KEYRING","KEY_REQKEY_DEFL_THREAD_KEYRING","KEY_REQKEY_DEFL_USER_KEYRING","KEY_REQKEY_DEFL_USER_SESSION_KEYRING","KEY_SPEC_GROUP_KEYRING","KEY_SPEC_PROCESS_KEYRING","KEY_SPEC_REQKEY_AUTH_KEY","KEY_SPEC_REQUESTOR_KEYRING","KEY_SPEC_SESSION_KEYRING","KEY_SPEC_THREAD_KEYRING","KEY_SPEC_USER_KEYRING","KEY_SPEC_USER_SESSION_KEYRING","LC_ADDRESS","LC_ADDRESS_MASK","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_IDENTIFICATION","LC_IDENTIFICATION_MASK","LC_MEASUREMENT","LC_MEASUREMENT_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NAME","LC_NAME_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_PAPER","LC_PAPER_MASK","LC_TELEPHONE","LC_TELEPHONE_MASK","LC_TIME","LC_TIME_MASK","LED_CNT","LED_MAX","LINUX_REBOOT_CMD_CAD_OFF","LINUX_REBOOT_CMD_CAD_ON","LINUX_REBOOT_CMD_HALT","LINUX_REBOOT_CMD_KEXEC","LINUX_REBOOT_CMD_POWER_OFF","LINUX_REBOOT_CMD_RESTART","LINUX_REBOOT_CMD_RESTART2","LINUX_REBOOT_CMD_SW_SUSPEND","LINUX_REBOOT_MAGIC1","LINUX_REBOOT_MAGIC2","LINUX_REBOOT_MAGIC2A","LINUX_REBOOT_MAGIC2B","LINUX_REBOOT_MAGIC2C","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LM_ID_BASE","LM_ID_NEWLM","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_KERN","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","Lmid_t","MADV_DODUMP","MADV_DOFORK","MADV_DONTDUMP","MADV_DONTFORK","MADV_DONTNEED","MADV_FREE","MADV_HUGEPAGE","MADV_HWPOISON","MADV_MERGEABLE","MADV_NOHUGEPAGE","MADV_NORMAL","MADV_RANDOM","MADV_REMOVE","MADV_SEQUENTIAL","MADV_SOFT_OFFLINE","MADV_UNMERGEABLE","MADV_WILLNEED","MAP_32BIT","MAP_ANON","MAP_ANONYMOUS","MAP_DENYWRITE","MAP_EXECUTABLE","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_FIXED_NOREPLACE","MAP_GROWSDOWN","MAP_HUGETLB","MAP_HUGE_16GB","MAP_HUGE_16MB","MAP_HUGE_1GB","MAP_HUGE_1MB","MAP_HUGE_256MB","MAP_HUGE_2GB","MAP_HUGE_2MB","MAP_HUGE_32MB","MAP_HUGE_512KB","MAP_HUGE_512MB","MAP_HUGE_64KB","MAP_HUGE_8MB","MAP_HUGE_MASK","MAP_HUGE_SHIFT","MAP_LOCKED","MAP_NONBLOCK","MAP_NORESERVE","MAP_POPULATE","MAP_PRIVATE","MAP_SHARED","MAP_SHARED_VALIDATE","MAP_STACK","MAP_SYNC","MAP_TYPE","MAXTC","MAXTTL","MAX_ADDR_LEN","MAX_IPOPTLEN","MAX_LINKS","MCAST_BLOCK_SOURCE","MCAST_EXCLUDE","MCAST_INCLUDE","MCAST_JOIN_GROUP","MCAST_JOIN_SOURCE_GROUP","MCAST_LEAVE_GROUP","MCAST_LEAVE_SOURCE_GROUP","MCAST_MSFILTER","MCAST_UNBLOCK_SOURCE","MCL_CURRENT","MCL_FUTURE","MFD_ALLOW_SEALING","MFD_CLOEXEC","MFD_HUGETLB","MFD_HUGE_16GB","MFD_HUGE_16MB","MFD_HUGE_1GB","MFD_HUGE_1MB","MFD_HUGE_256MB","MFD_HUGE_2GB","MFD_HUGE_2MB","MFD_HUGE_32MB","MFD_HUGE_512KB","MFD_HUGE_512MB","MFD_HUGE_64KB","MFD_HUGE_8MB","MFD_HUGE_MASK","MFD_HUGE_SHIFT","MINIX2_SUPER_MAGIC","MINIX2_SUPER_MAGIC2","MINIX3_SUPER_MAGIC","MINIX_SUPER_MAGIC","MINIX_SUPER_MAGIC2","MINSIGSTKSZ","MLOCK_ONFAULT","MMAP_PAGE_ZERO","MNT_DETACH","MNT_EXPIRE","MNT_FORCE","MODULE_INIT_IGNORE_MODVERSIONS","MODULE_INIT_IGNORE_VERMAGIC","MOD_CLKA","MOD_CLKB","MOD_ESTERROR","MOD_FREQUENCY","MOD_MAXERROR","MOD_MICRO","MOD_NANO","MOD_OFFSET","MOD_STATUS","MOD_TAI","MOD_TIMECONST","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MPOL_BIND","MPOL_DEFAULT","MPOL_F_NUMA_BALANCING","MPOL_F_RELATIVE_NODES","MPOL_F_STATIC_NODES","MPOL_INTERLEAVE","MPOL_LOCAL","MPOL_PREFERRED","MREMAP_DONTUNMAP","MREMAP_FIXED","MREMAP_MAYMOVE","MSC_CNT","MSC_MAX","MSDOS_SUPER_MAGIC","MSG_CMSG_CLOEXEC","MSG_CONFIRM","MSG_COPY","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOR","MSG_ERRQUEUE","MSG_EXCEPT","MSG_FASTOPEN","MSG_FIN","MSG_INFO","MSG_MORE","MSG_NOERROR","MSG_NOSIGNAL","MSG_OOB","MSG_PEEK","MSG_RST","MSG_STAT","MSG_SYN","MSG_TRUNC","MSG_TRYHARD","MSG_WAITALL","MSG_WAITFORONE","MSG_ZEROCOPY","MS_ACTIVE","MS_ASYNC","MS_BIND","MS_DIRSYNC","MS_INVALIDATE","MS_I_VERSION","MS_KERNMOUNT","MS_LAZYTIME","MS_MANDLOCK","MS_MGC_MSK","MS_MGC_VAL","MS_MOVE","MS_NOATIME","MS_NODEV","MS_NODIRATIME","MS_NOEXEC","MS_NOSUID","MS_NOUSER","MS_POSIXACL","MS_PRIVATE","MS_RDONLY","MS_REC","MS_RELATIME","MS_REMOUNT","MS_RMT_MASK","MS_SHARED","MS_SILENT","MS_SLAVE","MS_STRICTATIME","MS_SYNC","MS_SYNCHRONOUS","MS_UNBINDABLE","M_ARENA_MAX","M_ARENA_TEST","M_CHECK_ACTION","M_GRAIN","M_KEEP","M_MMAP_MAX","M_MMAP_THRESHOLD","M_MXFAST","M_NLBLKS","M_PERTURB","M_TOP_PAD","M_TRIM_THRESHOLD","NCCS","NCP_SUPER_MAGIC","NDA_CACHEINFO","NDA_DST","NDA_IFINDEX","NDA_LINK_NETNSID","NDA_LLADDR","NDA_MASTER","NDA_PORT","NDA_PROBES","NDA_SRC_VNI","NDA_UNSPEC","NDA_VLAN","NDA_VNI","NETLINK_ADD_MEMBERSHIP","NETLINK_AUDIT","NETLINK_BROADCAST_ERROR","NETLINK_CAP_ACK","NETLINK_CONNECTOR","NETLINK_CRYPTO","NETLINK_DNRTMSG","NETLINK_DROP_MEMBERSHIP","NETLINK_ECRYPTFS","NETLINK_EXT_ACK","NETLINK_FIB_LOOKUP","NETLINK_FIREWALL","NETLINK_GENERIC","NETLINK_GET_STRICT_CHK","NETLINK_INET_DIAG","NETLINK_IP6_FW","NETLINK_ISCSI","NETLINK_KOBJECT_UEVENT","NETLINK_LISTEN_ALL_NSID","NETLINK_LIST_MEMBERSHIPS","NETLINK_NETFILTER","NETLINK_NFLOG","NETLINK_NO_ENOBUFS","NETLINK_PKTINFO","NETLINK_RDMA","NETLINK_ROUTE","NETLINK_RX_RING","NETLINK_SCSITRANSPORT","NETLINK_SELINUX","NETLINK_SOCK_DIAG","NETLINK_TX_RING","NETLINK_UNUSED","NETLINK_USERSOCK","NETLINK_XFRM","NEW_TIME","NFNETLINK_V0","NFNLGRP_ACCT_QUOTA","NFNLGRP_CONNTRACK_DESTROY","NFNLGRP_CONNTRACK_EXP_DESTROY","NFNLGRP_CONNTRACK_EXP_NEW","NFNLGRP_CONNTRACK_EXP_UPDATE","NFNLGRP_CONNTRACK_NEW","NFNLGRP_CONNTRACK_UPDATE","NFNLGRP_NFTABLES","NFNLGRP_NFTRACE","NFNLGRP_NONE","NFNL_BATCH_GENID","NFNL_BATCH_UNSPEC","NFNL_MSG_BATCH_BEGIN","NFNL_MSG_BATCH_END","NFNL_SUBSYS_ACCT","NFNL_SUBSYS_COUNT","NFNL_SUBSYS_CTHELPER","NFNL_SUBSYS_CTNETLINK","NFNL_SUBSYS_CTNETLINK_EXP","NFNL_SUBSYS_CTNETLINK_TIMEOUT","NFNL_SUBSYS_HOOK","NFNL_SUBSYS_IPSET","NFNL_SUBSYS_NFTABLES","NFNL_SUBSYS_NFT_COMPAT","NFNL_SUBSYS_NONE","NFNL_SUBSYS_OSF","NFNL_SUBSYS_QUEUE","NFNL_SUBSYS_ULOG","NFPROTO_ARP","NFPROTO_BRIDGE","NFPROTO_DECNET","NFPROTO_INET","NFPROTO_IPV4","NFPROTO_IPV6","NFPROTO_NETDEV","NFPROTO_NUMPROTO","NFPROTO_UNSPEC","NFQA_CAP_LEN","NFQA_CFG_CMD","NFQA_CFG_FLAGS","NFQA_CFG_F_CONNTRACK","NFQA_CFG_F_FAIL_OPEN","NFQA_CFG_F_GSO","NFQA_CFG_F_MAX","NFQA_CFG_F_SECCTX","NFQA_CFG_F_UID_GID","NFQA_CFG_MASK","NFQA_CFG_PARAMS","NFQA_CFG_QUEUE_MAXLEN","NFQA_CFG_UNSPEC","NFQA_CT","NFQA_CT_INFO","NFQA_EXP","NFQA_GID","NFQA_HWADDR","NFQA_IFINDEX_INDEV","NFQA_IFINDEX_OUTDEV","NFQA_IFINDEX_PHYSINDEV","NFQA_IFINDEX_PHYSOUTDEV","NFQA_L2HDR","NFQA_MARK","NFQA_PACKET_HDR","NFQA_PAYLOAD","NFQA_PRIORITY","NFQA_SECCTX","NFQA_SKB_CSUMNOTREADY","NFQA_SKB_CSUM_NOTVERIFIED","NFQA_SKB_GSO","NFQA_SKB_INFO","NFQA_TIMESTAMP","NFQA_UID","NFQA_UNSPEC","NFQA_VERDICT_HDR","NFQA_VLAN","NFQA_VLAN_PROTO","NFQA_VLAN_TCI","NFQA_VLAN_UNSPEC","NFQNL_CFG_CMD_BIND","NFQNL_CFG_CMD_NONE","NFQNL_CFG_CMD_PF_BIND","NFQNL_CFG_CMD_PF_UNBIND","NFQNL_CFG_CMD_UNBIND","NFQNL_COPY_META","NFQNL_COPY_NONE","NFQNL_COPY_PACKET","NFQNL_MSG_CONFIG","NFQNL_MSG_PACKET","NFQNL_MSG_VERDICT","NFQNL_MSG_VERDICT_BATCH","NFS_SUPER_MAGIC","NFT_BREAK","NFT_BYTEORDER_HTON","NFT_BYTEORDER_NTOH","NFT_CHAIN_MAXNAMELEN","NFT_CMP_EQ","NFT_CMP_GT","NFT_CMP_GTE","NFT_CMP_LT","NFT_CMP_LTE","NFT_CMP_NEQ","NFT_CONTINUE","NFT_CT_BYTES","NFT_CT_DIRECTION","NFT_CT_DST","NFT_CT_EXPIRATION","NFT_CT_HELPER","NFT_CT_L3PROTOCOL","NFT_CT_LABELS","NFT_CT_MARK","NFT_CT_PKTS","NFT_CT_PROTOCOL","NFT_CT_PROTO_DST","NFT_CT_PROTO_SRC","NFT_CT_SECMARK","NFT_CT_SRC","NFT_CT_STATE","NFT_CT_STATUS","NFT_DATA_RESERVED_MASK","NFT_DATA_VALUE","NFT_DATA_VALUE_MAXLEN","NFT_DATA_VERDICT","NFT_DYNSET_F_INV","NFT_DYNSET_OP_ADD","NFT_DYNSET_OP_UPDATE","NFT_GOTO","NFT_JUMP","NFT_LIMIT_F_INV","NFT_LIMIT_PKTS","NFT_LIMIT_PKT_BYTES","NFT_LOOKUP_F_INV","NFT_META_BRI_IIFNAME","NFT_META_BRI_OIFNAME","NFT_META_CGROUP","NFT_META_CPU","NFT_META_IIF","NFT_META_IIFGROUP","NFT_META_IIFNAME","NFT_META_IIFTYPE","NFT_META_L4PROTO","NFT_META_LEN","NFT_META_MARK","NFT_META_NFPROTO","NFT_META_NFTRACE","NFT_META_OIF","NFT_META_OIFGROUP","NFT_META_OIFNAME","NFT_META_OIFTYPE","NFT_META_PKTTYPE","NFT_META_PRANDOM","NFT_META_PRIORITY","NFT_META_PROTOCOL","NFT_META_RTCLASSID","NFT_META_SECMARK","NFT_META_SKGID","NFT_META_SKUID","NFT_MSG_DELCHAIN","NFT_MSG_DELOBJ","NFT_MSG_DELRULE","NFT_MSG_DELSET","NFT_MSG_DELSETELEM","NFT_MSG_DELTABLE","NFT_MSG_GETCHAIN","NFT_MSG_GETGEN","NFT_MSG_GETOBJ","NFT_MSG_GETOBJ_RESET","NFT_MSG_GETRULE","NFT_MSG_GETSET","NFT_MSG_GETSETELEM","NFT_MSG_GETTABLE","NFT_MSG_MAX","NFT_MSG_NEWCHAIN","NFT_MSG_NEWGEN","NFT_MSG_NEWOBJ","NFT_MSG_NEWRULE","NFT_MSG_NEWSET","NFT_MSG_NEWSETELEM","NFT_MSG_NEWTABLE","NFT_MSG_TRACE","NFT_NAT_DNAT","NFT_NAT_SNAT","NFT_NG_INCREMENTAL","NFT_NG_RANDOM","NFT_OBJ_MAXNAMELEN","NFT_PAYLOAD_CSUM_INET","NFT_PAYLOAD_CSUM_NONE","NFT_PAYLOAD_LL_HEADER","NFT_PAYLOAD_NETWORK_HEADER","NFT_PAYLOAD_TRANSPORT_HEADER","NFT_QUEUE_FLAG_BYPASS","NFT_QUEUE_FLAG_CPU_FANOUT","NFT_QUEUE_FLAG_MASK","NFT_QUOTA_F_INV","NFT_RANGE_EQ","NFT_RANGE_NEQ","NFT_REG32_00","NFT_REG32_01","NFT_REG32_02","NFT_REG32_03","NFT_REG32_04","NFT_REG32_05","NFT_REG32_06","NFT_REG32_07","NFT_REG32_08","NFT_REG32_09","NFT_REG32_10","NFT_REG32_11","NFT_REG32_12","NFT_REG32_13","NFT_REG32_14","NFT_REG32_15","NFT_REG32_SIZE","NFT_REG_1","NFT_REG_2","NFT_REG_3","NFT_REG_4","NFT_REG_SIZE","NFT_REG_VERDICT","NFT_REJECT_ICMPX_ADMIN_PROHIBITED","NFT_REJECT_ICMPX_HOST_UNREACH","NFT_REJECT_ICMPX_NO_ROUTE","NFT_REJECT_ICMPX_PORT_UNREACH","NFT_REJECT_ICMPX_UNREACH","NFT_REJECT_ICMP_UNREACH","NFT_REJECT_TCP_RST","NFT_RETURN","NFT_SET_ANONYMOUS","NFT_SET_CONSTANT","NFT_SET_ELEM_INTERVAL_END","NFT_SET_EVAL","NFT_SET_INTERVAL","NFT_SET_MAP","NFT_SET_MAXNAMELEN","NFT_SET_POL_MEMORY","NFT_SET_POL_PERFORMANCE","NFT_SET_TIMEOUT","NFT_TABLE_MAXNAMELEN","NFT_TRACETYPE_POLICY","NFT_TRACETYPE_RETURN","NFT_TRACETYPE_RULE","NFT_TRACETYPE_UNSPEC","NFT_USERDATA_MAXLEN","NFULA_CFG_CMD","NFULA_CFG_FLAGS","NFULA_CFG_MODE","NFULA_CFG_NLBUFSIZ","NFULA_CFG_QTHRESH","NFULA_CFG_TIMEOUT","NFULA_CFG_UNSPEC","NFULA_CT","NFULA_CT_INFO","NFULA_GID","NFULA_HWADDR","NFULA_HWHEADER","NFULA_HWLEN","NFULA_HWTYPE","NFULA_IFINDEX_INDEV","NFULA_IFINDEX_OUTDEV","NFULA_IFINDEX_PHYSINDEV","NFULA_IFINDEX_PHYSOUTDEV","NFULA_L2HDR","NFULA_MARK","NFULA_PACKET_HDR","NFULA_PAYLOAD","NFULA_PREFIX","NFULA_SEQ","NFULA_SEQ_GLOBAL","NFULA_TIMESTAMP","NFULA_UID","NFULA_UNSPEC","NFULA_VLAN","NFULA_VLAN_PROTO","NFULA_VLAN_TCI","NFULA_VLAN_UNSPEC","NFULNL_CFG_CMD_BIND","NFULNL_CFG_CMD_NONE","NFULNL_CFG_CMD_PF_BIND","NFULNL_CFG_CMD_PF_UNBIND","NFULNL_CFG_CMD_UNBIND","NFULNL_CFG_F_CONNTRACK","NFULNL_CFG_F_SEQ","NFULNL_CFG_F_SEQ_GLOBAL","NFULNL_COPY_META","NFULNL_COPY_NONE","NFULNL_COPY_PACKET","NFULNL_MSG_CONFIG","NFULNL_MSG_PACKET","NF_ACCEPT","NF_DROP","NF_INET_FORWARD","NF_INET_LOCAL_IN","NF_INET_LOCAL_OUT","NF_INET_NUMHOOKS","NF_INET_POST_ROUTING","NF_INET_PRE_ROUTING","NF_IP6_FORWARD","NF_IP6_LOCAL_IN","NF_IP6_LOCAL_OUT","NF_IP6_NUMHOOKS","NF_IP6_POST_ROUTING","NF_IP6_PRE_ROUTING","NF_IP6_PRI_CONNTRACK","NF_IP6_PRI_CONNTRACK_DEFRAG","NF_IP6_PRI_CONNTRACK_HELPER","NF_IP6_PRI_FILTER","NF_IP6_PRI_FIRST","NF_IP6_PRI_LAST","NF_IP6_PRI_MANGLE","NF_IP6_PRI_NAT_DST","NF_IP6_PRI_NAT_SRC","NF_IP6_PRI_RAW","NF_IP6_PRI_SECURITY","NF_IP6_PRI_SELINUX_FIRST","NF_IP6_PRI_SELINUX_LAST","NF_IP_FORWARD","NF_IP_LOCAL_IN","NF_IP_LOCAL_OUT","NF_IP_NUMHOOKS","NF_IP_POST_ROUTING","NF_IP_PRE_ROUTING","NF_IP_PRI_CONNTRACK","NF_IP_PRI_CONNTRACK_CONFIRM","NF_IP_PRI_CONNTRACK_DEFRAG","NF_IP_PRI_CONNTRACK_HELPER","NF_IP_PRI_FILTER","NF_IP_PRI_FIRST","NF_IP_PRI_LAST","NF_IP_PRI_MANGLE","NF_IP_PRI_NAT_DST","NF_IP_PRI_NAT_SRC","NF_IP_PRI_RAW","NF_IP_PRI_SECURITY","NF_IP_PRI_SELINUX_FIRST","NF_IP_PRI_SELINUX_LAST","NF_MAX_VERDICT","NF_NETDEV_INGRESS","NF_NETDEV_NUMHOOKS","NF_QUEUE","NF_REPEAT","NF_STOLEN","NF_STOP","NF_VERDICT_BITS","NF_VERDICT_FLAG_QUEUE_BYPASS","NF_VERDICT_MASK","NF_VERDICT_QBITS","NF_VERDICT_QMASK","NILFS_SUPER_MAGIC","NI_DGRAM","NI_MAXHOST","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSERV","NL0","NL1","NLA_ALIGN","NLA_ALIGNTO","NLA_F_NESTED","NLA_F_NET_BYTEORDER","NLA_TYPE_MASK","NLDLY","NLMSG_DONE","NLMSG_ERROR","NLMSG_MIN_TYPE","NLMSG_NOOP","NLMSG_OVERRUN","NLM_F_ACK","NLM_F_APPEND","NLM_F_ATOMIC","NLM_F_CREATE","NLM_F_DUMP","NLM_F_DUMP_FILTERED","NLM_F_DUMP_INTR","NLM_F_ECHO","NLM_F_EXCL","NLM_F_MATCH","NLM_F_MULTI","NLM_F_REPLACE","NLM_F_REQUEST","NLM_F_ROOT","NOEXPR","NOFLSH","NOSTR","NSFS_MAGIC","NTF_EXT_LEARNED","NTF_MASTER","NTF_OFFLOADED","NTF_PROXY","NTF_ROUTER","NTF_SELF","NTF_USE","NTP_API","NT_ASRS","NT_AUXV","NT_FPREGSET","NT_GWINDOWS","NT_LWPSINFO","NT_LWPSTATUS","NT_PLATFORM","NT_PRCRED","NT_PRFPREG","NT_PRFPXREG","NT_PRPSINFO","NT_PRSTATUS","NT_PRXREG","NT_PSINFO","NT_PSTATUS","NT_TASKSTRUCT","NT_UTSNAME","NUD_DELAY","NUD_FAILED","NUD_INCOMPLETE","NUD_NOARP","NUD_NONE","NUD_PERMANENT","NUD_PROBE","NUD_REACHABLE","NUD_STALE","OCFS2_SUPER_MAGIC","OCRNL","OFDEL","OFILL","OLCUC","OLD_TIME","ONLCR","ONLRET","ONOCR","OPENPROM_SUPER_MAGIC","OPOST","ORIG_RAX","OVERLAYFS_SUPER_MAGIC","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECT","O_DIRECTORY","O_DSYNC","O_EXCL","O_FSYNC","O_LARGEFILE","O_NDELAY","O_NOATIME","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_PATH","O_RDONLY","O_RDWR","O_RSYNC","O_SYNC","O_TMPFILE","O_TRUNC","O_WRONLY","PACKET_ADD_MEMBERSHIP","PACKET_DROP_MEMBERSHIP","PACKET_MR_ALLMULTI","PACKET_MR_MULTICAST","PACKET_MR_PROMISC","PACKET_MR_UNICAST","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_ALG","PF_APPLETALK","PF_ASH","PF_ATMPVC","PF_ATMSVC","PF_AX25","PF_BLUETOOTH","PF_BRIDGE","PF_CAIF","PF_CAN","PF_DECnet","PF_ECONET","PF_IB","PF_IEEE802154","PF_INET","PF_INET6","PF_IPX","PF_IRDA","PF_ISDN","PF_IUCV","PF_KEY","PF_LLC","PF_LOCAL","PF_MASKOS","PF_MASKPROC","PF_MPLS","PF_NETBEUI","PF_NETLINK","PF_NETROM","PF_NFC","PF_PACKET","PF_PHONET","PF_PPPOX","PF_R","PF_RDS","PF_ROSE","PF_ROUTE","PF_RXRPC","PF_SECURITY","PF_SNA","PF_TIPC","PF_UNIX","PF_UNSPEC","PF_VSOCK","PF_W","PF_WANPIPE","PF_X","PF_X25","PF_XDP","PIDFD_NONBLOCK","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDHUP","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_FADV_DONTNEED","POSIX_FADV_NOREUSE","POSIX_FADV_NORMAL","POSIX_FADV_RANDOM","POSIX_FADV_SEQUENTIAL","POSIX_FADV_WILLNEED","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSCHEDPARAM","POSIX_SPAWN_SETSCHEDULER","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_USEVFORK","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROC_SUPER_MAGIC","PROT_EXEC","PROT_GROWSDOWN","PROT_GROWSUP","PROT_NONE","PROT_READ","PROT_WRITE","PR_CAPBSET_DROP","PR_CAPBSET_READ","PR_CAP_AMBIENT","PR_CAP_AMBIENT_CLEAR_ALL","PR_CAP_AMBIENT_IS_SET","PR_CAP_AMBIENT_LOWER","PR_CAP_AMBIENT_RAISE","PR_ENDIAN_BIG","PR_ENDIAN_LITTLE","PR_ENDIAN_PPC_LITTLE","PR_FPEMU_NOPRINT","PR_FPEMU_SIGFPE","PR_FP_EXC_ASYNC","PR_FP_EXC_DISABLED","PR_FP_EXC_DIV","PR_FP_EXC_INV","PR_FP_EXC_NONRECOV","PR_FP_EXC_OVF","PR_FP_EXC_PRECISE","PR_FP_EXC_RES","PR_FP_EXC_SW_ENABLE","PR_FP_EXC_UND","PR_FP_MODE_FR","PR_FP_MODE_FRE","PR_GET_CHILD_SUBREAPER","PR_GET_DUMPABLE","PR_GET_ENDIAN","PR_GET_FPEMU","PR_GET_FPEXC","PR_GET_FP_MODE","PR_GET_KEEPCAPS","PR_GET_NAME","PR_GET_NO_NEW_PRIVS","PR_GET_PDEATHSIG","PR_GET_SECCOMP","PR_GET_SECUREBITS","PR_GET_SPECULATION_CTRL","PR_GET_THP_DISABLE","PR_GET_TID_ADDRESS","PR_GET_TIMERSLACK","PR_GET_TIMING","PR_GET_TSC","PR_GET_UNALIGN","PR_MCE_KILL","PR_MCE_KILL_CLEAR","PR_MCE_KILL_DEFAULT","PR_MCE_KILL_EARLY","PR_MCE_KILL_GET","PR_MCE_KILL_LATE","PR_MCE_KILL_SET","PR_MPX_DISABLE_MANAGEMENT","PR_MPX_ENABLE_MANAGEMENT","PR_SET_CHILD_SUBREAPER","PR_SET_DUMPABLE","PR_SET_ENDIAN","PR_SET_FPEMU","PR_SET_FPEXC","PR_SET_FP_MODE","PR_SET_KEEPCAPS","PR_SET_MM","PR_SET_MM_ARG_END","PR_SET_MM_ARG_START","PR_SET_MM_AUXV","PR_SET_MM_BRK","PR_SET_MM_END_CODE","PR_SET_MM_END_DATA","PR_SET_MM_ENV_END","PR_SET_MM_ENV_START","PR_SET_MM_EXE_FILE","PR_SET_MM_MAP","PR_SET_MM_MAP_SIZE","PR_SET_MM_START_BRK","PR_SET_MM_START_CODE","PR_SET_MM_START_DATA","PR_SET_MM_START_STACK","PR_SET_NAME","PR_SET_NO_NEW_PRIVS","PR_SET_PDEATHSIG","PR_SET_PTRACER","PR_SET_SECCOMP","PR_SET_SECUREBITS","PR_SET_SPECULATION_CTRL","PR_SET_THP_DISABLE","PR_SET_TIMERSLACK","PR_SET_TIMING","PR_SET_TSC","PR_SET_UNALIGN","PR_SET_VMA","PR_SET_VMA_ANON_NAME","PR_SPEC_DISABLE","PR_SPEC_DISABLE_NOEXEC","PR_SPEC_ENABLE","PR_SPEC_FORCE_DISABLE","PR_SPEC_INDIRECT_BRANCH","PR_SPEC_NOT_AFFECTED","PR_SPEC_PRCTL","PR_SPEC_STORE_BYPASS","PR_TASK_PERF_EVENTS_DISABLE","PR_TASK_PERF_EVENTS_ENABLE","PR_TIMING_STATISTICAL","PR_TIMING_TIMESTAMP","PR_TSC_ENABLE","PR_TSC_SIGSEGV","PR_UNALIGN_NOPRINT","PR_UNALIGN_SIGBUS","PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","PTHREAD_MUTEX_ADAPTIVE_NP","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_MUTEX_ROBUST","PTHREAD_MUTEX_STALLED","PTHREAD_PRIO_INHERIT","PTHREAD_PRIO_NONE","PTHREAD_PRIO_PROTECT","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PTRACE_ATTACH","PTRACE_CONT","PTRACE_DETACH","PTRACE_EVENT_CLONE","PTRACE_EVENT_EXEC","PTRACE_EVENT_EXIT","PTRACE_EVENT_FORK","PTRACE_EVENT_SECCOMP","PTRACE_EVENT_STOP","PTRACE_EVENT_VFORK","PTRACE_EVENT_VFORK_DONE","PTRACE_GETEVENTMSG","PTRACE_GETFPREGS","PTRACE_GETFPXREGS","PTRACE_GETREGS","PTRACE_GETREGSET","PTRACE_GETSIGINFO","PTRACE_GET_RSEQ_CONFIGURATION","PTRACE_GET_SYSCALL_INFO","PTRACE_INTERRUPT","PTRACE_KILL","PTRACE_LISTEN","PTRACE_O_EXITKILL","PTRACE_O_MASK","PTRACE_O_SUSPEND_SECCOMP","PTRACE_O_TRACECLONE","PTRACE_O_TRACEEXEC","PTRACE_O_TRACEEXIT","PTRACE_O_TRACEFORK","PTRACE_O_TRACESECCOMP","PTRACE_O_TRACESYSGOOD","PTRACE_O_TRACEVFORK","PTRACE_O_TRACEVFORKDONE","PTRACE_PEEKDATA","PTRACE_PEEKSIGINFO","PTRACE_PEEKSIGINFO_SHARED","PTRACE_PEEKTEXT","PTRACE_PEEKUSER","PTRACE_POKEDATA","PTRACE_POKETEXT","PTRACE_POKEUSER","PTRACE_SEIZE","PTRACE_SETFPREGS","PTRACE_SETFPXREGS","PTRACE_SETOPTIONS","PTRACE_SETREGS","PTRACE_SETREGSET","PTRACE_SETSIGINFO","PTRACE_SINGLESTEP","PTRACE_SYSCALL","PTRACE_SYSEMU","PTRACE_SYSEMU_SINGLESTEP","PTRACE_TRACEME","PT_DYNAMIC","PT_GNU_EH_FRAME","PT_GNU_RELRO","PT_GNU_STACK","PT_HIOS","PT_HIPROC","PT_HISUNW","PT_INTERP","PT_LOAD","PT_LOOS","PT_LOPROC","PT_LOSUNW","PT_NOTE","PT_NULL","PT_NUM","PT_PHDR","PT_SHLIB","PT_SUNWBSS","PT_SUNWSTACK","PT_TLS","P_ALL","P_PGID","P_PID","P_PIDFD","QCMD","QFMT_VFS_OLD","QFMT_VFS_V0","QFMT_VFS_V1","QIF_ALL","QIF_BLIMITS","QIF_BTIME","QIF_ILIMITS","QIF_INODES","QIF_ITIME","QIF_LIMITS","QIF_SPACE","QIF_TIMES","QIF_USAGE","QNX4_SUPER_MAGIC","QNX6_SUPER_MAGIC","Q_GETFMT","Q_GETINFO","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETINFO","Q_SETQUOTA","Q_SYNC","R10","R11","R12","R13","R14","R15","R8","R9","RADIXCHAR","RAND_MAX","RAX","RBP","RBX","RB_AUTOBOOT","RB_DISABLE_CAD","RB_ENABLE_CAD","RB_HALT_SYSTEM","RB_KEXEC","RB_POWER_OFF","RB_SW_SUSPEND","RCX","RDI","RDTGROUP_SUPER_MAGIC","RDX","READ_IMPLIES_EXEC","REG_BADBR","REG_BADPAT","REG_BADRPT","REG_CR2","REG_CSGSFS","REG_EBRACE","REG_EBRACK","REG_ECOLLATE","REG_ECTYPE","REG_EEND","REG_EESCAPE","REG_EFL","REG_ENOSYS","REG_EPAREN","REG_ERANGE","REG_ERPAREN","REG_ERR","REG_ESIZE","REG_ESPACE","REG_ESUBREG","REG_EXTENDED","REG_ICASE","REG_NEWLINE","REG_NOMATCH","REG_NOSUB","REG_NOTBOL","REG_NOTEOL","REG_OLDMASK","REG_R10","REG_R11","REG_R12","REG_R13","REG_R14","REG_R15","REG_R8","REG_R9","REG_RAX","REG_RBP","REG_RBX","REG_RCX","REG_RDI","REG_RDX","REG_RIP","REG_RSI","REG_RSP","REG_STARTEND","REG_TRAPNO","REISERFS_SUPER_MAGIC","REL_CNT","REL_MAX","RENAME_EXCHANGE","RENAME_NOREPLACE","RENAME_WHITEOUT","REP_CNT","REP_MAX","RESOLVE_BENEATH","RESOLVE_CACHED","RESOLVE_IN_ROOT","RESOLVE_NO_MAGICLINKS","RESOLVE_NO_SYMLINKS","RESOLVE_NO_XDEV","RIP","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_LOCKS","RLIMIT_MEMLOCK","RLIMIT_MSGQUEUE","RLIMIT_NICE","RLIMIT_NLIMITS","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_RTPRIO","RLIMIT_RTTIME","RLIMIT_SIGPENDING","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RLIM_SAVED_CUR","RLIM_SAVED_MAX","RSI","RSP","RTA_CACHEINFO","RTA_DST","RTA_ENCAP","RTA_ENCAP_TYPE","RTA_EXPIRES","RTA_FLOW","RTA_GATEWAY","RTA_IIF","RTA_MARK","RTA_METRICS","RTA_MFC_STATS","RTA_MP_ALGO","RTA_MULTIPATH","RTA_NEWDST","RTA_OIF","RTA_PAD","RTA_PREF","RTA_PREFSRC","RTA_PRIORITY","RTA_PROTOINFO","RTA_SESSION","RTA_SRC","RTA_TABLE","RTA_TTL_PROPAGATE","RTA_UID","RTA_UNSPEC","RTA_VIA","RTCF_DIRECTSRC","RTCF_DOREDIRECT","RTCF_LOG","RTCF_MASQ","RTCF_NAT","RTCF_VALVE","RTF_ADDRCLASSMASK","RTF_ADDRCONF","RTF_ALLONLINK","RTF_BROADCAST","RTF_CACHE","RTF_DEFAULT","RTF_DYNAMIC","RTF_FLOW","RTF_GATEWAY","RTF_HOST","RTF_INTERFACE","RTF_IRTT","RTF_LINKRT","RTF_LOCAL","RTF_MODIFIED","RTF_MSS","RTF_MTU","RTF_MULTICAST","RTF_NAT","RTF_NOFORWARD","RTF_NONEXTHOP","RTF_NOPMTUDISC","RTF_POLICY","RTF_REINSTATE","RTF_REJECT","RTF_STATIC","RTF_THROW","RTF_UP","RTF_WINDOW","RTF_XRESOLVE","RTLD_DEEPBIND","RTLD_DEFAULT","RTLD_DI_CONFIGADDR","RTLD_DI_LINKMAP","RTLD_DI_LMID","RTLD_DI_ORIGIN","RTLD_DI_PROFILENAME","RTLD_DI_PROFILEOUT","RTLD_DI_SERINFO","RTLD_DI_SERINFOSIZE","RTLD_DI_TLS_DATA","RTLD_DI_TLS_MODID","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTMGRP_DECnet_IFADDR","RTMGRP_DECnet_ROUTE","RTMGRP_IPV4_IFADDR","RTMGRP_IPV4_MROUTE","RTMGRP_IPV4_ROUTE","RTMGRP_IPV4_RULE","RTMGRP_IPV6_IFADDR","RTMGRP_IPV6_IFINFO","RTMGRP_IPV6_MROUTE","RTMGRP_IPV6_PREFIX","RTMGRP_IPV6_ROUTE","RTMGRP_LINK","RTMGRP_NEIGH","RTMGRP_NOTIFY","RTMGRP_TC","RTMSG_AR_FAILED","RTMSG_CONTROL","RTMSG_DELDEVICE","RTMSG_DELROUTE","RTMSG_DELRULE","RTMSG_NEWDEVICE","RTMSG_NEWROUTE","RTMSG_NEWRULE","RTMSG_OVERRUN","RTM_DELACTION","RTM_DELADDR","RTM_DELADDRLABEL","RTM_DELLINK","RTM_DELMDB","RTM_DELNEIGH","RTM_DELNETCONF","RTM_DELNSID","RTM_DELQDISC","RTM_DELROUTE","RTM_DELRULE","RTM_DELTCLASS","RTM_DELTFILTER","RTM_F_CLONED","RTM_F_EQUALIZE","RTM_F_FIB_MATCH","RTM_F_LOOKUP_TABLE","RTM_F_NOTIFY","RTM_F_PREFIX","RTM_GETACTION","RTM_GETADDR","RTM_GETADDRLABEL","RTM_GETANYCAST","RTM_GETDCB","RTM_GETLINK","RTM_GETMDB","RTM_GETMULTICAST","RTM_GETNEIGH","RTM_GETNEIGHTBL","RTM_GETNETCONF","RTM_GETNSID","RTM_GETQDISC","RTM_GETROUTE","RTM_GETRULE","RTM_GETSTATS","RTM_GETTCLASS","RTM_GETTFILTER","RTM_NEWACTION","RTM_NEWADDR","RTM_NEWADDRLABEL","RTM_NEWCACHEREPORT","RTM_NEWLINK","RTM_NEWMDB","RTM_NEWNDUSEROPT","RTM_NEWNEIGH","RTM_NEWNEIGHTBL","RTM_NEWNETCONF","RTM_NEWNSID","RTM_NEWPREFIX","RTM_NEWQDISC","RTM_NEWROUTE","RTM_NEWRULE","RTM_NEWSTATS","RTM_NEWTCLASS","RTM_NEWTFILTER","RTM_SETDCB","RTM_SETLINK","RTM_SETNEIGHTBL","RTNLGRP_BRVLAN","RTNLGRP_DCB","RTNLGRP_DECnet_IFADDR","RTNLGRP_DECnet_ROUTE","RTNLGRP_DECnet_RULE","RTNLGRP_IPV4_IFADDR","RTNLGRP_IPV4_MROUTE","RTNLGRP_IPV4_MROUTE_R","RTNLGRP_IPV4_NETCONF","RTNLGRP_IPV4_ROUTE","RTNLGRP_IPV4_RULE","RTNLGRP_IPV6_IFADDR","RTNLGRP_IPV6_IFINFO","RTNLGRP_IPV6_MROUTE","RTNLGRP_IPV6_MROUTE_R","RTNLGRP_IPV6_NETCONF","RTNLGRP_IPV6_PREFIX","RTNLGRP_IPV6_ROUTE","RTNLGRP_IPV6_RULE","RTNLGRP_LINK","RTNLGRP_MCTP_IFADDR","RTNLGRP_MDB","RTNLGRP_MPLS_NETCONF","RTNLGRP_MPLS_ROUTE","RTNLGRP_ND_USEROPT","RTNLGRP_NEIGH","RTNLGRP_NEXTHOP","RTNLGRP_NONE","RTNLGRP_NOP2","RTNLGRP_NOP4","RTNLGRP_NOTIFY","RTNLGRP_NSID","RTNLGRP_PHONET_IFADDR","RTNLGRP_PHONET_ROUTE","RTNLGRP_STATS","RTNLGRP_TC","RTNLGRP_TUNNEL","RTN_ANYCAST","RTN_BLACKHOLE","RTN_BROADCAST","RTN_LOCAL","RTN_MULTICAST","RTN_NAT","RTN_PROHIBIT","RTN_THROW","RTN_UNICAST","RTN_UNREACHABLE","RTN_UNSPEC","RTN_XRESOLVE","RTPROT_BOOT","RTPROT_KERNEL","RTPROT_REDIRECT","RTPROT_STATIC","RTPROT_UNSPEC","RT_ADDRCLASS","RT_CLASS_DEFAULT","RT_CLASS_LOCAL","RT_CLASS_MAIN","RT_CLASS_MAX","RT_CLASS_UNSPEC","RT_LOCALADDR","RT_SCOPE_HOST","RT_SCOPE_LINK","RT_SCOPE_NOWHERE","RT_SCOPE_SITE","RT_SCOPE_UNIVERSE","RT_TABLE_COMPAT","RT_TABLE_DEFAULT","RT_TABLE_LOCAL","RT_TABLE_MAIN","RT_TABLE_UNSPEC","RT_TOS","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_SELF","RUSAGE_THREAD","RWF_APPEND","RWF_DSYNC","RWF_HIPRI","RWF_NOWAIT","RWF_SYNC","R_OK","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCHED_BATCH","SCHED_FIFO","SCHED_IDLE","SCHED_OTHER","SCHED_RESET_ON_FORK","SCHED_RR","SCM_CREDENTIALS","SCM_J1939_DEST_ADDR","SCM_J1939_DEST_NAME","SCM_J1939_ERRQUEUE","SCM_J1939_PRIO","SCM_RIGHTS","SCM_TIMESTAMP","SCM_TIMESTAMPING","SCM_TIMESTAMPING_OPT_STATS","SCM_TIMESTAMPING_PKTINFO","SCM_TIMESTAMPNS","SCM_TXTIME","SCM_WIFI_STATUS","SECCOMP_FILTER_FLAG_LOG","SECCOMP_FILTER_FLAG_SPEC_ALLOW","SECCOMP_FILTER_FLAG_TSYNC","SECCOMP_GET_ACTION_AVAIL","SECCOMP_GET_NOTIF_SIZES","SECCOMP_MODE_DISABLED","SECCOMP_MODE_FILTER","SECCOMP_MODE_STRICT","SECCOMP_RET_ACTION","SECCOMP_RET_ACTION_FULL","SECCOMP_RET_ALLOW","SECCOMP_RET_DATA","SECCOMP_RET_ERRNO","SECCOMP_RET_KILL","SECCOMP_RET_KILL_PROCESS","SECCOMP_RET_KILL_THREAD","SECCOMP_RET_LOG","SECCOMP_RET_TRACE","SECCOMP_RET_TRAP","SECCOMP_SET_MODE_FILTER","SECCOMP_SET_MODE_STRICT","SECURITYFS_MAGIC","SEEK_CUR","SEEK_DATA","SEEK_END","SEEK_HOLE","SEEK_SET","SELFMAG","SELINUX_MAGIC","SEM_FAILED","SFD_CLOEXEC","SFD_NONBLOCK","SHM_EXEC","SHM_HUGETLB","SHM_LOCK","SHM_NORESERVE","SHM_R","SHM_RDONLY","SHM_REMAP","SHM_RND","SHM_UNLOCK","SHM_W","SHORT_INODE","SHUT_RD","SHUT_RDWR","SHUT_WR","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGEV_THREAD_ID","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGPIPE","SIGPOLL","SIGPROF","SIGPWR","SIGQUIT","SIGRTMAX","SIGRTMIN","SIGSEGV","SIGSTKFLT","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGUNUSED","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SIOCADDMULTI","SIOCADDRT","SIOCDARP","SIOCDELMULTI","SIOCDELRT","SIOCDIFADDR","SIOCDRARP","SIOCETHTOOL","SIOCGARP","SIOCGIFADDR","SIOCGIFBR","SIOCGIFBRDADDR","SIOCGIFCONF","SIOCGIFCOUNT","SIOCGIFDSTADDR","SIOCGIFENCAP","SIOCGIFFLAGS","SIOCGIFHWADDR","SIOCGIFINDEX","SIOCGIFMAP","SIOCGIFMEM","SIOCGIFMETRIC","SIOCGIFMTU","SIOCGIFNAME","SIOCGIFNETMASK","SIOCGIFPFLAGS","SIOCGIFSLAVE","SIOCGIFTXQLEN","SIOCGMIIPHY","SIOCGMIIREG","SIOCGRARP","SIOCGSKNS","SIOCOUTQNSD","SIOCSARP","SIOCSIFADDR","SIOCSIFBR","SIOCSIFBRDADDR","SIOCSIFDSTADDR","SIOCSIFENCAP","SIOCSIFFLAGS","SIOCSIFHWADDR","SIOCSIFHWBROADCAST","SIOCSIFLINK","SIOCSIFMAP","SIOCSIFMEM","SIOCSIFMETRIC","SIOCSIFMTU","SIOCSIFNETMASK","SIOCSIFPFLAGS","SIOCSIFSLAVE","SIOCSIFTXQLEN","SIOCSMIIREG","SIOCSRARP","SIOCWANDEV","SIOGIFINDEX","SI_LOAD_SHIFT","SKF_AD_ALU_XOR_X","SKF_AD_CPU","SKF_AD_HATYPE","SKF_AD_IFINDEX","SKF_AD_MARK","SKF_AD_MAX","SKF_AD_NLATTR","SKF_AD_NLATTR_NEST","SKF_AD_OFF","SKF_AD_PAY_OFFSET","SKF_AD_PKTTYPE","SKF_AD_PROTOCOL","SKF_AD_QUEUE","SKF_AD_RANDOM","SKF_AD_RXHASH","SKF_AD_VLAN_TAG","SKF_AD_VLAN_TAG_PRESENT","SKF_AD_VLAN_TPID","SKF_LL_OFF","SKF_NET_OFF","SK_MEMINFO_BACKLOG","SK_MEMINFO_DROPS","SK_MEMINFO_FWD_ALLOC","SK_MEMINFO_OPTMEM","SK_MEMINFO_RCVBUF","SK_MEMINFO_RMEM_ALLOC","SK_MEMINFO_SNDBUF","SK_MEMINFO_WMEM_ALLOC","SK_MEMINFO_WMEM_QUEUED","SMACK_MAGIC","SMB_SUPER_MAGIC","SND_CNT","SND_MAX","SOCK_CLOEXEC","SOCK_DCCP","SOCK_DGRAM","SOCK_NONBLOCK","SOCK_PACKET","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOF_TIMESTAMPING_OPT_CMSG","SOF_TIMESTAMPING_OPT_ID","SOF_TIMESTAMPING_OPT_PKTINFO","SOF_TIMESTAMPING_OPT_STATS","SOF_TIMESTAMPING_OPT_TSONLY","SOF_TIMESTAMPING_OPT_TX_SWHW","SOF_TIMESTAMPING_RAW_HARDWARE","SOF_TIMESTAMPING_RX_HARDWARE","SOF_TIMESTAMPING_RX_SOFTWARE","SOF_TIMESTAMPING_SOFTWARE","SOF_TIMESTAMPING_SYS_HARDWARE","SOF_TIMESTAMPING_TX_ACK","SOF_TIMESTAMPING_TX_HARDWARE","SOF_TIMESTAMPING_TX_SCHED","SOF_TIMESTAMPING_TX_SOFTWARE","SOF_TXTIME_DEADLINE_MODE","SOF_TXTIME_REPORT_ERRORS","SOL_AAL","SOL_ALG","SOL_ATM","SOL_BLUETOOTH","SOL_CAIF","SOL_CAN_BASE","SOL_CAN_J1939","SOL_CAN_RAW","SOL_DCCP","SOL_DECNET","SOL_ICMPV6","SOL_IP","SOL_IPV6","SOL_IRDA","SOL_IUCV","SOL_LLC","SOL_NETBEUI","SOL_NETLINK","SOL_NFC","SOL_PACKET","SOL_PNPIPE","SOL_PPPOL2TP","SOL_RAW","SOL_RDS","SOL_RXRPC","SOL_SOCKET","SOL_TCP","SOL_TIPC","SOL_UDP","SOL_X25","SOL_XDP","SOMAXCONN","SO_ACCEPTCONN","SO_ATTACH_BPF","SO_ATTACH_FILTER","SO_ATTACH_REUSEPORT_CBPF","SO_ATTACH_REUSEPORT_EBPF","SO_BINDTODEVICE","SO_BINDTOIFINDEX","SO_BPF_EXTENSIONS","SO_BROADCAST","SO_BSDCOMPAT","SO_BUSY_POLL","SO_CNX_ADVICE","SO_COOKIE","SO_DEBUG","SO_DETACH_BPF","SO_DETACH_FILTER","SO_DETACH_REUSEPORT_BPF","SO_DOMAIN","SO_DONTROUTE","SO_EE_OFFENDER","SO_EE_ORIGIN_ICMP","SO_EE_ORIGIN_ICMP6","SO_EE_ORIGIN_LOCAL","SO_EE_ORIGIN_NONE","SO_EE_ORIGIN_TIMESTAMPING","SO_EE_ORIGIN_TXSTATUS","SO_ERROR","SO_GET_FILTER","SO_INCOMING_CPU","SO_INCOMING_NAPI_ID","SO_J1939_ERRQUEUE","SO_J1939_FILTER","SO_J1939_PROMISC","SO_J1939_SEND_PRIO","SO_KEEPALIVE","SO_LINGER","SO_LOCK_FILTER","SO_MARK","SO_MAX_PACING_RATE","SO_MEMINFO","SO_NOFCS","SO_NO_CHECK","SO_OOBINLINE","SO_ORIGINAL_DST","SO_PASSCRED","SO_PASSSEC","SO_PEEK_OFF","SO_PEERCRED","SO_PEERGROUPS","SO_PEERNAME","SO_PEERSEC","SO_PRIORITY","SO_PROTOCOL","SO_RCVBUF","SO_RCVBUFFORCE","SO_RCVLOWAT","SO_RCVTIMEO","SO_RCVTIMEO_NEW","SO_REUSEADDR","SO_REUSEPORT","SO_RXQ_OVFL","SO_SECURITY_AUTHENTICATION","SO_SECURITY_ENCRYPTION_NETWORK","SO_SECURITY_ENCRYPTION_TRANSPORT","SO_SELECT_ERR_QUEUE","SO_SNDBUF","SO_SNDBUFFORCE","SO_SNDLOWAT","SO_SNDTIMEO","SO_SNDTIMEO_NEW","SO_TIMESTAMP","SO_TIMESTAMPING","SO_TIMESTAMPING_NEW","SO_TIMESTAMPNS","SO_TIMESTAMPNS_NEW","SO_TIMESTAMP_NEW","SO_TXTIME","SO_TYPE","SO_WIFI_STATUS","SO_ZEROCOPY","SPLICE_F_GIFT","SPLICE_F_MORE","SPLICE_F_MOVE","SPLICE_F_NONBLOCK","SS","SS_DISABLE","SS_ONSTACK","STATX_ALL","STATX_ATIME","STATX_ATTR_APPEND","STATX_ATTR_AUTOMOUNT","STATX_ATTR_COMPRESSED","STATX_ATTR_DAX","STATX_ATTR_ENCRYPTED","STATX_ATTR_IMMUTABLE","STATX_ATTR_MOUNT_ROOT","STATX_ATTR_NODUMP","STATX_ATTR_VERITY","STATX_BASIC_STATS","STATX_BLOCKS","STATX_BTIME","STATX_CTIME","STATX_GID","STATX_INO","STATX_MNT_ID","STATX_MODE","STATX_MTIME","STATX_NLINK","STATX_SIZE","STATX_TYPE","STATX_UID","STATX__RESERVED","STA_CLK","STA_CLOCKERR","STA_DEL","STA_FLL","STA_FREQHOLD","STA_INS","STA_MODE","STA_NANO","STA_PLL","STA_PPSERROR","STA_PPSFREQ","STA_PPSJITTER","STA_PPSSIGNAL","STA_PPSTIME","STA_PPSWANDER","STA_RONLY","STA_UNSYNC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","STICKY_TIMEOUTS","ST_APPEND","ST_IMMUTABLE","ST_MANDLOCK","ST_NOATIME","ST_NODEV","ST_NODIRATIME","ST_NOEXEC","ST_NOSUID","ST_RDONLY","ST_RELATIME","ST_SYNCHRONOUS","ST_WRITE","SW_CNT","SW_MAX","SYNC_FILE_RANGE_WAIT_AFTER","SYNC_FILE_RANGE_WAIT_BEFORE","SYNC_FILE_RANGE_WRITE","SYN_CNT","SYN_MAX","SYSFS_MAGIC","SYS__sysctl","SYS_accept","SYS_accept4","SYS_access","SYS_acct","SYS_add_key","SYS_adjtimex","SYS_afs_syscall","SYS_alarm","SYS_arch_prctl","SYS_bind","SYS_bpf","SYS_brk","SYS_capget","SYS_capset","SYS_chdir","SYS_chmod","SYS_chown","SYS_chroot","SYS_clock_adjtime","SYS_clock_getres","SYS_clock_gettime","SYS_clock_nanosleep","SYS_clock_settime","SYS_clone","SYS_clone3","SYS_close","SYS_close_range","SYS_connect","SYS_copy_file_range","SYS_creat","SYS_create_module","SYS_delete_module","SYS_dup","SYS_dup2","SYS_dup3","SYS_epoll_create","SYS_epoll_create1","SYS_epoll_ctl","SYS_epoll_ctl_old","SYS_epoll_pwait","SYS_epoll_pwait2","SYS_epoll_wait","SYS_epoll_wait_old","SYS_eventfd","SYS_eventfd2","SYS_execve","SYS_execveat","SYS_exit","SYS_exit_group","SYS_faccessat","SYS_faccessat2","SYS_fadvise64","SYS_fallocate","SYS_fanotify_init","SYS_fanotify_mark","SYS_fchdir","SYS_fchmod","SYS_fchmodat","SYS_fchown","SYS_fchownat","SYS_fcntl","SYS_fdatasync","SYS_fgetxattr","SYS_finit_module","SYS_flistxattr","SYS_flock","SYS_fork","SYS_fremovexattr","SYS_fsconfig","SYS_fsetxattr","SYS_fsmount","SYS_fsopen","SYS_fspick","SYS_fstat","SYS_fstatfs","SYS_fsync","SYS_ftruncate","SYS_futex","SYS_futex_waitv","SYS_futimesat","SYS_get_kernel_syms","SYS_get_mempolicy","SYS_get_robust_list","SYS_get_thread_area","SYS_getcpu","SYS_getcwd","SYS_getdents","SYS_getdents64","SYS_getegid","SYS_geteuid","SYS_getgid","SYS_getgroups","SYS_getitimer","SYS_getpeername","SYS_getpgid","SYS_getpgrp","SYS_getpid","SYS_getpmsg","SYS_getppid","SYS_getpriority","SYS_getrandom","SYS_getresgid","SYS_getresuid","SYS_getrlimit","SYS_getrusage","SYS_getsid","SYS_getsockname","SYS_getsockopt","SYS_gettid","SYS_gettimeofday","SYS_getuid","SYS_getxattr","SYS_init_module","SYS_inotify_add_watch","SYS_inotify_init","SYS_inotify_init1","SYS_inotify_rm_watch","SYS_io_cancel","SYS_io_destroy","SYS_io_getevents","SYS_io_setup","SYS_io_submit","SYS_io_uring_enter","SYS_io_uring_register","SYS_io_uring_setup","SYS_ioctl","SYS_ioperm","SYS_iopl","SYS_ioprio_get","SYS_ioprio_set","SYS_kcmp","SYS_kexec_file_load","SYS_kexec_load","SYS_keyctl","SYS_kill","SYS_landlock_add_rule","SYS_landlock_create_ruleset","SYS_landlock_restrict_self","SYS_lchown","SYS_lgetxattr","SYS_link","SYS_linkat","SYS_listen","SYS_listxattr","SYS_llistxattr","SYS_lookup_dcookie","SYS_lremovexattr","SYS_lseek","SYS_lsetxattr","SYS_lstat","SYS_madvise","SYS_mbind","SYS_membarrier","SYS_memfd_create","SYS_memfd_secret","SYS_migrate_pages","SYS_mincore","SYS_mkdir","SYS_mkdirat","SYS_mknod","SYS_mknodat","SYS_mlock","SYS_mlock2","SYS_mlockall","SYS_mmap","SYS_modify_ldt","SYS_mount","SYS_mount_setattr","SYS_move_mount","SYS_move_pages","SYS_mprotect","SYS_mq_getsetattr","SYS_mq_notify","SYS_mq_open","SYS_mq_timedreceive","SYS_mq_timedsend","SYS_mq_unlink","SYS_mremap","SYS_msgctl","SYS_msgget","SYS_msgrcv","SYS_msgsnd","SYS_msync","SYS_munlock","SYS_munlockall","SYS_munmap","SYS_name_to_handle_at","SYS_nanosleep","SYS_newfstatat","SYS_nfsservctl","SYS_open","SYS_open_by_handle_at","SYS_open_tree","SYS_openat","SYS_openat2","SYS_pause","SYS_perf_event_open","SYS_personality","SYS_pidfd_getfd","SYS_pidfd_open","SYS_pidfd_send_signal","SYS_pipe","SYS_pipe2","SYS_pivot_root","SYS_pkey_alloc","SYS_pkey_free","SYS_pkey_mprotect","SYS_poll","SYS_ppoll","SYS_prctl","SYS_pread64","SYS_preadv","SYS_preadv2","SYS_prlimit64","SYS_process_madvise","SYS_process_mrelease","SYS_process_vm_readv","SYS_process_vm_writev","SYS_pselect6","SYS_ptrace","SYS_putpmsg","SYS_pwrite64","SYS_pwritev","SYS_pwritev2","SYS_query_module","SYS_quotactl","SYS_quotactl_fd","SYS_read","SYS_readahead","SYS_readlink","SYS_readlinkat","SYS_readv","SYS_reboot","SYS_recvfrom","SYS_recvmmsg","SYS_recvmsg","SYS_remap_file_pages","SYS_removexattr","SYS_rename","SYS_renameat","SYS_renameat2","SYS_request_key","SYS_restart_syscall","SYS_rmdir","SYS_rseq","SYS_rt_sigaction","SYS_rt_sigpending","SYS_rt_sigprocmask","SYS_rt_sigqueueinfo","SYS_rt_sigreturn","SYS_rt_sigsuspend","SYS_rt_sigtimedwait","SYS_rt_tgsigqueueinfo","SYS_sched_get_priority_max","SYS_sched_get_priority_min","SYS_sched_getaffinity","SYS_sched_getattr","SYS_sched_getparam","SYS_sched_getscheduler","SYS_sched_rr_get_interval","SYS_sched_setaffinity","SYS_sched_setattr","SYS_sched_setparam","SYS_sched_setscheduler","SYS_sched_yield","SYS_seccomp","SYS_security","SYS_select","SYS_semctl","SYS_semget","SYS_semop","SYS_semtimedop","SYS_sendfile","SYS_sendmmsg","SYS_sendmsg","SYS_sendto","SYS_set_mempolicy","SYS_set_mempolicy_home_node","SYS_set_robust_list","SYS_set_thread_area","SYS_set_tid_address","SYS_setdomainname","SYS_setfsgid","SYS_setfsuid","SYS_setgid","SYS_setgroups","SYS_sethostname","SYS_setitimer","SYS_setns","SYS_setpgid","SYS_setpriority","SYS_setregid","SYS_setresgid","SYS_setresuid","SYS_setreuid","SYS_setrlimit","SYS_setsid","SYS_setsockopt","SYS_settimeofday","SYS_setuid","SYS_setxattr","SYS_shmat","SYS_shmctl","SYS_shmdt","SYS_shmget","SYS_shutdown","SYS_sigaltstack","SYS_signalfd","SYS_signalfd4","SYS_socket","SYS_socketpair","SYS_splice","SYS_stat","SYS_statfs","SYS_statx","SYS_swapoff","SYS_swapon","SYS_symlink","SYS_symlinkat","SYS_sync","SYS_sync_file_range","SYS_syncfs","SYS_sysfs","SYS_sysinfo","SYS_syslog","SYS_tee","SYS_tgkill","SYS_time","SYS_timer_create","SYS_timer_delete","SYS_timer_getoverrun","SYS_timer_gettime","SYS_timer_settime","SYS_timerfd_create","SYS_timerfd_gettime","SYS_timerfd_settime","SYS_times","SYS_tkill","SYS_truncate","SYS_tuxcall","SYS_umask","SYS_umount2","SYS_uname","SYS_unlink","SYS_unlinkat","SYS_unshare","SYS_uselib","SYS_userfaultfd","SYS_ustat","SYS_utime","SYS_utimensat","SYS_utimes","SYS_vfork","SYS_vhangup","SYS_vmsplice","SYS_vserver","SYS_wait4","SYS_waitid","SYS_write","SYS_writev","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","TAB0","TAB1","TAB2","TAB3","TABDLY","TCA_CHAIN","TCA_DUMP_INVISIBLE","TCA_FCNT","TCA_HW_OFFLOAD","TCA_KIND","TCA_OPTIONS","TCA_PAD","TCA_RATE","TCA_STAB","TCA_STATS","TCA_STATS2","TCA_UNSPEC","TCA_XSTATS","TCFLSH","TCGETA","TCGETS","TCGETS2","TCGETX","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_CC_INFO","TCP_CM_INQ","TCP_CONGESTION","TCP_COOKIE_TRANSACTIONS","TCP_CORK","TCP_DEFER_ACCEPT","TCP_FASTOPEN","TCP_FASTOPEN_CONNECT","TCP_FASTOPEN_KEY","TCP_FASTOPEN_NO_COOKIE","TCP_INFO","TCP_INQ","TCP_KEEPCNT","TCP_KEEPIDLE","TCP_KEEPINTVL","TCP_LINGER2","TCP_MAXSEG","TCP_MD5SIG","TCP_MD5SIG_EXT","TCP_NODELAY","TCP_NOTSENT_LOWAT","TCP_QUEUE_SEQ","TCP_QUICKACK","TCP_REPAIR","TCP_REPAIR_OPTIONS","TCP_REPAIR_QUEUE","TCP_REPAIR_WINDOW","TCP_SAVED_SYN","TCP_SAVE_SYN","TCP_SYNCNT","TCP_THIN_DUPACK","TCP_THIN_LINEAR_TIMEOUTS","TCP_TIMESTAMP","TCP_ULP","TCP_USER_TIMEOUT","TCP_WINDOW_CLAMP","TCP_ZEROCOPY_RECEIVE","TCSADRAIN","TCSAFLUSH","TCSANOW","TCSBRK","TCSBRKP","TCSETA","TCSETAF","TCSETAW","TCSETS","TCSETS2","TCSETSF","TCSETSF2","TCSETSW","TCSETSW2","TCSETX","TCSETXF","TCSETXW","TCXONC","TFD_CLOEXEC","TFD_NONBLOCK","TFD_TIMER_ABSTIME","TFD_TIMER_CANCEL_ON_SET","THOUSEP","TIMER_ABSTIME","TIME_BAD","TIME_DEL","TIME_ERROR","TIME_INS","TIME_OK","TIME_OOP","TIME_WAIT","TIOCCBRK","TIOCCONS","TIOCEXCL","TIOCGDEV","TIOCGETD","TIOCGEXCL","TIOCGICOUNT","TIOCGLCKTRMIOS","TIOCGPGRP","TIOCGPKT","TIOCGPTLCK","TIOCGPTN","TIOCGPTPEER","TIOCGRS485","TIOCGSERIAL","TIOCGSID","TIOCGSOFTCAR","TIOCGWINSZ","TIOCINQ","TIOCLINUX","TIOCMBIC","TIOCMBIS","TIOCMGET","TIOCMIWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCSBRK","TIOCSCTTY","TIOCSERCONFIG","TIOCSERGETLSR","TIOCSERGETMULTI","TIOCSERGSTRUCT","TIOCSERGWILD","TIOCSERSETMULTI","TIOCSERSWILD","TIOCSETD","TIOCSIG","TIOCSLCKTRMIOS","TIOCSPGRP","TIOCSPTLCK","TIOCSRS485","TIOCSSERIAL","TIOCSSOFTCAR","TIOCSTI","TIOCSWINSZ","TIOCVHANGUP","TMPFS_MAGIC","TMP_MAX","TOSTOP","TRACEFS_MAGIC","TUN_READQ_SIZE","TUN_TAP_DEV","TUN_TUN_DEV","TUN_TYPE_MASK","T_FMT","T_FMT_AMPM","UDF_SUPER_MAGIC","UDP_CORK","UDP_ENCAP","UDP_GRO","UDP_NO_CHECK6_RX","UDP_NO_CHECK6_TX","UDP_SEGMENT","UINPUT_MAX_NAME_SIZE","UINPUT_VERSION","UIO_MAXIOV","UMOUNT_NOFOLLOW","UNAME26","USBDEVICE_SUPER_MAGIC","USER_PROCESS","USRQUOTA","UTIME_NOW","UTIME_OMIT","VDISCARD","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMADDR_CID_ANY","VMADDR_CID_HOST","VMADDR_CID_HYPERVISOR","VMADDR_CID_LOCAL","VMADDR_CID_RESERVED","VMADDR_PORT_ANY","VMIN","VQUIT","VREPRINT","VSTART","VSTOP","VSUSP","VSWTC","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WHOLE_SECONDS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_EXITCODE","W_OK","W_STOPCODE","XATTR_CREATE","XATTR_REPLACE","XENFS_SUPER_MAGIC","XFS_SUPER_MAGIC","XTABS","X_OK","YESEXPR","YESSTR","_IOFBF","_IOLBF","_IONBF","_PC_2_SYMLINKS","_PC_ALLOC_SIZE_MIN","_PC_ASYNC_IO","_PC_CHOWN_RESTRICTED","_PC_FILESIZEBITS","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_PRIO_IO","_PC_REC_INCR_XFER_SIZE","_PC_REC_MAX_XFER_SIZE","_PC_REC_MIN_XFER_SIZE","_PC_REC_XFER_ALIGN","_PC_SOCK_MAXBUF","_PC_SYMLINK_MAX","_PC_SYNC_IO","_PC_VDISABLE","_POSIX_VDISABLE","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_C_VERSION","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_AVPHYS_PAGES","_SC_BARRIERS","_SC_BASE","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHARCLASS_NAME_MAX","_SC_CHAR_BIT","_SC_CHAR_MAX","_SC_CHAR_MIN","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_C_LANG_SUPPORT","_SC_C_LANG_SUPPORT_R","_SC_DELAYTIMER_MAX","_SC_DEVICE_IO","_SC_DEVICE_SPECIFIC","_SC_DEVICE_SPECIFIC_R","_SC_EQUIV_CLASS_MAX","_SC_EXPR_NEST_MAX","_SC_FD_MGMT","_SC_FIFO","_SC_FILE_ATTRIBUTES","_SC_FILE_LOCKING","_SC_FILE_SYSTEM","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_INT_MAX","_SC_INT_MIN","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LEVEL1_DCACHE_ASSOC","_SC_LEVEL1_DCACHE_LINESIZE","_SC_LEVEL1_DCACHE_SIZE","_SC_LEVEL1_ICACHE_ASSOC","_SC_LEVEL1_ICACHE_LINESIZE","_SC_LEVEL1_ICACHE_SIZE","_SC_LEVEL2_CACHE_ASSOC","_SC_LEVEL2_CACHE_LINESIZE","_SC_LEVEL2_CACHE_SIZE","_SC_LEVEL3_CACHE_ASSOC","_SC_LEVEL3_CACHE_LINESIZE","_SC_LEVEL3_CACHE_SIZE","_SC_LEVEL4_CACHE_ASSOC","_SC_LEVEL4_CACHE_LINESIZE","_SC_LEVEL4_CACHE_SIZE","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_LONG_BIT","_SC_MAPPED_FILES","_SC_MB_LEN_MAX","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_MULTI_PROCESS","_SC_NETWORKING","_SC_NGROUPS_MAX","_SC_NL_ARGMAX","_SC_NL_LANGMAX","_SC_NL_MSGMAX","_SC_NL_NMAX","_SC_NL_SETMAX","_SC_NL_TEXTMAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_NZERO","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PII","_SC_PII_INTERNET","_SC_PII_INTERNET_DGRAM","_SC_PII_INTERNET_STREAM","_SC_PII_OSI","_SC_PII_OSI_CLTS","_SC_PII_OSI_COTS","_SC_PII_OSI_M","_SC_PII_SOCKET","_SC_PII_XTI","_SC_PIPE","_SC_POLL","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_REGEX_VERSION","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SCHAR_MAX","_SC_SCHAR_MIN","_SC_SELECT","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SHRT_MAX","_SC_SHRT_MIN","_SC_SIGNALS","_SC_SIGQUEUE_MAX","_SC_SINGLE_PROCESS","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SSIZE_MAX","_SC_SS_REPL_MAX","_SC_STREAMS","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_SYSTEM_DATABASE","_SC_SYSTEM_DATABASE_R","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_ROBUST_PRIO_INHERIT","_SC_THREAD_ROBUST_PRIO_PROTECT","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_T_IOV_MAX","_SC_UCHAR_MAX","_SC_UINT_MAX","_SC_UIO_MAXIOV","_SC_ULONG_MAX","_SC_USER_GROUPS","_SC_USER_GROUPS_R","_SC_USHRT_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_V7_ILP32_OFF32","_SC_V7_ILP32_OFFBIG","_SC_V7_LP64_OFF64","_SC_V7_LPBIG_OFFBIG","_SC_VERSION","_SC_WORD_BIT","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_SC_XOPEN_XPG2","_SC_XOPEN_XPG3","_SC_XOPEN_XPG4","__NFT_REG_MAX","__SIZEOF_PTHREAD_CONDATTR_T","__SIZEOF_PTHREAD_COND_T","__SIZEOF_PTHREAD_MUTEXATTR_T","__SIZEOF_PTHREAD_MUTEX_T","__SIZEOF_PTHREAD_RWLOCKATTR_T","__SIZEOF_PTHREAD_RWLOCK_T","__UT_HOSTSIZE","__UT_LINESIZE","__UT_NAMESIZE","__WALL","__WCLONE","__WNOTHREAD","__c_anonymous_ifr_ifru","__c_anonymous_ifru_map","__c_anonymous_ptrace_syscall_info_data","__c_anonymous_ptrace_syscall_info_entry","__c_anonymous_ptrace_syscall_info_exit","__c_anonymous_ptrace_syscall_info_seccomp","__c_anonymous_sockaddr_can_can_addr","__c_anonymous_sockaddr_can_j1939","__c_anonymous_sockaddr_can_tp","__errno_location","__exit_status","__fsword_t","__glibc_reserved1","__glibc_reserved2","__glibc_reserved3","__glibc_reserved4","__key","__priority_which_t","__rlimit_resource_t","__s16","__s32","__s64","__seq","__statx_timestamp_pad1","__syscall_ulong_t","__timeval","__u16","__u32","__u64","__u8","__unused1","__unused10","__unused11","__unused2","__unused3","__unused4","__unused5","__unused6","__unused7","__unused8","__unused9","_exit","_f","_libc_fpstate","_libc_fpxreg","_libc_xmmreg","_st","_xmm","abort","abs","absflat","absfuzz","absinfo","absmax","absmin","accept","accept4","access","acct","actime","addmntent","addr","addr","addr_mask","addrinfo","adjtime","adjtimex","af_alg_iv","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_cancel","aio_error","aio_fildes","aio_fsync","aio_lio_opcode","aio_nbytes","aio_offset","aio_read","aio_reqprio","aio_return","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arch","arch","arena","arena","args","args","args","arp_dev","arp_flags","arp_flags","arp_ha","arp_ha","arp_netmask","arp_netmask","arp_pa","arp_pa","arpd_request","arphdr","arpreq","arpreq_old","asctime_r","atexit","atof","atoi","attack_length","attack_level","backtrace","base_addr","bind","blkcnt64_t","blkcnt_t","blksize_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brk","bsearch","bufferram","bustype","button","c_cc","c_cc","c_cflag","c_cflag","c_char","c_double","c_float","c_iflag","c_iflag","c_int","c_ispeed","c_ispeed","c_lflag","c_lflag","c_line","c_line","c_long","c_longlong","c_oflag","c_oflag","c_ospeed","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calcnt","calloc","can_addr","can_dlc","can_err_mask_t","can_family","can_filter","can_frame","can_id","can_id","can_id","can_ifindex","can_mask","canfd_frame","canid_t","cc_t","center","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","cgroup","ch_addralign","ch_addralign","ch_reserved","ch_size","ch_size","ch_type","ch_type","chdir","child_tid","chmod","chown","chroot","clearenv","clearerr","clock_adjtime","clock_getcpuclockid","clock_getres","clock_gettime","clock_nanosleep","clock_settime","clock_t","clockid","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_args","close","closedir","closelog","cmd","cmsg_len","cmsg_level","cmsg_type","cmsghdr","code","code","code","codes_ptr","codes_size","connect","constant","cookie","copy_file_range","cpu_set_t","creat","creat64","cs","ctermid","ctime_r","cuid","currency_symbol","custom_data","custom_len","cwd","cwd","d_ino","d_ino","d_name","d_name","d_off","d_off","d_reclen","d_reclen","d_type","d_type","daemon","data","data","deadband","decimal_point","delay","dest_offset","dev","dev_t","difftime","direction","dirent","dirent64","dirfd","dl_iterate_phdr","dl_phdr_info","dladdr","dladdr1","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlinfo","dlmopen","dlopen","dlpi_addr","dlpi_adds","dlpi_name","dlpi_phdr","dlpi_phnum","dlpi_subs","dlpi_tls_data","dlpi_tls_modid","dlsym","dma","domainname","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curinodes","dqb_curspace","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_valid","dqblk","ds","dup","dup2","dup3","duplocale","e_ehsize","e_ehsize","e_entry","e_entry","e_exit","e_flags","e_flags","e_ident","e_ident","e_machine","e_machine","e_phentsize","e_phentsize","e_phnum","e_phnum","e_phoff","e_phoff","e_shentsize","e_shentsize","e_shnum","e_shnum","e_shoff","e_shoff","e_shstrndx","e_shstrndx","e_termination","e_type","e_type","e_version","e_version","eaccess","ee_code","ee_data","ee_errno","ee_info","ee_origin","ee_pad","ee_type","effect","effect_id","eflags","element","end_level","endgrent","endmntent","endpwent","endservent","endspent","endutxent","entry","envelope","envelope","envelope","epoll_create","epoll_create1","epoll_ctl","epoll_event","epoll_pwait","epoll_wait","errcnt","error","es","esterror","esterror","euidaccess","event_len","eventfd","events","events","execl","execle","execlp","execv","execve","execvp","execvpe","exit","exit","exit_signal","explicit_bzero","exponent","f_bavail","f_bavail","f_bavail","f_bavail","f_bfree","f_bfree","f_bfree","f_bfree","f_blocks","f_blocks","f_blocks","f_blocks","f_bsize","f_bsize","f_bsize","f_bsize","f_favail","f_favail","f_ffree","f_ffree","f_ffree","f_ffree","f_files","f_files","f_files","f_files","f_flag","f_flag","f_flags","f_frsize","f_frsize","f_frsize","f_frsize","f_fsid","f_fsid","f_fsid","f_fsid","f_namelen","f_namelen","f_namemax","f_namemax","f_spare","f_type","f_type","faccessat","fade_length","fade_level","fallocate","fallocate64","fanotify_event_metadata","fanotify_init","fanotify_mark","fanotify_response","fchdir","fchmod","fchmodat","fchown","fchownat","fclose","fcntl","fd","fd","fd","fd_set","fdatasync","fdopen","fdopendir","feof","ferror","fexecve","ff_condition_effect","ff_constant_effect","ff_effect","ff_effects_max","ff_effects_max","ff_envelope","ff_periodic_effect","ff_ramp_effect","ff_replay","ff_rumble_effect","ff_trigger","fflush","fgetc","fgetgrent_r","fgetpos","fgetpos64","fgetpwent_r","fgets","fgetspent_r","fgetxattr","file_clone_range","fileno","filter","flags","flags","flags","flags","flags","flags","flags","flat","flistxattr","flock","flock","flock64","fmemopen","fmt","fop","fop","fopen","fopen64","fordblks","fordblks","fork","forkpty","fpathconf","fpos64_t","fpos_t","fpregs","fprintf","fputc","fputs","frac_digits","fread","fread_unlocked","free","freeaddrinfo","freehigh","freeifaddrs","freelocale","freeram","freeswap","fremovexattr","freopen","freopen64","freq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fs","fs_base","fsblkcnt_t","fscanf","fseek","fseeko","fseeko64","fsetpos","fsetpos64","fsetxattr","fsfilcnt_t","fsid_t","fsmblks","fsmblks","fstat","fstat64","fstatat","fstatat64","fstatfs","fstatfs64","fstatvfs","fstatvfs64","fsync","ftell","ftello","ftello64","ftok","ftruncate","ftruncate64","ftw","ftw","futimens","futimes","fuzz","fwrite","gai_strerror","genlmsghdr","getaddrinfo","getauxval","getchar","getchar_unlocked","getcontext","getcwd","getdomainname","getdtablesize","getegid","getentropy","getenv","geteuid","getgid","getgrent","getgrent_r","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostid","gethostname","getifaddrs","getline","getloadavg","getlogin","getmntent","getnameinfo","getopt","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprotobyname","getprotobynumber","getpt","getpwent","getpwent_r","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrandom","getresgid","getresuid","getrlimit","getrlimit64","getrusage","getservbyname","getservbyport","getservent","getsid","getsockname","getsockopt","getspent","getspent_r","getspnam","getspnam_r","gettid","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid","gid_t","gl_flags","gl_flags","gl_offs","gl_offs","gl_pathc","gl_pathc","gl_pathv","gl_pathv","glob","glob64","glob64_t","glob_t","globfree","globfree64","gmtime","gmtime_r","gnu_get_libc_release","gnu_get_libc_version","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","greg_t","gregs","group","group","grouping","gs","gs_base","h_addr_list","h_addrtype","h_aliases","h_length","h_name","ha","hasmntopt","hblkhd","hblkhd","hblks","hblks","hostent","hstrerror","i387","iconv","iconv_close","iconv_open","iconv_t","id","id","id","id_t","idtype_t","if_freenameindex","if_index","if_indextoname","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_flags","ifa_ifu","ifa_name","ifa_netmask","ifa_next","ifaddrs","ifr6_addr","ifr6_ifindex","ifr6_prefixlen","ifr_ifru","ifr_name","ifreq","ifru_addr","ifru_broadaddr","ifru_data","ifru_dstaddr","ifru_flags","ifru_hwaddr","ifru_ifindex","ifru_map","ifru_metric","ifru_mtu","ifru_netmask","ifru_newname","ifru_slave","imr_address","imr_ifindex","imr_interface","imr_interface","imr_multiaddr","imr_multiaddr","imr_multiaddr","imr_sourceaddr","in6_addr","in6_ifreq","in6_pktinfo","in6_rtmsg","in_addr","in_addr_t","in_pktinfo","in_port_t","index","initgroups","ino64_t","ino_t","inotify_add_watch","inotify_event","inotify_init","inotify_init1","inotify_rm_watch","input_absinfo","input_event","input_id","input_keymap_entry","input_mask","instruction_pointer","instruction_pointer","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","interval","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","ioctl","ioperm","iopl","iov_base","iov_len","iovec","ip","ip_mreq","ip_mreq_source","ip_mreqn","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","irq","is_error","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_interval","it_value","it_value","itimerspec","itimerval","iv","ivlen","j1939","j1939_filter","jf","jitcnt","jitter","jt","k","keepcost","keepcost","key_t","keycode","kill","killpg","l_len","l_len","l_linger","l_onoff","l_pid","l_pid","l_start","l_start","l_type","l_type","l_whence","l_whence","labs","lchown","lconv","left_coeff","left_saturation","len","len","len","len","length","level","lgetxattr","linger","link","linkat","lio_listio","listen","listxattr","llistxattr","loads","locale_t","localeconv","localtime","localtime_r","lockf","loff_t","login_tty","lremovexattr","lseek","lseek64","lsetxattr","lstat","lstat64","lutimes","machine","madvise","magic","magnitude","major","makecontext","makedev","mallinfo","mallinfo","mallinfo2","mallinfo2","malloc","malloc_info","malloc_trim","malloc_usable_size","mallopt","mask","mask","max_align_t","maxerror","maxerror","maximum","mcontext_t","mem_end","mem_start","mem_unit","memalign","memchr","memcmp","memcpy","memfd_create","memmem","memmove","memrchr","memset","metadata_len","mincore","minimum","minor","mkdir","mkdirat","mkdtemp","mkfifo","mkfifoat","mknod","mknodat","mkostemp","mkostemps","mkstemp","mkstemps","mktime","mlock","mlock2","mlockall","mmap","mmap64","mmsghdr","mnt_dir","mnt_freq","mnt_fsname","mnt_opts","mnt_passno","mnt_type","mntent","mode","mode","mode_t","modes","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","mq_attr","mq_close","mq_curmsgs","mq_flags","mq_getattr","mq_maxmsg","mq_msgsize","mq_open","mq_receive","mq_send","mq_setattr","mq_timedreceive","mq_timedsend","mq_unlink","mqd_t","mr_address","mr_alen","mr_ifindex","mr_type","mremap","msg","msg_control","msg_controllen","msg_ctime","msg_flags","msg_hdr","msg_iov","msg_iovlen","msg_len","msg_lrpid","msg_lspid","msg_name","msg_namelen","msg_perm","msg_qbytes","msg_qnum","msg_rtime","msg_stime","msgctl","msgget","msghdr","msginfo","msglen_t","msgmap","msgmax","msgmnb","msgmni","msgpool","msgqnum_t","msgrcv","msgseg","msgsnd","msgssz","msgtql","msqid_ds","msync","munlock","munlockall","munmap","mxcr_mask","mxcr_mask","mxcsr","mxcsr","n_cs_precedes","n_sep_by_space","n_sign_posn","name","name","name","name","name_mask","name_t","nanosleep","negative_sign","newlocale","nfds_t","nice","nl_family","nl_groups","nl_item","nl_langinfo","nl_langinfo_l","nl_mmap_hdr","nl_mmap_req","nl_pid","nl_pktinfo","nla_len","nla_type","nlattr","nlink_t","nlmsg_flags","nlmsg_len","nlmsg_pid","nlmsg_seq","nlmsg_type","nlmsgerr","nlmsghdr","nm_block_nr","nm_block_size","nm_frame_nr","nm_frame_size","nm_gid","nm_group","nm_len","nm_pid","nm_status","nm_uid","nodename","nr","nr","nr","nr","ntp_adjtime","ntp_gettime","ntptimeval","off","off64_t","off_t","offset","offset","old","op","open","open64","open_how","open_memstream","open_wmemstream","openat","openat64","opendir","openlog","openpty","ordblks","ordblks","orig_rax","p_aliases","p_align","p_align","p_cs_precedes","p_filesz","p_filesz","p_flags","p_flags","p_memsz","p_memsz","p_name","p_offset","p_offset","p_paddr","p_paddr","p_proto","p_sep_by_space","p_sign_posn","p_type","p_type","p_vaddr","p_vaddr","packet_mreq","pad","pad","pad","parent_tid","passwd","pathconf","pause","pclose","period","perror","personality","pgn","pgn","pgn_mask","pgn_t","phase","pid","pid","pid_t","pidfd","pipe","pipe2","poll","pollfd","popen","port","positive_sign","posix_fadvise","posix_fadvise64","posix_fallocate","posix_fallocate64","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addclose","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addopen","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getschedparam","posix_spawnattr_getschedpolicy","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setschedparam","posix_spawnattr_setschedpolicy","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","ppoll","ppsfreq","prctl","pread","pread64","preadv","preadv2","preadv64","preadv64v2","precision","printf","priority_t","prlimit","prlimit64","process_vm_readv","process_vm_writev","procs","product","protoent","pselect","pthread_atfork","pthread_attr_destroy","pthread_attr_getaffinity_np","pthread_attr_getguardsize","pthread_attr_getstack","pthread_attr_init","pthread_attr_setaffinity_np","pthread_attr_setdetachstate","pthread_attr_setstacksize","pthread_attr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getclock","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setclock","pthread_condattr_setpshared","pthread_condattr_t","pthread_create","pthread_detach","pthread_exit","pthread_getaffinity_np","pthread_getattr_np","pthread_getcpuclockid","pthread_getname_np","pthread_getschedparam","pthread_getspecific","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mutex_consistent","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_timedlock","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getprotocol","pthread_mutexattr_getpshared","pthread_mutexattr_getrobust","pthread_mutexattr_init","pthread_mutexattr_setprotocol","pthread_mutexattr_setpshared","pthread_mutexattr_setrobust","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getkind_np","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setkind_np","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_setaffinity_np","pthread_setname_np","pthread_setschedparam","pthread_setschedprio","pthread_setspecific","pthread_sigmask","pthread_sigqueue","pthread_spin_destroy","pthread_spin_init","pthread_spin_lock","pthread_spin_trylock","pthread_spin_unlock","pthread_spinlock_t","pthread_t","ptrace","ptrace_peeksiginfo_args","ptrace_rseq_configuration","ptrace_syscall_info","ptrdiff_t","ptsname","ptsname_r","putchar","putchar_unlocked","putenv","puts","pututxline","pw_dir","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","pwrite64","pwritev","pwritev2","pwritev64","pwritev64v2","qsort","qsort_r","quotactl","r10","r11","r12","r13","r14","r15","r8","r9","raise","rand","rax","rbp","rbx","rcx","rdi","rdp","rdp","rdx","read","readahead","readdir","readdir64","readdir64_r","readdir_r","readlink","readlinkat","readv","realloc","reallocarray","realpath","reboot","recv","recvfrom","recvmmsg","recvmsg","regcomp","regerror","regex_t","regexec","regfree","regmatch_t","regoff_t","regs","release","remap_file_pages","remove","removexattr","rename","renameat","renameat2","replay","req","request_id","request_id","res_init","reserved","reserved","resolution","resolve","response","ret_data","retval","retval","revents","rewind","rewinddir","right_coeff","right_saturation","rip","rip","rip","rlim64_t","rlim_cur","rlim_cur","rlim_max","rlim_max","rlim_t","rlimit","rlimit64","rm_eo","rm_so","rmdir","rseq_abi_pointer","rseq_abi_size","rsi","rsp","rt_class","rt_dev","rt_dst","rt_flags","rt_gateway","rt_genmask","rt_irtt","rt_metric","rt_mtu","rt_pad1","rt_pad2","rt_pad3","rt_pad4","rt_tos","rt_window","rtentry","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","rusage","rx_id","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_family","sa_family_t","sa_flags","sa_mask","sa_restorer","sa_sigaction","salg_family","salg_feat","salg_mask","salg_name","salg_type","sbrk","scancode","scanf","sched_get_priority_max","sched_get_priority_min","sched_getaffinity","sched_getcpu","sched_getparam","sched_getscheduler","sched_param","sched_priority","sched_rr_get_interval","sched_setaffinity","sched_setparam","sched_setscheduler","sched_yield","seccomp","seccomp_data","seccomp_data","seccomp_notif","seccomp_notif_resp","seccomp_notif_sizes","seekdir","select","sem_close","sem_ctime","sem_destroy","sem_flg","sem_getvalue","sem_init","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_perm","sem_post","sem_t","sem_timedwait","sem_trywait","sem_unlink","sem_wait","semaem","sembuf","semctl","semget","semid_ds","seminfo","semmap","semmni","semmns","semmnu","semmsl","semop","semopm","semume","semusz","semvmx","send","sendfile","sendfile64","sendmmsg","sendmsg","sendto","servent","set_tid","set_tid_size","setbuf","setcontext","setdomainname","setegid","setenv","seteuid","setfsgid","setfsuid","setgid","setgrent","setgroups","sethostid","sethostname","setlocale","setlogmask","setmntent","setns","setpgid","setpriority","setpwent","setregid","setresgid","setresuid","setreuid","setrlimit","setrlimit64","setservent","setsid","setsockopt","setspent","settimeofday","setuid","setutxent","setvbuf","setxattr","sgetspent_r","sh_addr","sh_addr","sh_addralign","sh_addralign","sh_entsize","sh_entsize","sh_flags","sh_flags","sh_info","sh_info","sh_link","sh_link","sh_name","sh_name","sh_offset","sh_offset","sh_size","sh_size","sh_type","sh_type","sharedram","shift","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_code","si_errno","si_pid","si_signo","si_status","si_stime","si_uid","si_utime","si_value","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_thread_id","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","signal","signalfd","signalfd_siginfo","signature","significand","sigpending","sigprocmask","sigset_t","sigsuspend","sigtimedwait","sigval","sigwait","sigwaitinfo","sin6_addr","sin6_family","sin6_flowinfo","sin6_port","sin6_scope_id","sin_addr","sin_family","sin_port","sin_zero","sival_ptr","size_t","sleep","sll_addr","sll_family","sll_halen","sll_hatype","sll_ifindex","sll_pkttype","sll_protocol","smblks","smblks","snprintf","sock_extended_err","sock_filter","sock_fprog","sock_txtime","sockaddr","sockaddr_alg","sockaddr_can","sockaddr_in","sockaddr_in6","sockaddr_ll","sockaddr_nl","sockaddr_storage","sockaddr_un","sockaddr_vm","socket","socketpair","socklen_t","sp_expire","sp_flag","sp_inact","sp_lstchg","sp_max","sp_min","sp_namp","sp_pwdp","sp_warn","speed_t","splice","sprintf","spwd","srand","src_fd","src_length","src_offset","ss","ss_family","ss_flags","ss_size","ss_sp","sscanf","ssi_addr","ssi_addr_lsb","ssi_arch","ssi_band","ssi_call_addr","ssi_code","ssi_errno","ssi_fd","ssi_int","ssi_overrun","ssi_pid","ssi_ptr","ssi_signo","ssi_status","ssi_stime","ssi_syscall","ssi_tid","ssi_trapno","ssi_uid","ssi_utime","ssize_t","st_atime","st_atime","st_atime_nsec","st_atime_nsec","st_blksize","st_blksize","st_blocks","st_blocks","st_ctime","st_ctime","st_ctime_nsec","st_ctime_nsec","st_dev","st_dev","st_gid","st_gid","st_info","st_info","st_ino","st_ino","st_mode","st_mode","st_mtime","st_mtime","st_mtime_nsec","st_mtime_nsec","st_name","st_name","st_nlink","st_nlink","st_other","st_other","st_rdev","st_rdev","st_shndx","st_shndx","st_size","st_size","st_size","st_size","st_space","st_uid","st_uid","st_value","st_value","stabil","stack","stack_pointer","stack_size","stack_t","stamp","start_code","start_level","start_stack","stat","stat","stat64","stat64","statfs","statfs","statfs64","statfs64","status","statvfs","statvfs","statvfs64","statvfs64","statx","statx","statx_timestamp","stbcnt","stpcpy","stpncpy","strcasecmp","strcasestr","strcat","strchr","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strftime","strlen","strncasecmp","strncat","strncmp","strncpy","strndup","strnlen","strong_magnitude","strpbrk","strptime","strrchr","strsignal","strspn","strstr","strtod","strtof","strtok","strtok_r","strtol","strtoul","strxfrm","stx_atime","stx_attributes","stx_attributes_mask","stx_blksize","stx_blocks","stx_btime","stx_ctime","stx_dev_major","stx_dev_minor","stx_gid","stx_ino","stx_mask","stx_mnt_id","stx_mode","stx_mtime","stx_nlink","stx_rdev_major","stx_rdev_minor","stx_size","stx_uid","sun_family","sun_path","suseconds_t","sval","svm_cid","svm_family","svm_port","svm_reserved1","svm_zero","swapcontext","swapoff","swapon","swd","swd","symlink","symlinkat","sync","sync_file_range","syncfs","syscall","sysconf","sysctl","sysinfo","sysinfo","syslog","sysname","system","tai","tai","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcsendbreak","tcsetattr","tcsetpgrp","tee","telldir","termios","termios2","thousands_sep","tick","time","time","time","time","time_t","timegm","timer_create","timer_delete","timer_getoverrun","timer_gettime","timer_settime","timer_t","timerfd_create","timerfd_gettime","timerfd_settime","times","timespec","timeval","timex","timezone","tls","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpfile64","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolerance","tolower","totalhigh","totalram","totalswap","toupper","tp","trigger","truncate","truncate64","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","ttyname_r","tv_nsec","tv_nsec","tv_sec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","tx_id","type_","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","u","u64","u_ar0","u_comm","u_debugreg","u_dsize","u_fpstate","u_fpvalid","u_ssize","u_tsize","uc_flags","uc_link","uc_mcontext","uc_sigmask","uc_stack","ucontext_t","ucred","uid","uid","uid_t","uinput_abs_setup","uinput_ff_erase","uinput_ff_upload","uinput_setup","uinput_user_dev","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","umount","umount2","uname","ungetc","unlink","unlinkat","unlockpt","unsetenv","unshare","uordblks","uordblks","updated","uptime","useconds_t","uselocale","user","user_fpregs_struct","user_regs_struct","usleep","usmblks","usmblks","ut_addr_v6","ut_exit","ut_host","ut_id","ut_line","ut_pid","ut_session","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpname","utmpx","utmpxname","utsname","value","value","vendor","vers","version","version","version","vfork","vhangup","vmsplice","wait","wait4","waitid","waitpid","waveform","wchar_t","wcslen","wcstombs","wd","weak_magnitude","winsize","wmemchr","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xmm_space"],"q":["libcdmaximum number of services provided on the same listening …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","IP6 Auth Header","","IP Payload Comp. Protocol","DCCP","IP6 destination option","exterior gateway protocol","encapsulation header","IP6 Encap Sec. Payload","IP6 fragmentation header","General Routing Encap.","Hop-by-hop option header","","","xns idp","group mgmt protocol","","for compatibility","","","","","Multipath TCP","","IP6 no next header","Protocol indep. multicast","pup","raw IP packet","IP6 routing header","resource reservation","SCTP","","tp-4 w/ class negotiationhe <code>PartialEq</code>, <code>Eq</code> and <code>Hash</code> implementations of thisquivalent to C’s <code>void</code> type when used as a pointereturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchangedinterface name, e.g. “en0”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codehe 64-bit libc on Solaris and illumos only has readdir_r. …ifp":[[6,"__u16"],[6,"__u32"],[6,"__u8"],[3,"sock_filter"],[3,"cmsghdr"],[6,"c_uchar"],[3,"msghdr"],[6,"c_uint"],[6,"c_int"],[6,"size_t"],[15,"usize"],[3,"cpu_set_t"],[15,"bool"],[3,"fd_set"],[15,"u8"],[15,"u32"],[3,"sock_extended_err"],[3,"sockaddr"],[4,"DIR"],[4,"FILE"],[4,"fpos_t"],[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[4,"timezone"],[3,"in_addr"],[3,"ip_mreq"],[3,"ip_mreqn"],[3,"ip_mreq_source"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"lconv"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"in6_rtmsg"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"mmsghdr"],[3,"epoll_event"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"utsname"],[3,"sigevent"],[4,"fpos64_t"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"fsid_t"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"uinput_ff_upload"],[3,"uinput_ff_erase"],[3,"uinput_abs_setup"],[3,"dl_phdr_info"],[3,"Elf32_Ehdr"],[3,"Elf64_Ehdr"],[3,"Elf32_Sym"],[3,"Elf64_Sym"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"Elf32_Shdr"],[3,"Elf64_Shdr"],[3,"ucred"],[3,"mntent"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"inotify_event"],[3,"fanotify_response"],[3,"sockaddr_vm"],[3,"regmatch_t"],[3,"__c_anonymous_sockaddr_can_tp"],[3,"__c_anonymous_sockaddr_can_j1939"],[3,"can_filter"],[3,"j1939_filter"],[3,"sock_fprog"],[3,"seccomp_data"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nlattr"],[3,"file_clone_range"],[3,"__c_anonymous_ifru_map"],[3,"in6_ifreq"],[3,"sockaddr_nl"],[3,"dirent"],[3,"dirent64"],[3,"sockaddr_alg"],[3,"uinput_setup"],[3,"uinput_user_dev"],[3,"af_alg_iv"],[3,"mq_attr"],[19,"__c_anonymous_ifr_ifru"],[3,"ifreq"],[3,"sock_txtime"],[19,"__c_anonymous_sockaddr_can_can_addr"],[3,"sockaddr_can"],[3,"statx"],[3,"statx_timestamp"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"glob64_t"],[3,"termios"],[3,"mallinfo"],[3,"mallinfo2"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"rtentry"],[3,"timex"],[3,"ntptimeval"],[3,"regex_t"],[3,"Elf64_Chdr"],[3,"Elf32_Chdr"],[3,"seminfo"],[3,"ptrace_peeksiginfo_args"],[3,"__c_anonymous_ptrace_syscall_info_entry"],[3,"__c_anonymous_ptrace_syscall_info_exit"],[3,"__c_anonymous_ptrace_syscall_info_seccomp"],[3,"ptrace_syscall_info"],[19,"__c_anonymous_ptrace_syscall_info_data"],[3,"utmpx"],[3,"sigset_t"],[3,"sysinfo"],[3,"msqid_ds"],[3,"semid_ds"],[3,"sigaction"],[3,"statfs"],[3,"flock"],[3,"flock64"],[3,"siginfo_t"],[3,"stack_t"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"seccomp_notif_sizes"],[3,"ptrace_rseq_configuration"],[3,"user_fpregs_struct"],[3,"ucontext_t"],[3,"statvfs"],[3,"max_align_t"],[3,"clone_args"],[3,"sem_t"],[3,"termios2"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_condattr_t"],[3,"fanotify_event_metadata"],[3,"pthread_cond_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"can_frame"],[3,"canfd_frame"],[3,"open_how"],[3,"in6_addr"],[4,"c_void"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"dev_t"],[6,"pid_t"],[6,"c_long"],[6,"uid_t"],[3,"TypeId"]]},\
"once_cell":{"doc":"Overview","t":[0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["race","unsync","OnceBool","OnceBox","OnceNonZeroUsize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","drop","fmt","fmt","fmt","from","from","from","get","get","get","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","into","into","into","new","new","new","set","set","set","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","with_value"],"q":["once_cell","","once_cell::race","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","once_cell::unsync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Thread-safe, non-blocking, “first one wins” flavor of …","Single-threaded version of <code>OnceCell</code>.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the underlying value.","Gets the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","A value which is initialized on the first access.","A cell which can be written to only once. It is not thread …","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets a mutable reference to the underlying value.","Gets the mutable reference to the result of this lazy …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Creates a new initialized cell."],"i":[0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,13,15,13,15,13,13,13,13,15,15,15,13,13,15,15,15,13,13,13,15,13,15,13,15,13,13,13,15,13,15,13,15,13,13,13,13,15,13,13,15,13,15,13],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[1],[[1,4],5],[[2,4],5],[[3,4],5],[[]],[[]],[[]],[1,6],[2,[[6,[7]]]],[3,[[6,[8]]]],[1],[2,7],[3,8],[1,9],[2,[[9,[7]]]],[3,[[9,[8]]]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[1,10],[[9,[10]]]],[[2,7],9],[[3,8],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],11],[[],11],[[],11],0,0,[[]],[[]],[[]],[[]],[[[13,[12]]],[[13,[12]]]],[[[13,[12]],[13,[12]]]],[[]],[[],13],[[],[[15,[14]]]],[[[15,[16]]]],[[[15,[16]]]],[[[13,[17]],[13,[17]]],8],[[[13,[18]],4],5],[[[15,[18]],4],5],[15],[15],[[],13],[19],[[]],[[]],[13,6],[15,6],[13,6],[15,6],[13],[13,9],[[]],[[]],[13,6],[15,9],[[],13],[[],15],[13,9],[13,6],[[]],[[],9],[[],9],[13,9],[[],9],[[],9],[[],11],[[],11],[[],13]],"p":[[3,"OnceBox"],[3,"OnceNonZeroUsize"],[3,"OnceBool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"NonZeroUsize"],[15,"bool"],[4,"Result"],[3,"Box"],[3,"TypeId"],[8,"Clone"],[3,"OnceCell"],[8,"Default"],[3,"Lazy"],[8,"FnOnce"],[8,"PartialEq"],[8,"Debug"],[15,"never"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
