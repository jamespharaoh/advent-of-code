var searchIndex = JSON.parse('{\
"ahash":{"doc":"AHash is a hashing algorithm is intended to be a high …","t":[3,3,3,6,8,6,8,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,11,11,11,11,11,11,11,11,10,11,11,11,11,11,5,11,11,11,11,11,11],"n":["AHashMap","AHashSet","AHasher","HashMap","HashMapExt","HashSet","HashSetExt","RandomState","bitand","bitor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","deref","deref","deref_mut","deref_mut","eq","eq","extend","extend","extend","extend","finish","fmt","fmt","fmt","from","from","from","from","from","from","from","from_iter","from_iter","get","get_key_value","get_mut","index","insert","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","new","new","new","new","random_state","remove","sub","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher","with_hasher","with_hasher","write","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","RandomSource","RandomState","borrow","borrow_mut","build_hasher","clone","clone_into","default","fmt","from","gen_hasher_seed","generate_with","hash_one","hash_one","into","new","set_random_source","to_owned","try_from","try_into","type_id","with_seed","with_seeds"],"q":["ahash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ahash::random_state","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …","A <code>HashSet</code> using <code>RandomState</code> to hash the items. (Requires …","A <code>Hasher</code> for hashing an arbitrary stream of bytes.","Type alias for HashMap&lt;K, V, ahash::RandomState&gt;","A convenience trait that can be used together with the …","Type alias for HashSet&lt;K, ahash::RandomState&gt;","A convenience trait that can be used together with the …","","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>AHashSet&lt;T, S&gt;</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","Constructs a new AHasher with fixed keys. If <code>std</code> is …","","Creates an empty <code>AHashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Examples","Returns the argument unchanged.","Examples","","","","Returns a reference to the value corresponding to the key.","Returns the key-value pair corresponding to the supplied …","Returns a mutable reference to the value corresponding to …","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","","","","Constructs a new HashMap","Constructs a new HashSet","","","","Removes a key from the map, returning the value at the key …","Returns the difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","Constructs a new HashMap with a given initial capacity","Constructs a new HashSet with a given initial capacity","","","","","","","","","","","","","","A supplier of Randomness used for different hashers. See …","Provides a Hasher factory. This is typically used (e.g. by …","","","Constructs a new AHasher with keys based on this …","","","","","Returns the argument unchanged.","","Allows for supplying seeds, but each time it is called the …","Calculates the hash of a single value.","Calculates the hash of a single value.","Calls <code>U::from(self)</code>.","Use randomly generated keys","Provides an optional way to manually supply a source of …","","","","","Allows for explicitly setting a seed to used.","Allows for explicitly setting the seeds to used."],"i":[0,0,0,0,0,0,0,0,1,1,1,2,4,1,2,4,1,2,4,1,2,4,1,2,4,1,4,1,4,1,4,1,4,4,1,1,2,2,4,1,2,4,4,4,1,1,1,4,1,4,4,4,4,4,2,4,4,1,1,4,4,4,1,1,25,26,4,1,0,4,1,2,4,1,2,4,1,2,4,1,2,4,1,25,26,4,1,4,1,4,1,2,2,2,2,2,2,2,0,0,5,5,5,5,5,5,5,5,22,5,5,5,5,5,0,5,5,5,5,5,5],"f":[0,0,0,0,0,0,0,0,[[1,1],1],[[1,1],1],[[1,1],1],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[[[4,[3,3,3]]],[[4,[3,3,3]]]],[[[1,[3,3]]],[[1,[3,3]]]],[[]],[[]],[[]],[[],2],[[],[[4,[5]]]],[[],[[1,[5]]]],[4],[1],[4],[1],[[4,4],6],[[1,1],6],[[4,7]],[[4,7]],[[1,7]],[[1,7]],[2,8],[[2,9],10],[[4,9],10],[[1,9],10],[[]],[[[11,[5]]],4],[[]],[[],4],[[]],[[],1],[[[12,[5]]],1],[7,4],[7,1],[4,13],[4,13],[4,13],[4],[4,13],[[]],[[]],[4,[[11,[5]]]],[1,[[12,[5]]]],[[]],[4],[4],[4],[1],[1],[[]],[[]],[[],[[4,[5]]]],[[],[[1,[5]]]],0,[4,13],[[1,1],1],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[16],[16],[16,[[4,[5]]]],[16,[[1,[5]]]],[16,4],[16,1],[[],4],[[],1],[2],[[2,17]],[[2,18]],[[2,19]],[[2,8]],[[2,20]],[[2,16]],0,0,[[]],[[]],[5,2],[5,5],[[]],[[],5],[[5,9],10],[[]],[[],16],[[8,8,8,8],5],[[5,21],8],[[5,21],8],[[]],[[],5],[[[0,[22,23,24]]],[[14,[6]]]],[[]],[[],14],[[],14],[[],15],[16,5],[[8,8,8,8],5]],"p":[[3,"AHashSet"],[3,"AHasher"],[8,"Clone"],[3,"AHashMap"],[3,"RandomState"],[15,"bool"],[8,"IntoIterator"],[15,"u64"],[3,"Formatter"],[6,"Result"],[3,"HashMap"],[3,"HashSet"],[4,"Option"],[4,"Result"],[3,"TypeId"],[15,"usize"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u8"],[8,"Hash"],[8,"RandomSource"],[8,"Send"],[8,"Sync"],[8,"HashMapExt"],[8,"HashSetExt"]]},\
"aoc":{"doc":"Advent of Code solutions by James Pharaoh","t":[2,2,2,2,2,2],"n":["common","year_2015","year_2016","year_2017","year_2018","year_2021"],"q":["aoc","","","","",""],"d":["","","","","",""],"i":[0,0,0,0,0,0],"f":[0,0,0,0,0,0],"p":[]},\
"aoc_2015":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5],"n":["day_01","day_02","day_03","day_04","day_05","day_06","day_07","day_08","day_09","day_10","day_11","day_12","day_13","day_14","day_15","day_16","day_17","day_18","day_19","day_20","day_21","day_22","day_23","day_24","day_25","puzzle_metadata"],"q":["aoc_2015","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[3,[[2,[1]]]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Vec"]]},\
"aoc_2015_day_01":{"doc":"Advent of Code 2015: Day 1: Not Quite Lisp","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","dirs","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Dir","Down","Up","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","from","from_parser","into","to_owned","to_string","try_from","try_into","type_id","val"],"q":["aoc_2015_day_01","","","","aoc_2015_day_01::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_01::logic","","aoc_2015_day_01::model","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,[[]],[[]],[15,15],[[]],[[15,15],16],[[],16],[[15,5],6],[[15,5],6],[[]],[7,[[8,[15]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12],[15,13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i32"],[15,"usize"],[4,"Dir"],[15,"bool"]]},\
"aoc_2015_day_02":{"doc":"Advent of Code 2015: Day 2: I Was Told There Would Be No …","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","sizes","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Dim"],"q":["aoc_2015_day_02","","","","aoc_2015_day_02::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_02::logic","","aoc_2015_day_02::model"],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Dim"]]},\
"aoc_2015_day_03":{"doc":"Advent of Code 2015: Day 3: Perfectly Spherical Houses in …","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","moves","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Dir","Pos"],"q":["aoc_2015_day_03","","","","aoc_2015_day_03::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_03::logic","","aoc_2015_day_03::model",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2015_day_04":{"doc":"Advent of Code 2015: Day 4: The Ideal Stocking Stuffer","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5],"n":["cli","input","logic","puzzle_metadata","FindTestCaseArgs","RunArgs","augment_args","augment_args","augment_args_for_update","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","find_test_case","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","into","into","into_app","into_app","into_app_for_update","into_app_for_update","run","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_threads","num_zeros_one","num_zeros_two","params","parse","seed","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","calc_result","part_one","part_two"],"q":["aoc_2015_day_04","","","","aoc_2015_day_04::cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_04::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_04::logic","",""],"d":["","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,7,4,7,4,7,4,7,4,4,4,0,7,4,7,4,7,4,7,4,7,4,7,4,0,4,7,4,7,4,7,4,7,4,7,4,0,0,11,12,11,12,11,12,11,12,12,11,11,12,12,11,12,11,12,11,12,12,12,12,11,12,11,11,12,11,12,11,12,11,12,11,12,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[3,3],[3,3],[3,3],[3,3],[[]],[[]],[[]],[[]],[4,4],[[]],[4,5],[[]],[[]],[6,[[9,[7,8]]]],[6,[[9,[4,8]]]],[6,[[9,[7,8]]]],[6,[[9,[4,8]]]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[7,5],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[7,6],[[9,[8]]]],[[4,6],[[9,[8]]]],[[7,6],[[9,[8]]]],[[4,6],[[9,[8]]]],0,0,[[]],[[]],[[]],[[]],[11,11],[12,12],[[]],[[]],[[],12],[[11,13],14],[[11,13],14],[[12,13],14],[[12,13],14],[[]],[[]],[15,[[16,[11]]]],[15,[[16,[12]]]],[[]],[[]],0,0,0,0,[[],[[5,[12]]]],0,[[]],[[]],[[],17],[[],17],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[11,18],[[5,[18]]]],[11,[[5,[18]]]],[11,[[5,[18]]]]],"p":[[8,"Puzzle"],[3,"Box"],[6,"Command"],[3,"FindTestCaseArgs"],[6,"GenResult"],[3,"ArgMatches"],[3,"RunArgs"],[3,"Error"],[4,"Result"],[3,"TypeId"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[3,"String"],[15,"u32"]]},\
"aoc_2015_day_05":{"doc":"Advent of Code 2015: Day 5: Doesn’t He Have Intern-Elves …","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","strings","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2015_day_05","","","aoc_2015_day_05::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_05::logic",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2015_day_06":{"doc":"Advent of Code 2015: Day 6: Probably a Fire Hazard","t":[0,0,0,5,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,5,5,4,6,13,13,6,3,3,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","InputStep","action","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","origin","params","parse","peak","steps","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ModeFn","part_one","part_two","Action","Coord","Off","On","Pos","Step","Steps","Toggle","action","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref_mut","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_parser","into","into","into","origin","peak","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["aoc_2015_day_06","","","","aoc_2015_day_06::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_06::logic","","","aoc_2015_day_06::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,4,3,4,5,3,4,5,3,4,5,3,4,5,5,4,4,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,4,3,5,4,3,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,0,0,19,19,0,0,0,19,18,16,18,19,16,18,19,16,16,18,19,16,18,19,16,16,18,19,18,19,16,18,19,19,16,18,19,19,16,18,19,18,18,16,18,19,19,16,18,19,16,18,19,16,18,19],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[[4,4],6],[[],6],[[3,7],8],[[3,7],8],[[4,7],8],[[4,7],8],[[5,7],8],[[5,7],8],[[]],[[]],[[]],[9,[[10,[3]]]],[9,[[10,[4]]]],[9,[[10,[5]]]],[[]],[[]],[[]],0,0,[[],[[11,[5]]]],0,0,[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],0,[3,[[11,[15]]]],[3,[[11,[15]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,[[17,[16]]]],[16,16],[18,18],[19,19],[[]],[[]],[[]],[16,20],[16,20],[[18,18],6],[[19,19],6],[[],6],[[],6],[[16,7],8],[[18,7],8],[[19,7],8],[[19,7],8],[[]],[[]],[[]],[9,[[10,[19]]]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputStep"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Steps"],[6,"NumResult"],[3,"Step"],[4,"Action"],[3,"Vec"]]},\
"aoc_2015_day_07":{"doc":"Advent of Code 2015: Day 7: Some Assembly Required","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,5,5,13,13,13,13,13,13,13,3,13,3,4,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","wires","part_one","part_two","And","AndOne","LeftShift","Not","Or","RightShift","Static","Wire","Wire","WireId","WireInput","WireVal","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","deref","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","hash","id","input","inputs","into","into","into","partial_cmp","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0","0","0","0","0","0","1","1","1","1"],"q":["aoc_2015_day_07","","","","aoc_2015_day_07::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_07::logic","","aoc_2015_day_07::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_07::model::WireInput","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,0,0,16,16,16,16,16,16,16,0,16,0,0,0,14,15,16,14,15,16,14,15,16,14,15,16,15,15,15,15,14,14,15,15,16,16,14,15,16,14,15,16,15,14,14,16,14,15,16,15,14,15,16,14,15,16,14,15,15,16,14,15,16,14,15,16,23,24,25,26,27,28,29,30,25,26,27,28],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[15,15],[16,16],[[]],[[]],[[]],[[15,15],17],[15,18],[[15,15],19],[[],19],[[14,5],6],[[14,5],6],[[15,5],6],[[15,5],6],[[16,5],6],[[16,5],6],[[]],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[15]]]],[7,[[8,[16]]]],[15],0,0,[16,[[20,[15]]]],[[]],[[]],[[]],[[15,15],[[21,[17]]]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],11],[[],11],[22,[[9,[15]]]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],0,0,0,0,0,0,0,0,0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u16"],[3,"Wire"],[3,"WireId"],[4,"WireInput"],[4,"Ordering"],[4,"InpStr"],[15,"bool"],[3,"ArrayVec"],[4,"Option"],[15,"str"],[13,"Not"],[13,"AndOne"],[13,"And"],[13,"Or"],[13,"LeftShift"],[13,"RightShift"],[13,"Static"],[13,"Wire"]]},\
"aoc_2015_day_08":{"doc":"Advent of Code 2015: Day 8: Matchsticks","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","strings","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2015_day_08","","","aoc_2015_day_08::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_08::logic",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"usize"]]},\
"aoc_2015_day_09":{"doc":"Advent of Code 2015: Day 9: All in a Single Night","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,3,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","dists","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Dist","DistTable","borrow","borrow_mut","build","deref","deref_mut","from","into","try_from","try_into","type_id"],"q":["aoc_2015_day_09","","","","aoc_2015_day_09::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_09::logic","","aoc_2015_day_09::model","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,[[]],[[]],[3,14],[14,15],[14,15],[[]],[[]],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"DistTable"],[3,"PairsMap"]]},\
"aoc_2015_day_10":{"doc":"Advent of Code 2015: Day 10: Elves Look, Elves Say","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","initial","into","into","num_iters_one","num_iters_two","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","one_round","part_one","part_two","State","borrow","borrow","borrow_mut","clone","clone_into","cmp","deref","eq","equivalent","fmt","fmt","from","from_iter","hash","into","iter","parse","partial_cmp","to_owned","to_string","try_from","try_from","try_into","type_id"],"q":["aoc_2015_day_10","","","","aoc_2015_day_10::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_10::logic","","","aoc_2015_day_10::model","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[13,13],[3,[[9,[14]]]],[3,[[9,[14]]]],0,[13],[[]],[[]],[13,13],[[]],[[13,13],15],[13,16],[[13,13],17],[[],17],[[13,5],6],[[13,5],6],[[]],[[],13],[13],[[]],[13,[[19,[18]]]],[20,[[9,[13]]]],[[13,13],[[21,[15]]]],[[]],[[],10],[[],11],[[[16,[18]]],[[9,[13]]]],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"State"],[15,"u32"],[4,"Ordering"],[3,"Vec"],[15,"bool"],[15,"u8"],[3,"Iter"],[15,"str"],[4,"Option"]]},\
"aoc_2015_day_11":{"doc":"Advent of Code 2015: Day 11: Corporate Policy","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","initial","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","find_pair","is_valid","next_password","part_one","part_two"],"q":["aoc_2015_day_11","","","aoc_2015_day_11::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_11::logic","","","",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],13],[[],14],[15,[[9,[10]]]],[3,[[9,[10]]]],[3,[[9,[10]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[4,"Option"],[15,"bool"],[15,"str"]]},\
"aoc_2015_day_12":{"doc":"Advent of Code 2015: Day 12: JSAbacusFramework.io","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,13,4,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","json","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Array","Json","Number","Object","String","Val","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","from_parser","into","to_owned","to_string","try_from","try_into","type_id","0","0","0","0"],"q":["aoc_2015_day_12","","","","aoc_2015_day_12::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_12::logic","","aoc_2015_day_12::model","","","","","","","","","","","","","","","","","","","","aoc_2015_day_12::model::Json","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,0,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,16,17,18],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[4,"Json"],[13,"Array"],[13,"Object"],[13,"Number"],[13,"String"]]},\
"aoc_2015_day_13":{"doc":"Advent of Code 2015: Day 13: Knights of the Dinner Table","t":[0,0,0,5,4,13,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","DiffSign","Gain","Input","InputParams","Lose","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","pairs","params","parse","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","HappinessTable","borrow","borrow_mut","build","deref","deref_mut","from","into","try_from","try_into","type_id"],"q":["aoc_2015_day_13","","","","aoc_2015_day_13::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_13::logic","","aoc_2015_day_13::model","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","",""],"i":[0,0,0,0,0,4,0,0,4,3,4,5,3,4,5,3,4,5,3,4,5,5,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,3,3,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[8,[[9,[5]]]],[[]],[[]],[[]],0,0,[[],[[10,[5]]]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]],0,[[]],[[]],[[],[[10,[15]]]],[15,16],[15,16],[[]],[[]],[[],12],[[],12],[[],13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[4,"DiffSign"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i32"],[3,"HappinessTable"],[3,"PairsMap"]]},\
"aoc_2015_day_14":{"doc":"Advent of Code 2015: Day 14: Reindeer Olympics","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,12,12,11,11,11,11,11,12,12,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deers","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","race_time","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Reindeer","borrow","borrow_mut","clone","clone_into","fly_speed","fly_time","fmt","fmt","from","from_parser","into","name","rest_time","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2015_day_14","","","","aoc_2015_day_14::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_14::logic","","aoc_2015_day_14::model","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,[[]],[[]],[14,14],[[]],0,0,[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],0,0,[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[3,"Reindeer"]]},\
"aoc_2015_day_15":{"doc":"Advent of Code 2015: Day 15: Science for Hungry People","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","ingrs","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","check_input","iter_recipes","part_one","part_two","Ingredient","Recipe","add_ingrs","borrow","borrow","borrow_mut","borrow_mut","calories","clone","clone","clone_into","clone_into","cmp","default","eq","equivalent","fmt","fmt","fmt","from","from","from_parser","hash","ingrs","into","into","name","num_ingrs","partial_cmp","score","stats","stats","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2015_day_15","","","","aoc_2015_day_15::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_15::logic","","","","aoc_2015_day_15::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Validate extra conditions on the input.","Iterate through all recipes containing exactly 100 …","Part one: Find the combination of ingredients which gives …","Part two: Find the combination of ingredients which gives …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,15,19,15,19,15,15,19,15,19,15,19,15,19,19,19,19,15,19,15,19,19,15,19,15,19,15,19,15,19,15,19,15,19,19,15,19,15,19,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,9],[3,13],[3,[[9,[14]]]],[3,[[9,[14]]]],0,0,[[15,16,17],9],[[]],[[]],[[]],[[]],[15,18],[19,19],[15,15],[[]],[[]],[[19,19],20],[[],15],[[19,19],21],[[],21],[[19,5],6],[[19,5],6],[[15,5],6],[[]],[[]],[7,[[8,[19]]]],[19],0,[[]],[[]],0,0,[[19,19],[[22,[20]]]],[15,[[23,[14]]]],0,0,[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Iterator"],[15,"u64"],[3,"Recipe"],[15,"usize"],[15,"i8"],[15,"i32"],[3,"Ingredient"],[4,"Ordering"],[15,"bool"],[4,"Option"],[6,"NumResult"]]},\
"aoc_2015_day_16":{"doc":"Advent of Code 2015: Day 16: Aunt Sue","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,13,4,3,13,13,13,13,13,13,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","sues","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","calc_result","part_one","part_two","Akitas","Attr","AuntSue","Cars","Cats","Children","Goldfish","Perfumes","Pomeranians","Samoyeds","Trees","Vizslas","attrs","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","number","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2015_day_16","","","","aoc_2015_day_16::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_16::logic","","","aoc_2015_day_16::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles.","Representation of the puzzle input, etc.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,15,0,0,15,15,15,15,15,15,15,15,15,14,14,15,14,15,14,15,14,15,14,15,14,15,14,14,15,15,14,15,14,15,14,15,14,14,15,14,15,14,15,14,15,14,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[14,14],[15,15],[[]],[[]],[[14,14],16],[[15,15],16],[[],16],[[],16],[[14,5],6],[[14,5],6],[[15,5],6],[[15,5],6],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[15]]]],[[]],[[]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u16"],[3,"AuntSue"],[4,"Attr"],[15,"bool"]]},\
"aoc_2015_day_17":{"doc":"Advent of Code 2015: Day 17: No Such Thing as Too Much","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,5,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","sizes","target","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","combos","part_one","part_two"],"q":["aoc_2015_day_17","","","aoc_2015_day_17::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_17::logic","",""],"d":["","Logic for solving the puzzles.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Iterate over combinations of provided container given a …","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,13],[3,[[9,[14]]]],[3,[[9,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Iterator"],[15,"u32"]]},\
"aoc_2015_day_18":{"doc":"Advent of Code 2015: Day 18: Like a GIF For Your Yard","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,4,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","num_steps","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Grid","Light","Off","On","Pos","borrow","borrow_mut","clone","clone_into","cmp","default","eq","equivalent","fmt","fmt","from","from_parser","hash","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2015_day_18","","","","aoc_2015_day_18::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_18::logic","","aoc_2015_day_18::model","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles.","Representation of the puzzle input, etc.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[],14],[[14,14],16],[[],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[17,[15]]]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Light"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2015_day_19":{"doc":"Advent of Code 2015: Day 19: Medicine for Rudolph","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","medicine","params","parse","replacements","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2015_day_19","","","aoc_2015_day_19::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_19::logic",""],"d":["","Logic for solving the puzzles.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2015_day_20":{"doc":"Advent of Code 2015: Day 20: Infinite Elves and Infinite …","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","target","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","calc_result","part_one","part_two","Val"],"q":["aoc_2015_day_20","","","","aoc_2015_day_20::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_20::logic","","","aoc_2015_day_20::model"],"d":["","Logic for solving the puzzles.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[13,13,13],[[14,[13]]]],[3,[[9,[13]]]],[3,[[9,[13]]]],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[6,"NumResult"]]},\
"aoc_2015_day_21":{"doc":"Advent of Code 2015: Day 21: RPG Simulator 20XX","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,3,12,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","stats","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Stats","armor","borrow","borrow_mut","clone","clone_into","damage","fmt","fmt","from","from_parser","hit_points","into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2015_day_21","","","","aoc_2015_day_21::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_21::logic","","aoc_2015_day_21::model","","","","","","","","","","","","","","","","",""],"d":["Data structures to model the puzzle input","Logic for solving the puzzles.","Data structures and types","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,[[]],[[]],[14,14],[[]],0,[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],0,[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Stats"]]},\
"aoc_2015_day_22":{"doc":"Advent of Code 2015: Day 22: Wizard Simulator 20XX","t":[0,0,0,5,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,3,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","boss","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Boss","Player","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","damage","default","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from_parser","hash","hash","hit_points","hit_points","into","into","mana","partial_cmp","partial_cmp","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2015_day_22","","","","aoc_2015_day_22::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_22::logic","","aoc_2015_day_22::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Data structures to model the puzzle input","Logic for solving the puzzles.","Representation of the puzzle input, etc.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,14,15,14,15,14,15,14,15,14,15,15,14,14,15,14,15,14,15,15,14,15,15,14,15,14,15,14,15,14,14,15,14,15,15,14,15,14,15,14,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],0,[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,[[]],[[]],[[]],[[]],[14,14],[15,15],[[]],[[]],[[14,14],16],[[15,15],16],0,[[],14],[[14,14],17],[[15,15],17],[[],17],[[],17],[[14,5],6],[[15,5],6],[[15,5],6],[[]],[[]],[7,[[8,[15]]]],[14],[15],0,0,[[]],[[]],0,[[14,14],[[18,[16]]]],[[15,15],[[18,[16]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u16"],[3,"Player"],[3,"Boss"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2015_day_23":{"doc":"Advent of Code 2015: Day 23: Opening the Turing Lock","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,13,13,13,13,4,13,13,13,6,4,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","A","B","Hlf","Inc","Instr","Jie","Jio","Jmp","Offset","Reg","Tpl","Val","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","1","1"],"q":["aoc_2015_day_23","","","","aoc_2015_day_23::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_23::logic","","aoc_2015_day_23::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_23::model::Instr","","","","","","",""],"d":["Data structures to model the puzzle input","Logic for solving the puzzles.","Representation of the puzzle input, etc.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,15,15,14,14,0,14,14,14,0,0,14,0,14,15,14,15,14,15,14,15,14,15,14,15,14,14,15,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,17,18,19,20,21,22,21,22],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[14,14],[15,15],[[]],[[]],[[14,14],16],[[15,15],16],[[],16],[[],16],[[14,5],6],[[14,5],6],[[15,5],6],[[15,5],6],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[15]]]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,0,0,0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[4,"Instr"],[4,"Reg"],[15,"bool"],[13,"Hlf"],[13,"Tpl"],[13,"Inc"],[13,"Jmp"],[13,"Jie"],[13,"Jio"]]},\
"aoc_2015_day_24":{"doc":"Advent of Code 2015: Day 24: It Hangs in the Balance","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","weights","part_one","part_two"],"q":["aoc_2015_day_24","","","aoc_2015_day_24::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_24::logic",""],"d":["Data structures to model the puzzle input","Logic for solving the puzzles.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"]]},\
"aoc_2015_day_25":{"doc":"Advent of Code 2015: Day 25: Let It Snow","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","col","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","row","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one"],"q":["aoc_2015_day_25","","","aoc_2015_day_25::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2015_day_25::logic"],"d":["Data structures to model the puzzle input","Logic for solving the puzzles.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"]]},\
"aoc_2016":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5],"n":["day_01","day_02","day_03","day_04","day_05","day_06","day_07","day_08","day_09","day_10","day_11","day_12","day_13","day_14","day_15","day_16","day_17","day_18","day_19","day_20","day_21","day_22","day_23","day_24","day_25","puzzle_metadata"],"q":["aoc_2016","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[3,[[2,[1]]]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Vec"]]},\
"aoc_2016_cpu":{"doc":"Advent of Code 2016: CPU","t":[4,3,13,13,13,13,4,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12],"n":["Arg","Cpu","Cpy","Dec","Imm","Inc","Instr","Jnz","Out","RegA","RegB","RegC","RegD","Tgl","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","eq","equivalent","equivalent","exec","fmt","fmt","from","from","from","from_parser","from_parser","instrs","into","into","into","is_reg","is_v1","is_v2","is_v3","limit","next","reg_a","reg_b","reg_c","reg_d","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0","0","0","0","0","1","1"],"q":["aoc_2016_cpu","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_cpu::Arg","aoc_2016_cpu::Instr","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,2,1,0,1,1,2,2,2,2,1,3,1,2,3,1,2,1,2,1,2,3,1,2,1,2,3,1,2,3,1,2,1,2,3,3,1,2,2,1,1,1,3,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,14,15,16,17,18,19,20,15,18],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[],3],[[1,1],4],[[2,2],4],[[],4],[[],4],[3,[[7,[[6,[5]]]]]],[[1,8],9],[[2,8],9],[[]],[[]],[[]],[10,[[11,[1]]]],[10,[[11,[2]]]],0,[[]],[[]],[[]],[2,4],[1,4],[1,4],[1,4],0,0,0,0,0,0,[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],0,0,0,0,0,0,0,0,0],"p":[[4,"Instr"],[4,"Arg"],[3,"Cpu"],[15,"bool"],[15,"i32"],[4,"Option"],[6,"GenResult"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[4,"Result"],[3,"TypeId"],[13,"Imm"],[13,"Cpy"],[13,"Inc"],[13,"Dec"],[13,"Jnz"],[13,"Tgl"],[13,"Out"]]},\
"aoc_2016_day_01":{"doc":"Advent of Code 2016: Day 1: No Time for a Taxicab","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,5,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","steps","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","iter_posns","part_one","part_two","Coord","Dir","Pos","Turn"],"q":["aoc_2016_day_01","","","","aoc_2016_day_01::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_01::logic","","","aoc_2016_day_01::model","","",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,13],[3,[[9,[14]]]],[3,[[9,[14]]]],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Iterator"],[15,"u32"]]},\
"aoc_2016_day_02":{"doc":"Advent of Code 2016: Day 2: Bathroom Security","t":[0,0,0,5,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,3,6,6,6,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","buttons","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Button","Coord","Dir","Pos","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","from_parser","into","steps","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2016_day_02","","","","aoc_2016_day_02::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_02::logic","","aoc_2016_day_02::model","","","","","","","","","","","","","","","","","",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],0,[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[10]]]],0,0,0,0,[[]],[[]],[13,13],[[]],[[13,5],6],[[13,5],6],[[]],[7,[[8,[13]]]],[[]],0,[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Button"]]},\
"aoc_2016_day_03":{"doc":"Advent of Code 2016: Day 3: Squares With Three Sides","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,5,5,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","triangles","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Side","Triangle"],"q":["aoc_2016_day_03","","","","aoc_2016_day_03::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_03::logic","","aoc_2016_day_03::model",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],0,[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"usize"]]},\
"aoc_2016_day_04":{"doc":"Advent of Code 2016: Day 4: Security Through Obscurity","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","rooms","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Room","borrow","borrow_mut","checksum","clone","clone_into","eq","equivalent","fmt","fmt","from","from_parser","into","name","sector","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2016_day_04","","","","aoc_2016_day_04::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_04::logic","","aoc_2016_day_04::model","","","","","","","","","","","","","","","","","","",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,[[]],[[]],0,[14,14],[[]],[[14,14],15],[[],15],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],0,0,[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Room"],[15,"bool"]]},\
"aoc_2016_day_05":{"doc":"Advent of Code 2016: Day 5: How About a Nice Game of Chess?","t":[0,0,5,3,3,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","batch_size","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","door_id","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_threads","num_zeros","params","parse","password_len","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2016_day_05","","","aoc_2016_day_05::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_05::logic",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,4,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,4,4,3,4,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[10]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_06":{"doc":"Advent of Code 2016: Day 6: Signals and Noise","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","lines","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","calc_result","part_one","part_two"],"q":["aoc_2016_day_06","","","aoc_2016_day_06::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_06::logic","",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],[[9,[10]]]],[3,[[9,[10]]]],[3,[[9,[10]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_07":{"doc":"Advent of Code 2016: Day 7: Internet Protocol Version 7","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","lines","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2016_day_07","","","aoc_2016_day_07::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_07::logic",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"usize"]]},\
"aoc_2016_day_08":{"doc":"Advent of Code 2016: Day 8: Two-Factor Authentication","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,12,5,5,6,6,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","height","into","into","params","parse","steps","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","width","part_one","part_two","Coord","Pos","Rect","RotateCol","RotateRow","Step","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","fmt","from","from_parser","hash","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id","col","dist","dist","height","row","width"],"q":["aoc_2016_day_08","","","","aoc_2016_day_08::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_08::logic","","aoc_2016_day_08::model","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_08::model::Step","","","","",""],"d":["Data structures to model the puzzle input","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,4,0,0,0,0,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,18,19,18,20,19,20],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[3,[[9,[13]]]],[3,[[9,[10]]]],0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[14,14],16],[[],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[17,[15]]]],[[]],[[],10],[[],11],[[],11],[[],12],0,0,0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"usize"],[4,"Step"],[4,"Ordering"],[15,"bool"],[4,"Option"],[13,"RotateCol"],[13,"RotateRow"],[13,"Rect"]]},\
"aoc_2016_day_09":{"doc":"Advent of Code 2016: Day 9: Explosives in Cyberspace","t":[0,5,5,5],"n":["logic","puzzle_metadata","part_one","part_two"],"q":["aoc_2016_day_09","","aoc_2016_day_09::logic",""],"d":["","","",""],"i":[0,0,0,0],"f":[0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]]],"p":[[8,"Puzzle"],[3,"Box"],[15,"str"],[15,"usize"],[6,"GenResult"]]},\
"aoc_2016_day_10":{"doc":"Advent of Code 2016: Day 10: Balance Bots","t":[0,0,5,5,5,13,13,3,13,13,4,4,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12],"n":["logic","model","puzzle_metadata","part_one","part_two","Bot","Give","Input","Input","Output","Step","Target","Val","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from_parser","from_parser","high","into","into","into","low","parse","steps","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","bot","bot","high","low","val","0","0"],"q":["aoc_2016_day_10","","","aoc_2016_day_10::logic","","aoc_2016_day_10::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_10::model::Step","","","","","aoc_2016_day_10::model::Target",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,8,7,0,7,8,0,0,0,3,7,8,3,7,8,3,7,8,3,7,8,3,3,7,8,3,7,8,3,7,8,3,7,8,7,8,3,3,7,8,3,3,3,3,7,8,3,7,8,3,7,8,3,7,8,16,17,17,17,16,18,19],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[6]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[7,7],[8,8],[[]],[[]],[[]],[[],3],[[3,3],9],[[7,7],9],[[8,8],9],[[],9],[[],9],[[],9],[[3,10],11],[[7,10],11],[[8,10],11],[[]],[[]],[[]],[12,[[13,[7]]]],[12,[[13,[8]]]],0,[[]],[[]],[[]],0,[[],[[5,[3]]]],0,[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],0,0,0,0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[6,"Val"],[6,"GenResult"],[15,"u64"],[4,"Step"],[4,"Target"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[4,"Result"],[3,"TypeId"],[13,"Input"],[13,"Give"],[13,"Bot"],[13,"Output"]]},\
"aoc_2016_day_11":{"doc":"Advent of Code 2016: Day 11: Radioisotope Thermoelectric …","t":[0,0,5,5,5,4,13,3,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["logic","model","puzzle_metadata","part_one","part_two","Component","Generator","Input","Microchip","Val","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","eq","eq","equivalent","equivalent","floors","fmt","fmt","from","from","from_parser","into","into","parse","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0"],"q":["aoc_2016_day_11","","","aoc_2016_day_11::logic","","aoc_2016_day_11::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_11::model::Component",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,6,0,6,0,3,6,3,6,3,6,3,6,3,3,6,3,6,3,3,6,3,6,6,3,6,3,3,6,3,6,3,6,3,6,14,15],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[3,3],[6,6],[[]],[[]],[[],3],[[3,3],7],[[6,6],7],[[],7],[[],7],0,[[3,8],9],[[6,8],9],[[]],[[]],[10,[[11,[6]]]],[[]],[[]],[[],[[5,[3]]]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"usize"],[6,"GenResult"],[4,"Component"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[4,"Result"],[3,"TypeId"],[13,"Generator"],[13,"Microchip"]]},\
"aoc_2016_day_12":{"doc":"Advent of Code 2016: Day 12: Leonardo’s Monorail","t":[0,0,5,5,5,3,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11],"n":["logic","model","puzzle_metadata","part_one","part_two","Input","borrow","borrow_mut","clone","clone_into","default","eq","equivalent","fmt","from","instrs","into","ops_limit","parse","to_owned","try_from","try_into","type_id"],"q":["aoc_2016_day_12","","","aoc_2016_day_12::logic","","aoc_2016_day_12::model","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,[[]],[[]],[3,3],[[]],[[],3],[[3,3],6],[[],6],[[3,7],8],[[]],0,[[]],0,[[],[[5,[3]]]],[[]],[[],9],[[],9],[[],10]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"i32"],[6,"GenResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_13":{"doc":"Advent of Code 2016: Day 13: A Maze of Twisty Little …","t":[0,0,5,5,5,6,3,6,11,11,11,11,12,11,12,11,11,11,11,11,12,11,12,12,11,11,11,11],"n":["logic","model","puzzle_metadata","part_one","part_two","Coord","Input","Pos","borrow","borrow_mut","clone","clone_into","count_dist","default","end","eq","equivalent","fmt","from","into","max_dist","parse","seed","start","to_owned","try_from","try_into","type_id"],"q":["aoc_2016_day_13","","","aoc_2016_day_13::logic","","aoc_2016_day_13::model","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,0,0,[[]],[[]],[3,3],[[]],0,[[],3],0,[[3,3],6],[[],6],[[3,7],8],[[]],[[]],0,[[],[[5,[3]]]],0,0,[[]],[[],9],[[],9],[[],10]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"u32"],[6,"GenResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_14":{"doc":"Advent of Code 2016: Day 14: One-Time Pad","t":[0,0,5,5,5,3,11,11,11,11,11,11,11,11,11,12,11,12,12,12,11,12,11,11,11,11],"n":["logic","model","puzzle_metadata","part_one","part_two","Input","borrow","borrow_mut","clone","clone_into","default","eq","equivalent","fmt","from","hash_reps","into","max_threads","num_keys","num_next","parse","salt","to_owned","try_from","try_into","type_id"],"q":["aoc_2016_day_14","","","aoc_2016_day_14::logic","","aoc_2016_day_14::model","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,[[]],[[]],[3,3],[[]],[[],3],[[3,3],6],[[],6],[[3,7],8],[[]],0,[[]],0,0,0,[[],[[5,[3]]]],0,[[]],[[],9],[[],9],[[],10]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"u32"],[6,"GenResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_15":{"doc":"Advent of Code 2016: Day 15: Timing is Everything","t":[0,0,5,5,5,3,3,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11],"n":["logic","model","puzzle_metadata","part_one","part_two","Disc","Input","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","delay","discs","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from_parser","into","into","num_posns","parse","start_pos","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2016_day_15","","","aoc_2016_day_15::logic","","aoc_2016_day_15::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","Implementation for part one","Implementation for part two","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,6,3,6,3,6,3,6,3,6,6,3,3,6,3,6,3,6,3,6,6,3,6,6,3,6,3,6,3,6,3,6,3,6],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[6,6],[[]],[[]],[[],3],[[],6],0,0,[[3,3],7],[[6,6],7],[[],7],[[],7],[[3,8],9],[[6,8],9],[[]],[[]],[10,[[11,[6]]]],[[]],[[]],0,[[],[[5,[3]]]],0,[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"u64"],[6,"GenResult"],[3,"Disc"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_16":{"doc":"Advent of Code 2016: Day 16: Dragon Checksum","t":[0,0,5,5,5,4,3,13,13,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11],"n":["logic","model","puzzle_metadata","part_one","part_two","Bit","Input","One","Zero","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","disk_size_one","disk_size_two","eq","eq","equivalent","equivalent","fmt","fmt","from","from","initial_state","into","into","parse","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2016_day_16","","","aoc_2016_day_16::logic","","aoc_2016_day_16::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,6,6,3,6,3,6,3,6,3,6,3,3,3,3,6,3,6,3,6,3,6,3,3,6,3,3,6,3,6,3,6,3,6],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,0,0,0,[[]],[[]],[[]],[[]],[3,3],[6,6],[[]],[[]],[[],3],0,0,[[3,3],7],[[6,6],7],[[],7],[[],7],[[3,8],9],[[6,8],9],[[]],[[]],0,[[]],[[]],[[],[[5,[3]]]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"String"],[6,"GenResult"],[4,"Bit"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_17":{"doc":"Advent of Code 2016: Day 17: Two Steps Forward","t":[0,0,5,5,5,6,3,6,11,11,11,11,12,11,11,11,11,11,11,12,12,12,11,11,11,11],"n":["logic","model","puzzle_metadata","part_one","part_two","Dir","Input","Pos","borrow","borrow_mut","clone","clone_into","end","eq","equivalent","fmt","from","into","parse","passcode","size","start","to_owned","try_from","try_into","type_id"],"q":["aoc_2016_day_17","","","aoc_2016_day_17::logic","","aoc_2016_day_17::model","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[6]]]],0,0,0,[[]],[[]],[3,3],[[]],0,[[3,3],7],[[],7],[[3,8],9],[[]],[[]],[[],[[5,[3]]]],0,0,0,[[]],[[],10],[[],10],[[],11]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"String"],[6,"GenResult"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_18":{"doc":"Advent of Code 2016: Day 18: Like a Rogue","t":[0,0,5,5,5,3,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11],"n":["logic","model","puzzle_metadata","part_one","part_two","Input","Safe","Tile","Trap","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","first_row","fmt","fmt","from","from","hash","into","into","num_rows_one","num_rows_two","parse","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2016_day_18","","","aoc_2016_day_18::logic","","aoc_2016_day_18::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,6,0,6,3,6,3,6,3,6,3,6,3,6,3,6,3,3,6,3,6,6,3,6,3,3,3,3,6,3,6,3,6,3,6],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,0,0,0,[[]],[[]],[[]],[[]],[3,3],[6,6],[[]],[[]],[[3,3],7],[[6,6],7],[[],7],[[],7],0,[[3,8],9],[[6,8],9],[[]],[[]],[6],[[]],[[]],0,0,[[],[[5,[3]]]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"u32"],[6,"GenResult"],[4,"Tile"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_19":{"doc":"Advent of Code 2016: Day 19: An Elephant Named Joseph","t":[0,0,5,5,5,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11],"n":["logic","model","puzzle_metadata","part_one","part_two","Input","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","into","num_elves","parse","to_owned","try_from","try_into","type_id"],"q":["aoc_2016_day_19","","","aoc_2016_day_19::logic","","aoc_2016_day_19::model","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,[[]],[[]],[3,3],[[]],[[3,3],6],[[],6],[[3,7],8],[[]],[[]],0,[[],[[5,[3]]]],[[]],[[],9],[[],9],[[],10]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"u32"],[6,"GenResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_20":{"doc":"Advent of Code 2016: Day 20: Firewall Rules","t":[0,0,5,5,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11],"n":["logic","model","puzzle_metadata","part_one","part_two","Input","Rule","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","end","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from_parser","into","into","parse","partial_cmp","rules","start","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2016_day_20","","","aoc_2016_day_20::logic","","aoc_2016_day_20::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,6,3,6,3,6,3,6,6,6,3,6,3,6,3,6,3,6,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[6,6],[[]],[[]],[[6,6],7],0,[[3,3],8],[[6,6],8],[[],8],[[],8],[[3,9],10],[[6,9],10],[[]],[[]],[11,[[12,[6]]]],[[]],[[]],[[],[[5,[3]]]],[[6,6],[[13,[7]]]],0,0,[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"u32"],[6,"GenResult"],[3,"Rule"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_21":{"doc":"Advent of Code 2016: Day 21: Scrambled Letters and Hash","t":[0,0,5,5,5,3,13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12],"n":["logic","model","puzzle_metadata","part_one","part_two","Input","Move","Reverse","RotChar","RotLeft","RotRight","ScrambleOp","SwapChars","SwapPosns","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from_parser","into","into","ops","parse","partial_cmp","start_one","start_two","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","1","1","1","1"],"q":["aoc_2016_day_21","","","aoc_2016_day_21::logic","","aoc_2016_day_21::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_21::model::ScrambleOp","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,6,6,6,6,6,0,6,6,3,6,3,6,3,6,3,6,6,3,6,3,6,3,6,3,6,6,3,6,3,3,6,3,3,3,6,3,6,3,6,3,6,16,17,18,19,20,21,22,16,17,21,22],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[3,3],[6,6],[[]],[[]],[[6,6],7],[[3,3],8],[[6,6],8],[[],8],[[],8],[[3,9],10],[[6,9],10],[[]],[[]],[11,[[12,[6]]]],[[]],[[]],0,[[],[[5,[3]]]],[[6,6],[[13,[7]]]],0,0,[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],0,0,0,0,0,0,0,0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"String"],[6,"GenResult"],[4,"ScrambleOp"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[4,"Option"],[4,"Result"],[3,"TypeId"],[13,"SwapPosns"],[13,"SwapChars"],[13,"RotLeft"],[13,"RotRight"],[13,"RotChar"],[13,"Reverse"],[13,"Move"]]},\
"aoc_2016_day_22":{"doc":"Advent of Code 2016: Day 22: Grid Computing","t":[0,0,5,5,5,6,3,3,6,6,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,12,12],"n":["logic","model","puzzle_metadata","part_one","part_two","Coord","Input","Node","Pos","Size","avail","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","end","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from_parser","height","into","into","nodes","parse","pos","size","start","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","used","width"],"q":["aoc_2016_day_22","","","aoc_2016_day_22::logic","","aoc_2016_day_22::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,6,3,6,3,6,3,6,3,6,3,3,6,3,6,3,6,3,6,6,3,3,6,3,3,6,6,3,3,6,3,6,3,6,3,6,6,3],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[3,3],[6,6],[[]],[[]],0,[[3,3],7],[[6,6],7],[[],7],[[],7],[[3,8],9],[[6,8],9],[[]],[[]],[10,[[11,[6]]]],0,[[]],[[]],0,[[],[[5,[3]]]],0,0,0,[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"usize"],[6,"GenResult"],[3,"Node"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_23":{"doc":"Advent of Code 2016: Day 23: Safe Cracking","t":[0,0,5,5,5,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11],"n":["logic","model","puzzle_metadata","part_one","part_two","Input","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","instrs","into","parse","to_owned","try_from","try_into","type_id"],"q":["aoc_2016_day_23","","","aoc_2016_day_23::logic","","aoc_2016_day_23::model","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,[[]],[[]],[3,3],[[]],[[3,3],6],[[],6],[[3,7],8],[[]],0,[[]],[[],[[5,[3]]]],[[]],[[],9],[[],9],[[],10]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"i32"],[6,"GenResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2016_day_24":{"doc":"Advent of Code 2016: Day 24: Air Duct Spelunking","t":[0,0,5,5,5,6,3,13,13,6,4,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,11,11,12,12],"n":["logic","model","puzzle_metadata","part_one","part_two","Coord","Input","Num","Open","Pos","Tile","TilesGrid","Wall","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","from","from","from_parser","height","into","into","parse","tiles","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","width","0"],"q":["aoc_2016_day_24","","","aoc_2016_day_24::logic","","aoc_2016_day_24::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2016_day_24::model::Tile"],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,6,6,0,0,0,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,3,6,6,3,3,6,3,3,3,6,3,6,3,6,3,6,3,14],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[3,3],[6,6],[[]],[[]],[[3,3],7],[[6,6],7],[[],7],[[],7],[[3,8],9],[[6,8],9],[[]],[[]],[10,[[11,[6]]]],0,[[]],[[]],[[],[[5,[3]]]],0,[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"u32"],[6,"GenResult"],[4,"Tile"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[4,"Result"],[3,"TypeId"],[13,"Num"]]},\
"aoc_2016_day_25":{"doc":"Advent of Code 2016: Day 25: Clock Signal","t":[0,0,5,5,3,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11],"n":["logic","model","puzzle_metadata","part_one","Input","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","instrs","into","limit","parse","to_owned","try_from","try_into","type_id"],"q":["aoc_2016_day_25","","","aoc_2016_day_25::logic","aoc_2016_day_25::model","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],0,[[]],[[]],[3,3],[[]],[[3,3],6],[[],6],[[3,7],8],[[]],0,[[]],0,[[],[[5,[3]]]],[[]],[[],9],[[],9],[[],10]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"i32"],[6,"GenResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2017":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5],"n":["day_01","day_02","day_03","day_04","day_05","day_06","day_07","day_08","day_09","day_10","day_11","day_12","day_13","day_14","day_15","day_16","day_17","day_18","day_19","day_20","day_21","day_22","day_23","day_24","day_25","puzzle_metadata"],"q":["aoc_2017","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[3,[[2,[1]]]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Vec"]]},\
"aoc_2017_cpu":{"doc":"","t":[13,3,4,4,13,4,13,13,13,13,13,13,13,13,3,13,13,13,13,4,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["Add","Cpu","CpuError","DstArg","Imm","Instr","Jgz","Jnz","Limit","Mod","Mul","Overflow","Rcv","Receive","Reg","Reg","Reg","Set","Snd","SrcArg","Sub","Val","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_step","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cpu_optimise","default","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","execute","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_parser","from_parser","from_parser","from_parser","get_reg","idx","input","instrs","into","into","into","into","into","into","limit","load_dst","load_reg","load_src","new","next","next_instr","provide","push_input","set_limit","set_next","set_reg","step","store_dst","store_reg","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","1","0","0"],"q":["aoc_2017_cpu","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_cpu::DstArg","aoc_2017_cpu::Instr","","","","","","","","","","","","","","","","aoc_2017_cpu::SrcArg",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[4,0,0,0,6,0,4,4,3,4,4,3,4,3,0,5,6,4,4,0,4,0,1,3,4,5,6,7,1,3,4,5,6,7,1,1,3,4,5,6,7,1,3,4,5,6,7,0,1,4,5,6,7,4,5,6,7,1,1,3,3,4,4,5,5,6,6,7,7,1,3,4,5,6,7,4,5,6,7,1,7,1,1,1,3,4,5,6,7,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,3,4,5,6,7,3,4,5,6,7,1,3,4,5,6,7,7,1,3,4,5,6,7,1,3,4,5,6,7,25,26,27,28,29,30,31,32,33,34,28,29,30,31,32,33,34,35,36],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[1,1],[3,3],[4,4],[5,5],[6,6],[7,7],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],1],[[4,4],2],[[5,5],2],[[6,6],2],[[7,7],2],[[],2],[[],2],[[],2],[[],2],[1,[[10,[[9,[8]],3]]]],[[1,11],12],[[3,11],12],[[3,11],12],[[4,11],12],[[4,11],12],[[5,11],12],[[5,11],12],[[6,11],12],[[6,11],12],[[7,11],12],[[7,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[13,[[14,[4]]]],[13,[[14,[5]]]],[13,[[14,[6]]]],[13,[[14,[7]]]],[[1,15],[[10,[8,16]]]],[7,17],[1,18],[1,19],[[]],[[]],[[]],[[]],[[]],[[]],[1,20],[[1,5],8],[[1,7],8],[[1,6],8],[[[21,[19]]],1],[1,20],[1,[[9,[4]]]],[22],[[1,8],1],[[1,20],1],[[1,20]],[[1,15,8],[[10,[1,16]]]],[1,[[10,[[9,[8]],3]]]],[[1,5,8]],[[1,7,8]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[15,[[10,[7]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"Cpu"],[15,"bool"],[4,"CpuError"],[4,"Instr"],[4,"DstArg"],[4,"SrcArg"],[3,"Reg"],[6,"Val"],[4,"Option"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[15,"char"],[15,"str"],[15,"usize"],[3,"VecDeque"],[3,"Rc"],[15,"u64"],[8,"Into"],[3,"Demand"],[3,"String"],[3,"TypeId"],[13,"Reg"],[13,"Snd"],[13,"Rcv"],[13,"Set"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Mod"],[13,"Jgz"],[13,"Jnz"],[13,"Reg"],[13,"Imm"]]},\
"aoc_2017_day_01":{"doc":"Advent of Code 2017: Day 1: Inverse Captcha","t":[0,0,5,5,5,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["logic","model","puzzle_metadata","part_one","part_two","Input","borrow","borrow_mut","clone","clone_into","digits","eq","equivalent","fmt","from","into","parse","to_owned","try_from","try_into","type_id"],"q":["aoc_2017_day_01","","","aoc_2017_day_01::logic","","aoc_2017_day_01::model","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,[[]],[[]],[3,3],[[]],0,[[3,3],6],[[],6],[[3,7],8],[[]],[[]],[[],[[5,[3]]]],[[]],[[],9],[[],9],[[],10]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"u32"],[6,"GenResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2017_day_02":{"doc":"Advent of Code 2017: Day 2: Corruption Checksum","t":[0,0,5,5,5,3,6,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11],"n":["logic","model","puzzle_metadata","part_one","part_two","Input","Value","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","into","parse","rows","to_owned","try_from","try_into","type_id"],"q":["aoc_2017_day_02","","","aoc_2017_day_02::logic","","aoc_2017_day_02::model","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,0,[[]],[[]],[3,3],[[]],[[3,3],6],[[],6],[[3,7],8],[[]],[[]],[[],[[5,[3]]]],0,[[]],[[],9],[[],9],[[],10]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"u32"],[6,"GenResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2017_day_03":{"doc":"Advent of Code 2017: Day 3: Spiral Memory","t":[0,0,5,6,6,6,6,5,5,3,6,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11],"n":["logic","model","puzzle_metadata","Coord","Dir","Pos","Turn","part_one","part_two","Input","Value","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","into","parse","target","to_owned","try_from","try_into","type_id"],"q":["aoc_2017_day_03","","","aoc_2017_day_03::logic","","","","","","aoc_2017_day_03::model","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[[],[[2,[1]]]],0,0,0,0,[3,[[5,[4]]]],[3,[[5,[4]]]],0,0,[[]],[[]],[3,3],[[]],[[3,3],6],[[],6],[[3,7],8],[[]],[[]],[[],[[5,[3]]]],0,[[]],[[],9],[[],9],[[],10]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"u32"],[6,"GenResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2017_day_04":{"doc":"Advent of Code 2017: Day 4: High-Entropy Passphrases","t":[0,0,5,5,5,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11],"n":["logic","model","puzzle_metadata","part_one","part_two","Input","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","into","parse","passphrases","to_owned","try_from","try_into","type_id"],"q":["aoc_2017_day_04","","","aoc_2017_day_04::logic","","aoc_2017_day_04::model","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,[[]],[[]],[3,3],[[]],[[3,3],6],[[],6],[[3,7],8],[[]],[[]],[[],[[5,[3]]]],0,[[]],[[],9],[[],9],[[],10]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"u32"],[6,"GenResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2017_day_05":{"doc":"Advent of Code 2017: Day 5: A Maze of Twisty Trampolines, …","t":[0,0,5,5,5,3,6,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11],"n":["logic","model","puzzle_metadata","part_one","part_two","Input","Tramp","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","into","parse","to_owned","trampolines","try_from","try_into","type_id"],"q":["aoc_2017_day_05","","","aoc_2017_day_05::logic","","aoc_2017_day_05::model","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,0,[[]],[[]],[3,3],[[]],[[3,3],6],[[],6],[[3,7],8],[[]],[[]],[[],[[5,[3]]]],[[]],0,[[],9],[[],9],[[],10]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"u32"],[6,"GenResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2017_day_06":{"doc":"Advent of Code 2017: Day 6: Memory Reallocation","t":[0,0,5,5,5,6,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["logic","model","puzzle_metadata","part_one","part_two","Banks","Input","banks","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","from","into","parse","to_owned","try_from","try_into","type_id"],"q":["aoc_2017_day_06","","","aoc_2017_day_06::logic","","aoc_2017_day_06::model","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,0,[[],[[2,[1]]]],[3,[[5,[4]]]],[3,[[5,[4]]]],0,0,0,[[]],[[]],[3,3],[[]],[[3,3],6],[[],6],[[3,7],8],[[]],[[]],[[],[[5,[3]]]],[[]],[[],9],[[],9],[[],10]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[15,"u32"],[6,"GenResult"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2017_day_07":{"doc":"Advent of Code 2017: Day 7: Recursive Circus","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,12,11,11,11,11,11,11,11,11,12,11,11,5,5,3,11,11,11,11,11,12,12,11,12,11,12,12,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","Prog","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","equivalent","fmt","fmt","from","from","from_parser","holds","into","into","name","parse","progs","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","weight","write","write_str","part_one","part_two","ProgInfo","borrow","borrow_mut","build","fmt","from","holds","holds_weight","into","name","nested_len","prog_weight","total_weight","try_from","try_into","type_id","write_input"],"q":["aoc_2017_day_07","","","","aoc_2017_day_07::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_07::logic","","aoc_2017_day_07::model","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,4,3,4,3,4,4,4,3,4,4,3,3,3,4,3,4,3,4,3,4,4,4,3,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[4,4],5],[[],5],[[3,6],7],[[4,6],7],[[]],[[]],[8,[[9,[4]]]],0,[[]],[[]],0,[[],[[10,[3]]]],0,[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[[4,13],7],[[3,13],7],[3,[[10,[14]]]],[3,[[10,[15]]]],0,[[]],[[]],[3,[[10,[16]]]],[[16,6],7],[[]],0,0,[[]],0,[16,17],0,0,[[],11],[[],11],[[],12],[[16,18]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"Prog"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[4,"Result"],[3,"TypeId"],[8,"Write"],[3,"String"],[15,"u32"],[3,"ProgInfo"],[15,"usize"],[3,"Vec"]]},\
"aoc_2017_day_08":{"doc":"Advent of Code 2017: Day 8: I Heard You Like Registers","t":[0,0,0,5,4,3,13,4,13,13,13,13,3,13,13,18,18,13,18,18,6,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,5,5],"n":["cpu","input","logic","puzzle_metadata","ChkOp","Cpu","Dec","DstOp","Eq","Gtr","GtrEq","Inc","Instr","Lsr","LsrEq","NUM_VARIANTS","NUM_VARIANTS","NotEq","VARIANTS","VARIANTS","Val","as_str","as_str","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chk_amt","chk_op","chk_reg","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","dst_amt","dst_op","dst_reg","eq","eq","eq","equivalent","equivalent","equivalent","execute","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_str","from_str","idx","idx","into","into","into","into","is_ready","load","new","regs","step","store","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Input","borrow","borrow_mut","clone","clone_into","fmt","from","instrs","into","parse","to_owned","try_from","try_into","type_id","write_str","part_one","part_two"],"q":["aoc_2017_day_08","","","","aoc_2017_day_08::cpu","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_08::input","","","","","","","","","","","","","","","aoc_2017_day_08::logic",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,5,0,3,3,3,5,0,3,3,3,5,3,3,5,0,3,5,6,3,5,7,6,3,5,7,7,7,7,6,3,5,7,6,3,5,7,7,7,7,3,5,7,3,5,7,6,6,3,3,5,5,7,7,6,3,5,7,3,5,7,3,5,3,5,6,3,5,7,6,6,6,6,6,6,6,3,5,7,3,5,7,6,3,5,7,6,3,5,7,6,3,5,7,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3,4],[5,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[6,6],[3,3],[5,5],[7,7],[[]],[[]],[[]],[[]],0,0,0,[[3,3],8],[[5,5],8],[[7,7],8],[[],8],[[],8],[[],8],[6],[[6,9],10],[[3,9],10],[[3,9],10],[[5,9],10],[[5,9],10],[[7,9],10],[[7,9],10],[[]],[[]],[[]],[[]],[11,[[12,[3]]]],[11,[[12,[5]]]],[11,[[12,[7]]]],[4,[[13,[3]]]],[4,[[13,[5]]]],[3,14],[5,14],[[]],[[]],[[]],[[]],[6,8],[[6,15],16],[[[18,[17]]],6],[6,19],[6,20],[[6,15,16]],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],22],[[],22],[[],22],[[],22],0,[[]],[[]],[23,23],[[]],[[23,9],10],[[]],0,[[]],[[],[[24,[23]]]],[[]],[[],13],[[],13],[[],22],[[23,25],10],[23,[[24,[16]]]],[23,[[24,[16]]]]],"p":[[8,"Puzzle"],[3,"Box"],[4,"ChkOp"],[15,"str"],[4,"DstOp"],[3,"Cpu"],[3,"Instr"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[4,"Result"],[15,"usize"],[4,"InpStr"],[6,"Val"],[3,"Rc"],[8,"Into"],[8,"Iterator"],[4,"Option"],[3,"String"],[3,"TypeId"],[3,"Input"],[6,"GenResult"],[8,"Write"]]},\
"aoc_2017_day_09":{"doc":"Advent of Code 2017: Day 9: Stream Processing","t":[0,0,5,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","input","into","parse","to_owned","to_string","try_from","try_into","type_id","part_one","part_two"],"q":["aoc_2017_day_09","","","aoc_2017_day_09::input","","","","","","","","","","","","","","","","aoc_2017_day_09::logic",""],"d":["","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0],"f":[0,0,[[],[[2,[1]]]],0,[[]],[[]],[3,3],[[]],[[3,4],5],[[3,4],5],[[]],0,[[]],[[],[[6,[3]]]],[[]],[[],7],[[],8],[[],8],[[],9],[3,[[6,[10]]]],[3,[[6,[10]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"Formatter"],[6,"Result"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_10":{"doc":"Advent of Code 2017: Day 10: Knot Hash","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","params","parse","parse","rounds_two","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2017_day_10","","","aoc_2017_day_10::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_10::logic",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[3]]]],[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[10]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_11":{"doc":"Advent of Code 2017: Day 11: Hex Ed","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6,18,13,13,13,6,13,13,13,18,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","params","parse","parse","steps","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","NUM_VARIANTS","North","NorthEast","NorthWest","Pos","South","SouthEast","SouthWest","VARIANTS","VHexDir","as_str","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","fmt","from","from_parser","from_str","idx","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2017_day_11","","","","aoc_2017_day_11::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_11::logic","","aoc_2017_day_11::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,4,3,4,3,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,0,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[3]]]],[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,[14,15],[[]],[[]],[14,14],[[]],[[14,14],16],[[14,14],17],[[],17],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[15,[[11,[14]]]],[14,18],[[]],[[14,14],[[19,[16]]]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"VHexDir"],[15,"str"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"]]},\
"aoc_2017_day_12":{"doc":"Advent of Code 2017: Day 12: Digital Plumber","t":[0,0,0,5,3,3,3,6,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","InputPipe","InputPipes","MAX_PIPES","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","into","into","into","left","params","parse","parse","pipes","right","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","Grouper","Village","borrow","borrow_mut","build","clone","clone_into","default","fmt","from","group_size","groups","into","to_owned","try_from","try_into","type_id"],"q":["aoc_2017_day_12","","","","aoc_2017_day_12::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_12::logic","","aoc_2017_day_12::model","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,4,3,3,4,4,5,5,3,4,5,4,5,3,4,5,5,3,3,4,3,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],4],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],[8,[[9,[4]]]],[8,[[9,[5]]]],[[]],[[]],[[]],0,0,[[],[[10,[3]]]],[[],[[10,[4]]]],0,0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]],0,0,[[]],[[]],[3,15],[15,15],[[]],[[],15],[[15,6],7],[[]],[[15,16],17],[15,18],[[]],[[]],[[],12],[[],12],[[],13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"InputPipe"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Grouper"],[6,"Village"],[15,"usize"],[8,"Iterator"]]},\
"aoc_2017_day_13":{"doc":"Advent of Code 2017: Day 13: Packet Scanners","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,6,6,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","layers","params","parse","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Layer","LayerDepth","LayerRange","borrow","borrow_mut","clone","clone_into","cmp","depth","eq","equivalent","fmt","fmt","from","from_parser","into","partial_cmp","range","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2017_day_13","","","","aoc_2017_day_13::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_13::logic","","aoc_2017_day_13::model","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,4,3,4,3,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[3]]]],[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],0,[[14,14],16],[[],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],[[14,14],[[17,[15]]]],0,[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Layer"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2017_day_14":{"doc":"Advent of Code 2017: Day 14: Disk Defragmentation","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,6,6,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","key","num_rounds","num_rows","params","parse","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Grid","Pos","part_one","part_two"],"q":["aoc_2017_day_14","","","aoc_2017_day_14::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_14::logic","","",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,4,3,4,3,4,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,0,0,0,[[],[[9,[3]]]],[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_15":{"doc":"Advent of Code 2017: Day 15: Dueling Generators","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","params","parse","parse","reps_one","reps_two","start_a","start_b","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2017_day_15","","","aoc_2017_day_15::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_15::logic",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,4,3,4,3,3,4,4,4,3,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[3]]]],[[],[[9,[4]]]],0,0,0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_16":{"doc":"Advent of Code 2017: Day 16: Permutation Promenade","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,5,5,13,3,8,13,3,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","params","parse","parse","reps_two","steps","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Exchange","Line","LineItem","Partner","Pos","Prog","Spin","Step","as_char","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref_mut","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_parser","from_parser","from_parser","idx","idx","into","into","into","into","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","0","1","1"],"q":["aoc_2017_day_16","","","","aoc_2017_day_16::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_16::logic","","aoc_2017_day_16::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_16::model::Step","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,4,3,4,3,3,4,4,3,3,4,3,4,3,4,3,4,3,4,0,0,19,0,0,19,0,0,19,0,13,15,13,18,19,15,13,18,19,15,13,18,19,15,13,18,19,18,18,18,13,13,15,15,13,13,18,18,19,19,15,13,18,18,19,15,13,19,15,13,15,13,18,19,15,13,18,19,15,13,18,19,15,15,13,13,13,18,19,15,13,18,19,15,13,18,19,24,25,26,25,26],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[3]]]],[[],[[9,[4]]]],0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[10]]]],0,0,0,0,0,0,0,0,[13,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,15],[13,13],[[[18,[[0,[16,17]]]]],[[18,[[0,[16,17]]]]]],[19,19],[[]],[[]],[[]],[[]],[[],[[18,[17]]]],[[[18,[17]]]],[[[18,[17]]]],[[13,13],20],[[],20],[[15,5],6],[[15,5],6],[[13,5],6],[[13,5],6],[[[18,[[0,[21,17]]]],5],6],[[[18,[17]],5],6],[[19,5],6],[[19,5],6],[[]],[[]],[[],[[18,[17]]]],[[]],[[]],[7,[[8,[15]]]],[7,[[8,[13]]]],[7,[[8,[19]]]],[15,22],[13,22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[23,[[11,[15]]]],[[],11],[14,[[11,[13]]]],[23,[[11,[13]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],0,0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Prog"],[15,"char"],[3,"Pos"],[8,"Clone"],[8,"LineItem"],[3,"Line"],[4,"Step"],[15,"bool"],[8,"Debug"],[15,"usize"],[15,"u8"],[13,"Spin"],[13,"Exchange"],[13,"Partner"]]},\
"aoc_2017_day_17":{"doc":"Advent of Code 2017: Day 17: Spinlock","t":[0,0,5,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","advance","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","params","parse","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2017_day_17","","","aoc_2017_day_17::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_17::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[3]]]],[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2017_day_18":{"doc":"Advent of Code 2017: Day 18: Duet","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","instrs","into","into","params","parse","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2017_day_18","","","aoc_2017_day_18::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_18::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,4,3,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[3]]]],[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i64"],[15,"u32"]]},\
"aoc_2017_day_19":{"doc":"Advent of Code 2017: Day 19: A Series of Tubes","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,6,13,6,13,6,13,13,6,4,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","grid","into","into","params","parse","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","route_iter","Coord","Corner","Dir","Empty","Grid","Horiz","Letter","Pos","Tile","Turn","Vert","as_char","borrow","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","from","from_parser","into","to_owned","to_string","try_from","try_into","type_id","0"],"q":["aoc_2017_day_19","","","","aoc_2017_day_19::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_19::logic","","","aoc_2017_day_19::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_19::model::Tile"],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,4,3,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,15,0,15,0,15,15,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,18],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[3]]]],[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,0,0,0,0,0,0,0,0,[15,16],[[]],[[]],[15,15],[[]],[[15,15],17],[[],17],[[15,5],6],[[15,5],6],[[]],[7,[[8,[15]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[8,"Iterator"],[4,"Tile"],[15,"char"],[15,"bool"],[13,"Letter"]]},\
"aoc_2017_day_20":{"doc":"Advent of Code 2017: Day 20: Particle Swarm","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,13,4,6,6,6,3,6,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","params","parse","parse","particles","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Acc","Aspect","Axis","Coord","CoordAbs","Particle","Pos","Pos","Vel","acc","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from_parser","index","into","into","pos","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vel"],"q":["aoc_2017_day_20","","","","aoc_2017_day_20::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_20::logic","","aoc_2017_day_20::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,4,3,4,3,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,14,0,0,0,0,0,0,14,14,15,14,15,14,15,14,15,14,15,14,15,14,15,14,15,15,14,15,15,15,14,15,15,14,15,15,14,15,14,15,14,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[3]]]],[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[14,14],[15,15],[[]],[[]],[[14,14],16],[[15,15],16],[[],16],[[],16],[[14,5],6],[[15,5],6],[[15,5],6],[[]],[[]],[7,[[8,[15]]]],[[15,14],17],[[]],[[]],0,[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Aspect"],[3,"Particle"],[15,"bool"],[6,"Pos"]]},\
"aoc_2017_day_21":{"doc":"Advent of Code 2017: Day 21: Fractal Art","t":[0,0,0,5,3,3,4,4,18,13,13,13,13,18,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,5,5,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","InputPixel","InputRule","NUM_VARIANTS","Off","On","ThreeToFour","TwoToThree","VARIANTS","as_str","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_rules","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_str","idx","into","into","into","into","iters_one","iters_two","params","parse","parse","parse_pixels","rules","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","1","1","part_one","part_two","FourByFour","SixBySix","ThreeByThree","TwoByTwo","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","default","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","flip","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","idx","idx","idx","idx","into","into","into","into","join","num_active","num_active","num_active","partial_cmp","partial_cmp","partial_cmp","rotate","rotate","split","split","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["aoc_2017_day_21","","","","aoc_2017_day_21::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_21::input::InputRule","","","","aoc_2017_day_21::logic","","aoc_2017_day_21::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,3,3,3,7,7,3,3,5,6,7,3,5,6,7,3,6,5,6,7,3,5,6,7,3,6,7,3,7,3,5,5,6,6,7,7,3,3,5,6,7,3,6,7,3,3,3,5,6,7,3,6,6,5,5,6,0,5,5,6,7,3,5,6,7,3,5,6,7,3,5,6,7,3,5,6,7,3,27,28,27,28,0,0,0,0,0,0,19,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,20,19,19,20,20,21,21,22,22,19,20,21,21,22,22,19,20,21,22,19,20,21,22,22,20,21,22,20,21,22,19,20,21,22,19,20,21,22,19,20,21,22,19,19,20,20,21,22,19,20,21,22,19,20,21,22],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,0,0,[3,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[5,5],[6,6],[7,7],[3,3],[[]],[[]],[[]],[[]],[[],6],[[7,7],8],[[3,3],8],[[],8],[[],8],[[5,9],10],[[5,9],10],[[6,9],10],[[6,9],10],[[7,9],10],[[7,9],10],[[3,9],10],[[3,9],10],[[]],[[]],[[]],[[]],[11,[[12,[6]]]],[11,[[12,[7]]]],[11,[[12,[3]]]],[4,[[13,[3]]]],[3,14],[[]],[[]],[[]],[[]],0,0,0,[[],[[15,[5]]]],[[],[[15,[6]]]],[[11,14],[[12,[16]]]],0,[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],18],[[],18],[[],18],[[],18],0,0,0,0,[5,[[15,[16]]]],[5,[[15,[16]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,19],[20,20],[21,21],[22,22],[[]],[[]],[[]],[[]],[[20,20],23],[[21,21],23],[[22,22],23],[[],19],[[],20],[[],21],[[],22],[[19,19],8],[[20,20],8],[[21,21],8],[[22,22],8],[[],8],[[],8],[[],8],[[],8],[20,20],[[19,9],10],[[19,9],10],[[20,9],10],[[20,9],10],[[21,9],10],[[21,9],10],[[22,9],10],[[22,9],10],[[]],[[]],[[]],[24,21],[16,22],[[]],[19,14],[20,14],[21,14],[22,14],[[]],[[]],[[]],[[]],[[],22],[20,16],[21,16],[22,16],[[20,20],[[25,[23]]]],[[21,21],[[25,[23]]]],[[22,22],[[25,[23]]]],[19,19],[20,20],[21],[22],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[26,[[13,[19]]]],[[],13],[24,[[13,[20]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],18],[[],18],[[],18],[[],18]],"p":[[8,"Puzzle"],[3,"Box"],[4,"InputPixel"],[15,"str"],[3,"Input"],[3,"InputParams"],[4,"InputRule"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[4,"Result"],[15,"usize"],[6,"GenResult"],[15,"u64"],[3,"String"],[3,"TypeId"],[3,"TwoByTwo"],[3,"ThreeByThree"],[3,"FourByFour"],[3,"SixBySix"],[4,"Ordering"],[15,"u16"],[4,"Option"],[15,"u8"],[13,"TwoToThree"],[13,"ThreeToFour"]]},\
"aoc_2017_day_22":{"doc":"Advent of Code 2017: Day 22: Sporifica Virus","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,6,6,13,6,13,18,4,6,6,18,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","iters_one","iters_two","nodes","params","parse","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Clean","Coord","Dir","Flagged","Grid","Infected","NUM_VARIANTS","Node","Pos","Turn","VARIANTS","Weakened","as_str","borrow","borrow_mut","clone","clone_into","default","eq","equivalent","fmt","fmt","from","from_parser","from_str","idx","into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2017_day_22","","","","aoc_2017_day_22::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_22::logic","","aoc_2017_day_22::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,4,3,4,4,4,3,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,0,0,14,0,14,14,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,0,0,0,[[],[[9,[3]]]],[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,[14,15],[[]],[[]],[14,14],[[]],[[],14],[[14,14],16],[[],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[15,[[11,[14]]]],[14,17],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[4,"Node"],[15,"str"],[15,"bool"],[15,"usize"]]},\
"aoc_2017_day_23":{"doc":"Advent of Code 2017: Day 23: Coprocessor Conflagration","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","instrs","into","into","params","parse","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2017_day_23","","","aoc_2017_day_23::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_23::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,4,3,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[3]]]],[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[15,"i64"]]},\
"aoc_2017_day_24":{"doc":"Advent of Code 2017: Day 24: Electromagnetic Moat","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","comps","default","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","params","parse","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Component","Components","Port","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","fmt","from","from_parser","hash","into","partial_cmp","port_0","port_1","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2017_day_24","","","","aoc_2017_day_24::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_24::logic","","aoc_2017_day_24::model","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[3]]]],[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[14,14],16],[[],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[17,[15]]]],0,0,[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Component"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2017_day_25":{"doc":"Advent of Code 2017: Day 25: The Halting Problem","t":[0,0,0,5,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,5,4,13,18,18,13,13,4,3,18,18,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","begin_state","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","num_steps","params","parse","parse","states","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","Dir","Left","NUM_VARIANTS","NUM_VARIANTS","One","Right","Slot","State","VARIANTS","VARIANTS","Zero","as_str","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","eq","eq","eq","equivalent","equivalent","equivalent","false_dir","false_state","false_write","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","from_str","from_str","hash","hash","hash","id","idx","idx","into","into","into","partial_cmp","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_string","to_string","to_string","true_dir","true_state","true_write","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["aoc_2017_day_25","","","","aoc_2017_day_25::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2017_day_25::logic","aoc_2017_day_25::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,4,3,4,3,3,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,14,14,16,16,14,0,0,14,16,16,14,16,14,16,17,14,16,17,14,16,17,14,16,17,14,16,17,14,16,17,14,16,17,17,17,17,14,14,16,16,17,17,14,16,17,14,16,17,14,16,14,16,17,17,14,16,14,16,17,14,16,17,14,16,17,14,16,17,17,17,17,14,16,17,14,16,17,14,16,17],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[3]]]],[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,[14,15],[16,15],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[16,16],[17,17],[[]],[[]],[[]],[[14,14],18],[[16,16],18],[[17,17],18],[[14,14],19],[[16,16],19],[[17,17],19],[[],19],[[],19],[[],19],0,0,0,[[14,5],6],[[14,5],6],[[16,5],6],[[16,5],6],[[17,5],6],[[17,5],6],[[]],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[16]]]],[7,[[8,[17]]]],[15,[[11,[14]]]],[15,[[11,[16]]]],[14],[16],[17],0,[14,20],[16,20],[[]],[[]],[[]],[[14,14],[[21,[18]]]],[[16,16],[[21,[18]]]],[[17,17],[[21,[18]]]],[[]],[[]],[[]],[[],10],[[],10],[[],10],0,0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Dir"],[15,"str"],[4,"Slot"],[3,"State"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"]]},\
"aoc_2017_knot":{"doc":"","t":[5,5,5,5],"n":["calc_checksum","calc_sparse","calculate","calculate_rounds"],"q":["aoc_2017_knot","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[[[]],[[[0,[1,2]],3]],[[]],[3]],"p":[[8,"IntoIterator"],[8,"Clone"],[15,"u32"]]},\
"aoc_2018":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5],"n":["day_01","day_02","day_03","day_04","day_05","day_06","day_07","day_08","day_09","day_10","day_11","day_12","day_13","day_14","day_15","day_16","day_17","day_18","day_19","day_20","day_21","day_22","day_23","day_24","day_25","puzzle_metadata"],"q":["aoc_2018","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[3,[[2,[1]]]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Vec"]]},\
"aoc_2018_cpu":{"doc":"","t":[13,13,13,4,13,13,13,13,13,13,4,6,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,18,18,18,18,4,4,13,13,13,3,13,13,13,18,18,18,18,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Add","Addi","Addr","ArgType","Ban","Bani","Banr","Bor","Bori","Borr","CpuError","CpuResult","Eq","Eqir","Eqri","Eqrr","Gt","Gtir","Gtri","Gtrr","Halt","Ignore","Imm","Instr","Internal","Mul","Muli","Mulr","NUM_VARIANTS","NUM_VARIANTS","NUM_VARIANTS","NUM_VARIANTS","Op","Opcode","Overflow","Reg","Register","Regs","Set","Seti","Setr","VARIANTS","VARIANTS","VARIANTS","VARIANTS","apply","apply","apply","arg_a","arg_a","arg_b","arg_b","arg_c","as_str","as_str","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","data","default","deref","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_parser","from_parser","from_parser","from_parser","from_parser","from_parser","from_str","from_str","from_str","from_str","get","hash","hash","hash","hash","hash","hash","idx","idx","idx","idx","into","into","into","into","into","into","new","op","opcode","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","provide","set","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["aoc_2018_cpud":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[5,1,1,0,5,1,1,5,1,1,0,0,5,1,1,1,5,1,1,1,9,7,7,0,9,5,1,1,1,5,7,9,0,0,9,7,9,0,5,1,1,1,5,7,9,1,5,6,1,6,1,6,6,1,5,7,9,1,5,7,9,3,6,1,5,7,9,3,6,1,5,7,9,3,6,1,5,7,9,3,6,1,5,7,9,3,6,1,3,3,1,5,7,9,3,6,1,5,7,9,3,6,1,1,5,5,7,7,9,9,3,3,6,6,1,5,7,9,3,6,1,5,7,9,3,6,1,5,7,9,3,1,5,7,9,3,6,1,5,7,9,1,5,7,9,3,6,3,1,6,1,5,7,9,3,6,9,3,1,5,7,9,3,6,1,5,7,9,3,6,1,5,7,9,3,6,1,5,7,9,3,6,1,5,7,9,3,6],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,2,2,[3,[2]]],[[4,[[3,[2]]]]]],[[5,[4,[2]],[4,[2]]],[[4,[2]]]],[[[6,[2]],[3,[2]]],[[4,[[3,[2]]]]]],[1,7],0,[1,7],0,0,[1,8],[5,8],[7,8],[9,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[5,5],[7,7],[9,9],[[[3,[[0,[10,2]]]]],[[3,[[0,[10,2]]]]]],[[[6,[[0,[10,2]]]]],[[6,[[0,[10,2]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],11],[[5,5],11],[[7,7],11],[[9,9],11],[[[3,[[0,[12,2]]]],3],11],[[[6,[[0,[12,2]]]],6],11],[1],[[],[[3,[2]]]],[[[3,[2]]]],[[1,1],13],[[5,5],13],[[7,7],13],[[9,9],13],[[[3,[[0,[14,2]]]],3],13],[[[6,[[0,[14,2]]]],6],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[1,15],16],[[1,15],16],[[5,15],16],[[5,15],16],[[7,15],16],[[7,15],16],[[9,15],16],[[9,15],16],[[[3,[[0,[17,2]]]],15],16],[[[3,[2]],15],16],[[[6,[2]],15],16],[[[6,[[0,[2,18]]]],15],16],[[]],[[]],[[]],[[]],[[]],[[]],[19,[[20,[1]]]],[19,[[20,[5]]]],[19,[[20,[7]]]],[19,[[20,[9]]]],[19,[[20,[[3,[[0,[2,18]]]]]]]],[19,[[20,[[6,[[0,[2,18]]]]]]]],[8,[[21,[1]]]],[8,[[21,[5]]]],[8,[[21,[7]]]],[8,[[21,[9]]]],[[[3,[2]],2],[[22,[2]]]],[1],[5],[7],[9],[[[3,[[0,[23,2]]]]]],[[[6,[[0,[23,2]]]]]],[1,24],[5,24],[7,24],[9,24],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[3,[2]]]],[1,5],0,[[1,1],[[22,[11]]]],[[5,5],[[22,[11]]]],[[7,7],[[22,[11]]]],[[9,9],[[22,[11]]]],[[[3,[[0,[25,2]]]],3],[[22,[11]]]],[[[6,[[0,[25,2]]]],6],[[22,[11]]]],[26],[[[3,[2]],2,2],22],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28]],"p":[[4,"Opcode"],[8,"Int"],[3,"Regs"],[6,"CpuResult"],[4,"Op"],[3,"Instr"],[4,"ArgType"],[15,"str"],[4,"CpuError"],[8,"Clone"],[4,"Ordering"],[8,"Ord"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"FromParser"],[3,"Parser"],[6,"ParseResult"],[4,"Result"],[4,"Option"],[8,"Hash"],[15,"usize"],[8,"PartialOrd"],[3,"Demand"],[3,"String"],[3,"TypeId"]]},\
"aoc_2018_day_01":{"doc":"Advent of Code 2018: Day 1: Chronal Calibration","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deltas","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2018_day_01","","","aoc_2018_day_01::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_01::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i32"]]},\
"aoc_2018_day_02":{"doc":"Advent of Code 2018: Day 2: Inventory Management System","t":[0,0,5,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","box_ids","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2018_day_02","","","aoc_2018_day_02::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_02::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],0,[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[10]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2018_day_03":{"doc":"Advent of Code 2018: Day 3: No Matter How You Slice It","t":[0,0,0,5,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,6,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","claims","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","params","parse","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Claim","Coord","Id","Pos","Square","area","borrow","borrow","borrow_mut","borrow_mut","bottom","bound","clone","clone","clone_into","clone_into","eq","equivalent","fmt","fmt","fmt","from","from","from_parser","height","id","into","into","left","new","new_size","overlap","remove","right","square","to_owned","to_owned","to_string","top","try_from","try_from","try_into","try_into","type_id","type_id","width"],"q":["aoc_2018_day_03","","","","aoc_2018_day_03::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_03::logic","","aoc_2018_day_03::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,3,4,3,4,4,3,3,4,4,3,4,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0,14,16,14,16,14,14,14,16,14,16,14,14,14,16,16,14,16,14,16,14,16,16,14,14,14,14,14,14,14,16,16,14,16,14,16,14,16,14,16,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],0,[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[3]]]],[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,[14,13],[[]],[[]],[[]],[[]],[14,15],[[14,14],14],[16,16],[14,14],[[]],[[]],[[14,14],17],[[],17],[[16,5],6],[[16,5],6],[[14,5],6],[[]],[[]],[7,[[8,[16]]]],[14,15],0,[[]],[[]],[14,15],[[15,15,15,15],[[18,[14]]]],[[15,15,15,15],[[18,[14]]]],[[14,14],[[18,[14]]]],[[14,14],[[19,[14]]]],[14,15],0,[[]],[[]],[[],10],[14,15],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[14,15]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Square"],[6,"Coord"],[3,"Claim"],[15,"bool"],[4,"Option"],[3,"ArrayVec"]]},\
"aoc_2018_day_04":{"doc":"Advent of Code 2018: Day 4: Repose Record","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,3,3,4,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","entries","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","params","parse","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","BeginsShift","Date","Entry","Event","FallsAsleep","HourMinute","WakesUp","as_minutes","as_seconds","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","date","eq","eq","equivalent","equivalent","event","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","hour","into","into","into","into","minute","next","partial_cmp","partial_cmp","time","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0"],"q":["aoc_2018_day_04","","","","aoc_2018_day_04::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_04::logic","","aoc_2018_day_04::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_04::model::Event"],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,16,0,0,0,16,0,16,14,14,15,16,17,14,15,16,17,14,15,16,17,14,15,16,17,14,17,14,15,17,14,17,14,15,15,15,16,16,17,17,14,14,15,16,17,14,15,16,17,14,14,15,16,17,14,14,17,17,14,15,15,16,17,14,15,16,17,14,15,16,17,14,15,16,17,14,15,16,17,14,21],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[3]]]],[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,[14,13],[14,13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,15],[16,16],[17,17],[14,14],[[]],[[]],[[]],[[]],[[17,17],18],[[14,14],18],0,[[17,17],19],[[14,14],19],[[],19],[[],19],0,[[15,5],6],[[15,5],6],[[16,5],6],[[16,5],6],[[17,5],6],[[17,5],6],[[14,5],6],[[14,5],6],[[]],[[]],[[]],[[]],[7,[[8,[15]]]],[7,[[8,[16]]]],[7,[[8,[17]]]],[7,[[8,[14]]]],[14,13],[[]],[[]],[[]],[[]],[14,13],[17,17],[[17,17],[[20,[18]]]],[[14,14],[[20,[18]]]],0,[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"HourMinute"],[3,"Entry"],[4,"Event"],[3,"Date"],[4,"Ordering"],[15,"bool"],[4,"Option"],[13,"BeginsShift"]]},\
"aoc_2018_day_05":{"doc":"Advent of Code 2018: Day 5: Alchemical Reduction","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","params","parse","parse","polymer","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2018_day_05","","","aoc_2018_day_05::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_05::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,4,3,4,3,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[3]]]],[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2018_day_06":{"doc":"Advent of Code 2018: Day 6: Chronal Coordinates","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","dist_two","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","params","parse","parse","posns","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Grid","Pos"],"q":["aoc_2018_day_06","","","","aoc_2018_day_06::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_06::logic","","aoc_2018_day_06::model","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,4,3,3,4,4,3,4,4,3,4,3,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[3]]]],[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2018_day_07":{"doc":"Advent of Code 2018: Day 7: The Sum of Its Parts","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deps","extra_time","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","num_workers","params","parse","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2018_day_07","","","aoc_2018_day_07::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_07::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,4,3,3,4,4,3,4,4,3,4,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[3]]]],[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2018_day_08":{"doc":"Advent of Code 2018: Day 8: Memory Maneuver","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","extra_time","fmt","fmt","fmt","fmt","from","from","from_parser","into","into","num_workers","params","parse","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2018_day_08","","","aoc_2018_day_08::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_08::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,4,3,4,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[3]]]],[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2018_day_09":{"doc":"Advent of Code 2018: Day 9: Marble Mania","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","last_marble","num_players","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2018_day_09","","","aoc_2018_day_09::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_09::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2018_day_10":{"doc":"Advent of Code 2018: Day 10: The Stars Align","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","points","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Point","Pos","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","fmt","from","from_parser","hash","into","offset","partial_cmp","pos","to_owned","to_string","try_from","try_into","type_id","vel"],"q":["aoc_2018_day_10","","","","aoc_2018_day_10::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_10::logic","","aoc_2018_day_10::model","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[13]]]],0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[14,14],16],[[],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,17],[[18,[14]]]],[[14,14],[[19,[15]]]],0,[[]],[[],10],[[],11],[[],11],[[],12],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Point"],[4,"Ordering"],[15,"bool"],[6,"Coord"],[6,"NumResult"],[4,"Option"]]},\
"aoc_2018_day_11":{"doc":"Advent of Code 2018: Day 11: Chronal Charge","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid_size","into","into","params","parse","serial","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Grid","Pos","Power"],"q":["aoc_2018_day_11","","","","aoc_2018_day_11::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_11::logic","","aoc_2018_day_11::model","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[10]]]],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2018_day_12":{"doc":"Advent of Code 2018: Day 12: Subterranean Sustainability","t":[0,0,0,5,3,3,3,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,3,18,13,4,3,18,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","InputRule","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_rules","clone","clone","clone","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","into","into","into","params","parse","rules","start","to","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","Empty","Generator","NUM_VARIANTS","Plant","Pot","State","VARIANTS","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","from","from","from","from","from_parser","from_str","idx","into","into","into","iter","next","start","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["aoc_2018_day_12","","","","aoc_2018_day_12::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_12::logic","","aoc_2018_day_12::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","Data representation and algorithms used to solve the puzzle","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Efficiently apply rules to a <code>State</code>","","","Simple enum to represent the state of a pot","Represents all occupied plant pots at a specific point in …","","","","","","","","","Build a <code>Generator</code> from an <code>Input</code>","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return an iterator over the numbers of all occupied pots, …","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,5,3,4,5,4,3,4,5,3,4,5,4,3,3,4,4,5,5,3,4,5,5,3,4,5,3,4,5,3,4,3,3,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,15,0,15,15,0,0,15,15,15,17,18,15,17,18,17,15,17,15,17,18,18,15,15,17,15,17,18,18,15,15,15,15,17,18,18,17,18,15,17,15,15,17,18,15,17,18,15,17,18],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],4],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],0,[8,[[9,[3]]]],[8,[[9,[4]]]],[8,[[9,[5]]]],[[]],[[]],[[]],0,[[],[[10,[4]]]],0,0,0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]],0,0,0,0,0,0,0,[15,16],[[]],[[]],[[]],[[]],[[]],[[]],[3,[[10,[17]]]],[15,15],[17,17],[[]],[[]],0,[[],18],[[15,6],7],[[15,6],7],[[17,6],7],[[]],[[]],[[]],[[],18],[8,[[9,[15]]]],[16,[[12,[15]]]],[15,19],[[]],[[]],[[]],[18,20],[[17,18],[[21,[18]]]],0,[[]],[[]],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"InputRule"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i64"],[4,"Pot"],[15,"str"],[3,"Generator"],[3,"State"],[15,"usize"],[8,"Iterator"],[6,"NumResult"]]},\
"aoc_2018_day_13":{"doc":"Advent of Code 2018: Day 13: Mine Cart Madness","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,13,13,13,13,6,13,13,13,6,13,6,13,18,6,4,6,18,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","CartDown","CartLeft","CartRight","CartUp","Coord","CornerBck","CornerFwd","Crossing","Dir","Empty","Grid","Horiz","NUM_VARIANTS","Pos","Tile","Turn","VARIANTS","Vert","as_str","borrow","borrow_mut","clone","clone_into","default","fmt","fmt","from","from_parser","from_str","idx","into","is_cart","is_crossing","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2018_day_13","","","","aoc_2018_day_13::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_13::logic","","aoc_2018_day_13::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","Data representation and algorithms used to solve the puzzle","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,13,13,13,13,0,13,13,13,0,13,0,13,13,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[13,14],[[]],[[]],[13,13],[[]],[[],13],[[13,5],6],[[13,5],6],[[]],[7,[[8,[13]]]],[14,[[11,[13]]]],[13,15],[[]],[13,16],[13,16],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[4,"Tile"],[15,"str"],[15,"usize"],[15,"bool"]]},\
"aoc_2018_day_14":{"doc":"Advent of Code 2018: Day 14: Chocolate Charts","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_recipes","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value","part_one","part_two"],"q":["aoc_2018_day_14","","","aoc_2018_day_14::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_14::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[3,[[9,[10]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2018_day_15":{"doc":"Advent of Code 2018: Day 15: Beverage Bandits","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,13,6,6,13,13,6,18,13,6,6,4,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Cavern","Coord","Dir","Elf","Goblin","Grid","NUM_VARIANTS","Open","Pos","SeenGrid","Tile","VARIANTS","as_str","borrow","borrow_mut","clone","clone_into","cmp","default","enemy","eq","equivalent","fmt","fmt","from","from_parser","from_str","idx","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2018_day_15","","","","aoc_2018_day_15::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_15::logic","","aoc_2018_day_15::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,0,0,14,14,0,14,14,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,[14,15],[[]],[[]],[14,14],[[]],[[14,14],16],[[],14],[14,14],[[14,14],17],[[],17],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[15,[[11,[14]]]],[14,18],[[]],[[14,14],[[19,[16]]]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"],[15,"str"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"]]},\
"aoc_2018_day_16":{"doc":"Advent of Code 2018: Day 16: Chronal Classification","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,18,18,18,4,4,13,6,3,13,13,13,18,18,18,6,12,11,11,11,12,11,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","params","parse","samples","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Add","Addi","Addr","ArgType","Ban","Bani","Banr","Bor","Bori","Borr","Eq","Eqir","Eqri","Eqrr","Gt","Gtir","Gtri","Gtrr","Ignore","Imm","Instr","Mul","Muli","Mulr","NUM_VARIANTS","NUM_VARIANTS","NUM_VARIANTS","Op","Opcode","Reg","Regs","Sample","Set","Seti","Setr","VARIANTS","VARIANTS","VARIANTS","Val","after","apply","apply","arg_a","arg_a","arg_b","arg_b","arg_c","as_str","as_str","as_str","before","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","data","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_parser","from_parser","from_parser","from_parser","from_parser","from_str","from_str","from_str","hash","hash","hash","hash","hash","idx","idx","idx","instr","into","into","into","into","into","op","op","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["aoc_2018_day_16","","","","aoc_2018_day_16::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_16::logic","","aoc_2018_day_16::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,17,14,14,0,17,14,14,17,14,14,17,14,14,14,17,14,14,14,18,18,0,17,14,14,14,17,18,0,0,18,0,0,17,14,14,14,17,18,0,21,14,17,14,20,14,20,20,14,17,18,21,20,21,14,17,18,20,21,14,17,18,20,21,14,17,18,20,21,14,17,18,20,21,14,17,18,14,20,21,14,17,18,20,21,14,17,18,20,20,21,21,14,14,17,17,18,18,20,21,14,17,18,20,21,14,17,18,14,17,18,20,21,14,17,18,14,17,18,21,20,21,14,17,18,14,20,20,21,14,17,18,20,21,14,17,18,20,21,14,17,18,20,21,14,17,18,20,21,14,17,18,20,21,14,17,18],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[14,15],[[11,[15,16]]]],[[17,[11,[16]],[11,[16]]],[[11,[16]]]],[14,18],0,[14,18],0,0,[14,19],[17,19],[18,19],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20,20],[21,21],[14,14],[17,17],[18,18],[[]],[[]],[[]],[[]],[[]],[[20,20],22],[[21,21],22],[[14,14],22],[[17,17],22],[[18,18],22],[14],[[20,20],23],[[21,21],23],[[14,14],23],[[17,17],23],[[18,18],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[20,5],6],[[20,5],6],[[21,5],6],[[21,5],6],[[14,5],[[11,[24]]]],[[14,5],[[11,[24]]]],[[17,5],[[11,[24]]]],[[17,5],[[11,[24]]]],[[18,5],[[11,[24]]]],[[18,5],[[11,[24]]]],[[]],[[]],[[]],[[]],[[]],[7,[[8,[20]]]],[7,[[8,[21]]]],[7,[[11,[14,25]]]],[7,[[11,[17,25]]]],[7,[[11,[18,25]]]],[19,[[11,[14]]]],[19,[[11,[17]]]],[19,[[11,[18]]]],[20],[21],[14],[17],[18],[14,26],[17,26],[18,26],0,[[]],[[]],[[]],[[]],[[]],[14,17],0,[[20,20],[[27,[22]]]],[[21,21],[[27,[22]]]],[[14,14],[[27,[22]]]],[[17,17],[[27,[22]]]],[[18,18],[[27,[22]]]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Opcode"],[3,"Regs"],[4,"CpuError"],[4,"Op"],[4,"ArgType"],[15,"str"],[3,"Instr"],[3,"Sample"],[4,"Ordering"],[15,"bool"],[3,"Error"],[4,"ParseError"],[15,"usize"],[4,"Option"]]},\
"aoc_2018_day_17":{"doc":"Advent of Code 2018: Day 17: Reservoir Research","t":[0,0,0,5,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,13,4,6,13,6,13,18,6,4,18,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clay_ranges","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Clay","ClayRange","Coord","DrySand","Grid","Horiz","NUM_VARIANTS","Pos","Tile","VARIANTS","Vert","Water","WetSand","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","from_str","hash","idx","into","into","partial_cmp","partial_cmp","ranges","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","valid","x","y","x","x_end","x_start","y","y_end","y_start"],"q":["aoc_2018_day_17","","","","aoc_2018_day_17::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_17::logic","","aoc_2018_day_17::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_17::model::ClayRange","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,0,0,14,0,16,14,0,0,14,16,14,14,14,14,16,14,16,14,16,14,16,14,16,14,14,16,14,16,14,14,16,16,14,16,14,16,14,16,14,14,16,14,16,16,14,16,14,16,14,16,14,16,14,16,16,16,16,23,24,24,24,23,23],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],0,[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[14,15],[[]],[[]],[[]],[[]],[14,14],[16,16],[[]],[[]],[[14,14],17],[[16,16],17],[[],14],[[14,14],18],[[16,16],18],[[],18],[[],18],[[14,5],6],[[14,5],6],[[16,5],6],[[16,5],6],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[16]]]],[15,[[11,[14]]]],[16],[14,19],[[]],[[]],[[14,14],[[20,[17]]]],[[16,16],[[20,[17]]]],[16],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[16,18],[16,[[22,[21]]]],[16,[[22,[21]]]],0,0,0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"],[15,"str"],[4,"ClayRange"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"],[6,"Coord"],[3,"RangeInclusive"],[13,"Vert"],[13,"Horiz"]]},\
"aoc_2018_day_18":{"doc":"Advent of Code 2018: Day 18: Settlers of The North Pole","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,18,13,6,4,13,18,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Grid","NUM_VARIANTS","Open","Pos","Tile","Tree","VARIANTS","Yard","as_str","borrow","borrow_mut","clone","clone_into","cmp","default","eq","equivalent","fmt","fmt","from","from_parser","from_str","hash","idx","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2018_day_18","","","","aoc_2018_day_18::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_18::logic","","aoc_2018_day_18::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,14,14,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,[14,15],[[]],[[]],[14,14],[[]],[[14,14],16],[[],14],[[14,14],17],[[],17],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[15,[[11,[14]]]],[14],[14,18],[[]],[[14,14],[[19,[16]]]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"],[15,"str"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"]]},\
"aoc_2018_day_19":{"doc":"Advent of Code 2018: Day 19: Go With The Flow","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,13,13,13,4,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,13,18,18,18,18,4,4,13,13,13,6,13,13,13,18,18,18,18,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","ip","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Add","Addi","Addr","ArgType","Ban","Bani","Banr","Bor","Bori","Borr","CpuError","Eq","Eqir","Eqri","Eqrr","Gt","Gtir","Gtri","Gtrr","Halt","Ignore","Imm","Instr","Internal","Mul","Muli","Mulr","NUM_VARIANTS","NUM_VARIANTS","NUM_VARIANTS","NUM_VARIANTS","Op","Opcode","Overflow","Reg","Register","Regs","Set","Seti","Setr","VARIANTS","VARIANTS","VARIANTS","VARIANTS","Val","apply","apply","arg_a","arg_b","as_str","as_str","as_str","as_str","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","data","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","from_str","from_str","from_str","from_str","hash","hash","hash","hash","idx","idx","idx","idx","into","into","into","into","op","partial_cmp","partial_cmp","partial_cmp","partial_cmp","provide","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["aoc_2018_day_19","","","","aoc_2018_day_19::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_19::logic","","aoc_2018_day_19::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,17,14,14,0,17,14,14,17,14,14,0,17,14,14,14,17,14,14,14,16,18,18,0,16,17,14,14,14,17,18,16,0,0,16,18,16,0,17,14,14,14,17,18,16,0,14,17,14,14,14,17,18,16,14,17,18,16,14,17,18,16,14,17,18,16,14,17,18,16,14,17,18,16,14,14,17,18,16,14,17,18,16,14,14,17,17,18,18,16,16,14,17,18,16,14,17,18,16,14,17,18,16,14,17,18,16,14,17,18,16,14,17,18,16,14,14,17,18,16,16,14,17,18,16,14,17,18,16,14,17,18,16,14,17,18,16,14,17,18,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[14,15],[[11,[15,16]]]],[[17,[11,[16]],[11,[16]]],[[11,[16]]]],[14,18],[14,18],[14,19],[17,19],[18,19],[16,19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[17,17],[18,18],[16,16],[[]],[[]],[[]],[[]],[[14,14],20],[[17,17],20],[[18,18],20],[[16,16],20],[14],[[14,14],21],[[17,17],21],[[18,18],21],[[16,16],21],[[],21],[[],21],[[],21],[[],21],[[14,5],[[11,[22]]]],[[14,5],[[11,[22]]]],[[17,5],[[11,[22]]]],[[17,5],[[11,[22]]]],[[18,5],[[11,[22]]]],[[18,5],[[11,[22]]]],[[16,5],[[11,[22]]]],[[16,5],[[11,[22]]]],[[]],[[]],[[]],[[]],[7,[[11,[14,23]]]],[7,[[11,[17,23]]]],[7,[[11,[18,23]]]],[7,[[11,[16,23]]]],[19,[[11,[14]]]],[19,[[11,[17]]]],[19,[[11,[18]]]],[19,[[11,[16]]]],[14],[17],[18],[16],[14,24],[17,24],[18,24],[16,24],[[]],[[]],[[]],[[]],[14,17],[[14,14],[[25,[20]]]],[[17,17],[[25,[20]]]],[[18,18],[[25,[20]]]],[[16,16],[[25,[20]]]],[26],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[4,"Opcode"],[3,"Regs"],[4,"CpuError"],[4,"Op"],[4,"ArgType"],[15,"str"],[4,"Ordering"],[15,"bool"],[3,"Error"],[4,"ParseError"],[15,"usize"],[4,"Option"],[3,"Demand"]]},\
"aoc_2018_day_20":{"doc":"Advent of Code 2018: Day 20: A Regular Map","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,13,6,6,13,13,13,6,18,18,13,13,13,13,13,13,13,13,13,13,6,4,4,3,4,3,13,13,13,13,13,13,18,18,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","dist_two","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","regex","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Branch","Coord","Dir","East","East","EastWest","Grid","NUM_VARIANTS","NUM_VARIANTS","None","North","North","NorthEast","NorthEastWest","NorthSouth","NorthSouthEast","NorthSouthEastWest","NorthSouthWest","NorthWest","Pos","Room","RouteDir","RouteRegex","RouteRegexItem","RouteRegexString","South","South","SouthEast","SouthEastWest","SouthWest","Span","VARIANTS","VARIANTS","West","West","as_str","as_str","bitor_assign","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","default","deref","deref","deref","doors","east","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_parser","from_parser","from_parser","from_parser","from_parser","from_str","from_str","hash","hash","hash","hash","hash","idx","idx","into","into","into","into","into","north","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rev","south","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","west","0","0"],"q":["aoc_2018_day_20","","","","aoc_2018_day_20::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_20::logic","","aoc_2018_day_20::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_20::model::RouteRegexItem",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,19,0,0,14,16,14,0,14,16,14,14,16,14,14,14,14,14,14,14,0,0,0,0,0,0,14,16,14,14,14,19,14,16,14,16,14,16,14,14,16,17,18,19,14,16,17,18,19,14,16,17,18,19,14,16,17,18,19,14,16,17,18,19,14,16,17,18,14,14,14,16,17,18,19,14,16,17,18,19,14,14,16,16,17,17,18,18,19,19,14,16,17,18,19,14,16,17,18,19,14,16,14,16,17,18,19,14,16,14,16,17,18,19,14,14,16,17,18,19,16,14,14,16,17,18,19,14,16,17,18,19,14,16,17,18,19,14,16,17,18,19,14,16,17,18,19,14,26,27],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[14,15],[16,15],[[14,16]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[16,16],[17,17],[18,18],[19,19],[[]],[[]],[[]],[[]],[[]],[[14,14],20],[[16,16],20],[[17,17],20],[[18,18],20],[[19,19],20],[[],14],[16,21],[17,18],[18],[14,[[22,[21]]]],[14,23],[[14,14],23],[[16,16],23],[[17,17],23],[[18,18],23],[[19,19],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[14,5],6],[[14,5],6],[[16,5],6],[[16,5],6],[[17,5],6],[[17,5],6],[[18,5],6],[[18,5],6],[[19,5],6],[[19,5],6],[[]],[[]],[[]],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[16]]]],[7,[[8,[17]]]],[7,[[8,[18]]]],[7,[[8,[19]]]],[15,[[11,[14]]]],[15,[[11,[16]]]],[14],[16],[17],[18],[19],[14,24],[16,24],[[]],[[]],[[]],[[]],[[]],[14,23],[[14,14],[[25,[20]]]],[[16,16],[[25,[20]]]],[[17,17],[[25,[20]]]],[[18,18],[[25,[20]]]],[[19,19],[[25,[20]]]],[16,16],[14,23],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[14,23],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Room"],[15,"str"],[4,"RouteDir"],[3,"RouteRegex"],[3,"RouteRegexString"],[4,"RouteRegexItem"],[4,"Ordering"],[6,"Dir"],[3,"ArrayVec"],[15,"bool"],[15,"usize"],[4,"Option"],[13,"Span"],[13,"Branch"]]},\
"aoc_2018_day_21":{"doc":"Advent of Code 2018: Day 21: Chronal Conversion","t":[0,0,0,0,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,13,13,13,4,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,13,18,18,18,18,4,4,13,13,13,6,13,13,13,18,18,18,18,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["analyser","input","logic","model","puzzle_metadata","Args","Block","SuperBlock","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","eq","equivalent","fmt","fmt","from","from","from","from_arg_matches","from_arg_matches_mut","hash","into","into","into","into_app","into_app_for_update","partial_cmp","run","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","ip","max_instrs","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Add","Addi","Addr","ArgType","Ban","Bani","Banr","Bor","Bori","Borr","CpuError","Eq","Eqir","Eqri","Eqrr","Gt","Gtir","Gtri","Gtrr","Halt","Ignore","Imm","Instr","Internal","Mul","Muli","Mulr","NUM_VARIANTS","NUM_VARIANTS","NUM_VARIANTS","NUM_VARIANTS","Op","Opcode","Overflow","Reg","Register","Regs","Set","Seti","Setr","VARIANTS","VARIANTS","VARIANTS","VARIANTS","Val","apply","apply","arg_a","arg_b","as_str","as_str","as_str","as_str","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","data","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","from_str","from_str","from_str","from_str","hash","hash","hash","hash","idx","idx","idx","idx","into","into","into","into","op","partial_cmp","partial_cmp","partial_cmp","partial_cmp","provide","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["aoc_2018_day_21","","","","","aoc_2018_day_21::analyser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_21::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_21::logic","","aoc_2018_day_21::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,11,11,11,4,5,11,4,5,4,5,4,5,5,5,5,4,5,11,4,5,11,11,5,11,4,5,11,11,5,0,4,5,11,4,5,11,4,5,11,4,5,11,11,0,0,17,18,17,18,17,18,17,18,18,17,17,18,18,17,18,17,18,17,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,0,0,26,23,23,0,26,23,23,26,23,23,0,26,23,23,23,26,23,23,23,25,27,27,0,25,26,23,23,23,26,27,25,0,0,25,27,25,0,26,23,23,23,26,27,25,0,23,26,23,23,23,26,27,25,23,26,27,25,23,26,27,25,23,26,27,25,23,26,27,25,23,26,27,25,23,23,26,27,25,23,26,27,25,23,23,26,26,27,27,25,25,23,26,27,25,23,26,27,25,23,26,27,25,23,26,27,25,23,26,27,25,23,26,27,25,23,23,26,27,25,25,23,26,27,25,23,26,27,25,23,26,27,25,23,26,27,25,23,26,27,25],"f":[0,0,0,0,[[],[[2,[1]]]],0,0,0,[3,3],[3,3],[[]],[[]],[[]],[[]],[[]],[[]],[4,4],[5,5],[[]],[[]],[[5,5],6],[[5,5],7],[[],7],[[4,8],9],[[5,8],9],[[]],[[]],[[]],[10,[[13,[11,12]]]],[10,[[13,[11,12]]]],[5],[[]],[[]],[[]],[[],3],[[],3],[[5,5],[[14,[6]]]],[11,15],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],16],[[],16],[[],16],[[11,10],[[13,[12]]]],[[11,10],[[13,[12]]]],0,0,[[]],[[]],[[]],[[]],[17,17],[18,18],[[]],[[]],[[],18],[[17,8],9],[[17,8],9],[[18,8],9],[[18,8],9],[[]],[[]],[19,[[20,[17]]]],[19,[[20,[18]]]],0,[[]],[[]],0,0,0,[[],[[15,[18]]]],[[]],[[]],[[],21],[[],21],[[],13],[[],13],[[],13],[[],13],[[],16],[[],16],[17,[[15,[22]]]],[17,[[15,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[23,24],[[13,[24,25]]]],[[26,[13,[25]],[13,[25]]],[[13,[25]]]],[23,27],[23,27],[23,28],[26,28],[27,28],[25,28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[23,23],[26,26],[27,27],[25,25],[[]],[[]],[[]],[[]],[[23,23],6],[[26,26],6],[[27,27],6],[[25,25],6],[23],[[23,23],7],[[26,26],7],[[27,27],7],[[25,25],7],[[],7],[[],7],[[],7],[[],7],[[23,8],[[13,[29]]]],[[23,8],[[13,[29]]]],[[26,8],[[13,[29]]]],[[26,8],[[13,[29]]]],[[27,8],[[13,[29]]]],[[27,8],[[13,[29]]]],[[25,8],[[13,[29]]]],[[25,8],[[13,[29]]]],[[]],[[]],[[]],[[]],[19,[[13,[23,30]]]],[19,[[13,[26,30]]]],[19,[[13,[27,30]]]],[19,[[13,[25,30]]]],[28,[[13,[23]]]],[28,[[13,[26]]]],[28,[[13,[27]]]],[28,[[13,[25]]]],[23],[26],[27],[25],[23,31],[26,31],[27,31],[25,31],[[]],[[]],[[]],[[]],[23,26],[[23,23],[[14,[6]]]],[[26,26],[[14,[6]]]],[[27,27],[[14,[6]]]],[[25,25],[[14,[6]]]],[32],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],16],[[],16],[[],16],[[],16]],"p":[[8,"Puzzle"],[3,"Box"],[6,"Command"],[3,"SuperBlock"],[3,"Block"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[3,"Args"],[3,"Error"],[4,"Result"],[4,"Option"],[6,"GenResult"],[3,"TypeId"],[3,"Input"],[3,"InputParams"],[3,"Parser"],[6,"ParseResult"],[3,"String"],[15,"u64"],[4,"Opcode"],[3,"Regs"],[4,"CpuError"],[4,"Op"],[4,"ArgType"],[15,"str"],[3,"Error"],[4,"ParseError"],[15,"usize"],[3,"Demand"]]},\
"aoc_2018_day_22":{"doc":"Advent of Code 2018: Day 22: Mode Maze","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,12,11,11,11,11,12,11,11,11,11,11,11,5,5,13,6,4,6,18,13,13,6,4,13,13,18,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","depth","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","left_factor","max_mins","max_target","modulo","params","parse","target","to_owned","to_owned","to_string","to_string","top_factor","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Climbing","Coord","Equip","Grid","NUM_VARIANTS","Narrow","Neither","Pos","Region","Rocky","Torch","VARIANTS","Val","Wet","as_str","borrow","borrow","borrow_mut","borrow_mut","can_equip","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from_parser","from_str","hash","hash","idx","into","into","partial_cmp","partial_cmp","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2018_day_22","","","","aoc_2018_day_22::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_22::logic","","aoc_2018_day_22::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,4,4,4,4,3,4,3,3,4,3,4,4,3,4,3,4,3,4,0,0,16,0,0,0,14,14,16,0,0,14,16,14,0,14,14,14,16,14,16,14,14,16,14,16,14,16,14,16,14,16,14,14,16,14,16,14,14,14,16,14,14,16,14,16,14,16,14,14,16,14,16,14,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,0,0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],0,[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[14,15],[[]],[[]],[[]],[[]],[[14,16],17],[14,14],[16,16],[[]],[[]],[[14,14],18],[[16,16],18],[[14,14],17],[[16,16],17],[[],17],[[],17],[[14,5],6],[[14,5],6],[[16,5],6],[[]],[[]],[7,[[8,[14]]]],[15,[[11,[14]]]],[14],[16],[14,19],[[]],[[]],[[14,14],[[20,[18]]]],[[16,16],[[20,[18]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Region"],[15,"str"],[4,"Equip"],[15,"bool"],[4,"Ordering"],[15,"usize"],[4,"Option"]]},\
"aoc_2018_day_23":{"doc":"Advent of Code 2018: Day 23: Experimental Emergency …","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,3,3,18,18,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,12,12,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_iters","nanobots","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","CoordRange","Nanobot","OPEN","OPEN","Pos","Region","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","dist","dist","end","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_bot","from_parser","hash","hash","hash","into","into","into","new","nnp","npn","overlap","overlap","partial_cmp","partial_cmp","partial_cmp","pnn","pos","ppp","radius","signs","start","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","NNP","NPN","PNN","PPP"],"q":["aoc_2018_day_23","","","","aoc_2018_day_23::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_23::logic","","aoc_2018_day_23::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_23::model::signs","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,16,17,0,0,15,16,17,15,16,17,15,16,17,15,16,17,15,16,17,16,17,17,15,16,17,15,16,17,15,15,16,17,15,16,17,16,15,15,16,17,15,16,17,17,16,16,16,17,15,16,17,16,15,16,15,0,17,15,16,17,15,15,16,17,15,16,17,15,16,17,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[15,15],[16,16],[17,17],[[]],[[]],[[]],[[15,15],18],[[16,16],18],[[17,17],18],[16,19],[17,19],0,[[15,15],20],[[16,16],20],[[17,17],20],[[],20],[[],20],[[],20],[[15,5],6],[[15,5],6],[[16,5],6],[[17,5],6],[[]],[[]],[[]],[15,[[21,[16]]]],[7,[[8,[15]]]],[15],[16],[17],[[]],[[]],[[]],[[22,19,22],[[21,[17]]]],0,0,[[16,16],[[23,[16]]]],[[17,17],[[23,[17]]]],[[15,15],[[23,[18]]]],[[16,16],[[23,[18]]]],[[17,17],[[23,[18]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[15,"i32"],[3,"Nanobot"],[3,"Region"],[3,"CoordRange"],[4,"Ordering"],[6,"Coord"],[15,"bool"],[6,"NumResult"],[6,"Pos"],[4,"Option"]]},\
"aoc_2018_day_24":{"doc":"Advent of Code 2018: Day 24: Immune System Simulator 20XX","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,4,13,13,13,3,18,13,13,18,6,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","immune_system","infection","into","into","max_boost","max_rounds","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","AttackType","Bludgeoning","Cold","Fire","Group","NUM_VARIANTS","Radiation","Slashing","VARIANTS","Val","as_str","attack_damage","attack_type","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","effective_power","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","from_str","has_immunity","has_weakness","hash","hash","hit_points","idx","immunities","initiative","into","into","num_units","partial_cmp","partial_cmp","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","weaknesses"],"q":["aoc_2018_day_24","","","","aoc_2018_day_24::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_24::logic","","aoc_2018_day_24::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,3,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,0,14,14,14,14,0,14,16,16,16,14,16,14,16,14,16,14,16,14,16,16,14,16,14,16,16,14,14,16,14,16,14,14,16,16,16,14,16,14,16,16,16,14,16,16,14,16,14,16,14,16,14,16,14,16,14,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,0,[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,[14,15],0,0,[[]],[[]],[[]],[[]],[16,16],[14,14],[[]],[[]],[[16,16],17],[[14,14],17],[16,13],[[16,16],18],[[14,14],18],[[],18],[[],18],[[16,5],6],[[16,5],6],[[14,5],6],[[14,5],6],[[]],[[]],[7,[[8,[16]]]],[7,[[8,[14]]]],[15,[[11,[14]]]],[[16,14],18],[[16,14],18],[16],[14],0,[14,19],0,0,[[]],[[]],0,[[16,16],[[20,[17]]]],[[14,14],[[20,[17]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[4,"AttackType"],[15,"str"],[3,"Group"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"]]},\
"aoc_2018_day_25":{"doc":"Advent of Code 2018: Day 25: Four-Dimensional Adventure","t":[0,0,0,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputCoord","InputParams","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coord","coords","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","params","parse","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","Coord","Pos"],"q":["aoc_2018_day_25","","","","aoc_2018_day_25::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2018_day_25::logic","aoc_2018_day_25::model",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,4,3,5,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,3,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],0,0,[[],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[8,[[9,[5]]]],[[]],[[]],[[]],0,[[],[[10,[5]]]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[3,[[10,[14]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputCoord"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2019":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5],"n":["day_01","day_02","day_03","day_04","day_05","day_06","day_07","day_08","day_09","day_10","day_11","day_12","day_13","day_14","day_15","day_16","day_17","day_18","day_19","day_20","day_21","day_22","day_23","day_24","day_25","puzzle_metadata"],"q":["aoc_2019","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[3,[[2,[1]]]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Vec"]]},\
"aoc_2019_day_01":{"doc":"Advent of Code 2019: Day 1: The Tyranny of the Rocket …","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","module_masses","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2019_day_01","","","aoc_2019_day_01::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_01::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2019_day_02":{"doc":"Advent of Code 2019: Day 2: 1202 Program Alarm","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_ops","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Cpu","Mem","RunResult","Val"],"q":["aoc_2019_day_02","","","","aoc_2019_day_02::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_02::logic","","aoc_2019_day_02::model","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"]]},\
"aoc_2019_day_03":{"doc":"Advent of Code 2019: Day 3: Crossed Wires","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,6,6,3,6,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","wire_0","wire_1","part_one","part_two","Dir","Pos","Step","Val","borrow","borrow_mut","clone","clone_into","cmp","dir","eq","equivalent","fmt","fmt","from","from_parser","hash","into","num","partial_cmp","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2019_day_03","","","","aoc_2019_day_03::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_03::logic","","aoc_2019_day_03::model","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,3,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,0,[[]],[[]],[15,15],[[]],[[15,15],16],0,[[15,15],17],[[],17],[[15,5],6],[[15,5],6],[[]],[7,[[8,[15]]]],[15],[[]],0,[[15,15],[[18,[16]]]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[15,"u32"],[3,"Step"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2019_day_04":{"doc":"Advent of Code 2019: Day 4: Secure Container","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max","min","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2019_day_04","","","aoc_2019_day_04::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_04::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2019_day_05":{"doc":"Advent of Code 2019: Day 5: Sunny with a Chance of …","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Cpu","Mem","RunResult","Val"],"q":["aoc_2019_day_05","","","","aoc_2019_day_05::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_05::logic","","aoc_2019_day_05::model","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"]]},\
"aoc_2019_day_06":{"doc":"Advent of Code 2019: Day 6: Universal Orbit Map","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","orbits","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Orbit","base","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","fmt","from","from_parser","into","partial_cmp","satl","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2019_day_06","","","","aoc_2019_day_06::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_06::logic","","aoc_2019_day_06::model","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[14,14],16],[[],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],[[14,14],[[17,[15]]]],0,[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Orbit"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2019_day_07":{"doc":"Advent of Code 2019: Day 7: Amplification Circuit","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_ops_one","max_ops_two","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Cpu","Val"],"q":["aoc_2019_day_07","","","","aoc_2019_day_07::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_07::logic","","aoc_2019_day_07::model",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"]]},\
"aoc_2019_day_08":{"doc":"Advent of Code 2019: Day 8: Space Image Format","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,13,18,4,13,18,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","pixels","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Black","NUM_VARIANTS","Pixel","Transparent","VARIANTS","White","as_str","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","fmt","from","from_parser","from_str","hash","idx","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2019_day_08","","","","aoc_2019_day_08::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_08::logic","","aoc_2019_day_08::model","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[10]]]],0,0,0,0,0,0,[14,15],[[]],[[]],[14,14],[[]],[[14,14],16],[[14,14],17],[[],17],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[15,[[11,[14]]]],[14],[14,18],[[]],[[14,14],[[19,[16]]]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Pixel"],[15,"str"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"]]},\
"aoc_2019_day_09":{"doc":"Advent of Code 2019: Day 9: Sensor Boost","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Cpu","Val"],"q":["aoc_2019_day_09","","","","aoc_2019_day_09::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_09::logic","","aoc_2019_day_09::model",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"]]},\
"aoc_2019_day_10":{"doc":"Advent of Code 2019: Day 10: Monitoring Station","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,13,6,3,3,13,6,18,6,4,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Asteroid","Coord","Dir","DirVec","Empty","Grid","NUM_VARIANTS","Pos","Space","VARIANTS","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","dir","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_str","hash","hash","hash","idx","into","into","into","mul","new","partial_cmp","partial_cmp","partial_cmp","pos","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["aoc_2019_day_10","","","","aoc_2019_day_10::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_10::logic","","aoc_2019_day_10::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,15,0,0,0,15,0,15,0,0,15,15,15,17,18,15,17,18,15,17,18,15,17,18,15,17,18,15,17,15,17,18,15,17,18,15,15,17,18,15,17,18,15,15,15,17,18,15,15,17,18,17,17,15,17,18,17,15,17,18,15,15,17,18,15,17,18,15,17,18],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,0,0,0,0,0,0,0,[15,16],[[]],[[]],[[]],[[]],[[]],[[]],[15,15],[17,17],[18,18],[[]],[[]],[[]],[[15,15],19],[[17,17],19],[[18,18],19],[[],15],0,[[15,15],20],[[17,17],20],[[18,18],20],[[],20],[[],20],[[],20],[[15,5],6],[[15,5],6],[[17,5],6],[[18,5],6],[[]],[[]],[[]],[7,[[8,[15]]]],[16,[[11,[15]]]],[15],[17],[18],[15,21],[[]],[[]],[[]],0,[22,17],[[15,15],[[23,[19]]]],[[17,17],[[23,[19]]]],[[18,18],[[23,[19]]]],[17,22],[[]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[6,"Coord"],[4,"Space"],[15,"str"],[3,"DirVec"],[3,"Dir"],[4,"Ordering"],[15,"bool"],[15,"usize"],[6,"Pos"],[4,"Option"]]},\
"aoc_2019_day_11":{"doc":"Advent of Code 2019: Day 11: Space Police","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,13,4,6,6,6,6,18,13,6,18,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_step_ops","max_steps","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Black","Colour","Coord","Cpu","Dir","Grid","NUM_VARIANTS","None","Pos","VARIANTS","Val","White","as_str","borrow","borrow_mut","clone","clone_into","cmp","default","eq","equivalent","fmt","fmt","from","from_parser","from_str","hash","idx","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2019_day_11","","","","aoc_2019_day_11::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_11::logic","","aoc_2019_day_11::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,0,0,0,0,0,14,14,0,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,[14,15],[[]],[[]],[14,14],[[]],[[14,14],16],[[],14],[[14,14],17],[[],17],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[15,[[11,[14]]]],[14],[14,18],[[]],[[14,14],[[19,[16]]]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Colour"],[15,"str"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"]]},\
"aoc_2019_day_12":{"doc":"Advent of Code 2019: Day 12: The N-Body Problem","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","moons","num_steps_one","num_steps_two","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Axis","Coord","Energy","Moon","MoonAxis","Pos","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","from","from","hash","into","into","kinetic_energy","new","partial_cmp","pos","pos","potential_energy","to_owned","total_energy","try_from","try_from","try_into","try_into","type_id","type_id","vel","vel"],"q":["aoc_2019_day_12","","","","aoc_2019_day_12::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_12::logic","","aoc_2019_day_12::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0,0,18,15,18,15,15,15,15,15,15,15,18,15,15,18,15,18,18,15,18,15,18,15,18,18,15,18,15,18,15,18,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[15,15],[[]],[[15,15],16],[[15,15],17],[[],17],[[15,5],6],[[]],[[]],[15],[[]],[[]],[18,13],[19,18],[[15,15],[[20,[16]]]],0,0,[18,13],[[]],[18,13],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Energy"],[15,"u64"],[3,"MoonAxis"],[4,"Ordering"],[15,"bool"],[3,"Moon"],[6,"Pos"],[4,"Option"]]},\
"aoc_2019_day_13":{"doc":"Advent of Code 2019: Day 13: Care Package","t":[0,0,0,5,0,3,3,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,5,5,5,13,13,6,3,4,6,13,3,4,6,13,13,13,13,18,13,13,6,6,4,18,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","run","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core_max_steps","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","game_max_steps","into","into","params","parse","size_max_steps","step_max_ops","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","get_size","part_one","part_two","Ball","Block","Coord","Core","CoreNext","Cpu","Empty","Game","GameNext","Grid","Halt","Halt","Input","Input","NUM_VARIANTS","Output","Paddle","Pos","RunResult","Tile","VARIANTS","Val","Wall","as_str","ball_pos","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","default","eq","equivalent","fmt","fmt","from","from","from","from","from","from_parser","from_str","grid","hash","idx","input","input","into","into","into","into","into","new","new","next","next","paddle_pos","partial_cmp","score","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","0","1","RunArgs","augment_args","augment_args_for_update","borrow","borrow_mut","from","from_arg_matches","from_arg_matches_mut","into","into_app","into_app_for_update","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":["aoc_2019_day_13","","","","","aoc_2019_day_13::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_13::logic","","","aoc_2019_day_13::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_13::model::CoreNext","","aoc_2019_day_13::run","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,4,3,3,4,4,3,4,3,4,4,3,4,3,4,4,4,3,4,3,4,3,4,3,4,3,4,0,0,0,16,16,0,0,0,0,16,0,0,0,25,26,25,26,16,25,16,0,0,0,16,0,16,16,18,23,25,18,26,16,23,25,18,26,16,16,16,16,16,16,16,16,16,23,25,18,26,16,16,16,18,16,16,23,18,23,25,18,26,16,23,18,23,18,18,16,18,16,16,23,25,18,26,16,23,25,18,26,16,23,25,18,26,16,32,32,0,30,30,30,30,30,30,30,30,30,30,0,30,30,30,30,30],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]],[3,[[9,[15]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,17],[18,13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,16],[[]],[[16,16],19],[[],16],[[16,16],20],[[],20],[[16,5],6],[[16,5],6],[[]],[[]],[[]],[[]],[[]],[7,[[8,[16]]]],[17,[[11,[16]]]],[18,21],[16],[16,22],[[23,24]],[[18,24]],[[]],[[]],[[]],[[]],[[]],[[3,20],23],[[3,20,13],[[9,[18]]]],[23,[[9,[25]]]],[18,[[9,[26]]]],[18,13],[[16,16],[[27,[19]]]],[18,24],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],0,0,0,[28,28],[28,28],[[]],[[]],[[]],[29,[[11,[30,31]]]],[29,[[11,[30,31]]]],[[]],[[],28],[[],28],[30,9],[[],11],[[],11],[[],12],[[30,29],[[11,[31]]]],[[30,29],[[11,[31]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Pos"],[15,"u32"],[15,"i32"],[4,"Tile"],[15,"str"],[3,"Game"],[4,"Ordering"],[15,"bool"],[6,"Grid"],[15,"usize"],[3,"Core"],[6,"Val"],[4,"CoreNext"],[4,"GameNext"],[4,"Option"],[6,"Command"],[3,"ArgMatches"],[3,"RunArgs"],[3,"Error"],[13,"Output"]]},\
"aoc_2019_day_14":{"doc":"Advent of Code 2019: Day 14: Space Stoichiometry","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,6,6,6,5,5,3,6,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","num_ore","params","parse","reactions","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Dependencies","Order","Reactions","part_one","part_two","ChemQty","Qty","Reaction","borrow","borrow","borrow_mut","borrow_mut","chem","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","hash","hash","inputs","into","into","output","partial_cmp","partial_cmp","qty","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2019_day_14","","","","aoc_2019_day_14::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_14::logic","","","","","aoc_2019_day_14::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0,0,14,15,14,15,15,14,15,14,15,14,15,14,15,14,15,14,14,15,15,14,15,14,15,14,15,14,14,15,14,14,15,15,14,15,14,15,14,15,14,15,14,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,0,[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,[[]],[[]],[[]],[[]],0,[14,14],[15,15],[[]],[[]],[[14,14],16],[[15,15],16],[[14,14],17],[[15,15],17],[[],17],[[],17],[[14,5],6],[[14,5],6],[[15,5],6],[[15,5],6],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[15]]]],[14],[15],0,[[]],[[]],0,[[14,14],[[18,[16]]]],[[15,15],[[18,[16]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Qty"],[3,"Reaction"],[3,"ChemQty"],[4,"Ordering"],[15,"bool"],[4,"Option"]]},\
"aoc_2019_day_15":{"doc":"Advent of Code 2019: Day 15: Oxygen System","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,13,6,3,4,6,6,13,13,6,13,18,13,13,6,6,4,13,18,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Blocked","Coord","Core","CoreStep","Cpu","Dir","Empty","Found","Grid","Moved","NUM_VARIANTS","Oxygen","OxygenSystem","Pos","RunResult","Tile","Unknown","VARIANTS","Val","Wall","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","eq","equivalent","fmt","fmt","from","from","from","from_parser","from_str","hash","idx","into","into","into","new","partial_cmp","step","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["aoc_2019_day_15","","","","aoc_2019_day_15::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_15::logic","","aoc_2019_day_15::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,22,0,0,0,0,0,14,22,0,22,14,14,14,0,0,0,14,14,0,14,14,22,14,16,22,14,16,14,16,14,16,14,14,14,14,14,14,22,14,16,14,14,14,14,22,14,16,16,14,16,14,16,14,22,14,16,22,14,16,22,14,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[14,15],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[16,16],[[]],[[]],[[14,14],17],[[],14],[[14,14],18],[[],18],[[14,5],6],[[14,5],6],[[]],[[]],[[]],[7,[[8,[14]]]],[15,[[11,[14]]]],[14],[14,19],[[]],[[]],[[]],[3,16],[[14,14],[[20,[17]]]],[[16,21],[[11,[22,23]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"],[15,"str"],[3,"Core"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"],[6,"Dir"],[4,"CoreStep"],[6,"RunResult"]]},\
"aoc_2019_day_16":{"doc":"Advent of Code 2019: Day 16: Flawed Frequency Transmission","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_signal","num_iters","num_reps","offset_digits","params","parse","result_digits","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2019_day_16","","","aoc_2019_day_16::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_16::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,4,4,4,4,3,4,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,0,0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[10]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"aoc_2019_day_17":{"doc":"Advent of Code 2019: Day 17: Set and Forget","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,6,6,6,5,5,6,6,6,13,6,13,18,6,13,13,13,13,13,13,4,4,6,18,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Func","Funcs","Main","part_one","part_two","Coord","Cpu","Dir","Empty","Grid","Left","NUM_VARIANTS","Pos","Right","RobotDown","RobotLeft","RobotRight","RobotUp","Scaffold","Step","Tile","Turn","VARIANTS","Val","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from_parser","from_str","hash","hash","idx","into","into","partial_cmp","partial_cmp","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0"],"q":["aoc_2019_day_17","","","","aoc_2019_day_17::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_17::logic","","","","","aoc_2019_day_17::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_17::model::Step",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0,0,15,0,17,15,0,17,15,15,15,15,15,0,0,0,15,0,15,15,17,15,17,15,17,15,17,15,17,15,15,17,15,17,15,15,17,17,15,17,15,15,15,17,15,15,17,15,17,15,17,15,17,15,17,15,17,15,17,22,23],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,0,[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[15,16],[[]],[[]],[[]],[[]],[15,15],[17,17],[[]],[[]],[[15,15],18],[[17,17],18],[[],15],[[15,15],19],[[17,17],19],[[],19],[[],19],[[15,5],6],[[15,5],6],[[17,5],6],[[17,5],6],[[]],[[]],[7,[[8,[15]]]],[16,[[11,[15]]]],[15],[17],[15,20],[[]],[[]],[[15,15],[[21,[18]]]],[[17,17],[[21,[18]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[6,"Val"],[4,"Tile"],[15,"str"],[4,"Step"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"],[13,"Left"],[13,"Right"]]},\
"aoc_2019_day_18":{"doc":"Advent of Code 2019: Day 18: Many-Worlds Interpretation","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,13,6,13,13,6,13,13,6,4,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","max_iters","max_path_starts","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","DeadEnd","Dir","Door","Entrance","Grid","Key","Open","Pos","Tile","Turn","Wall","borrow","borrow_mut","clone","clone_into","cmp","default","eq","equivalent","fmt","fmt","from","from_parser","hash","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id","0","0"],"q":["aoc_2019_day_18","","","","aoc_2019_day_18::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_18::logic","","aoc_2019_day_18::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_18::model::Tile",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,14,0,14,14,0,14,14,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,18,19],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[],14],[[14,14],16],[[],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[17,[15]]]],[[]],[[],10],[[],11],[[],11],[[],12],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"],[4,"Ordering"],[15,"bool"],[4,"Option"],[13,"Key"],[13,"Door"]]},\
"aoc_2019_day_19":{"doc":"Advent of Code 2019: Day 19: Tractor Beam","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Cpu","Pos","Val"],"q":["aoc_2019_day_19","","","","aoc_2019_day_19::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_19::logic","","aoc_2019_day_19::model","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2019_day_20":{"doc":"Advent of Code 2019: Day 20: Donut Maze","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,18,6,6,13,6,13,13,3,6,4,13,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","AA","Coord","Dir","Empty","Grid","Letter","Passage","Portal","Pos","Tile","Wall","ZZ","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from_parser","hash","hash","inner","into","into","label","new","partial_cmp","partial_cmp","partner","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0"],"q":["aoc_2019_day_20","","","","aoc_2019_day_20::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_20::logic","","aoc_2019_day_20::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_20::model::Tile"],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,15,0,0,14,0,14,14,0,0,0,14,15,14,15,14,15,14,15,14,15,14,15,14,14,15,14,15,14,14,15,14,15,14,14,15,15,14,15,15,15,14,15,15,14,15,14,14,15,14,15,14,15,19],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[14,14],[15,15],[[]],[[]],[[14,14],16],[[15,15],16],[[],14],[[14,14],17],[[15,15],17],[[],17],[[],17],[[14,5],6],[[14,5],6],[[15,5],6],[[]],[[]],[7,[[8,[14]]]],[14],[15],[15,17],[[]],[[]],[15],[17,15],[[14,14],[[18,[16]]]],[[15,15],[[18,[16]]]],[15,15],[[]],[[]],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"],[3,"Portal"],[4,"Ordering"],[15,"bool"],[4,"Option"],[13,"Letter"]]},\
"aoc_2019_day_21":{"doc":"Advent of Code 2019: Day 21: Springdroid Adventure","t":[0,0,0,0,5,13,4,18,13,13,3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,18,6,3,3,18,18,3,3,3,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["emul","input","logic","model","puzzle_metadata","And","Instr","J","Not","Or","Prog","Reg","T","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","char","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","eq","eq","eq","equivalent","equivalent","equivalent","eval","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","hash","hash","hash","idx","into","into","into","into_iter","is_empty","len","new","partial_cmp","partial_cmp","partial_cmp","push","test","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0","1","1","1","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_ops","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","ALL","Cpu","Frag","FragIter","MASK","NONE","Regs","RegsIter","Rules","RulesSet","Sample","Val","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","default","default","deref","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","first_hole","first_hole","first_hole","first_reg","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_slice","get","get","hash","hash","hash","hash","hash","holes","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","iter","iter","iter","iter","iter_all","last_hole","last_hole","last_hole","last_reg","len","len","len","matches","new","new","next","next","not_holes","num_conflicts","num_false","num_holes","num_jump_holes","num_jumps","num_regs","num_true","order","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","push","push","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_rule","with_rules"],"q":["aoc_2019_day_21","","","","","aoc_2019_day_21::emul","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_21::emul::Instr","","","","","","aoc_2019_day_21::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_21::logic","","aoc_2019_day_21::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,5,0,3,5,5,0,0,3,5,6,3,5,6,3,3,5,6,3,5,6,3,5,6,3,6,5,6,3,5,6,3,6,5,5,6,6,3,3,5,6,3,5,6,3,3,5,6,3,6,6,6,6,5,6,3,6,6,5,6,3,5,6,3,5,6,3,3,3,5,6,3,5,6,3,36,37,38,36,37,38,0,0,19,20,19,20,19,20,19,20,19,20,19,19,20,20,19,20,19,20,19,20,20,19,20,19,20,19,20,19,20,19,20,19,20,0,0,27,0,0,0,27,27,0,0,0,0,0,0,25,34,32,26,27,28,25,29,34,32,26,27,28,25,29,26,27,28,25,29,26,27,28,25,29,26,27,28,25,29,28,25,29,26,27,28,25,29,26,27,28,25,29,26,27,28,26,26,27,27,28,29,29,34,32,26,27,28,25,29,29,27,26,27,26,27,28,25,29,27,34,32,26,27,28,25,29,34,32,27,28,25,25,28,25,29,26,27,28,25,26,26,27,28,26,28,25,29,26,28,25,34,32,27,28,28,26,28,28,26,28,28,26,27,28,25,29,28,25,26,27,28,25,29,27,29,34,32,26,27,27,28,25,29,34,32,26,27,28,25,29,34,32,26,27,28,25,29,28,28],"f":[0,0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,4],[5,5],[6,6],[3,3],[[]],[[]],[[]],[[5,5],7],[[6,6],7],[[3,3],7],[[],6],[[5,5],8],[[6,6],8],[[3,3],8],[[],8],[[],8],[[],8],[6],[[5,9],10],[[5,9],10],[[6,9],10],[[6,9],10],[[3,9],10],[[3,9],10],[[]],[[]],[[]],[5],[6],[3],[3,11],[[]],[[]],[[]],[6,[[12,[5]]]],[6,8],[6,11],[[],6],[[5,5],[[13,[7]]]],[[6,6],[[13,[7]]]],[[3,3],[[13,[7]]]],[[6,5],13],[6,[[15,[[14,[11]]]]]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],15],[[],15],[[],15],[4,[[15,[3,17]]]],[11,[[15,[3,17]]]],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[19,19],[20,20],[[]],[[]],0,[[],20],[[19,9],10],[[19,9],10],[[20,9],10],[[20,9],10],[[]],[[]],[21,[[22,[19]]]],[21,[[22,[20]]]],[[]],[[]],0,0,[[],[[23,[20]]]],[[]],[[]],[[],16],[[],16],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[19,[[23,[24]]]],[19,[[23,[24]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[25,25]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26,26],[27,27],[28,28],[25,25],[29,29],[[]],[[]],[[]],[[]],[[]],[[26,26],7],[[27,27],7],[[28,28],7],[[25,25],7],[[29,29],7],[[],28],[[],25],[29],[[26,26],8],[[27,27],8],[[28,28],8],[[25,25],8],[[29,29],8],[[],8],[[],8],[[],8],[[],8],[[],8],[26,30],[27,30],[28,30],[26,30],[[26,9],10],[[27,9],10],[[27,9],10],[[28,9],10],[[29,9],10],[[29,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[8]]],29],[[],27],[[26,11],[[13,[8]]]],[[27,11],[[13,[8]]]],[26],[27],[28],[25],[29],[27,31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,32],[28,12],[25,[[12,[28]]]],[25,[[33,[28]]]],[28,8],[25,8],[29,8],[26,34],[27,32],[28,12],[25,[[12,[28]]]],[[],35],[26,30],[27,30],[28,30],[26,30],[28,11],[25,11],[29,11],[[26,27],8],[[],28],[[],25],[34,[[13,[[13,[8]]]]]],[32,[[13,[8]]]],[27,31],[28,30],[28,11],[26,30],[28,30],[28,30],[26,30],[28,11],[28,31],[[26,26],[[13,[7]]]],[[27,27],[[13,[7]]]],[[28,28],[[13,[7]]]],[[25,25],[[13,[7]]]],[[29,29],[[13,[7]]]],[[28,27,8],13],[[25,28]],[[]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],15],[[],15],[[],15],[[],15],[31,[[15,[27,17]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[28,27,8],[[13,[28]]]],[[28,28],[[13,[28]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Reg"],[15,"char"],[4,"Instr"],[3,"Prog"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"usize"],[3,"Iter"],[4,"Option"],[3,"Vec"],[4,"Result"],[3,"String"],[3,"Overflow"],[3,"TypeId"],[3,"Input"],[3,"InputParams"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[6,"Val"],[3,"RulesSet"],[3,"Frag"],[3,"Regs"],[3,"Rules"],[3,"Sample"],[15,"u32"],[15,"u16"],[3,"RegsIter"],[3,"IntoIter"],[3,"FragIter"],[8,"Iterator"],[13,"And"],[13,"Or"],[13,"Not"]]},\
"aoc_2019_day_22":{"doc":"Advent of Code 2019: Day 22: Slam Shuffle","t":[0,0,0,5,13,13,13,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Cut","DealIntoNewStack","DealWithIncrement","Input","InputParams","Shuffle","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deck_size_one","deck_size_two","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","init_one","init_two","into","into","into","params","parse","repeat_two","shuffles","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","part_one","part_two","Operation","apply","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","repeat","reverse","then","then_add","then_multiply","to_owned","try_from","try_into","type_id"],"q":["aoc_2019_day_22","","","","aoc_2019_day_22::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_22::input::Shuffle","","aoc_2019_day_22::logic","","aoc_2019_day_22::model","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,4,4,4,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,5,5,5,3,3,4,4,5,5,3,4,5,3,4,5,5,5,3,4,5,3,5,5,3,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,17,18,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],0,0,[[],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[8,[[9,[5]]]],0,0,[[]],[[]],[[]],0,[[],[[10,[5]]]],0,0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],0,0,[3,[[10,[14]]]],[3,[[10,[14]]]],0,[[15,14],14],[[]],[[]],[15,15],[[]],[[15,6],7],[[]],[[]],[14,15],[[15,14],15],[15,[[16,[15]]]],[[15,15],15],[[15,14],15],[[15,14],15],[[]],[[],12],[[],12],[[],13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[4,"Shuffle"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[3,"Operation"],[4,"Option"],[13,"Cut"],[13,"DealWithIncrement"]]},\
"aoc_2019_day_23":{"doc":"Advent of Code 2019: Day 23: Category Six","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_iters_one","max_iters_two","max_ops","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Cpu","RunResult","Val"],"q":["aoc_2019_day_23","","","","aoc_2019_day_23::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_23::logic","","aoc_2019_day_23::model","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"]]},\
"aoc_2019_day_24":{"doc":"Advent of Code 2019: Day 24: Planet of Discord","t":[0,0,5,13,13,3,6,6,3,6,4,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Bug","Empty","Input","InputCoord","InputGrid","InputParams","InputPos","InputTile","NUM_VARIANTS","VARIANTS","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","default","default","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","from_str","grid","hash","idx","into","into","into","params","parse","partial_cmp","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two"],"q":["aoc_2019_day_24","","","aoc_2019_day_24::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_24::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,3,3,0,0,0,0,0,0,3,3,3,5,3,6,5,3,6,5,3,6,5,3,6,3,3,6,3,3,5,5,3,3,6,6,5,3,6,5,3,6,3,5,3,3,5,3,6,5,6,3,5,3,6,5,3,6,5,3,6,5,3,6,5,3,6,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,0,0,[3,4],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[3,3],[6,6],[[]],[[]],[[]],[[3,3],7],[[],3],[[],6],[[3,3],8],[[],8],[[5,9],10],[[5,9],10],[[3,9],10],[[3,9],10],[[6,9],10],[[6,9],10],[[]],[[]],[[]],[11,[[12,[5]]]],[11,[[12,[3]]]],[11,[[12,[6]]]],[4,[[13,[3]]]],0,[3],[3,14],[[]],[[]],[[]],0,[[],[[15,[6]]]],[[3,3],[[16,[7]]]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],18],[[],18],[[],18],[5,[[15,[19]]]],[5,[[15,[19]]]]],"p":[[8,"Puzzle"],[3,"Box"],[4,"InputTile"],[15,"str"],[3,"Input"],[3,"InputParams"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[4,"Result"],[15,"usize"],[6,"GenResult"],[4,"Option"],[3,"String"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2019_day_25":{"doc":"Advent of Code 2019: Day 25: Cryostasis","t":[0,0,0,0,5,0,13,13,13,3,4,3,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,11,5,12,12,11,11,11,11,11,11,11,6,4,13,18,13,6,6,13,18,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11],"n":["game","input","logic","model","puzzle_metadata","run","Dropped","EjectedHeavier","EjectedLighter","Game","GameOutput","GameOutputRoom","GameOutputVec","Prompt","Room","Solution","Taken","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","command","deref","descrip","doors","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","into","into","into","into","items","name","new","read_output","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","0","0","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Explorer","Room","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","descrip","doors","fmt","from","from","into","into","items","name","new","part_one","player","rooms","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Cpu","Door","East","NUM_VARIANTS","North","RcStr","RunResult","South","VARIANTS","Val","West","as_str","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","fmt","from","from_parser","from_str","idx","into","partial_cmp","rev","to_owned","to_string","try_from","try_into","type_id","RunArgs","augment_args","augment_args_for_update","borrow","borrow_mut","from","from_arg_matches","from_arg_matches_mut","into","into_app","into_app_for_update","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":["aoc_2019_day_25","","","","","","aoc_2019_day_25::game","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_25::game::GameOutput","","","","aoc_2019_day_25::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_25::logic","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_25::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_day_25::run","","","","","","","","","","","","","","","",""],"d":["","","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,4,4,4,0,0,0,0,4,4,4,4,6,3,4,5,6,3,4,5,3,4,5,3,4,5,6,3,5,5,3,4,5,6,3,4,5,3,4,5,6,3,4,5,5,5,6,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,31,32,33,34,0,0,17,18,17,18,17,18,17,18,17,18,17,17,18,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,17,18,0,0,21,20,21,20,20,20,20,20,20,21,20,21,20,21,20,21,0,21,21,20,21,20,21,20,21,20,0,0,22,22,22,0,0,22,22,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,29,29,29,29,29,29,29,29,29,29,0,29,29,29,29,29],"f":[0,0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[6,7]],[3],0,0,[[3,8],9],[[4,8],9],[[5,8],9],[[]],[[]],[[]],[[]],[10,[[11,[3]]]],[10,[[11,[4]]]],[10,[[11,[5]]]],[[]],[[]],[[]],[[]],0,0,[[[13,[12]]],6],[6,[[14,[3]]]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[17,17],[18,18],[[]],[[]],0,[[],18],[[17,8],9],[[17,8],9],[[18,8],9],[[18,8],9],[[]],[[]],[10,[[11,[17]]]],[10,[[11,[18]]]],[[]],[[]],0,[[],[[14,[18]]]],[[]],[[]],[[],19],[[],19],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,0,[[]],[[]],[[]],[[]],[20,20],[[]],0,0,[[20,8],9],[[]],[[]],[[]],[[]],0,0,[6,[[14,[21]]]],[17,[[14,[19]]]],0,0,[[]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],0,0,0,0,0,0,0,0,0,0,0,[22,7],[[]],[[]],[22,22],[[]],[[22,22],23],[[22,22],24],[[],24],[[22,8],9],[[22,8],9],[[]],[10,[[11,[22]]]],[7,[[15,[22]]]],[22,25],[[]],[[22,22],[[26,[23]]]],[22,22],[[]],[[],19],[[],15],[[],15],[[],16],0,[27,27],[27,27],[[]],[[]],[[]],[28,[[15,[29,30]]]],[28,[[15,[29,30]]]],[[]],[[],27],[[],27],[29,14],[[],15],[[],15],[[],16],[[29,28],[[15,[30]]]],[[29,28],[[15,[30]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"GameOutputVec"],[4,"GameOutput"],[3,"GameOutputRoom"],[3,"Game"],[15,"str"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"Val"],[3,"Vec"],[6,"GenResult"],[4,"Result"],[3,"TypeId"],[3,"Input"],[3,"InputParams"],[3,"String"],[3,"Room"],[3,"Explorer"],[4,"Door"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"],[6,"Command"],[3,"ArgMatches"],[3,"RunArgs"],[3,"Error"],[13,"Room"],[13,"Taken"],[13,"Dropped"],[13,"Solution"]]},\
"aoc_2019_intcode":{"doc":"","t":[13,13,13,3,13,6,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["Halt","Input","Instr","Machine","MaxOps","Mem","Memory","Output","Overflow","RunResult","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","eq","equivalent","fmt","fmt","from","from","from","halt","hash","input","input_char","input_line","input_str","into","into","mem_get","mem_set","new","output","partial_cmp","provide","run","set_max_ops","set_mem_limit","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","1"],"q":["aoc_2019_intcode","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2019_intcode::RunResult","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[4,4,4,0,4,0,4,4,4,0,3,4,3,4,3,4,3,4,4,4,4,4,4,3,4,4,4,4,3,3,3,3,3,4,3,3,3,4,4,4,3,3,3,3,4,4,3,4,3,4,3,4,24,25,25],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[4,[1]]],[[4,[1]]]],[[]],[[]],[[[4,[5]],4],6],[[[4,[7]],4],8],[[],8],[[[4,[9]],10],11],[[[4,[2]],10],11],[[]],[[]],[12,[[4,[2]]]],[[[4,[2]]],[[13,[[4,[2]]]]]],[[[4,[14]]]],[[[3,[2]],2]],[[[3,[2]],15]],[[[3,[2]],16]],[[[3,[2]],16]],[[]],[[]],[[[3,[2]],2],[[17,[2]]]],[[[3,[2]],2,2],17],[[[18,[2]]],[[3,[2]]]],[[[4,[2]]],[[13,[[17,[2]],[4,[2]]]]]],[[[4,[19]],4],[[17,[6]]]],[20],[[[3,[2]]],[[4,[2]]]],[[[3,[2]],21]],[[[3,[2]],21]],[[]],[[]],[[],22],[[],13],[[],13],[[],13],[[],13],[[],23],[[],23],0,0,0],"p":[[8,"Clone"],[8,"Int"],[3,"Machine"],[4,"RunResult"],[8,"Ord"],[4,"Ordering"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Overflow"],[4,"Result"],[8,"Hash"],[15,"char"],[15,"str"],[4,"Option"],[6,"Mem"],[8,"PartialOrd"],[3,"Demand"],[15,"u32"],[3,"String"],[3,"TypeId"],[13,"Output"],[13,"Instr"]]},\
"aoc_2020":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5],"n":["day_01","day_02","day_03","day_04","day_05","day_06","day_07","day_08","day_09","day_10","day_11","day_12","day_13","day_14","day_15","day_16","day_17","day_18","day_19","day_20","day_21","day_22","day_23","day_24","day_25","puzzle_metadata"],"q":["aoc_2020","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[3,[[2,[1]]]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Vec"]]},\
"aoc_2020_day_01":{"doc":"Advent of Code 2020: Day 1: Report Repair","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","entries","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2020_day_01","","","aoc_2020_day_01::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_01::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2020_day_02":{"doc":"Advent of Code 2020: Day 2: Password Philosophy","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,12,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","pass_policies","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","PassPolicy","borrow","borrow_mut","ch","clone","clone_into","fmt","fmt","from","from_parser","into","num_0","num_1","password","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2020_day_02","","","","aoc_2020_day_02::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_02::logic","","aoc_2020_day_02::model","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,[[]],[[]],0,[14,14],[[]],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],0,0,0,[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"PassPolicy"]]},\
"aoc_2020_day_03":{"doc":"Advent of Code 2020: Day 3: Toboggan Trajectory","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,18,13,6,4,13,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Grid","NUM_VARIANTS","Open","Pos","Tile","Tree","VARIANTS","as_str","borrow","borrow_mut","clone","clone_into","cmp","default","eq","equivalent","fmt","fmt","from","from_parser","from_str","hash","idx","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2020_day_03","","","","aoc_2020_day_03::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_03::logic","","aoc_2020_day_03::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,15,15,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,0,0,0,0,0,[15,16],[[]],[[]],[15,15],[[]],[[15,15],17],[[],15],[[15,15],18],[[],18],[[15,5],6],[[15,5],6],[[]],[7,[[8,[15]]]],[16,[[11,[15]]]],[15],[15,19],[[]],[[15,15],[[20,[17]]]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[15,"u64"],[4,"Tile"],[15,"str"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"]]},\
"aoc_2020_day_04":{"doc":"Advent of Code 2020: Day 4: Passport Processing","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","passports","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Passport","borrow","borrow_mut","clone","clone_into","deref","deref_mut","fmt","fmt","from","from_parser","into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2020_day_04","","","","aoc_2020_day_04::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_04::logic","","aoc_2020_day_04::model","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,[[]],[[]],[14,14],[[]],[14,15],[14,15],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Passport"],[3,"Vec"]]},\
"aoc_2020_day_05":{"doc":"Advent of Code 2020: Day 5: Binary Boarding","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,13,13,13,18,18,13,3,4,4,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","seats","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Back","Front","Left","NUM_VARIANTS","NUM_VARIANTS","Right","Seat","SeatCol","SeatRow","VARIANTS","VARIANTS","as_str","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","col","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","from_str","from_str","hash","hash","hash","id","idx","idx","into","into","into","partial_cmp","partial_cmp","partial_cmp","row","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["aoc_2020_day_05","","","","aoc_2020_day_05::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_05::logic","","aoc_2020_day_05::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,14,14,16,14,16,16,0,0,0,14,16,14,16,17,14,16,17,14,16,17,14,16,17,14,16,17,14,16,17,17,14,16,17,14,16,17,17,14,14,16,16,17,14,16,17,14,16,14,16,17,14,16,17,14,16,17,14,16,17,14,16,17,17,14,16,17,14,16,17,14,16,17,14,16,17,14,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,[14,15],[16,15],[[]],[[]],[[]],[[]],[[]],[[]],[17,17],[14,14],[16,16],[[]],[[]],[[]],[[17,17],18],[[14,14],18],[[16,16],18],0,[[17,17],19],[[14,14],19],[[16,16],19],[[],19],[[],19],[[],19],[[17,5],6],[[17,5],6],[[14,5],6],[[14,5],6],[[16,5],6],[[16,5],6],[[]],[[]],[[]],[7,[[8,[17]]]],[7,[[8,[14]]]],[7,[[8,[16]]]],[15,[[11,[14]]]],[15,[[11,[16]]]],[17],[14],[16],[17,13],[14,20],[16,20],[[]],[[]],[[]],[[17,17],[[21,[18]]]],[[14,14],[[21,[18]]]],[[16,16],[[21,[18]]]],0,[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u16"],[4,"SeatRow"],[15,"str"],[4,"SeatCol"],[3,"Seat"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"]]},\
"aoc_2020_day_06":{"doc":"Advent of Code 2020: Day 6: Custom Customs","t":[0,0,5,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputGroup","InputParams","InputPerson","answers","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","deref","deref","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","groups","into","into","into","into","params","parse","people","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","part_one","part_two"],"q":["aoc_2020_day_06","","","aoc_2020_day_06::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_06::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,5,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,6,4,5,4,5,3,3,4,4,5,5,6,6,3,4,5,6,3,4,5,6,3,3,4,5,6,3,6,4,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[],6],[4,7],[5,8],[4,7],[5,8],[[3,9],10],[[3,9],10],[[4,9],10],[[4,9],10],[[5,9],10],[[5,9],10],[[6,9],10],[[6,9],10],[[]],[[]],[[]],[[]],[11,[[12,[3]]]],[11,[[12,[4]]]],[11,[[12,[5]]]],[11,[[12,[6]]]],0,[[]],[[]],[[]],[[]],0,[[],[[13,[6]]]],0,[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[3,[[13,[17]]]],[3,[[13,[17]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputGroup"],[3,"InputPerson"],[3,"InputParams"],[3,"Vec"],[4,"InpStr"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2020_day_07":{"doc":"Advent of Code 2020: Day 7: Handy Haversacks","t":[0,0,5,3,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputBagContains","InputNumBags","InputParams","bags_contain","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","colour","colour","contains","default","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","into","into","into","into","max_iters_one","max_iters_two","num","params","parse","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","part_one","part_two"],"q":["aoc_2020_day_07","","","aoc_2020_day_07::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_07::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,4,5,4,6,3,3,4,4,5,5,6,6,3,4,5,6,3,4,5,6,3,4,5,6,6,6,5,3,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],0,0,0,[[],6],[[3,7],8],[[3,7],8],[[4,7],8],[[4,7],8],[[5,7],8],[[5,7],8],[[6,7],8],[[6,7],8],[[]],[[]],[[]],[[]],[9,[[10,[3]]]],[9,[[10,[4]]]],[9,[[10,[5]]]],[9,[[10,[6]]]],[[]],[[]],[[]],[[]],0,0,0,0,[[],[[11,[6]]]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[3,[[11,[15]]]],[3,[[11,[15]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputBagContains"],[3,"InputNumBags"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2020_day_08":{"doc":"Advent of Code 2020: Day 8: Handheld Halting","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,13,3,13,18,13,4,18,6,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Acc","Instr","Jmp","NUM_VARIANTS","Nop","Op","VARIANTS","Val","arg","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","from_str","hash","hash","idx","into","into","op","partial_cmp","partial_cmp","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2020_day_08","","","","aoc_2020_day_08::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_08::logic","","aoc_2020_day_08::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,0,14,14,14,0,14,0,16,14,14,16,14,16,14,16,14,16,14,16,14,16,14,16,14,14,16,16,14,16,14,16,14,14,16,14,14,16,16,14,16,14,16,14,16,14,16,14,16,14,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,[14,15],[[]],[[]],[[]],[[]],[14,14],[16,16],[[]],[[]],[[14,14],17],[[16,16],17],[[14,14],18],[[16,16],18],[[],18],[[],18],[[14,5],6],[[14,5],6],[[16,5],6],[[16,5],6],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[16]]]],[15,[[11,[14]]]],[14],[16],[14,19],[[]],[[]],0,[[14,14],[[20,[17]]]],[[16,16],[[20,[17]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[4,"Op"],[15,"str"],[3,"Instr"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"]]},\
"aoc_2020_day_09":{"doc":"Advent of Code 2020: Day 9: Encoding Error","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2020_day_09","","","aoc_2020_day_09::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_09::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"]]},\
"aoc_2020_day_10":{"doc":"Advent of Code 2020: Day 10: Adapter Array","t":[0,0,5,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","adapters","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2020_day_10","","","aoc_2020_day_10::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_10::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u16"],[15,"u64"]]},\
"aoc_2020_day_11":{"doc":"Advent of Code 2020: Day 11: Seating System","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6,13,13,18,13,6,4,6,6,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_iters","params","parse","tiles","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Empty","Floor","NUM_VARIANTS","Occupied","Pos","Tile","Tiles","TilesCursor","VARIANTS","as_str","borrow","borrow_mut","clone","clone_into","cmp","default","eq","equivalent","fmt","fmt","from","from_parser","from_str","hash","idx","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2020_day_11","","","","aoc_2020_day_11::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_11::logic","","aoc_2020_day_11::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,[14,15],[[]],[[]],[14,14],[[]],[[14,14],16],[[],14],[[14,14],17],[[],17],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[15,[[11,[14]]]],[14],[14,18],[[]],[[14,14],[[19,[16]]]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"],[15,"str"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"]]},\
"aoc_2020_day_12":{"doc":"Advent of Code 2020: Day 12: Rain Risk","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6,6,13,13,13,13,6,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","steps","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Dir","East","Forwards","Left","North","Pos","Right","South","Step","West","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","fmt","from","from_parser","hash","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id","0","0","0","0","0","0","0"],"q":["aoc_2020_day_12","","","","aoc_2020_day_12::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_12::logic","","aoc_2020_day_12::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_12::model::Step","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0,14,14,14,14,0,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,18,19,20,21,22,23,24],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[14,14],16],[[],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[17,[15]]]],[[]],[[],10],[[],11],[[],11],[[],12],0,0,0,0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Step"],[4,"Ordering"],[15,"bool"],[4,"Option"],[13,"North"],[13,"South"],[13,"East"],[13,"West"],[13,"Left"],[13,"Right"],[13,"Forwards"]]},\
"aoc_2020_day_13":{"doc":"Advent of Code 2020: Day 13: Shuttle Search","t":[0,0,5,3,3,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","bus_ids","clone","clone","clone_into","clone_into","default","earliest","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","max_iters","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2020_day_13","","","aoc_2020_day_13::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_13::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],0,[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[15,"u128"]]},\
"aoc_2020_day_14":{"doc":"Advent of Code 2020: Day 14: Docking Data","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Instr","Mask","Store","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","fmt","from","from_parser","hash","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id","addr","mask","val","val"],"q":["aoc_2020_day_14","","","","aoc_2020_day_14::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_14::logic","","aoc_2020_day_14::model","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_14::model::Instr","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,18,19,19,18],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[[14,14],16],[[],16],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[17,[15]]]],[[]],[[],10],[[],11],[[],11],[[],12],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[4,"Instr"],[4,"Ordering"],[15,"bool"],[4,"Option"],[13,"Store"],[13,"Mask"]]},\
"aoc_2020_day_15":{"doc":"Advent of Code 2020: Day 15: Rambunctious Recitation","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","ord_one","ord_two","params","parse","start_nums","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2020_day_15","","","aoc_2020_day_15::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_15::logic",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,4,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2020_day_16":{"doc":"Advent of Code 2020: Day 16: Ticket Translation","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,12,5,5,3,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fields","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","nearby_tickets","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","your_ticket","part_one","part_two","Field","Ticket","Val","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","contains","deref","deref_mut","eq","eq","equivalent","equivalent","fields","first","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","hash","hash","into","into","name","partial_cmp","partial_cmp","second","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2020_day_16","","","","aoc_2020_day_16::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_16::logic","","aoc_2020_day_16::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,0,0,0,0,0,15,16,15,16,15,16,15,16,15,16,15,16,16,15,16,15,16,16,15,15,15,16,16,15,16,15,16,15,16,15,16,15,15,16,15,15,16,15,16,15,16,15,16,15,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[3,[[9,[13]]]],[3,[[9,[14]]]],0,0,0,[[]],[[]],[[]],[[]],[15,15],[16,16],[[]],[[]],[[15,15],17],[[16,16],17],[[15,13],18],[16,19],[16,19],[[15,15],18],[[16,16],18],[[],18],[[],18],0,0,[[15,5],6],[[15,5],6],[[16,5],6],[[16,5],6],[[]],[[]],[7,[[8,[15]]]],[7,[[8,[16]]]],[15],[16],[[]],[[]],0,[[15,15],[[20,[17]]]],[[16,16],[[20,[17]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[15,"u64"],[3,"Field"],[3,"Ticket"],[4,"Ordering"],[15,"bool"],[3,"Vec"],[4,"Option"]]},\
"aoc_2020_day_17":{"doc":"Advent of Code 2020: Day 17: Conway Cubes","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,5,5,13,6,8,6,13,18,6,6,6,4,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","iters_one","iters_two","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Active","Coord","GenPos","Grid","Inactive","NUM_VARIANTS","PosXY","PosXYZ","PosXYZW","Tile","VARIANTS","as_str","borrow","borrow_mut","clone","clone_into","cmp","default","eq","equivalent","fmt","fmt","from","from_parser","from_str","hash","idx","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2020_day_17","","","","aoc_2020_day_17::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_17::logic","","aoc_2020_day_17::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,4,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,0,0,0,14,14,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,0,0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,0,0,0,[14,15],[[]],[[]],[14,14],[[]],[[14,14],16],[[],14],[[14,14],17],[[],17],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[15,[[11,[14]]]],[14],[14,18],[[]],[[14,14],[[19,[16]]]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Tile"],[15,"str"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"]]},\
"aoc_2020_day_18":{"doc":"Advent of Code 2020: Day 18: Operation Order","t":[0,0,5,13,3,3,3,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,6,5,5],"n":["input","logic","puzzle_metadata","Add","Input","InputExpr","InputParams","InputToken","Mul","Number","ParenClose","ParenOpen","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","default","deref","deref_mut","eq","eq","equivalent","equivalent","exprs","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","hash","hash","into","into","into","into","params","parse","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","tokens","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","TokensIter","part_one","part_two"],"q":["aoc_2020_day_18","","","aoc_2020_day_18::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_18::input::InputToken","aoc_2020_day_18::logic","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,5,0,0,0,0,5,5,5,5,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,4,5,6,4,4,4,5,4,5,3,3,3,4,4,5,5,6,6,3,4,5,6,3,4,5,6,4,5,3,4,5,6,3,6,4,5,3,4,5,6,3,4,5,6,4,3,4,5,6,3,4,5,6,3,4,5,6,20,0,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[4,4],7],[[5,5],7],[[],6],[4,8],[4,8],[[4,4],9],[[5,5],9],[[],9],[[],9],0,[[3,10],11],[[3,10],11],[[4,10],11],[[4,10],11],[[5,10],11],[[5,10],11],[[6,10],11],[[6,10],11],[[]],[[]],[[]],[[]],[12,[[13,[3]]]],[12,[[13,[4]]]],[12,[[13,[5]]]],[12,[[13,[6]]]],[4],[5],[[]],[[]],[[]],[[]],0,[[],[[14,[6]]]],[[4,4],[[15,[7]]]],[[5,5],[[15,[7]]]],[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],0,[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],0,0,[3,[[14,[19]]]],[3,[[14,[19]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputExpr"],[4,"InputToken"],[3,"InputParams"],[4,"Ordering"],[3,"Vec"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[13,"Number"]]},\
"aoc_2020_day_19":{"doc":"Advent of Code 2020: Day 19: Monster Messages","t":[0,0,0,0,5,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,12,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,13,6,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["input","logic","matcher","model","puzzle_metadata","Input","InputMessage","InputParams","InputRule","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","default","deref","deref_mut","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","hash","id","into","into","into","into","messages","params","parse","partial_cmp","rule","rules","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","match_message","part_one","part_two","Matcher","MatcherBuilder","MatcherInner","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","char","clone","clone","clone_into","clone_into","concat","default","empty","fmt","from","from","from","into","into","into","is_empty","is_empty","len","match_prefix","matches","new","none","push_char","push_empty","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","Char","Rule","Rule","RuleId","RuleItem","RuleOption","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","deps","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","hash","hash","hash","into","into","into","items","options","partial_cmp","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","two","type_id","type_id","type_id","0","0"],"q":["aoc_2020_day_19","","","","","aoc_2020_day_19::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_19::logic","","","aoc_2020_day_19::matcher","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_19::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_19::model::RuleItem",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,5,6,5,5,5,5,3,3,4,4,5,5,6,6,3,4,5,6,3,4,5,6,5,4,3,4,5,6,3,3,6,5,4,3,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,0,0,0,0,0,0,22,19,24,22,19,24,22,19,24,19,24,19,22,22,19,22,19,24,22,19,24,22,19,22,19,19,22,22,19,19,19,24,22,19,24,22,19,24,22,19,24,19,29,0,29,0,0,0,27,28,29,27,28,29,27,28,29,27,28,29,27,28,29,27,27,28,29,27,28,29,27,27,28,28,29,29,27,28,29,27,28,29,27,28,29,27,28,29,28,27,27,28,29,27,28,29,27,28,29,27,28,29,27,28,29,27,27,28,29,31,32],"f":[0,0,0,0,[[],[[2,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[5,5],7],[[],6],[5,8],[5,8],[[5,5],9],[[],9],[[3,10],11],[[3,10],11],[[4,10],11],[[4,10],11],[[5,10],11],[[5,10],11],[[6,10],11],[[6,10],11],[[]],[[]],[[]],[[]],[12,[[13,[3]]]],[12,[[13,[4]]]],[12,[[13,[5]]]],[12,[[13,[6]]]],[5],0,[[]],[[]],[[]],[[]],0,0,[[],[[14,[6]]]],[[5,5],[[15,[7]]]],0,0,[[]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[],18],[[19,19,20],[[14,[9]]]],[3,[[14,[21]]]],[3,[[14,[21]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[22,23],[[14,[19]]]],[19,19],[24,24],[[]],[[]],[[19,19],[[14,[19]]]],[[],22],[22,[[14,[19]]]],[[19,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[22,9],[19,9],[22,25],[[19,20],26],[[19,20],9],[[],22],[22,19],[[19,23],[[14,[19]]]],[19,[[14,[19]]]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],[[],18],[[19,19],[[14,[19]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[27,27],[28,28],[29,29],[[]],[[]],[[]],[[27,27],7],[[28,28],7],[[29,29],7],[27,26],[[27,27],9],[[28,28],9],[[29,29],9],[[],9],[[],9],[[],9],[[27,10],11],[[27,10],11],[[28,10],11],[[28,10],11],[[29,10],11],[[29,10],11],[[]],[[]],[[]],[12,[[13,[27]]]],[12,[[13,[28]]]],[12,[[13,[29]]]],[27],[28],[29],[[]],[[]],[[]],0,0,[[27,27],[[15,[7]]]],[[28,28],[[15,[7]]]],[[29,29],[[15,[7]]]],[[]],[[]],[[]],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[30,30],27],[[],18],[[],18],[[],18],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputRule"],[3,"InputMessage"],[3,"InputParams"],[4,"Ordering"],[4,"InpStr"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Matcher"],[15,"str"],[15,"u32"],[3,"MatcherBuilder"],[15,"char"],[3,"MatcherInner"],[15,"usize"],[8,"Iterator"],[3,"Rule"],[3,"RuleOption"],[4,"RuleItem"],[6,"RuleId"],[13,"Rule"],[13,"Char"]]},\
"aoc_2020_day_20":{"doc":"Advent of Code 2020: Day 20: Jurassic Jigsaw","t":[0,0,0,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,13,6,6,6,18,4,6,6,3,6,6,6,18,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","InputTile","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","grid","id","into","into","into","params","parse","tiles","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","Black","Coord","Dir","Grid","NUM_VARIANTS","Pixel","Pos","Tag","Tile","TileId","Tiles","Turn","VARIANTS","White","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","eq","eq","equivalent","equivalent","flip","fmt","fmt","fmt","from","from","from_parser","from_str","grid","hash","hash","id","idx","into","into","new","partial_cmp","rotate_around","rotate_left","rotate_right","tags","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2020_day_20","","","","aoc_2020_day_20::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_20::logic","","aoc_2020_day_20::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,5,3,3,4,4,5,5,3,4,5,3,4,5,4,4,3,4,5,3,5,3,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,16,0,0,0,16,0,0,0,0,0,0,0,16,16,16,16,18,16,18,16,18,16,18,16,16,16,18,16,18,18,16,16,18,16,18,16,16,18,16,18,18,16,16,18,18,16,18,18,18,18,16,18,16,16,18,16,18,16,18],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[8,[[9,[5]]]],0,0,[[]],[[]],[[]],0,[[],[[10,[5]]]],0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[15]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,17],[[]],[[]],[[]],[[]],[16,16],[18,18],[[]],[[]],[[16,16],19],[[],16],[[16,16],20],[[18,18],20],[[],20],[[],20],[18,10],[[16,6],7],[[16,6],7],[[18,6],7],[[]],[[]],[8,[[9,[16]]]],[17,[[12,[16]]]],0,[16],[18],0,[16,21],[[]],[[]],[[22,23],18],[[16,16],[[24,[19]]]],[18,10],[18,10],[18,10],0,[[]],[[]],[[],11],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputTile"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[15,"u32"],[4,"Pixel"],[15,"str"],[3,"Tile"],[4,"Ordering"],[15,"bool"],[15,"usize"],[6,"TileId"],[6,"Grid"],[4,"Option"]]},\
"aoc_2020_day_21":{"doc":"Advent of Code 2020: Day 21: Allergen Assessment","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,3,12,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","foods","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Food","alrgns","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","from_parser","ingrs","into","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2020_day_21","","","","aoc_2020_day_21::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_21::logic","","aoc_2020_day_21::model","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],0,[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[10]]]],0,0,[[]],[[]],[14,14],[[]],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],0,[[]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Food"]]},\
"aoc_2020_day_22":{"doc":"Advent of Code 2020: Day 22: Crab Combat","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,5,5,6,6,3,13,3,3,13,4,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","player_1","player_2","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Card","Deck","Game","One","Pool","State","Two","Winner","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","card_1","card_2","clone","clone","clone_into","clone_into","cmp","deck_1","deck_2","eq","equivalent","fmt","free","from","from","from","from","hash","into","into","into","into","new","new","new","partial_cmp","seen","start_state","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["aoc_2020_day_22","","","","aoc_2020_day_22::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_22::logic","","aoc_2020_day_22::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,14,0,0,14,0,19,18,14,15,19,18,14,15,18,18,14,15,14,15,15,18,18,15,15,14,18,19,18,14,15,15,19,18,14,15,19,18,15,15,18,18,14,15,19,18,14,15,19,18,14,15,19,18,14,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[14,14],[15,15],[[]],[[]],[[15,15],16],0,0,[[15,15],17],[[],17],[[14,5],6],[[18,19]],[[]],[[]],[[]],[[]],[15],[[]],[[]],[[]],[[]],[[],19],[[19,20,20],18],[[21,21],15],[[15,15],[[22,[16]]]],0,0,[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Winner"],[3,"State"],[4,"Ordering"],[15,"bool"],[3,"Game"],[3,"Pool"],[8,"Iterator"],[6,"Deck"],[4,"Option"]]},\
"aoc_2020_day_23":{"doc":"Advent of Code 2020: Day 23: Crab Cups","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deck_size_two","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","iters_one","iters_two","params","parse","start","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Card","Deck","borrow","borrow_mut","contains","default","extend","fmt","from","from_iter","into","move_after","new","pick","place","place_after","try_from","try_into","type_id"],"q":["aoc_2020_day_23","","","","aoc_2020_day_23::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_23::logic","","aoc_2020_day_23::model","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,4,3,3,4,4,3,4,3,4,3,4,4,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[10]]]],[3,[[9,[13]]]],0,0,[[]],[[]],[[14,15],16],[[],14],[[14,17]],[[14,5],6],[[]],[[],14],[[]],[[14,15]],[[],14],[14,15],[[14,15]],[[14,15]],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[3,"Deck"],[6,"Card"],[15,"bool"],[8,"IntoIterator"]]},\
"aoc_2020_day_24":{"doc":"Advent of Code 2020: Day 24: Lobby Layout","t":[0,0,0,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,13,6,6,13,6,18,18,13,13,6,13,13,4,4,18,18,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","InputTile","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","num_iters","params","parse","steps","tiles","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","part_two_bits","Black","Coord","Dir","East","Grid","NUM_VARIANTS","NUM_VARIANTS","NorthEast","NorthWest","Pos","SouthEast","SouthWest","Step","Tile","VARIANTS","VARIANTS","West","White","as_str","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","decode","default","encode","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_str","from_str","hash","hash","idx","idx","into","into","partial_cmp","partial_cmp","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2020_day_24","","","","aoc_2020_day_24::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_24::logic","","","aoc_2020_day_24::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,5,4,4,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,5,3,5,4,3,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,18,0,0,16,0,16,18,16,16,0,16,16,0,0,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,18,18,18,16,18,16,18,16,16,18,18,22,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18,16,18],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[4,6],[4,6],[[3,7],8],[[3,7],8],[[4,7],8],[[4,7],8],[[5,7],8],[[5,7],8],[[]],[[]],[[]],[9,[[10,[3]]]],[9,[[10,[4]]]],[9,[[10,[5]]]],[[]],[[]],[[]],0,0,[[],[[11,[5]]]],0,0,[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[3,[[11,[15]]]],[3,[[11,[15]]]],[3,[[11,[15]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,17],[18,17],[[]],[[]],[[]],[[]],[16,16],[18,18],[[]],[[]],[[16,16],19],[[18,18],19],[20,18],[[],18],[18,20],[[16,16],21],[[18,18],21],[[],21],[[],21],[[16,7],8],[[16,7],8],[[18,7],8],[[18,7],8],[16,22],[[]],[[]],[9,[[10,[16]]]],[9,[[10,[18]]]],[17,[[13,[16]]]],[17,[[13,[18]]]],[16],[18],[16,20],[18,20],[[]],[[]],[[16,16],[[23,[19]]]],[[18,18],[[23,[19]]]],[[]],[[]],[[],12],[[],12],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputTile"],[3,"InputParams"],[3,"Vec"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[4,"Step"],[15,"str"],[4,"Tile"],[4,"Ordering"],[15,"usize"],[15,"bool"],[6,"Pos"],[4,"Option"]]},\
"aoc_2020_day_25":{"doc":"Advent of Code 2020: Day 25: Combo Breaker","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","pub_key_0","pub_key_1","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one"],"q":["aoc_2020_day_25","","","aoc_2020_day_25::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2020_day_25::logic"],"d":["","Logic for solving the puzzles","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,3,4,3,4,3,4,3,4,3,4,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2021":{"doc":"","t":[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5],"n":["day_01","day_02","day_03","day_04","day_05","day_06","day_07","day_08","day_09","day_10","day_11","day_12","day_13","day_14","day_15","day_16","day_17","day_18","day_19","day_20","day_21","day_22","day_23","day_24","day_25","puzzle_metadata"],"q":["aoc_2021","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[3,[[2,[1]]]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Vec"]]},\
"aoc_2021_day_01":{"doc":"Advent of Code 2021: Day 1: Sonar Sweep","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","report","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2021_day_01","","","aoc_2021_day_01::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_01::logic",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2021_day_02":{"doc":"Advent of Code 2021: Day 2: Dive!","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,4,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","commands","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Command","Down","Forward","Up","Val","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","from_parser","into","to_owned","to_string","try_from","try_into","type_id","0","0","0"],"q":["aoc_2021_day_02","","","","aoc_2021_day_02::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_02::logic","","aoc_2021_day_02::model","","","","","","","","","","","","","","","","","","","aoc_2021_day_02::model::Command","",""],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,16,17],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12],0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i32"],[4,"Command"],[13,"Down"],[13,"Up"],[13,"Forward"]]},\
"aoc_2021_day_03":{"doc":"Advent of Code 2021: Day 3: Binary Diagnostic","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","readings","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2021_day_03","","","aoc_2021_day_03::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_03::logic",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2021_day_04":{"doc":"Advent of Code 2021: Day 4: Giant Squid","t":[0,0,0,5,3,3,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","boards","borrow","borrow","borrow_mut","borrow_mut","call_order","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Board","Coord","Dir","Grid","Pos"],"q":["aoc_2021_day_04","","","","aoc_2021_day_04::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_04::logic","","aoc_2021_day_04::model","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,3,4,3,4,3,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],0,[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2021_day_05":{"doc":"Advent of Code 2021: Day 5: Hydrothermal Venture","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,5,5,6,6,6,6,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vents","part_one","part_two","Coord","Grid","Pos","Val","Vent","borrow","borrow_mut","clone","clone_into","end","eq","equivalent","fmt","fmt","from","from_parser","hash","into","is_diagonal","is_point","is_straight","is_valid","start","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2021_day_05","","","","aoc_2021_day_05::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_05::logic","","aoc_2021_day_05::model","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,0,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,[[]],[[]],[14,14],[[]],0,[[14,14],15],[[],15],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[14,15],[14,15],[14,15],[14,15],0,[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Vent"],[15,"bool"]]},\
"aoc_2021_day_06":{"doc":"Advent of Code 2021: Day 6: Lanternfish","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fish","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","calc_result","part_one","part_two"],"q":["aoc_2021_day_06","","","aoc_2021_day_06::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_06::logic","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[3,13],[[9,[14]]]],[3,[[9,[14]]]],[3,[[9,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[15,"u64"]]},\
"aoc_2021_day_07":{"doc":"Advent of Code 2021: Day 7: The Treachery of Whales","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","crabs","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2021_day_07","","","aoc_2021_day_07::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_07::logic",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"]]},\
"aoc_2021_day_08":{"doc":"Advent of Code 2021: Day 8: Seven Segment Search","t":[0,0,14,0,5,14,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,5,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12],"n":["input","logic","make_solver","model","puzzle_metadata","solver_constrain","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","displays","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","use_solver","part_one","part_two","Digit","Display","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","digits","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","num_segments","off","on","segments","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value"],"q":["aoc_2021_day_08","","","","","","aoc_2021_day_08::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_08::logic","","aoc_2021_day_08::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,4,0,0,0,0,14,15,14,15,14,15,14,15,14,14,14,15,15,14,15,14,15,14,15,15,15,15,15,14,15,14,15,14,15,14,15,14,15,14],"f":[0,0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,[[]],[[]],[[]],[[]],[14,14],[15,15],[[]],[[]],0,[[14,5],6],[[14,5],6],[[15,5],6],[[15,5],6],[[]],[[]],[7,[[8,[14]]]],[7,[[8,[15]]]],[[]],[[]],[15,13],[15,16],[15,16],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[3,"Display"],[3,"Digit"],[15,"u8"]]},\
"aoc_2021_day_09":{"doc":"Advent of Code 2021: Day 9: Smoke Basin","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Grid","Pos"],"q":["aoc_2021_day_09","","","","aoc_2021_day_09::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_09::logic","","aoc_2021_day_09::model","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2021_day_10":{"doc":"Advent of Code 2021: Day 10: Syntax Scoring","t":[0,0,0,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,5,5,13,13,13,13,13,13,13,4,4,18,13,13,13,13,13,13,13,4,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputLine","InputParams","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","lines","params","parse","to_owned","to_owned","to_owned","to_string","to_string","to_string","tokens","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","Angle","AngleClose","AngleOpen","Close","Curly","CurlyClose","CurlyOpen","Delim","Mode","NUM_VARIANTS","Open","Round","RoundClose","RoundOpen","Square","SquareClose","SquareOpen","Token","VARIANTS","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","delim","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_str","hash","idx","into","into","into","mismatched_points","mode","not_closed_points","partial_cmp","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["aoc_2021_day_10","","","","aoc_2021_day_10::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_10::logic","","aoc_2021_day_10::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,5,3,4,5,3,4,5,3,4,5,5,4,4,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,3,3,5,3,4,5,3,4,5,4,3,4,5,3,4,5,3,4,5,0,0,18,16,16,19,18,16,16,0,0,16,19,18,16,16,18,16,16,0,16,16,16,18,19,16,18,19,16,18,19,16,18,19,16,16,16,18,19,16,18,19,16,16,18,19,16,18,19,16,16,16,16,16,18,19,18,16,18,16,16,18,19,16,16,18,19,16,18,19,16,18,19],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[4,6],[4,6],[[3,7],8],[[3,7],8],[[4,7],8],[[4,7],8],[[5,7],8],[[5,7],8],[[]],[[]],[[]],[9,[[10,[3]]]],[9,[[10,[4]]]],[9,[[10,[5]]]],[[]],[[]],[[]],0,0,[[],[[11,[5]]]],[[]],[[]],[[]],[[],12],[[],12],[[],12],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[3,[[11,[15]]]],[3,[[11,[15]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[16,17],[[]],[[]],[[]],[[]],[[]],[[]],[16,16],[18,18],[19,19],[[]],[[]],[[]],[[16,16],20],[16,18],[[16,16],21],[[18,18],21],[[19,19],21],[[],21],[[],21],[[],21],[[16,7],8],[[16,7],8],[[18,7],8],[[19,7],8],[[]],[[]],[[]],[9,[[10,[16]]]],[17,[[13,[16]]]],[16],[16,22],[[]],[[]],[[]],[18,15],[16,19],[18,15],[[16,16],[[23,[20]]]],[[]],[[]],[[]],[[],12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputLine"],[3,"InputParams"],[3,"Vec"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[4,"Token"],[15,"str"],[4,"Delim"],[4,"Mode"],[4,"Ordering"],[15,"bool"],[15,"usize"],[4,"Option"]]},\
"aoc_2021_day_11":{"doc":"Advent of Code 2021: Day 11: Dumbo Octopus","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Grid","Pos","Val"],"q":["aoc_2021_day_11","","","","aoc_2021_day_11::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_11::logic","","aoc_2021_day_11::model","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"]]},\
"aoc_2021_day_12":{"doc":"Advent of Code 2021: Day 12: Passage Pathing","t":[0,0,0,5,3,3,3,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,3,6,3,11,11,11,11,11,12,12,11,11,11,12,11,11,11,12,12,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputConnection","InputParams","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cave_0","cave_1","clone","clone","clone","clone_into","clone_into","clone_into","cnxns","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","into","into","into","params","parse","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","Cave","CaveId","Caves","borrow","borrow","borrow_mut","borrow_mut","build","caves","cnxns","end","from","from","id","index","into","into","name","small","start","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2021_day_12","","","","aoc_2021_day_12::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_12::logic","","aoc_2021_day_12::model","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,5,3,4,5,4,4,3,4,5,3,4,5,3,5,3,3,4,4,5,5,3,4,5,3,4,5,3,4,5,3,5,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,0,0,15,16,15,16,15,15,16,15,15,16,16,15,15,16,16,16,15,15,16,15,16,15,16],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[3,3],[4,4],[5,5],[[]],[[]],[[]],0,[[],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[8,[[9,[5]]]],[[]],[[]],[[]],0,[[],[[10,[5]]]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]],0,0,0,[[]],[[]],[[]],[[]],[3,[[10,[15]]]],0,0,[15,16],[[]],[[]],0,[[15,17],16],[[]],[[]],0,0,[15,16],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputConnection"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[3,"Caves"],[3,"Cave"],[6,"CaveId"]]},\
"aoc_2021_day_13":{"doc":"Advent of Code 2021: Day 13: Transparent Origami","t":[0,0,0,5,0,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,6,6,3,6,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","tool","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","dots","fmt","fmt","fmt","fmt","folds","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","fold_multi","fold_once","part_one","part_two","Axis","Coord","Fold","Pos","axis","borrow","borrow_mut","clone","clone_into","fmt","fmt","from","from_parser","into","to_owned","to_string","try_from","try_into","type_id","val","RunArgs","augment_args","augment_args_for_update","borrow","borrow_mut","from","from_arg_matches","from_arg_matches_mut","into","into_app","into_app_for_update","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":["aoc_2021_day_13","","","","","aoc_2021_day_13::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_13::logic","","","","aoc_2021_day_13::model","","","","","","","","","","","","","","","","","","","","aoc_2021_day_13::tool","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,3,4,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,20,20,20,20,20,20,20,20,20,20,0,20,20,20,20,20],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],0,[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],0,[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[13,[[15,[14]]]],[[16,13],[[15,[14]]]],[3,[[9,[17]]]],[3,[[9,[10]]]],0,0,0,0,0,[[]],[[]],[16,16],[[]],[[16,5],6],[[16,5],6],[[]],[7,[[8,[16]]]],[[]],[[]],[[],10],[[],11],[[],11],[[],12],0,0,[18,18],[18,18],[[]],[[]],[[]],[19,[[11,[20,21]]]],[19,[[11,[20,21]]]],[[]],[[],18],[[],18],[20,9],[[],11],[[],11],[[],12],[[20,19],[[11,[21]]]],[[20,19],[[11,[21]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"IntoIterator"],[6,"Pos"],[3,"AHashSet"],[3,"Fold"],[15,"u32"],[6,"Command"],[3,"ArgMatches"],[3,"RunArgs"],[3,"Error"]]},\
"aoc_2021_day_14":{"doc":"Advent of Code 2021: Day 14: Extended Polymerization","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,5,5,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","rules","template","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","calc_result","get_rules","part_one","part_two"],"q":["aoc_2021_day_14","","","aoc_2021_day_14::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_14::logic","","",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[3,13],[[9,[14]]]],[3,[[9,[[16,[15]]]]]],[3,[[9,[14]]]],[3,[[9,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u32"],[15,"u64"],[15,"char"],[3,"AHashMap"]]},\
"aoc_2021_day_15":{"doc":"Advent of Code 2021: Day 15: Chiton","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,5,5,6,6,6,6,6,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","risks","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Cursor","Grid","Offset","Pos","Risks","Val"],"q":["aoc_2021_day_15","","","","aoc_2021_day_15::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_15::logic","","aoc_2021_day_15::model","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0,0,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,0,0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u16"]]},\
"aoc_2021_day_16":{"doc":"Advent of Code 2021: Day 15: Packet Decoder","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,3,3,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,12,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","BitIter","Packet","borrow","borrow","borrow_mut","borrow_mut","children","decode","fmt","from","from","has_next","into","into","new","next_bit","next_uint","packet_type","position","try_from","try_from","try_into","try_into","type_id","type_id","value","version","version_sum"],"q":["aoc_2021_day_16","","","","aoc_2021_day_16::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_16::logic","","aoc_2021_day_16::model","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,3,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,0,14,15,14,15,15,15,15,14,15,14,14,15,14,14,14,15,14,14,15,14,15,14,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],0,[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[13]]]],0,0,[[]],[[]],[[]],[[]],0,[14,[[16,[15]]]],[[15,5],6],[[]],[[]],[14,17],[[]],[[]],[[],14],[14,[[16,[17]]]],[[14,18],[[16,[13]]]],0,[14,19],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,[15,13]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[3,"BitIter"],[3,"Packet"],[4,"Option"],[15,"bool"],[15,"u8"],[15,"usize"]]},\
"aoc_2021_day_17":{"doc":"Advent of Code 2021: Day 17: Trick Shot","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,5,5,6,6],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","target_x_end","target_x_start","target_y_end","target_y_start","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two","Coord","Pos"],"q":["aoc_2021_day_17","","","","aoc_2021_day_17::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_17::logic","","aoc_2021_day_17::model",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,3,3,3,4,3,4,3,4,3,4,3,4,0,0,0,0],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,0,0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]],0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Coord"],[15,"u32"]]},\
"aoc_2021_day_18":{"doc":"Advent of Code 2021: Day 18: Snailfish","t":[0,0,0,5,13,13,3,3,13,4,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,5,5,13,3,13,4,13,13,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Close","Comma","Input","InputParams","Open","Token","Tokens","Value","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","into","into","into","into","nums","params","parse","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","tokens","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","part_one","part_two","Mismatch","Number","Number","ParseError","Token","UnexpectedClose","UnexpectedComma","UnexpectedEnd","UnexpectedOpen","UnexpectedValue","Val","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from_str","into","into","magnitude","pair","provide","reduce","sum","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["aoc_2021_day_18","","","","aoc_2021_day_18::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_18::input::Token","aoc_2021_day_18::logic","","aoc_2021_day_18::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,5,5,0,0,5,0,0,5,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,6,5,5,3,3,4,4,5,5,6,6,3,4,5,6,3,4,5,6,3,4,5,6,3,3,6,3,4,5,6,3,4,5,6,4,3,4,5,6,3,4,5,6,3,4,5,6,22,0,0,18,0,18,0,18,18,18,18,18,18,0,17,18,17,18,17,18,17,18,17,17,17,18,18,17,17,18,17,17,18,17,17,17,18,17,17,18,17,18,17,18,17,17,18,17,18,17],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[],6],[[5,5],7],[[],7],[[3,8],9],[[3,8],9],[[4,8],9],[[4,8],9],[[5,8],9],[[5,8],9],[[6,8],9],[[6,8],9],[[]],[[]],[[]],[[]],[10,[[11,[3]]]],[10,[[11,[4]]]],[10,[[11,[5]]]],[10,[[11,[6]]]],[[]],[[]],[[]],[[]],0,0,[[],[[12,[6]]]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],0,[3,[[12,[16]]]],[3,[[12,[16]]]],0,0,0,0,0,0,0,0,0,0,0,[[17,17],17],[[]],[[]],[[]],[[]],[18,18],[17,17],[[]],[[]],[[17,17],7],[[],7],[[18,8],9],[[18,8],9],[[17,8],9],[[17,8],9],[[]],[[]],[19,[[14,[17,18]]]],[[]],[[]],[17,16],[[17,17],17],[20],[17,17],[[],[[21,[17]]]],[[]],[[]],[[],13],[[],13],[[],14],[4,[[14,[17,18]]]],[[],14],[[],14],[[],14],[[],15],[[],15]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"Tokens"],[4,"Token"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Val"],[3,"Number"],[4,"ParseError"],[15,"str"],[3,"Demand"],[4,"Option"],[13,"Value"]]},\
"aoc_2021_day_19":{"doc":"Advent of Code 2021: Day 19: Beacon Scanner","t":[0,0,0,5,0,3,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,6,6,17,6,6,18,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","rotation","Input","InputParams","InputScanner","beacons","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_parser","from_parser","from_parser","id","into","into","into","params","parse","scanners","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","part_one","part_two","Coord","Pos","SCANNER_HASH_TOTAL_U64S","ScannerHash","ScannerHasher","ALL","Around","Clockwise","ClockwiseAround","ClockwiseDown","ClockwiseLeft","ClockwiseRight","ClockwiseUp","CounterClockwise","CounterClockwiseAround","CounterClockwiseDown","CounterClockwiseLeft","CounterClockwiseRight","CounterClockwiseUp","Down","Left","None","Right","Rotation","Up","UpsideDown","UpsideDownAround","UpsideDownDown","UpsideDownLeft","UpsideDownRight","UpsideDownUp","apply","around","borrow","borrow_mut","clockwise","clone","clone_into","combine","counter_clockwise","down","eq","equivalent","flip","fmt","from","hash","idx","into","left","rev","right","to_owned","try_from","try_into","type_id","up","upside_down"],"q":["aoc_2021_day_19","","","","","aoc_2021_day_19::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_19::logic","","aoc_2021_day_19::model","","","","","aoc_2021_day_19::rotation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,4,3,4,5,3,4,5,3,4,5,3,4,5,5,3,3,4,4,5,5,3,4,5,3,4,5,4,3,4,5,3,5,3,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[],5],[[3,6],7],[[3,6],7],[[4,6],7],[[4,6],7],[[5,6],7],[[5,6],7],[[]],[[]],[[]],[8,[[9,[3]]]],[8,[[9,[4]]]],[8,[[9,[5]]]],0,[[]],[[]],[[]],0,[[],[[10,[5]]]],0,[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[3,[[10,[14]]]],[3,[[10,[14]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[15,16],16],[15,15],[[]],[[]],[15,15],[15,15],[[]],[[15,15],15],[15,15],[15,15],[[15,15],17],[[],17],[15,15],[[15,6],7],[[]],[15],[15,18],[[]],[15,15],[15,15],[15,15],[[]],[[],12],[[],12],[[],13],[15,15],[15,15]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputScanner"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i64"],[4,"Rotation"],[6,"Pos"],[15,"bool"],[15,"usize"]]},\
"aoc_2021_day_20":{"doc":"Advent of Code 2021: Day 20: Trench Map","t":[0,0,0,5,0,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,3,11,11,5,5,11,5,11,11,11,5,5,11,11,11,6,13,3,13,18,4,6,6,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","tool","Input","InputParams","algorithm","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","num_times_one","num_times_two","params","parse","pixels","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","ImageIter","borrow","borrow_mut","calc_next","calc_result","from","image_iter","into","into_iter","next","part_one","part_two","try_from","try_into","type_id","Algorithm","Dark","Image","Light","NUM_VARIANTS","Pixel","Pixels","Pos","VARIANTS","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","default","default","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from_parser","from_str","get","hash","idx","into","into","new_from","num_pixels","partial_cmp","range","size","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","RunArgs","augment_args","augment_args_for_update","borrow","borrow_mut","fmt","from","from_arg_matches","from_arg_matches_mut","into","into_app","into_app_for_update","run","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":["aoc_2021_day_20","","","","","aoc_2021_day_20::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_20::logic","","","","","","","","","","","","","","","aoc_2021_day_20::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_20::tool","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,4,4,3,4,3,3,4,3,4,3,4,3,4,3,4,0,19,19,0,0,19,0,19,19,19,0,0,19,19,19,0,21,0,21,21,0,0,0,21,21,21,14,21,14,21,21,21,21,14,21,21,21,21,14,14,21,14,21,21,14,21,21,21,14,14,14,21,14,14,21,21,14,21,14,21,14,21,14,0,29,29,29,29,29,29,29,29,29,29,29,0,29,29,29,29,29],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,0,0,[[],[[9,[4]]]],0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[[]],[[]],[[13,14],14],[[3,15],[[9,[16]]]],[[]],[[13,[18,[[17,[14]]]]],19],[[]],[[]],[19,[[20,[[17,[14]]]]]],[3,[[9,[16]]]],[3,[[9,[16]]]],[[],11],[[],11],[[],12],0,0,0,0,0,0,0,0,0,[21,22],[[]],[[]],[[]],[[]],[21,21],[[]],[[21,21],23],[[],21],[14,21],[[21,21],24],[[],24],[[21,5],6],[[21,5],6],[[14,5],6],[[14,5],6],[[]],[[]],[7,[[8,[21]]]],[22,[[11,[21]]]],[[14,25],21],[21],[21,26],[[]],[[]],[[27,21],14],[14,26],[[21,21],[[20,[23]]]],[14],[14,25],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,[28,28],[28,28],[[]],[[]],[[29,5],6],[[]],[30,[[11,[29,31]]]],[30,[[11,[29,31]]]],[[]],[[],28],[[],28],[29,9],[[],11],[[],11],[[],12],[[29,30],[[11,[31]]]],[[29,30],[[11,[31]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Algorithm"],[3,"Image"],[15,"u32"],[15,"i64"],[3,"Rc"],[8,"Into"],[3,"ImageIter"],[4,"Option"],[4,"Pixel"],[15,"str"],[4,"Ordering"],[15,"bool"],[6,"Pos"],[15,"usize"],[6,"Pixels"],[6,"Command"],[3,"RunArgs"],[3,"ArgMatches"],[3,"Error"]]},\
"aoc_2021_day_21":{"doc":"Advent of Code 2021: Day 21: Dirac Dice","t":[0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,5,5],"n":["input","logic","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","player_1","player_2","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","part_two"],"q":["aoc_2021_day_21","","","aoc_2021_day_21::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_21::logic",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,3,3,4,3,4,3,4,3,4,3,4,0,0],"f":[0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],0,0,[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],[3,[[9,[14]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u64"],[15,"u128"]]},\
"aoc_2021_day_22":{"doc":"Advent of Code 2021: Day 22: Reactor Reboot","t":[0,0,0,5,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,5,5,3,3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12],"n":["input","logic","model","puzzle_metadata","Input","InputCube","InputParams","InputStep","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cube","default","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_parser","from_parser","from_parser","from_parser","hash","into","into","into","into","params","parse","state","steps","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","x0","x1","y0","y1","z0","z1","part_one","part_two","Cube","Pos","Step","ZERO","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cube","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","from","hash","hash","intersect","into","into","into","overlaps","partial_cmp","state","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","volume","x","x0","x1","y","y0","y1","z","z0","z1"],"q":["aoc_2021_day_22","","","","aoc_2021_day_22::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_22::logic","","aoc_2021_day_22::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,4,6,5,5,3,3,4,4,5,5,6,6,3,4,5,6,3,4,5,6,5,3,4,5,6,3,6,4,3,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,5,5,5,5,5,5,0,0,0,0,0,18,17,18,19,17,18,19,17,18,19,17,18,19,19,17,18,19,18,19,17,18,19,17,17,18,18,19,18,19,18,17,18,19,18,19,17,17,18,19,17,18,19,17,18,19,17,18,19,18,19,18,18,19,18,18,19,18,18],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],0,[[],6],[[5,5],7],[[],7],[[3,8],9],[[3,8],9],[[4,8],9],[[4,8],9],[[5,8],9],[[5,8],9],[[6,8],9],[[6,8],9],[[]],[[]],[[]],[[]],[10,[[11,[3]]]],[10,[[11,[4]]]],[10,[[11,[5]]]],[10,[[11,[6]]]],[5],[[]],[[]],[[]],[[]],0,[[],[[12,[6]]]],0,0,[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],0,0,0,0,0,0,[3,[[12,[16]]]],[3,[[12,[16]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[17,17],[18,18],[19,19],[[]],[[]],[[]],[[19,19],20],0,[[18,18],7],[[19,19],7],[[],7],[[],7],[[17,8],9],[[18,8],9],[[19,8],9],[[]],[4,17],[[]],[5,18],[[]],[18],[19],[[18,18],[[21,[18]]]],[[]],[[]],[[]],[[18,18],7],[[19,19],[[21,[20]]]],0,[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[18,16],0,0,0,0,0,0,0,0,0],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputStep"],[3,"InputCube"],[3,"InputParams"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i64"],[3,"Step"],[3,"Cube"],[3,"Pos"],[4,"Ordering"],[4,"Option"]]},\
"aoc_2021_day_23":{"doc":"Advent of Code 2021: Day 23: Amphipod","t":[0,0,0,5,0,3,3,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,11,11,5,5,5,11,11,11,11,5,5,5,11,11,11,11,12,12,12,12,12,12,12,12,12,13,4,13,13,13,13,18,4,13,3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","tools","Input","InputParams","amphs","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Between","In","Move","Out","borrow","borrow_mut","calc_next_moves","calc_next_states","calc_result","clone","clone_into","from","into","iterator","part_one","part_two","to_owned","try_from","try_into","type_id","0","0","0","1","1","1","2","2","2","Amber","Amph","Bronze","Copper","Desert","Hall","NUM_VARIANTS","Place","Room","State","StateCompact","VARIANTS","as_array","as_str","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","compact","cost","entrance","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","expand","fmt","fmt","fmt","fmt","fmt","fmt","for_idx","from","from","from","from","from_array","from_letter","from_parser","from_str","from_str","get","hall","hash","hash","hash","idx","idx","into","into","into","into","is_finished","is_finished","letter","move_between","move_in","move_out","new_part_one","new_part_two","partial_cmp","partial_cmp","pretty_line","print","room","room_is_happy","room_size","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","1","InternalsArgs","RunArgs","augment_args","augment_args","augment_args_for_update","augment_args_for_update","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","internals","into","into","into_app","into_app","into_app_for_update","into_app_for_update","run","run_part","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut"],"q":["aoc_2021_day_23","","","","","aoc_2021_day_23::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_23::logic","","","","","","","","","","","","","","","","","","","","aoc_2021_day_23::logic::Move","","","","","","","","","aoc_2021_day_23::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_23::model::Place","","","aoc_2021_day_23::tools","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,3,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,3,4,14,14,0,14,14,14,0,0,0,14,14,14,14,0,0,0,14,14,14,14,32,33,34,32,33,34,32,33,34,19,0,19,19,19,21,19,0,21,0,0,19,13,19,13,16,21,19,13,16,21,19,13,16,21,19,13,16,21,19,16,19,13,19,21,13,16,21,19,13,16,21,19,16,13,13,16,21,19,19,21,13,16,21,19,13,19,19,13,19,13,13,16,21,19,21,19,13,16,21,19,13,16,19,13,13,13,13,13,16,19,13,13,13,13,13,13,16,21,19,13,19,13,16,21,19,13,16,21,19,13,16,21,19,35,36,36,0,0,28,29,28,29,28,29,28,29,28,29,28,29,28,29,28,29,0,28,29,28,29,28,29,0,0,28,29,28,29,28,29,28,29,28,29],"f":[0,0,0,[[],[[2,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,0,0,[[]],[[]],[13,[[15,[14]]]],[16,15],[13,[[9,[17]]]],[14,14],[[]],[[]],[[]],[13,18],[3,[[9,[17]]]],[3,[[9,[17]]]],[[]],[[],11],[[],11],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[13],[19,20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,13],[16,16],[21,21],[19,19],[[]],[[]],[[]],[[]],[[16,16],22],[[19,19],22],[13,16],[19,17],[21,23],[[13,13],23],[[16,16],23],[[21,21],23],[[19,19],23],[[],23],[[],23],[[],23],[[],23],[16,13],[[13,5],6],[[13,5],6],[[16,5],6],[[21,5],6],[[19,5],6],[[19,5],6],[24,21],[[]],[[]],[[]],[[]],[24,13],[25,[[26,[[26,[19]]]]]],[7,[[8,[19]]]],[20,[[11,[13]]]],[20,[[11,[19]]]],[[13,21],[[26,[19]]]],[13],[16],[21],[19],[21,24],[19,24],[[]],[[]],[[]],[[]],[13,23],[16,23],[19,25],[[13,19,19],13],[[13,21,19],13],[[13,19,21],13],[3,13],[3,13],[[16,16],[[26,[22]]]],[[19,19],[[26,[22]]]],[[13,24],10],[13],[[13,19]],[[13,19],23],[13,24],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],0,0,0,0,0,[27,27],[27,27],[27,27],[27,27],[[]],[[]],[[]],[[]],[[28,5],6],[[29,5],6],[[]],[[]],[30,[[11,[28,31]]]],[30,[[11,[29,31]]]],[30,[[11,[28,31]]]],[30,[[11,[29,31]]]],[29,9],[[]],[[]],[[],27],[[],27],[[],27],[[],27],[28,9],[[28,13],9],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[28,30],[[11,[31]]]],[[29,30],[[11,[31]]]],[[28,30],[[11,[31]]]],[[29,30],[[11,[31]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"State"],[4,"Move"],[3,"ArrayVec"],[3,"StateCompact"],[15,"i64"],[8,"Iterator"],[4,"Amph"],[15,"str"],[4,"Place"],[4,"Ordering"],[15,"bool"],[15,"usize"],[15,"char"],[4,"Option"],[6,"Command"],[3,"RunArgs"],[3,"InternalsArgs"],[3,"ArgMatches"],[3,"Error"],[13,"Out"],[13,"In"],[13,"Between"],[13,"Hall"],[13,"Room"]]},\
"aoc_2021_day_24":{"doc":"Advent of Code 2021: Day 24: Arithmetic Logic Unit","t":[0,0,0,0,5,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,5,5,13,13,13,13,13,4,13,3,4,3,13,13,13,13,4,4,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,5,5,13,4,13,13,3,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,5,11,11,11,12,11,5,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,3,4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,3,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","machine","model","puzzle_metadata","quick","solver","tool","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","instrs","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","calc_result","part_one","part_two","Add","Div","DivideByZero","Eql","Inp","Instr","Int","Machine","MachineError","MachineRegs","Mod","Mul","NegativeModulo","NoMoreInput","Reg","RegOrInt","W","W","X","X","Y","Y","Z","Z","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_parser","from_parser","from_parser","hash","hash","ic","into","into","into","into","into","into","machine_input","new","pc","regs","step","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","w","x","y","z","0","0","0","0","0","0","1","1","1","1","1","0","Input","input_from_str","input_to_str","Inner","NextNumIter","Outer","Poison","Step","borrow","borrow","borrow_mut","borrow_mut","check","clone","clone_into","fmt","from","from","incr","increment","into","into","into_iter","iterator","multiunzip","new","next","random","solve","steps_for","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","nested","nested","next_iter","nums","progress","reverse","reverse","steps","steps","Add","Divide","Error","Input","IsEqual","IsUnequal","Modulo","Multiply","Solver","SymVal","Symbol","Symbol","Value","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","children","children","clone","clone","clone","clone_into","clone_into","clone_into","cmp","define","depth","depth","dump","dump_symbol","dump_symbol_auto","eq","eq","equivalent","equivalent","eval","eval","fmt","fmt","fmt","fmt","fork","from","from","from","from_prog","get","hash","into","into","into","is_empty","is_empty","len","len","name","new","original_children","original_depth","original_depth","original_len","original_len","partial_cmp","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","0","0","0","0","0","0","0","0","0","0","1","1","1","1","1","1","AllArgs","MachineArgs","SolverArgs","all","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","into","into","into","into_app","into_app","into_app","into_app_for_update","into_app_for_update","into_app_for_update","machine","solver","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut"],"q":["aoc_2021_day_24","","","","","","","","aoc_2021_day_24::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_24::logic","","","aoc_2021_day_24::machine","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_24::machine::Instr","","","","","","","","","","","aoc_2021_day_24::machine::RegOrInt","aoc_2021_day_24::model","","","aoc_2021_day_24::quick","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_24::quick::NextNumIter","","","","","","","","","aoc_2021_day_24::solver","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_24::solver::SymVal","","","","","","","","","","","","","","","","aoc_2021_day_24::tool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","Quick algorithm found by reverse engineering the input …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,0,17,17,15,17,17,0,19,0,0,0,17,17,15,15,0,0,18,19,18,19,18,19,18,19,14,15,16,17,18,19,14,15,16,17,18,19,14,15,16,17,18,19,14,15,16,17,18,19,14,16,14,15,16,17,18,19,14,15,16,17,18,19,14,15,16,17,17,18,18,19,19,14,15,16,17,18,19,17,18,19,14,16,16,14,15,16,17,18,19,0,14,16,14,14,14,15,16,17,18,19,17,18,19,14,15,16,17,18,19,14,15,16,17,18,19,14,15,16,17,18,19,16,16,16,16,43,44,45,46,47,48,44,45,46,47,48,49,0,0,0,26,0,26,26,0,26,22,26,22,22,22,22,22,26,22,22,22,26,22,26,0,26,22,26,22,22,0,22,26,22,26,22,26,22,50,51,51,51,51,50,51,50,51,30,30,30,30,30,30,30,30,0,0,0,30,30,31,28,30,31,28,30,28,30,31,28,30,31,28,30,28,31,28,30,31,31,31,28,30,28,30,31,28,28,28,30,30,31,31,28,30,31,31,28,31,28,30,28,30,28,30,28,31,28,28,30,28,30,28,31,28,30,28,30,31,28,30,31,28,30,31,28,30,28,52,53,54,55,56,57,58,59,60,61,54,55,56,57,58,59,0,0,0,0,37,41,42,37,41,42,37,41,42,37,41,42,37,41,42,37,41,42,37,41,42,37,41,42,37,41,42,37,41,42,0,0,37,41,42,37,41,42,37,41,42,37,41,42,37,41,42],"f":[0,0,0,0,[[],[[2,[1]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[13,[[9,[10]]]],[3,[[9,[10]]]],[3,[[9,[10]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[],16],[[14,14],13],[[15,15],13],[[16,16],13],[[17,17],13],[[18,18],13],[[19,19],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[14,5],6],[[15,5],6],[[16,5],6],[[17,5],6],[[17,5],6],[[18,5],6],[[18,5],6],[[19,5],6],[[19,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[7,[[8,[17]]]],[7,[[8,[18]]]],[7,[[8,[19]]]],[14],[16],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],0,0,[14,[[11,[13,15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[20,21],[21,10],0,0,0,0,0,[[]],[[]],[[]],[[]],0,[22,22],[[]],[[22,5],6],[[]],[[]],[[22,23,24],23],0,[[]],[[]],[[]],[13,25],[[]],[[13,23,23],22],[[[26,[25]]],27],0,[[22,23],[[27,[24]]]],[[],9],[[]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[28,[[29,[28]]]],[30,[[29,[28]]]],[31,31],[28,28],[30,30],[[]],[[]],[[]],[[28,28],32],[[31,[33,[20]],30],28],[28,34],[30,34],[[31,34,13]],[[31,34,13,28]],[[31,28]],[[28,28],13],[[30,30],13],[[],13],[[],13],[[31,28],[[11,[[35,[23]],15]]]],[[28,36],[[11,[[35,[23]],15]]]],[[28,5],6],[[28,5],6],[[30,5],6],[[30,5],6],[31,31],[[]],[[]],[[]],[[]],[[31,33],[[27,[28]]]],[28],[[]],[[]],[[]],[28,13],[30,13],[28,34],[30,34],[28,33],[[],31],[28,[[29,[28]]]],[28,34],[30,34],[28,34],[30,34],[[28,28],[[27,[32]]]],[[]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[28,30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[37,9],[38,38],[38,38],[38,38],[38,38],[38,38],[38,38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39,[[11,[37,40]]]],[39,[[11,[41,40]]]],[39,[[11,[42,40]]]],[39,[[11,[37,40]]]],[39,[[11,[41,40]]]],[39,[[11,[42,40]]]],[[]],[[]],[[]],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[41,9],[42,9],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[37,39],[[11,[40]]]],[[41,39],[[11,[40]]]],[[42,39],[[11,[40]]]],[[37,39],[[11,[40]]]],[[41,39],[[11,[40]]]],[[42,39],[[11,[40]]]]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"bool"],[3,"Machine"],[4,"MachineError"],[3,"MachineRegs"],[4,"Instr"],[4,"Reg"],[4,"RegOrInt"],[15,"str"],[6,"Input"],[3,"Step"],[15,"i64"],[15,"u8"],[8,"Iterator"],[4,"NextNumIter"],[4,"Option"],[3,"Symbol"],[3,"ArrayVec"],[4,"SymVal"],[3,"Solver"],[4,"Ordering"],[3,"Rc"],[15,"usize"],[3,"Vec"],[8,"Fn"],[3,"AllArgs"],[6,"Command"],[3,"ArgMatches"],[3,"Error"],[3,"MachineArgs"],[3,"SolverArgs"],[13,"Inp"],[13,"Add"],[13,"Mul"],[13,"Div"],[13,"Mod"],[13,"Eql"],[13,"Int"],[13,"Outer"],[13,"Inner"],[13,"Symbol"],[13,"Input"],[13,"Add"],[13,"Multiply"],[13,"Divide"],[13,"Modulo"],[13,"IsEqual"],[13,"IsUnequal"],[13,"Value"],[13,"Error"]]},\
"aoc_2021_day_25":{"doc":"Advent of Code 2021: Day 25: Sea Cucumber","t":[0,0,0,5,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,5,6,13,13,6,6,6,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["input","logic","model","puzzle_metadata","Input","InputParams","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","fmt","fmt","from","from","from_parser","from_parser","grid","into","into","params","parse","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","part_one","Coord","East","Empty","Grid","GridInner","Pos","Region","South","borrow","borrow_mut","clone","clone_into","cmp","decode","default","encode","eq","equivalent","fmt","fmt","from","from_parser","hash","into","partial_cmp","to_owned","to_string","try_from","try_into","type_id"],"q":["aoc_2021_day_25","","","","aoc_2021_day_25::input","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_2021_day_25::logic","aoc_2021_day_25::model","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,0,0,3,4,3,4,3,4,3,4,4,3,3,4,4,3,4,3,4,3,3,4,3,4,3,4,3,4,3,4,3,4,3,4,0,0,14,14,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[],[[2,[1]]]],0,0,[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[[],4],[[3,5],6],[[3,5],6],[[4,5],6],[[4,5],6],[[]],[[]],[7,[[8,[3]]]],[7,[[8,[4]]]],0,[[]],[[]],0,[[],[[9,[4]]]],[[]],[[]],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[3,[[9,[13]]]],0,0,0,0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],15],[16,14],[[],14],[14,16],[[14,14],17],[[],17],[[14,5],6],[[14,5],6],[[]],[7,[[8,[14]]]],[14],[[]],[[14,14],[[18,[15]]]],[[]],[[],10],[[],11],[[],11],[[],12]],"p":[[8,"Puzzle"],[3,"Box"],[3,"Input"],[3,"InputParams"],[3,"Formatter"],[6,"Result"],[3,"Parser"],[6,"ParseResult"],[6,"GenResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"i64"],[4,"Region"],[4,"Ordering"],[15,"usize"],[15,"bool"],[4,"Option"]]},\
"aoc_bithash":{"doc":"Bloom filter","t":[3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BitHash","BitHasher","IteratorBitHash","bit_hash","bitand","bits","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","finish","fmt","from","from","into","into","is_zero","new_with_hasher","not","reduce","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","update","zero"],"q":["aoc_bithash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A bit hash value","State for building a <code>BitHash</code> iteratively","Extension trait to <code>Iterator</code> for working with <code>BitHash</code>","Construct a <code>BitHash</code> with the values from an iterator","","The number of one bits in the hash value","","","","","","","Stop hashing and return the hash value","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true is this hash has no one bits","Construct a <code>BitHasher</code> with the provided <code>BuildHasher</code>","","Map the hash to an equivalent hash of a smaller size","","","","","","","","","Update the hash value with a new item","A zero hash value, with no items added"],"i":[0,0,0,12,1,1,4,1,4,1,1,1,4,1,4,1,4,1,1,4,1,1,1,1,4,1,4,1,4,1,4,1],"f":[0,0,0,[[],1],[[1,1],1],[1,2],[[]],[[]],[[]],[[]],[1,1],[[]],[[[4,[3]]],1],[[1,5],6],[[]],[[]],[[]],[[]],[1,7],[3,[[4,[3]]]],[1,1],[1,1],[[]],[[],8],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[[4,[3]],11],[[4,[3]]]],[[],1]],"p":[[3,"BitHash"],[15,"usize"],[8,"BuildHasher"],[3,"BitHasher"],[3,"Formatter"],[6,"Result"],[15,"bool"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Hash"],[8,"IteratorBitHash"]]},\
"aoc_bitvec":{"doc":"Dynamically sized array of items encoded as bits and packed","t":[18,18,3,8,3,3,8,11,11,11,11,11,11,11,11,11,10,10,11,10,10,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,18,18,3,8,8,18,18,18,11,11,11,11,10,10,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BITS","BITS","BitVec","BitVecEncoding","BitVecEncodingDefault","BitVecIter","BitVecNative","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","decode","decode","decode","encode","encode","encode","eq","fmt","from","from","into","into","into_iter","next","prelude","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","BITS","BITS","BitVec","BitVecEncoding","BitVecNative","MASK","MASK","MASK","borrow","borrow_mut","clone","clone_into","decode","decode","default","encode","encode","eq","extend","fmt","from","from_iter","get","get_bit_shift","get_bit_shift","get_bit_shift","into","is_empty","item_to_word","item_to_word","item_to_word","iter","len","new","push","set","to_owned","try_from","try_into","type_id","word_to_item","word_to_item","word_to_item"],"q":["aoc_bitvec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_bitvec::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Number of bits in each encoded item","Number of bits in an encoded item","Dynamically sized array of items encoded as bits and packed","Trait for encoding an item as bits for storing in a <code>BitVec</code>","Default implementation of <code>BitVecEncoding</code> for items which …","Iterator over the items in a <code>BitVec</code>","Trait for items which know how to encode themselves for …","","","","","","","","","","Decode an item from its representation as bits","Decode an item from its representation as bits","","Encode an item into its representation as bits","Encode an item into its representation as bits","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Number of bits in each encoded item","Number of bits in an encoded item","Dynamically sized array of items encoded as bits and packed","Trait for encoding an item as bits for storing in a <code>BitVec</code>","Trait for items which know how to encode themselves for …","Mask for the bits in an encoded item","Mask for the bits in an encoded item","Mask for the bits in an encoded item","","","","","Decode an item from its representation as bits","Decode an item from its representation as bits","","Encode an item into its representation as bits","Encode an item into its representation as bits","","","","Returns the argument unchanged.","","Get a specific item given its index","","","","Calls <code>U::from(self)</code>.","True if there are no stored items","","","","Create an iterator over the stored items","Number of items stored","Create a new <code>BitVec</code> with no items","Add a new item, increases the size by one","Replace the item at the specified index","","","","","","",""],"i":[16,17,0,0,0,0,0,1,3,1,3,1,3,1,3,3,16,17,1,16,17,1,1,1,1,3,1,3,3,3,0,1,3,1,3,1,3,1,3,16,17,0,0,0,16,16,16,11,11,11,11,16,17,11,16,17,11,11,11,11,11,11,16,16,16,11,11,16,16,16,11,11,11,11,11,11,11,11,11,16,16,16],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[[[3,[2,2]]],[[3,[2,2]]]],[[]],[[]],[3,4],[4],[4],[4],[[],4],[[],4],[[],4],[[1,1],5],[[1,6],7],[[]],[[]],[[]],[[]],[[]],[3,8],0,[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],0,0,0,0,0,0,0,0,[[]],[[]],[[[11,[2,2]]],[[11,[2,2]]]],[[]],[4],[4],[[],11],[[],4],[[],4],[[[11,[12,12]],11],5],[[11,13]],[[[11,[14,14]],6],7],[[]],[13,11],[[11,4],8],[15,15],[15,15],[15,15],[[]],[11,5],[[4,15],4],[[4,15],4],[[4,15],4],[11,3],[11,4],[[],11],[11],[[11,4]],[[]],[[],9],[[],9],[[],10],[[4,15],4],[[4,15],4],[[4,15],4]],"p":[[3,"BitVecEncodingDefault"],[8,"Clone"],[3,"BitVecIter"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"BitVec"],[8,"PartialEq"],[8,"IntoIterator"],[8,"Debug"],[15,"u32"],[8,"BitVecEncoding"],[8,"BitVecNative"]]},\
"aoc_checked":{"doc":"","t":[14],"n":["checked"],"q":["aoc_checked"],"d":[""],"i":[0],"f":[0],"p":[]},\
"aoc_codegen":{"doc":"Generate boilerplate code, run from build.rs","t":[5],"n":["invoke"],"q":["aoc_codegen"],"d":["Entry point for code generation"],"i":[0],"f":[[[],[[3,[[2,[1]]]]]]],"p":[[8,"Error"],[3,"Box"],[4,"Result"]]},\
"aoc_common":{"doc":"Common functionality used in all puzzle solutions","t":[0,14,8,3,3,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,5,5,11,11,10,11,11,11,11,11,11,10],"n":["puzzle","puzzle_info","Puzzle","PuzzleCommand","RunStats","borrow","borrow","borrow_mut","borrow_mut","command","commands","day","dyn_puzzle","find_input","find_input_or_default","from","from","into","into","invoke","invoke","load_input","name","name","new","num_parts","part_one","part_two","run_year","run_year_and_exit","set_default_params","set_param","set_param_real","try_from","try_from","try_into","try_into","type_id","type_id","year"],"q":["aoc_common","","aoc_common::puzzle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,13,1,13,1,1,5,5,5,5,5,13,1,13,1,5,1,5,5,1,1,5,5,5,0,0,5,5,5,13,1,13,1,13,1,5],"f":[0,0,0,0,0,[[]],[[]],[[]],[[]],[1,2],[[],[[3,[1]]]],[[],4],[[],5],[[],[[7,[6]]]],[[],6],[[]],[[]],[[]],[[]],[[],7],[[1,8],7],[[],[[7,[9]]]],[[],10],[1,10],[[10,11],1],[[],12],[[],[[7,[9]]]],[[],[[7,[9]]]],[[],[[7,[13]]]],[14,7],[[]],[[10,9]],[[9,9]],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],17]],"p":[[3,"PuzzleCommand"],[6,"Command"],[3,"Vec"],[15,"u8"],[8,"Puzzle"],[3,"PathBuf"],[6,"GenResult"],[3,"ArgMatches"],[3,"String"],[15,"str"],[8,"Fn"],[15,"usize"],[3,"RunStats"],[15,"bool"],[4,"Result"],[3,"TypeId"],[15,"u16"]]},\
"aoc_grid":{"doc":"","t":[16,16,18,13,3,3,3,3,3,3,3,6,3,3,8,8,8,4,8,3,8,3,8,8,3,8,8,8,8,16,16,16,16,13,13,13,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,10,11,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,16,16,3,3,3,8,8,8,8,8,16,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11],"n":["Coord","Cursors","DISPLAY_TYPE","DownRight","GridBuf","GridCursor","GridCursorIter","GridCursorWalk","GridExtend","GridExtendCursors","GridExtendIter","GridIter","GridKeysIter","GridOffset","GridPos","GridPosDisplay","GridPosDisplayAuto","GridPosDisplayType","GridPosParse","GridPrint","GridStorage","GridStorageClone","GridStorageIntoIter","GridStorageMut","GridTransformIter","GridView","GridViewExtend","GridViewIter","GridViewPrint","Item","Item","Item","Iter","RightUp","UpRight","UpRightSlant","Values","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cursor","cursors","cursors","end","end","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_array","get_trusted","get_trusted","grid_parse_col_offset","grid_parse_first_index","grid_parse_grid_size","grid_parse_row_offset","grid_pos_display_native","grid_pos_display_prefix","grid_pos_display_rows_cols","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","new","next","next","next","next","next","next","next","nth","offset","prelude","size","size","start","start","storage_get","storage_iter","storage_len","storage_mut","storage_ref","storage_set","to_array","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values","Coord","Cursors","GridBuf","GridCursor","GridOffset","GridPos","GridView","GridViewExtend","GridViewIter","GridViewPrint","Item","Values","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cursor","cursor","cursor","cursors","cursors","default","display_with_delim","end","end","eq","eq","extend","extend","extend","extend_in_place","extend_map","extend_map","extend_map","first_key","first_key","first_key","fmt","fmt","fmt","fmt","from","from","from","from_array","from_native","from_native","from_native","from_parser","get","get","get","get","get_mut","get_native","get_native","get_native","get_ref","get_trusted","get_trusted","hash","hash","idx","index","into","into","into","is_empty","is_empty","is_empty","iter","iter","iter","keys","keys","keys","last_key","last_key","last_key","len","len","len","map","map","map","map","map","map","native","native_to_index","native_to_index","native_to_index","neg","new","new_range","new_size","offset","offset","offset","parse_with_delim","parse_with_delim_and_fn","parse_with_fn","partial_cmp","partial_cmp","pos","print","print","print","reset","resize","set","set_index","size","size","start","start","to_array","to_buf","to_buf","to_buf","to_native","to_native","to_native","to_owned","to_owned","to_owned","to_string","transform","transform","transform","translate","try_add","try_add_assign","try_from","try_from","try_from","try_into","try_into","try_into","try_map","try_map","try_map","try_set","type_id","type_id","type_id","val","values","values","walk","wrap_range","wrap_size"],"q":["aoc_gridaoc_grid::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Multi dimensional abstraction over a single dimensional …","","","","","","","","","","Trait for values to use as indices for a <code>GridView</code>.","","","","","","Trait for backing stores for a <code>GridBuf</code>","Wrapping iterator which clones items.","Extra trait for <code>GridStorage</code> to support iteration.","Additional trait for backing stores which which can …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Multi dimensional abstraction over a single dimensional …","","","Trait for values to use as indices for a <code>GridView</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[15,33,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,43,33,43,41,41,41,44,14,41,8,7,16,17,13,2,3,4,14,41,8,7,16,17,13,2,3,4,2,3,4,2,3,4,2,33,2,33,2,8,2,14,41,8,7,16,17,13,2,3,4,15,33,2,45,45,45,45,46,46,46,14,41,8,7,16,17,13,2,3,4,14,7,16,17,13,3,4,16,16,16,16,16,16,16,16,16,16,16,16,16,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,13,14,7,16,17,13,3,4,4,2,0,33,2,33,2,42,43,42,47,47,42,15,2,3,4,8,14,41,8,7,16,17,13,2,3,4,14,41,8,7,16,17,13,2,3,4,14,41,8,7,16,17,13,2,3,4,44,2,15,33,0,0,0,0,0,0,0,0,33,44,23,5,18,23,5,18,23,5,18,23,5,18,23,5,33,33,33,33,23,18,23,33,23,23,5,48,48,48,23,33,33,33,33,33,33,23,23,5,18,23,5,18,15,15,15,15,23,33,33,33,5,23,33,33,33,23,33,23,23,5,18,5,23,5,18,33,33,33,44,44,44,33,33,33,33,33,33,33,33,33,15,15,15,33,33,33,5,15,15,15,18,18,23,23,33,33,33,23,23,23,23,5,5,49,49,49,23,23,23,23,33,23,33,23,15,44,44,44,15,15,15,23,5,18,23,33,33,33,23,5,5,23,5,18,23,5,18,33,33,33,23,23,5,18,18,44,23,5,23,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1,1]]],[[2,[1,1]]]],[[[3,[1,1]]],[[3,[1,1]]]],[[[4,[1]]],[[4,[1]]]],[[]],[[]],[[]],[2,[[6,[5]]]],[[]],[2,7],[[]],[2],[[8,9],10],[[2,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11],[[2,11]],[[11,11],12],[[11,11],11],[[]],[[11,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,13],[14,[[6,[5]]]],[7,[[6,[5]]]],[[[16,[15]]],[[6,[15]]]],[17,[[6,[5]]]],[13,[[6,[5]]]],[3,6],[4,6],[[4,11],6],[2,[[19,[18]]]],0,[[]],[2],[[]],[2],[11,6],[[]],[[],11],[11,6],[11,6],[11],[[]],[[]],[[]],[[]],[[],20],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[2],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[23,[1,1]]],[[23,[1,1]]]],[[[5,[1]]],[[5,[1]]]],[[[18,[1]]],[[18,[1]]]],[[]],[[]],[[]],[[[23,[24,24]],23],25],[[[5,[24]],5],25],[[],[[6,[5]]]],[[],[[6,[5]]]],[[],[[6,[5]]]],[[]],[23,17],[[],[[18,[26]]]],[[23,27,9],10],[[]],[23],[[[23,[28,28]],23],29],[[[5,[28]],5],29],[[],[[19,[2]]]],[[],[[19,[2]]]],[[],[[19,[2]]]],[23,[[19,[23]]]],[[],[[19,[23]]]],[[],[[19,[23]]]],[[],[[19,[23]]]],[[]],[[]],[[]],[[23,9],10],[[23,9],10],[[5,9],10],[[[18,[30]],9],10],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[31,[[32,[23]]]],[[],6],[[],6],[[],6],[[5,33]],[23,6],[[],6],[[],6],[[],6],[23,6],[11],[[23,11]],[[[23,[34,34]]]],[[[5,[34]]]],[18,12],[5,11],[[]],[[]],[[]],[[],29],[[],29],[[],29],[[],35],[[],35],[[],35],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[],23],[[],23],[[],23],[5],[[],[[6,[12]]]],[[],[[6,[12]]]],[[],[[6,[12]]]],[18,18],[[],[[19,[18]]]],[[],[[19,[23]]]],[[],23],[[],[[19,[18]]]],[[],[[19,[18]]]],[[],[[19,[18]]]],[[31,36,37],[[32,[23]]]],[[31,37,36,[0,[36,1]]],[[32,[23]]]],[[31,36,[0,[36,1]]],[[32,[23]]]],[[[23,[38,38]],23],[[6,[25]]]],[[[5,[38]],5],[[6,[25]]]],[5],[[],8],[[],8],[[],8],[[[23,[39]]]],[23,[[19,[23]]]],[23],[[23,11]],[[]],[23],[[]],[23],[[]],[[],23],[[],23],[[],23],[[],6],[[],6],[[],6],[[]],[[]],[[]],[[],20],[[],[[19,[23]]]],[[],[[19,[23]]]],[[],[[19,[23]]]],[23,[[19,[23]]]],[[5,18],[[19,[5]]]],[[5,18],19],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],[[21,[23]]]],[[],[[21,[23]]]],[[],[[21,[23]]]],[23,6],[[],22],[[],22],[[],22],[18],[[]],[23],[[5,18],14],[[],[[19,[23]]]],[[],23]],"p":[[8,"Clone"],[3,"GridExtend"],[3,"GridExtendIter"],[3,"GridStorageClone"],[3,"GridCursor"],[4,"Option"],[3,"GridExtendCursors"],[3,"GridPrint"],[3,"Formatter"],[6,"Result"],[15,"usize"],[15,"isize"],[3,"GridTransformIter"],[3,"GridCursorWalk"],[8,"GridPos"],[3,"GridKeysIter"],[3,"GridCursorIter"],[3,"GridOffset"],[6,"NumResult"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"GridBuf"],[8,"Ord"],[4,"Ordering"],[8,"Default"],[8,"Display"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Parser"],[6,"ParseResult"],[8,"GridView"],[8,"Hash"],[6,"GridIter"],[8,"Fn"],[8,"ParseDelimiter"],[8,"PartialOrd"],[3,"Vec"],[8,"GridPosDisplayAuto"],[4,"GridPosDisplayType"],[8,"GridStorage"],[8,"GridStorageIntoIter"],[8,"GridViewIter"],[8,"GridPosParse"],[8,"GridPosDisplay"],[8,"GridStorageMut"],[8,"GridViewExtend"],[8,"GridViewPrint"]]},\
"aoc_inpstr":{"doc":"","t":[13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["Borrow","InpStr","RefCount","alloc","as_str","borrow","borrow","borrow_mut","borrowed","clone","clone_into","cmp","deref","eq","eq","eq","fmt","fmt","from","from","hash","into","partial_cmp","to_owned","to_owned","to_string","try_from","try_into","type_id","0","0"],"q":["aoc_inpstr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_inpstr::InpStr",""],"d":["","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,12,13],"f":[0,0,0,[[[2,[1]]],3],[3,1],[1,3],[[]],[[]],[3,1],[3,3],[[]],[[3,3],4],[3,1],[[3,1],5],[[3,1],5],[[3,3],5],[[3,6],7],[[3,6],7],[[]],[1,3],[3],[[]],[[3,3],[[8,[4]]]],[[]],[3,9],[[],9],[[],10],[[],10],[[],11],0,0],"p":[[15,"str"],[8,"AsRef"],[4,"InpStr"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[13,"Borrow"],[13,"RefCount"]]},\
"aoc_list":{"doc":"Implementation of lisp-like lists","t":[6,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["CharList","Empty","List","Present","borrow","borrow_mut","clone","clone_into","cmp","cons","contains","eq","eq","eq","fmt","fmt","from","from","from","hash","head","into","is_empty","iter","len","new","partial_cmp","prepend","prepend","starts_with","starts_with","strip_prefix","strip_prefix","tail","to_owned","to_string","try_from","try_into","type_id","with_push_front","0"],"q":["aoc_list","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_list::List"],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,2,0,2,2,2,2,2,2,2,2,2,7,7,2,2,2,7,7,2,2,2,2,2,2,2,2,2,7,2,7,2,7,2,2,2,2,2,2,2,18],"f":[0,0,0,0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[]],[[2,2],3],[[[2,[1]]],4],[[[2,[1]]],5],[[[2,[[0,[1,6]]]],[2,[[0,[1,6]]]]],5],[[7,8],5],[[7,9],5],[[[2,[[0,[1,10]]]],11],12],[[[2,[13]],11],12],[[]],[9,7],[8,7],[[[2,[[0,[1,14]]]]]],[[[2,[1]]],4],[[]],[[[2,[1]]],5],[[[2,[1]]],[[0,[1]]]],[[[2,[1]]],15],[[],[[2,[1]]]],[[2,2],[[4,[3]]]],[[[2,[13]],9],[[2,[13]]]],[[7,9],7],[[[2,[13]],9],5],[[7,9],5],[[[2,[13]],9],[[4,[[2,[13]]]]]],[[7,9],[[4,[7]]]],[[[2,[1]]],[[4,[[2,[1]]]]]],[[]],[[],8],[[],16],[[],16],[[],17],[[[2,[1]],1],[[2,[1]]]],0],"p":[[8,"Clone"],[4,"List"],[4,"Ordering"],[4,"Option"],[15,"bool"],[8,"PartialEq"],[6,"CharList"],[3,"String"],[15,"str"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"char"],[8,"Hash"],[15,"usize"],[4,"Result"],[3,"TypeId"],[13,"Present"]]},\
"aoc_md5":{"doc":"","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["MD5","Output","as_hex_bytes","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","eq","finish","finish_reset","fmt","fmt","from","from","from_hex","index","into","into","is_empty","len","md5_hash","new","num_zeros","push","reset","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","update"],"q":["aoc_md5","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,1,1,2,1,1,2,2,1,1,2,1,1,1,2,1,1,1,0,2,1,2,2,1,1,2,1,2,1,2,1,2],"f":[0,0,[1],[[]],[[]],[[]],[[]],[1,1],[[]],[[],2],[[],1],[[1,1],3],[2,1],[2,1],[[1,4],5],[[1,4],5],[[]],[[]],[6,[[8,[1,7]]]],[[1,9],10],[[]],[[]],[1,3],[1,9],[[],1],[[],2],[1,10],[[2,10]],[2],[[]],[[],7],[[],8],[[],8],[[],8],[[],8],[[],11],[[],11],[2]],"p":[[3,"Output"],[3,"MD5"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"String"],[4,"Result"],[15,"usize"],[15,"u8"],[3,"TypeId"]]},\
"aoc_misc":{"doc":"","t":[14,14,14,14,14,14,0,14,14,14,13,13,8,8,3,3,4,3,4,3,3,3,3,3,3,3,8,8,8,8,8,8,13,13,4,8,3,3,3,3,4,8,14,3,8,8,8,8,4,4,13,16,8,2,13,8,8,6,6,13,8,14,3,4,3,8,16,2,13,8,8,4,8,8,3,13,13,13,3,8,3,3,8,13,13,4,3,16,16,16,16,16,16,16,16,16,16,16,13,3,3,3,3,3,3,8,3,3,3,3,13,13,8,8,13,13,13,8,8,8,8,3,3,8,16,2,13,13,13,3,3,2,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,2,2,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,14,2,14,2,14,2,14,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,0,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,2,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,14,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,2,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,0,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,14,2,14,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,12,8,14,13,13,13,8,14,4,8,14,8,14,3,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,5,11,5,5,11,10,11,11,11,11,11,4,3,8,13,8,14,3,3,3,3,3,8,3,3,13,8,8,8,8,6,13,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,10,11,11,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,5,11,11,5,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,5,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,8,3,8,14,8,16,3,11,11,10,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,3,3,13,8,3,3,3,3,13,13,13,13,13,3,13,13,3,13,3,4,13,13,13,13,13,13,3,13,13,13,3,3,13,3,3,13,13,13,13,13,13,13,13,13,8,13,3,13,6,8,4,3,3,13,13,3,3,3,3,3,3,13,3,13,13,13,13,13,8,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,10,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,8,8,8,8,11,11,11,11,10,10,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,12,3,3,3,3,3,3,8,3,3,8,8,3,3,3,3,3,8,3,8,3,3,3,16,8,16,16,8,3,3,3,3,3,8,3,3,3,3,3,3,8,3,3,8,3,3,8,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,10,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,18,3,8,3,18,3,19,18,18,18,11,5,5,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,12,5,5,5,11,11,11,5,12,5,5,5,11,11,11,11,11,11,11,5,5,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,5,11,11,11,5,11,12,8,8,18,8,8,8,8,8,8,4,13,18,8,13,13,4,8,8,8,8,8,8,13,8,8,8,8,8,4,13,8,8,8,8,8,8,8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,3,8,3,3,3,3,3,8,8,8,16,16,8,8,8,8,8,8,16,8,16,13,3,16,13,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,10,11,11,10,10,10,10,10,10,10,11,12,12,10,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,3,3,3,3,3,3,8,3,3,3,3,3,8,16,16,16,3,3,3,3,3,3,3,3,8,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,16,3,3,3,8,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,13,8,13,8,13,8,4,8,16,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,3,3,3,6,3,3,3,3,3,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,5,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,3,3,18,18,18,18,18,3,3,17,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["array_vec","assert_eq_ok","assert_err","assert_is_err","assert_is_ok","ok_or","prelude","some_or","wrapper_deref","wrapper_deref_mut","AcqRel","Acquire","Add","AddAssign","Arc","ArrayVec","AtomicOrdering","AtomicUsize","BTreeEntry","BTreeIter","BTreeIterMut","BTreeKeys","BTreeMap","BTreeSet","BTreeValues","BinaryHeap","BitAnd","BitAndAssign","BitOr","BitOrAssign","Borrow","BorrowMut","Borrowed","Both","Bound","BuildHasher","BuildHasherDefault","Cell","Chars","Condvar","Cow","Debug","Debug","DefaultHasher","Deref","DerefMut","Display","Div","Either","EitherOrBoth","Equal","Err","Error","Excluded","Excluded","FromStr","FusedIterator","GenError","GenResult","Greater","Hash","Hash","HashMap","HashMapEntry","HashSet","Hasher","Hasher","Included","Included","Index","IndexMut","Infallible","IteratorExt","Itertools","JoinHandle","Left","Left","Less","MapToIndex","Mul","MultiPeek","Mutex","Neg","Occupied","Occupied","Ordering","OsString","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Owned","ParseIntError","Path","Peekable","PhantomData","RandomHasher","Range","RangeBounds","RangeInclusive","Rc","RcWeak","RefCell","Relaxed","Release","Rem","ResultEither","Right","Right","SeqCst","Shl","ShlAssign","Shr","ShrAssign","SliceIter","SliceIterMut","Sub","Target","Unbounded","Unbounded","Vacant","Vacant","VecDeque","VecIntoIter","_","add","add","add","add_assign","add_assign","add_assign","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_by","advance_by","advance_by","advance_by","all","all","all","all_equal","all_unique","allocator","allocator","ancestors","and_modify","and_modify","any","any","any","append","append","append","append","array","array","array","array_vec","array_vec","array_vec","as_array_of_cells","as_fd","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_ptr","as_mut_slice","as_mut_slice","as_mut_slice","as_mut_slices","as_os_str","as_os_str","as_pin_mut","as_pin_ref","as_pthread_t","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_raw_fd","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice_of_cells","as_slices","as_str","assert_eq_ok","assert_eq_ok","assert_err","assert_err","assert_is_err","assert_is_err","assert_is_ok","assert_is_ok","assume_init","assume_init","assume_init","assume_init","at_most_one","back","back_mut","batching","binary_search","binary_search_by","binary_search_by_key","bitand","bitand","bitand","bitand_assign","bitor","bitor","bitor","bitor_assign","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","both","build_hasher","build_hasher","build_hasher","canonicalize","capacity","capacity","capacity","capacity","cartesian_product","cause","cause","cause","chunks","circular_tuple_windows","clear","clear","clear","clear","clear","clear","clear_poison","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_from","clone_from","clone_from","clone_from","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","coalesce","collect","collect_tuple","collect_vec","combinations","combinations_with_replacement","compare_and_swap","compare_exchange","compare_exchange_weak","components","concat","consume","contains","contains","contains","contains","contains","contains","contains_key","count","count","count","count","count","count","counts","counts_by","decrement_strong_count","decrement_strong_count","dedup","dedup_by","dedup_by_with_count","dedup_with_count","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","description","description","description","description","description","difference","display","div","downcast","downcast","downcast_mut","downcast_mut","downcast_mut","downcast_ref","downcast_ref","downcast_ref","downcast_unchecked","downcast_unchecked","downgrade","downgrade","drain","drain","drain","drain_filter","drain_filter","drain_sorted","drop","drop","drop","drop","drop","drop","drop","dropping","dropping_back","duplicates","duplicates_by","either","either","either_into","either_with","end","end","end_bound","end_bound","end_bound","end_bound","end_bound","ends_with","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","exactly_one","exists","expect_left","expect_right","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_reserve","extend_reserve","extend_reserve","extend_reserve","extension","factor_err","factor_first","factor_none","factor_ok","factor_second","fetch_add","fetch_and","fetch_max","fetch_min","fetch_nand","fetch_or","fetch_sub","fetch_update","fetch_xor","file_name","file_prefix","file_stem","fill_buf","filter_map_ok","filter_ok","find","find","find","find_map","find_map","find_map","find_or_first","find_or_last","find_position","finish","finish","first","first_entry","first_key_value","flatten_ok","flip","flip","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold1","fold_ok","fold_options","fold_results","fold_while","for_each","for_each","for_each","foreach","format","format_with","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_mut","from_mut","from_mut_slice","from_raw","from_raw","from_raw","from_str","from_str","from_vec","front","front_mut","fs","ge","ge","ge","ge","ge","ge","get","get","get","get","get","get","get","get","get","get_key_value","get_key_value","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut_slice","get_mut_unchecked","get_mut_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","group_by","gt","gt","gt","gt","gt","gt","has_left","has_right","has_root","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash_one","hash_slice","increment_strong_count","increment_strong_count","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert","insert","insert","insert","insert","insert_entry","interleave","interleave_shortest","intersection","intersperse","intersperse_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_boxed_os_str","into_future","into_group_map","into_group_map_by","into_grouping_map","into_grouping_map_by","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner_unchecked","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter_sorted","into_keys","into_owned","into_path_buf","into_pthread_t","into_raw","into_raw","into_raw","into_slice","into_sorted_vec","into_string","into_values","into_vec","into_vec","io","is","is","is","is_absolute","is_borrowed","is_both","is_dir","is_disjoint","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_eq","is_file","is_finished","is_full","is_ge","is_gt","is_le","is_left","is_left","is_lt","is_ne","is_owned","is_poisoned","is_relative","is_right","is_right","is_sorted","is_sorted","is_sorted_by","is_subset","is_superset","is_symlink","iter","iter","iter","iter","iter","iter","iter_mut","iter_mut","itertools","izip","join","join","join","k_smallest","key","key","keys","kind","kmerge","kmerge_by","last","last","last","last","last","last","last","last","last","last","last","last","last_entry","last_key_value","le","le","le","le","le","le","left","left","left_and_then","left_and_then","left_or","left_or_default","left_or_else","len","len","len","len","len","len","len","len","len","len","len","len","len","load","lock","lt","lt","lt","lt","lt","lt","make_contiguous","make_mut","make_mut","map","map","map_any","map_into","map_left","map_left","map_ok","map_results","map_right","map_right","max","max","max","max","max","max_set","max_set_by","max_set_by_key","mem","merge","merge_by","merge_join_by","metadata","min","min","min","min","min","min_set","min_set_by","min_set_by_key","minmax","minmax_by","minmax_by_key","mul","multi_cartesian_product","multipeek","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","ne","ne","ne","ne","ne","ne","ne","ne","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_const","new_cyclic","new_cyclic","new_in","new_in","new_in","new_uninit","new_uninit","new_uninit_slice","new_uninit_slice","new_zeroed","new_zeroed","new_zeroed_slice","new_zeroed_slice","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_chunk","next_if","next_if_eq","next_tuple","notify_all","notify_one","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","ok_or","ok_or","ok_or_err","ops","or","or_default","or_default","or_default","or_else","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with_key","or_insert_with_key","pad_using","parent","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partition","partition_map","partition_point","partition_result","peek","peek","peek","peek_mut","peek_mut","peeking_next","peeking_next","peeking_next","peeking_next","peeking_take_while","permutations","pin","pin","poll","pop","pop","pop_at","pop_back","pop_first","pop_first","pop_front","pop_last","pop_last","position","position","position","position_max","position_max_by","position_max_by_key","position_min","position_min_by","position_min_by_key","position_minmax","position_minmax_by","position_minmax_by_key","positions","powerset","product1","provide","provide","provide","provide","provide","provide","ptr_eq","ptr_eq","ptr_eq","push","push","push","push_back","push_front","push_unchecked","range","range","range","range_mut","range_mut","read","read","read_buf","read_dir","read_exact","read_line","read_link","read_to_end","read_to_string","read_until","reduce","rem","remaining_capacity","remove","remove","remove","remove","remove","remove_entry","replace","replace","replace","replace_with","report","request_ref","request_ref","request_ref","request_value","request_value","request_value","reserve","reserve","reserve","reserve_exact","reserve_exact","reserve_exact","reset_peek","resize","resize_with","retain","retain","retain","retain","retain","retain_mut","reverse","rfind","rfold","rfold","rfold","right","right","right_and_then","right_and_then","right_or","right_or_default","right_or_else","rotate_left","rotate_right","rposition","rposition","seek","set","set_from","set_len","shl","shl_assign","shr","shr_assign","shrink_to","shrink_to","shrink_to","shrink_to_fit","shrink_to_fit","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","slice","some_or","some_or","sorted","sorted_by","sorted_by_cached_key","sorted_by_key","sorted_unstable","sorted_unstable_by","sorted_unstable_by_key","source","source","source","sources","split_off","split_off","split_off","start","start","start_bound","start_bound","start_bound","start_bound","start_bound","starts_with","step","store","str","strip_prefix","strong_count","strong_count","strong_count","sub","sub","sub","sum1","swap","swap","swap","swap","swap_pop","swap_remove","swap_remove_back","swap_remove_front","symlink_metadata","symmetric_difference","take","take","take","take","take_while_ref","tee","then","then_with","thread","thread","time","to_mut","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_path_buf","to_str","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string_lossy","tree_fold1","truncate","truncate","try_array","try_array","try_borrow","try_borrow_mut","try_borrow_unguarded","try_collect","try_exists","try_extend_from_slice","try_fold","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_new","try_new","try_new_uninit","try_new_uninit","try_new_zeroed","try_new_zeroed","try_pin","try_push","try_reserve","try_reserve","try_reserve","try_reserve_exact","try_reserve_exact","try_reserve_exact","try_rfold","try_rfold","try_unwrap","try_unwrap","tuple_combinations","tuple_windows","tuples","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","undo_leak","union","unique","unique_by","unlock","unwrap_left","unwrap_or_clone","unwrap_or_clone","unwrap_right","update","update","upgrade","values","values_mut","wait","wait_timeout","wait_timeout_ms","wait_timeout_while","wait_while","weak_count","weak_count","weak_count","while_some","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity","with_capacity_and_hasher","with_capacity_and_hasher","with_capacity_in","with_extension","with_file_name","with_hasher","with_hasher","with_position","wrapper_deref","wrapper_deref","wrapper_deref_mut","wrapper_deref_mut","write","write","write","write","write","write_all","write_all","write_fmt","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_length_prefix","write_str","write_str","write_str","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","zip_eq","zip_longest","0","0","0","0","0","0","0","0","0","0","0","1","0","0","IntoIter","TryFromSliceError","advance_back_by","advance_by","as_mut_slice","as_slice","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","description","drop","empty","fmt","fmt","fmt","fold","from","from","from","from_fn","from_mut","from_ref","into","into","into_iter","is_empty","last","len","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","new","new_unchecked","next","next_back","provide","rfold","size_hint","to_owned","to_owned","to_string","try_from","try_from","try_from_fn","try_into","try_into","type_id","type_id","0","Eq","Eq","Equal","Greater","Less","Ord","Ord","Ordering","PartialEq","PartialEq","PartialOrd","PartialOrd","Reverse","borrow","borrow_mut","clamp","clone","clone_from","clone_into","cmp","cmp","default","eq","eq","fmt","from","ge","ge","gt","gt","hash","into","le","le","lt","lt","max","max","max_by","max_by_key","min","min","min_by","min_by_key","ne","partial_cmp","partial_cmp","to_owned","try_from","try_into","type_id","Alignment","Arguments","Binary","Center","Debug","Debug","DebugList","DebugMap","DebugSet","DebugStruct","DebugTuple","Display","Error","Formatter","Left","LowerExp","LowerHex","Octal","Pointer","Result","Right","UpperExp","UpperHex","Write","align","alternate","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","debug_list","debug_map","debug_set","debug_struct","debug_tuple","default","description","entries","entries","entries","entry","entry","entry","eq","eq","field","field","fill","finish","finish","finish","finish","finish","finish_non_exhaustive","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","into","into","key","pad","pad_integral","partial_cmp","precision","provide","sign_aware_zero_pad","sign_minus","sign_plus","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","width","write","write_char","write_char","write_fmt","write_fmt","write_fmt","write_str","write_str","write_str","DirBuilder","DirEntry","File","FileTimes","FileType","Metadata","OpenOptions","Permissions","ReadDir","accessed","append","as_fd","as_raw_fd","as_raw_stat","atime","atime_nsec","blksize","blocks","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","canonicalize","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","copy","create","create","create","create_dir","create_dir_all","create_new","create_new","created","ctime","ctime_nsec","custom_flags","default","dev","eq","eq","file_name","file_name_ref","file_type","file_type","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_mode","from_raw_fd","gid","hard_link","hash","ino","ino","into","into","into","into","into","into","into","into","into","into_iter","into_raw_fd","is_block_device","is_char_device","is_dir","is_dir","is_fifo","is_file","is_file","is_read_vectored","is_read_vectored","is_socket","is_symlink","is_symlink","is_write_vectored","is_write_vectored","len","metadata","metadata","metadata","mode","mode","mode","mode","modified","mtime","mtime_nsec","new","new","new","next","nlink","open","open","options","path","permissions","rdev","read","read","read","read","read_at","read_buf","read_buf","read_dir","read_link","read_to_end","read_to_end","read_to_string","read_to_string","read_to_string","read_vectored","read_vectored","readonly","recursive","remove_dir","remove_dir_all","remove_file","rename","seek","seek","set_accessed","set_len","set_mode","set_modified","set_modified","set_permissions","set_permissions","set_readonly","set_times","size","soft_link","st_atime","st_atime_nsec","st_blksize","st_blocks","st_ctime","st_ctime_nsec","st_dev","st_gid","st_ino","st_mode","st_mtime","st_mtime_nsec","st_nlink","st_rdev","st_size","st_uid","symlink_metadata","sync_all","sync_data","to_owned","to_owned","to_owned","to_owned","to_owned","truncate","try_clone","try_exists","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uid","write","write","write","write","write_at","write_vectored","write_vectored","BuildHasher","BuildHasherDefault","Hash","Hash","Hasher","Hasher","SipHasher","borrow","borrow_mut","build_hasher","clone","clone_into","default","finish","finish","fmt","from","hash","hash_one","hash_slice","into","new","new_with_keys","to_owned","try_from","try_into","type_id","write","write","write_i128","write_i16","write_i32","write_i64","write_i8","write_isize","write_length_prefix","write_str","write_str","write_u128","write_u16","write_u32","write_u64","write_u8","write_usize","AddrInUse","AddrNotAvailable","AlreadyExists","ArgumentListTooLong","BorrowedBuf","BorrowedCursor","BrokenPipe","BufRead","BufReader","BufWriter","Bytes","Chain","ConnectionAborted","ConnectionRefused","ConnectionReset","CrossesDevices","Current","Cursor","Deadlock","DirectoryNotEmpty","Empty","End","Error","ErrorKind","ExecutableFileBusy","FileTooLarge","FilesystemLoop","FilesystemQuotaExceeded","HostUnreachable","Interrupted","IntoInnerError","InvalidData","InvalidFilename","InvalidInput","IoSlice","IoSliceMut","IsADirectory","LineWriter","Lines","NetworkDown","NetworkUnreachable","NotADirectory","NotConnected","NotFound","NotSeekable","Other","OutOfMemory","PermissionDenied","Read","ReadOnlyFilesystem","Repeat","ResourceBusy","Result","Seek","SeekFrom","Sink","Split","StaleNetworkFileHandle","Start","Stderr","StderrLock","Stdin","StdinLock","Stdout","StdoutLock","StorageFull","Take","TimedOut","TooManyLinks","UnexpectedEof","Unsupported","WouldBlock","Write","WriteZero","WriterPanicked","advance","advance","advance","advance_slices","advance_slices","append","as_fd","as_fd","as_fd","as_fd","as_fd","as_fd","as_mut","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","buffer","by_ref","by_ref","bytes","capacity","capacity","capacity","capacity","cause","chain","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","consume","consume","consume","consume","consume","consume","consume","copy","default","default","default","deref","deref","deref_mut","description","description","description","downcast","drop","empty","ensure_init","eq","eq","eq","error","fill_buf","fill_buf","fill_buf","fill_buf","fill_buf","fill_buf","fill_buf","filled","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw_os_error","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","has_data_left","hash","init_len","init_mut","init_ref","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_error","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_iter","into_iter","into_iter","into_parts","into_parts","is_empty","is_read_vectored","is_read_vectored","is_read_vectored","is_read_vectored","is_read_vectored","is_read_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","is_write_vectored","kind","last_os_error","len","limit","lines","lines","lock","lock","lock","new","new","new","new","new","new","new","next","next","next","other","partial_cmp","position","prelude","provide","provide","provide","raw_os_error","read","read","read","read","read","read","read","read","read","read_buf","read_buf","read_buf","read_buf","read_buf","read_buf","read_buf_exact","read_exact","read_exact","read_exact","read_exact","read_exact","read_line","read_line","read_line","read_to_end","read_to_end","read_to_end","read_to_end","read_to_string","read_to_string","read_to_string","read_to_string","read_to_string","read_until","read_until","read_vectored","read_vectored","read_vectored","read_vectored","read_vectored","read_vectored","read_vectored","reborrow","remaining_slice","repeat","rewind","seek","seek","seek","seek","seek","seek_relative","set_init","set_init","set_limit","set_position","sink","size_hint","source","split","stderr","stdin","stdout","stream_len","stream_len","stream_len","stream_position","stream_position","stream_position","stream_position","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfilled","uninit_mut","with_capacity","with_capacity","with_capacity","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all","write_all_vectored","write_all_vectored","write_all_vectored","write_all_vectored","write_all_vectored","write_all_vectored","write_all_vectored","write_all_vectored","write_fmt","write_fmt","write_fmt","write_fmt","write_fmt","write_fmt","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","write_vectored","written","0","0","0","BufRead","Read","Seek","Write","by_ref","by_ref","bytes","chain","consume","fill_buf","flush","has_data_left","is_read_vectored","is_write_vectored","lines","read","read_buf","read_buf_exact","read_exact","read_line","read_to_end","read_to_string","read_until","read_vectored","rewind","seek","split","stream_len","stream_position","take","write","write_all","write_all_vectored","write_fmt","write_vectored","0","ArrayChunks","ByRefSized","Chain","Cloned","Copied","Cycle","DoubleEndedIterator","Empty","Enumerate","ExactSizeIterator","Extend","Filter","FilterMap","FlatMap","Flatten","FromFn","FromIterator","Fuse","FusedIterator","Inspect","Intersperse","IntersperseWith","IntoIter","IntoIterator","Item","Item","Iterator","Map","MapWhile","Once","OnceWith","Peekable","Product","Repeat","RepeatWith","Rev","Scan","Skip","SkipWhile","Step","StepBy","Successors","Sum","Take","TakeWhile","TrustedLen","TrustedStep","Zip","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_back_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","advance_by","all","any","array_chunks","backward","backward_checked","backward_unchecked","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","chain","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","cmp_by","collect","collect_into","copied","count","count","count","count","count","count","count","count","count","count","count","cycle","default","empty","enumerate","eq","eq_by","extend","extend_one","extend_reserve","filter","filter_map","find","find","find","find","find_map","flat_map","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","for_each","forward","forward_checked","forward_unchecked","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_fn","from_generator","from_iter","fuse","ge","gt","inspect","intersperse","intersperse_with","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_remainder","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_partitioned","is_sorted","is_sorted_by","is_sorted_by_key","last","last","last","last","last","last","last","last","le","len","len","len","len","len","len","len","len","len","len","len","len","lt","map","map_while","max","max_by","max_by_key","min","min_by","min_by_key","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","ne","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_chunk","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","once","once_with","partial_cmp","partial_cmp_by","partition","partition_in_place","peekable","peeking_next","peeking_next","position","product","product","reduce","repeat","repeat_with","rev","rfind","rfind","rfind","rfind","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rfold","rposition","scan","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","skip","skip_while","step_by","steps_between","successors","sum","sum","take","take_while","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_collect","try_find","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_fold","try_for_each","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reduce","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","try_rfold","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unzip","zip","zip","ALIGNMENT","Assume","BikeshedIntrinsicFrom","Discriminant","LIFETIMES","ManuallyDrop","MaybeUninit","NOTHING","SAFETY","VALIDITY","add","align_of","align_of_val","align_of_val_raw","alignment","and","array_assume_init","as_bytes","as_bytes_mut","as_mut_ptr","as_ptr","assume_init","assume_init_drop","assume_init_mut","assume_init_read","assume_init_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","but_not","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","copy","default","deref","deref_mut","discriminant","drop","drop","eq","eq","eq","fmt","fmt","fmt","fmt","forget","forget_unsized","from","from","from","from","hash","hash","into","into","into","into","into_inner","lifetimes","min_align_of","min_align_of_val","needs_drop","new","new","partial_cmp","replace","safety","size_of","size_of_val","size_of_val_raw","slice_as_bytes","slice_as_bytes_mut","slice_as_mut_ptr","slice_as_ptr","slice_assume_init_mut","slice_assume_init_ref","sub","swap","take","take","to_owned","to_owned","to_owned","to_owned","transmute","transmute_copy","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uninit","uninit_array","uninitialized","validity","variant_count","write","write_slice","write_slice_cloned","zeroed","zeroed","0","Add","AddAssign","BREAK","BitAnd","BitAndAssign","BitOr","BitOrAssign","BitXor","BitXorAssign","Bound","Break","CONTINUE","CoerceUnsized","Complete","Continue","ControlFlow","Deref","DerefMut","DispatchFromDyn","Div","DivAssign","Drop","Excluded","Fn","FnMut","FnOnce","FromResidual","Generator","GeneratorState","Included","Index","IndexMut","Mul","MulAssign","Neg","Not","OneSidedRange","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Range","RangeBounds","RangeFrom","RangeFull","RangeInclusive","RangeTo","RangeToInclusive","Rem","RemAssign","Residual","Residual","Return","Shl","ShlAssign","Shr","ShrAssign","Sub","SubAssign","Target","Try","TryType","Unbounded","Yeet","Yield","Yielded","add","add_assign","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","branch","branch","break_value","call","call_mut","call_once","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","contains","contains","contains","continue_value","default","deref","deref_mut","div","div_assign","drop","end","end","end","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","end_bound","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_output","from_output","from_residual","from_residual","get","get","get","get","get","get","get","get","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","get_unchecked_mut","hash","hash","hash","hash","hash","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into_iter","is_break","is_continue","map_break","map_continue","mul","mul_assign","neg","next","not","nth","partial_cmp","rem","rem_assign","resume","shl","shl_assign","shr","shr_assign","size_hint","start","start","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","start_bound","sub","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","ArrayChunks","ArrayChunksMut","ArrayWindows","Chunks","ChunksExact","ChunksExactMut","ChunksMut","Concat","EscapeAscii","GroupBy","GroupByMut","Iter","IterMut","Join","Output","Output","Output","RChunks","RChunksExact","RChunksExactMut","RChunksMut","RSplit","RSplitMut","RSplitN","RSplitNMut","SliceIndex","Split","SplitInclusive","SplitInclusiveMut","SplitMut","SplitN","SplitNMut","Windows","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","concat","count","count","count","count","count","count","count","count","count","count","count","count","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_mut","from_mut_ptr_range","from_ptr_range","from_raw_parts","from_raw_parts_mut","from_ref","get","get_mut","get_unchecked","get_unchecked_mut","index","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_remainder","into_remainder","into_remainder","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","is_empty","join","last","last","last","last","last","last","last","last","last","last","last","last","last","last","last","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","range","remainder","remainder","remainder","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Bytes","CharIndices","Chars","EncodeUtf16","Err","EscapeDebug","EscapeDefault","EscapeUnicode","FromStr","Lines","LinesAny","MatchIndices","Matches","ParseBoolError","RMatchIndices","RMatches","RSplit","RSplitN","RSplitTerminator","Split","SplitAsciiWhitespace","SplitInclusive","SplitN","SplitTerminator","SplitWhitespace","Utf8Chunk","Utf8Chunks","Utf8Error","all","any","as_str","as_str","as_str","as_str","as_str","as_str","as_str","as_str","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","description","description","eq","eq","eq","error_len","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_boxed_utf8_unchecked","from_str","from_utf8","from_utf8_mut","from_utf8_unchecked","from_utf8_unchecked_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","invalid","is_empty","last","last","last","last","last","len","multiunzip","multiunzip","multiunzip","new","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth_back","offset","pattern","peeking_next","peeking_next","position","provide","provide","rfind","rposition","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_fold","try_fold","try_fold","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","valid","valid_up_to","CharArrayRefSearcher","CharArraySearcher","CharPredicateSearcher","CharSearcher","CharSliceSearcher","Done","DoubleEndedSearcher","Match","Pattern","Reject","ReverseSearcher","SearchStep","Searcher","Searcher","StrSearcher","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","haystack","haystack","haystack","haystack","haystack","haystack","haystack","into","into","into","into","into","into","into","into_searcher","is_contained_in","is_prefix_of","is_suffix_of","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_match","next_match","next_match","next_match","next_match","next_match","next_match","next_match_back","next_match_back","next_match_back","next_match_back","next_match_back","next_match_back","next_match_back","next_reject","next_reject","next_reject","next_reject","next_reject","next_reject_back","next_reject_back","next_reject_back","next_reject_back","next_reject_back","strip_prefix_of","strip_suffix_of","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","1","1","AccessError","Builder","JoinHandle","LocalKey","Result","Scope","ScopedJoinHandle","Thread","ThreadId","__FastLocalKeyInner","as_u64","available_parallelism","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","current","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","get","hash","id","into","into","into","into","into","into","into","into","is_finished","join","name","name","new","new","panicking","park","park_timeout","park_timeout_ms","provide","register_dtor","replace","replace","scope","set","set","sleep","sleep_ms","spawn","spawn","spawn","spawn_scoped","spawn_unchecked","stack_size","take","take","thread","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_with","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpark","with","with_borrow","with_borrow_mut","yield_now","Duration","FromFloatSecsError","Instant","MAX","MICROSECOND","MILLISECOND","NANOSECOND","SECOND","SystemTime","SystemTimeError","UNIX_EPOCH","UNIX_EPOCH","ZERO","add","add","add","add_assign","add_assign","add_assign","as_micros","as_millis","as_nanos","as_secs","as_secs_f32","as_secs_f64","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add","checked_add","checked_div","checked_duration_since","checked_mul","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","description","div","div_assign","div_duration_f32","div_duration_f64","div_f32","div_f64","duration","duration_since","duration_since","elapsed","elapsed","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_micros","from_millis","from_nanos","from_secs","from_secs_f32","from_secs_f64","hash","hash","hash","into","into","into","into","into","is_zero","mul","mul_assign","mul_f32","mul_f64","new","now","now","partial_cmp","partial_cmp","partial_cmp","provide","provide","saturating_add","saturating_duration_since","saturating_mul","saturating_sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","subsec_micros","subsec_millis","subsec_nanos","sum","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from_secs_f32","try_from_secs_f64","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["aoc_misc","","","","","","","","","","aoc_misc::preludeaoc_misc::prelude::BTreeEntry","","aoc_misc::prelude::Bound","","aoc_misc::prelude::Cow","","aoc_misc::prelude::Either","","aoc_misc::prelude::EitherOrBoth","","","","aoc_misc::prelude::HashMapEntry","","aoc_misc::prelude::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_misc::prelude::cmp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_misc::prelude::fmt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_misc::prelude::fsaoc_misc::prelude::hash","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_misc::prelude::ioaoc_misc::prelude::io::SeekFrom","","","aoc_misc::prelude::io::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_misc::prelude::iteraoc_misc::prelude::mem","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_misc::prelude::opsaoc_misc::prelude::ops::Bound","","aoc_misc::prelude::ops::ControlFlow","","aoc_misc::prelude::ops::GeneratorState","","aoc_misc::prelude::sliceaoc_misc::prelude::straoc_misc::prelude::str::pattern","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_misc::prelude::str::pattern::SearchStep","","","","aoc_misc::prelude::thread","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_misc::prelude::time","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","Has the effects of both <code>Acquire</code> and <code>Release</code> together: For …","When coupled with a load, if the loaded value was written …","The addition operator <code>+</code>.","The addition assignment operator <code>+=</code>.","A thread-safe reference-counting pointer. ‘Arc’ stands …","A vector with a fixed capacity.","Atomic memory orderings","An integer type which can be safely shared between threads.","A view into a single entry in a map, which may either be …","An iterator over the entries of a <code>BTreeMap</code>.","A mutable iterator over the entries of a <code>BTreeMap</code>.","An iterator over the keys of a <code>BTreeMap</code>.","An ordered map based on a B-Tree.","An ordered set based on a B-Tree.","An iterator over the values of a <code>BTreeMap</code>.","A priority queue implemented with a binary heap.","The bitwise AND operator <code>&amp;</code>.","The bitwise AND assignment operator <code>&amp;=</code>.","The bitwise OR operator <code>|</code>.","The bitwise OR assignment operator <code>|=</code>.","A trait for borrowing data.","A trait for mutably borrowing data.","Borrowed data.","Both values are present.","An endpoint of a range of keys.","A trait for creating instances of <code>Hasher</code>.","Used to create a default <code>BuildHasher</code> instance for types …","A mutable memory location.","An iterator over the <code>char</code>s of a string slice.","A Condition Variable","A clone-on-write smart pointer.","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","The default <code>Hasher</code> used by <code>RandomState</code>.","Used for immutable dereferencing operations, like <code>*v</code>.","Used for mutable dereferencing operations, like in <code>*v = 1;</code>.","Format trait for an empty format, <code>{}</code>.","The division operator <code>/</code>.","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Value that either holds a single A or B, or both.","An ordering where a compared value is equal to another.","The associated error which can be returned from parsing.","<code>Error</code> is a trait representing the basic expectations for …","","An exclusive bound.","Parse a value from a string","An iterator that always continues to yield <code>None</code> when …","","","An ordering where a compared value is greater than another.","A hashable type.","Derive macro generating an impl of the trait <code>Hash</code>.","A <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …","A view into a single entry in a map, which may either be …","A <code>HashSet</code> using <code>RandomState</code> to hash the items. (Requires …","A trait for hashing an arbitrary stream of bytes.","Type of the hasher that will be created.","","An inclusive bound.","Used for indexing operations (<code>container[index]</code>) in …","Used for indexing operations (<code>container[index]</code>) in mutable …","The error type for errors that can never happen.","","An <code>Iterator</code> blanket implementation that provides extra …","An owned permission to join on a thread (block on its …","A value of type <code>L</code>.","Only the left value of type <code>A</code> is present.","An ordering where a compared value is less than another.","","The multiplication operator <code>*</code>.","See <code>multipeek()</code> for more information.","A mutual exclusion primitive useful for protecting shared …","The unary negation operator <code>-</code>.","An occupied entry.","An occupied entry.","An <code>Ordering</code> is the result of a comparison between two …","A type that can represent owned, mutable platform-native …","The resulting type after applying the <code>+</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>*</code> operator.","The resulting type after applying the <code>/</code> operator.","The resulting type after applying the <code>%</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>&amp;</code> operator.","The resulting type after applying the <code>|</code> operator.","The resulting type after applying the <code>&lt;&lt;</code> operator.","The resulting type after applying the <code>&gt;&gt;</code> operator.","The returned type after indexing.","Owned data.","An error which can be returned when parsing an integer.","A slice of a path (akin to <code>str</code>).","An iterator with a <code>peek()</code> that returns an optional …","Zero-sized type used to mark things that “act like” …","<code>RandomState</code> is the default state for <code>HashMap</code> types.","A (half-open) range bounded inclusively below and …","<code>RangeBounds</code> is implemented by Rust’s built-in range …","A range bounded inclusively below and above (<code>start..=end</code>).","A single-threaded reference-counting pointer. ‘Rc’ …","<code>Weak</code> is a version of <code>Rc</code> that holds a non-owning reference …","A mutable memory location with dynamically checked borrow …","No ordering constraints, only atomic operations.","When coupled with a store, all previous operations become …","The remainder operator <code>%</code>.","","A value of type <code>R</code>.","Only the right value of type <code>B</code> is present.","Like <code>Acquire</code>/<code>Release</code>/<code>AcqRel</code> (for load, store, and …","The left shift operator <code>&lt;&lt;</code>. Note that because this trait …","The left shift assignment operator <code>&lt;&lt;=</code>.","The right shift operator <code>&gt;&gt;</code>. Note that because this trait …","The right shift assignment operator <code>&gt;&gt;=</code>.","Immutable slice iterator","Mutable slice iterator.","The subtraction operator <code>-</code>.","The resulting type after dereferencing.","","An infinite endpoint. Indicates that there is no bound in …","A vacant entry.","A vacant entry.","A double-ended queue implemented with a growable ring …","An iterator that moves out of a vector.","","Performs the <code>+</code> operation.","","","Performs the <code>+=</code> operation.","","","","","","","","","","","","","","Check whether all elements compare equal.","Check whether all elements are unique (non equal).","Returns a reference to the underlying allocator.","Returns a reference to the underlying allocator.","Produces an iterator over <code>Path</code> and its ancestors.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","","","","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Moves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …","Moves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Utilities for the array primitive type.","","","","","","Returns a <code>&amp;[Cell&lt;T&gt;; N]</code> from a <code>&amp;Cell&lt;[T; N]&gt;</code>","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","","","","","","Converts from <code>&amp;mut EitherOrBoth&lt;A, B&gt;</code> to …","Converts from <code>&amp;mut Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;mut T&gt;</code>.","Return a raw mutable pointer to the vector’s buffer.","Returns a mutable pointer to the underlying integer.","Return a mutable slice containing all elements of the …","Returns the remaining items of this iterator as a mutable …","Views the underlying data as a mutable subslice of the …","Returns a pair of slices which contain, in order, the …","Converts to an <code>OsStr</code> slice.","Yields the underlying <code>OsStr</code> slice.","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","","Return a raw pointer to the vector’s buffer.","Returns a raw pointer to the underlying data in this cell.","Returns a raw pointer to the underlying data in this cell.","Provides a raw pointer to the data.","Returns a raw pointer to the object <code>T</code> pointed to by this …","Provides a raw pointer to the data.","","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","","","","","Converts from <code>&amp;EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;&amp;A, &amp;B&gt;</code>.","","","","","","","","Converts from <code>&amp;Bound&lt;T&gt;</code> to <code>Bound&lt;&amp;T&gt;</code>.","Return a slice containing all elements of the vector.","Returns a slice of all values in the underlying vector, in …","Returns the remaining items of this iterator as a slice.","Views the underlying data as a subslice of the original …","Views the underlying data as a subslice of the original …","Returns a <code>&amp;[Cell&lt;T&gt;]</code> from a <code>&amp;Cell&lt;[T]&gt;</code>","Returns a pair of slices which contain, in order, the …","Views the underlying data as a subslice of the original …","","","","","","","","","Converts to <code>Rc&lt;T&gt;</code>.","Converts to <code>Rc&lt;[T]&gt;</code>.","Converts to <code>Arc&lt;T&gt;</code>.","Converts to <code>Arc&lt;[T]&gt;</code>.","If the iterator yields no elements, Ok(None) will be …","Provides a reference to the back element, or <code>None</code> if the …","Provides a mutable reference to the back element, or <code>None</code> …","A “meta iterator adaptor”. Its closure receives a …","Binary searches this <code>VecDeque</code> for a given element. This …","Binary searches this <code>VecDeque</code> with a comparator function. …","Binary searches this <code>VecDeque</code> with a key extraction …","Performs the <code>&amp;</code> operation.","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Performs the <code>&amp;=</code> operation.","Performs the <code>|</code> operation.","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>AHashSet&lt;T, S&gt;</code>.","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>.","Performs the <code>|=</code> operation.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","Immutably borrows from an owned value.","","","","","","","","","","","","","","","","","","","","","","","","","","Immutably borrows the wrapped value.","","","","","","","","","","","","","","","","","","","","","","","","","","Mutably borrows from an owned value.","","","","","","","","","","","","","","","","","","","","","","","","","Mutably borrows the wrapped value.","","","","","","","","","","","","","","","","","","","","","","","If Both, return <code>Some</code> tuple containing left and right.","Creates a new hasher.","","","Returns the canonical, absolute form of the path with all …","Return the capacity of the <code>ArrayVec</code>.","Returns the number of elements the binary heap can hold …","Returns the capacity this <code>OsString</code> can hold without …","Returns the number of elements the deque can hold without …","Return an iterator adaptor that iterates over the …","","","","Return an <em>iterable</em> that can chunk the iterator.","Return an iterator over all windows, wrapping back to the …","Remove all elements in the vector.","Drops all items from the binary heap.","Clears the map, removing all elements.","Truncates the <code>OsString</code> to zero length.","Clears the set, removing all elements.","Clears the deque, removing all values.","Clear the poisoned state from a mutex","","","","","","","","","","","","","","","","","","Panics","Makes a clone of the <code>Rc</code> pointer.","Makes a clone of the <code>Weak</code> pointer that points to the same …","Makes a clone of the <code>Arc</code> pointer.","","","","","","","","","","","","","","","","","","","","","","Panics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Map a <code>Bound&lt;&amp;T&gt;</code> to a <code>Bound&lt;T&gt;</code> by cloning the contents of …","Utilities for comparing and ordering values.","","","","","","","","","","Panics","Comparison for two <code>Rc</code>s.","Comparison for two <code>Arc</code>s.","","","","Return an iterator adaptor that uses the passed-in closure …","","Collects all items from the iterator into a tuple of a …","<code>.collect_vec()</code> is simply a type specialization of …","Return an iterator adaptor that iterates over the <code>k</code>-length …","Return an iterator that iterates over the <code>k</code>-length …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Stores a value into the atomic integer if the current …","Produces an iterator over the <code>Component</code>s of the path.","Combine all an iterator’s elements into one element by …","","Returns <code>true</code> if the given item is present in this iterator.","Returns <code>true</code> if the set contains an element equal to the …","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if the deque contains an element equal to the …","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if the map contains a value for the specified …","","","","","","","Collect the items in this iterator and return a <code>HashMap</code> …","Collect the items in this iterator and return a <code>HashMap</code> …","Decrements the strong reference count on the <code>Rc&lt;T&gt;</code> …","Decrements the strong reference count on the <code>Arc&lt;T&gt;</code> …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","","","Return an empty array","Creates an owned Cow&lt;’a, B&gt; with the default value for …","Creates an empty <code>BinaryHeap&lt;T&gt;</code>.","","Creates an empty <code>AHashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","Creates an empty <code>BTreeMap</code>.","Constructs an empty <code>OsString</code>.","Creates an empty <code>BTreeSet</code>.","","Creates an empty deque.","Creates a <code>Cell&lt;T&gt;</code>, with the <code>Default</code> value for T.","Creates a <code>RefCell&lt;T&gt;</code>, with the <code>Default</code> value for T.","Creates a new <code>Rc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.","Constructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …","Creates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.","Creates a <code>Condvar</code> which is ready to be waited on and …","Creates a <code>Mutex&lt;T&gt;</code>, with the <code>Default</code> value for T.","Constructs a new <code>RandomState</code>.","Creates a new <code>DefaultHasher</code> using <code>new</code>. See its …","","","","Dereferences the value.","","","","","","","","","","Mutably dereferences the value.","","","","","","","","","","","Visits the elements representing the difference, i.e., the …","Returns an object that implements <code>Display</code> for safely …","Performs the <code>/</code> operation.","Attempt to downcast the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.","Attempt to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …","Forwards to the method defined on the type <code>dyn Error</code>.","Returns some mutable reference to the inner value if it is …","Forwards to the method defined on the type <code>dyn Error</code>.","Returns some reference to the inner value if it is of type …","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Downcasts the <code>Rc&lt;dyn Any&gt;</code> to a concrete type.","Downcasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …","Creates a new <code>Weak</code> pointer to this allocation.","Creates a new <code>Weak</code> pointer to this allocation.","Create a draining iterator that removes the specified …","Clears the binary heap, returning an iterator over the …","Removes the specified range from the deque in bulk, …","Creates an iterator that visits all elements (key-value …","Creates an iterator that visits all elements in ascending …","Clears the binary heap, returning an iterator over the …","","","","Drops the <code>Rc</code>.","Drops the <code>Weak</code> pointer.","Drops the <code>Arc</code>.","","Consume the first <code>n</code> elements from the iterator eagerly, …","Consume the last <code>n</code> elements from the iterator eagerly, and …","Return an iterator adaptor that produces elements that …","Return an iterator adaptor that produces elements that …","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","Returns the upper bound of the range (inclusive).","The upper bound of the range (exclusive).","End index bound.","","","","","Determines whether <code>child</code> is a suffix of <code>self</code>.","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Panics","Equality for two <code>Rc</code>s.","Equality for two <code>Arc</code>s.","","","","","","","","","","","","","","","","","","","","","If the iterator yields exactly one element, that element …","Returns <code>true</code> if the path points at an existing entity.","Returns the left value","Returns the right value","Extend the <code>ArrayVec</code> with an iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts the extension (without the leading dot) of …","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Adds to the current value, returning the previous value.","Bitwise “and” with the current value.","Maximum with the current value.","Minimum with the current value.","Bitwise “nand” with the current value.","Bitwise “or” with the current value.","Subtracts from the current value, returning the previous …","Fetches the value, and applies a function to it that …","Bitwise “xor” with the current value.","Returns the final component of the <code>Path</code>, if there is one.","Extracts the prefix of <code>self.file_name</code>.","Extracts the stem (non-extension) portion of <code>self.file_name</code>…","","Return an iterator adaptor that filters and transforms …","Return an iterator adaptor that filters every <code>Result::Ok</code> …","","","","","","","Find the value of the first element satisfying a predicate …","Find the value of the first element satisfying a predicate …","Find the position and value of the first element …","Returns the hash value for the values written so far.","","Returns a reference to the first element in the set, if …","Returns the first entry in the map for in-place …","Returns the first key-value pair in the map. The key in …","Return an iterator adaptor that flattens every <code>Result::Ok</code> …","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","Convert <code>EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;B, A&gt;</code>.","","","","Utilities for formatting and printing <code>String</code>s.","Formats the value using the given formatter.","Formats the value using the given formatter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Accumulator of the elements in the iterator.","Fold <code>Result</code> values from an iterator.","Fold <code>Option</code> values from an iterator.","See <code>.fold_ok()</code>.","An iterator method that applies a function, producing a …","","","","Run the closure <code>f</code> eagerly on each element of the iterator.","Format all iterator elements, separated by <code>sep</code>.","Format all iterator elements, separated by <code>sep</code>.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.","Creates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of …","Creates a clone-on-write pointer from a reference to <code>Path</code>.","Moves the string into a <code>Cow::Owned</code>.","Converts the string reference into a <code>Cow::Borrowed</code>.","Converts a <code>CString</code> into an owned <code>Cow</code> without copying or …","Creates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.","Converts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or …","Converts the string reference into a <code>Cow::Borrowed</code>.","Creates a clone-on-write pointer from an owned instance of …","Creates a clone-on-write pointer from a reference to …","Converts a string slice into a <code>Borrowed</code> variant. No heap …","Converts a <code>String</code> into an <code>Owned</code> variant. No heap …","Converts a <code>String</code> reference into a <code>Borrowed</code> variant. No …","Converts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or …","Returns the argument unchanged.","","Returns the argument unchanged.","Converts a <code>Vec&lt;T&gt;</code> into a <code>BinaryHeap&lt;T&gt;</code>.","Returns the argument unchanged.","","Examples","Returns the argument unchanged.","","Returns the argument unchanged.","Examples","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>[(K, V); N]</code> into a <code>BTreeMap&lt;(K, V)&gt;</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>Cow&lt;&#39;a, OsStr&gt;</code> into an <code>OsString</code>, by copying the …","Converts a <code>String</code> into an <code>OsString</code>.","Converts a <code>PathBuf</code> into an <code>OsString</code>","Returns the argument unchanged.","Converts a Box&lt;OsStr&gt; into an <code>OsString</code> without copying or …","Copies any value implementing AsRef&lt;OsStr&gt; into a newly …","Converts a <code>[T; N]</code> into a <code>BTreeSet&lt;T&gt;</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a <code>[T; N]</code> into a <code>VecDeque&lt;T&gt;</code>.","Turn a <code>Vec&lt;T&gt;</code> into a <code>VecDeque&lt;T&gt;</code>.","Returns the argument unchanged.","Creates a new <code>Cell&lt;T&gt;</code> containing the given value.","","Returns the argument unchanged.","Creates a new <code>RefCell&lt;T&gt;</code> containing the given value.","","Returns the argument unchanged.","Converts a reference-counted string slice into a byte …","Allocate a reference-counted slice and move <code>v</code>’s items …","Converts a <code>PathBuf</code> into an Rc&lt;Path&gt; by moving the <code>PathBuf</code> …","Converts an <code>OsString</code> into an Rc&lt;OsStr&gt; by moving the …","Move a boxed object to a new, reference counted, …","Converts a <code>CString</code> into an Rc&lt;CStr&gt; by moving the <code>CString</code> …","Allocate a reference-counted string slice and copy <code>v</code> into …","","Returns the argument unchanged.","Allocate a reference-counted slice and fill it by cloning <code>v</code>…","Allocate a reference-counted string slice and copy <code>v</code> into …","Converts a <code>Path</code> into an <code>Rc</code> by copying the <code>Path</code> data into a …","Converts a <code>&amp;CStr</code> into a <code>Rc&lt;CStr&gt;</code>, by copying the contents …","Create a reference-counted pointer from a clone-on-write …","Copies the string into a newly allocated Rc&lt;OsStr&gt;.","Converts a generic type <code>T</code> into an <code>Rc&lt;T&gt;</code>","Returns the argument unchanged.","Move a boxed object to a new, reference-counted allocation.","Converts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …","Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.","Converts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …","Converts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …","Allocate a reference-counted <code>str</code> and copy <code>v</code> into it.","","Copies the string into a newly allocated Arc&lt;OsStr&gt;.","Create an atomically reference-counted pointer from a …","Converts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …","Converts an atomically reference-counted string slice into …","Allocate a reference-counted slice and fill it by cloning <code>v</code>…","Returns the argument unchanged.","Allocate a reference-counted slice and move <code>v</code>’s items …","Converts a <code>T</code> into an <code>Arc&lt;T&gt;</code>","Converts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Creates a new mutex in an unlocked state ready for use. …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts an <code>usize</code> into an <code>AtomicUsize</code>.","Returns the argument unchanged.","Returns the argument unchanged.","","Create an <code>ArrayVec</code> from an iterator.","","","","","","","","","","","","","","Takes each element in the <code>Iterator</code> and collects it into an …","Takes each element in the <code>Iterator</code> and collects it into an …","Returns a <code>&amp;Cell&lt;T&gt;</code> from a <code>&amp;mut T</code>","Get atomic access to a <code>&amp;mut usize</code>.","Get atomic access to a <code>&amp;mut [usize]</code> slice.","Constructs an <code>Rc&lt;T&gt;</code> from a raw pointer.","Converts a raw pointer previously created by <code>into_raw</code> back …","Constructs an <code>Arc&lt;T&gt;</code> from a raw pointer.","Parses a string <code>s</code> to return a value of this type.","","","Provides a reference to the front element, or <code>None</code> if the …","Provides a mutable reference to the front element, or <code>None</code> …","Filesystem manipulation operations.","","","","Panics","‘Greater than or equal to’ comparison for two <code>Rc</code>s.","‘Greater than or equal to’ comparison for two <code>Arc</code>s.","Returns a reference to the value corresponding to the key.","Returns a reference to the value corresponding to the key.","Returns a reference to the element in the set, if any, …","Provides a reference to the element at the given index.","Returns a copy of the contained value.","","","","","Returns the key-value pair corresponding to the supplied …","Returns the key-value pair corresponding to the supplied …","Returns a mutable reference to the value corresponding to …","Returns a mutable reference to the value corresponding to …","Provides a mutable reference to the element at the given …","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference into the given <code>Rc</code>, if there are","Returns a mutable reference into the given <code>Arc</code>, if there …","Returns a mutable reference to the underlying data.","","","","","Returns a mutable reference to the underlying integer.","Get non-atomic access to a <code>&amp;mut [AtomicUsize]</code> slice","Returns a mutable reference into the given <code>Rc</code>, without any …","Returns a mutable reference into the given <code>Arc</code>, without …","","","","","","","","","Return an <em>iterable</em> that can group iterator elements. …","","","","Panics","Greater-than comparison for two <code>Rc</code>s.","Greater-than comparison for two <code>Arc</code>s.","If <code>Left</code>, or <code>Both</code>, return true, otherwise, return false.","If <code>Right</code>, or <code>Both</code>, return true, otherwise, return false.","Returns <code>true</code> if the <code>Path</code> has a root.","Generic hashing support.","Feeds this value into the given <code>Hasher</code>.","","","","","","","","","","","","","","","","","","","Calculates the hash of a single value.","Feeds a slice of this type into the given <code>Hasher</code>.","Increments the strong reference count on the <code>Rc&lt;T&gt;</code> …","Increments the strong reference count on the <code>Arc&lt;T&gt;</code> …","Performs the indexing (<code>container[index]</code>) operation.","","Returns a reference to the value corresponding to the …","Returns a reference to the value corresponding to the …","","","","","","","Performs the mutable indexing (<code>container[index]</code>) operation.","","","","","","","","Insert <code>element</code> at position <code>index</code>.","Inserts a key-value pair into the map.","Inserts a key-value pair into the map.","Adds a value to the set.","Inserts an element at <code>index</code> within the deque, shifting all …","Sets the value of the entry, and returns an <code>OccupiedEntry</code>.","Alternate elements from two iterators until both have run …","Alternate elements from two iterators until at least one …","Visits the elements representing the intersection, i.e., …","An iterator adaptor to insert a particular value between …","An iterator adaptor to insert a particular value created …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this <code>OsString</code> into a boxed <code>OsStr</code>.","","Return a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …","Return an <code>Iterator</code> on a <code>HashMap</code>. Keys mapped to <code>Vec</code>s of …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Return the inner fixed size array, if it is full to its …","Extract the value of an either over two equivalent types.","Unwraps the value.","Consumes the <code>RefCell</code>, returning the wrapped value.","Consumes this mutex, returning the underlying data.","Destructures the <code>RangeInclusive</code> into (lower bound, upper …","Consumes the atomic and returns the contained value.","Return the inner fixed size array.","","","","","Convert the inner value to an iterator.","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","","","","","","","Gets an iterator for moving out the <code>BTreeSet</code>’s contents.","","","Consumes the deque into a front-to-back iterator yielding …","","","","","","","","","","Returns an iterator which retrieves elements in heap order.","Creates a consuming iterator visiting all the keys, in …","Extracts the owned data.","Converts a <code>Box&lt;Path&gt;</code> into a <code>PathBuf</code> without copying or …","","Consumes the <code>Rc</code>, returning the wrapped pointer.","Consumes the <code>Weak&lt;T&gt;</code> and turns it into a raw pointer.","Consumes the <code>Arc</code>, returning the wrapped pointer.","Views the underlying data as a subslice of the original …","Consumes the <code>BinaryHeap</code> and returns a vector in sorted …","Converts the <code>OsString</code> into a <code>String</code> if it contains valid …","Creates a consuming iterator visiting all the values, in …","Consumes the <code>BinaryHeap</code> and returns the underlying vector …","","Traits, helpers, and type definitions for core I/O …","Forwards to the method defined on the type <code>dyn Error</code>.","Returns <code>true</code> if the inner type is the same as <code>T</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Returns <code>true</code> if the <code>Path</code> is absolute, i.e., if it is …","Returns true if the data is borrowed, i.e. if <code>to_mut</code> would …","If Right, return true otherwise, return false. Equivalent …","Returns <code>true</code> if the path exists on disk and is pointing at …","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","","Returns whether the <code>ArrayVec</code> is empty.","Checks if the binary heap is empty.","Returns <code>true</code> if the map contains no elements.","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the deque is empty.","","","","Returns <code>true</code> if the range contains no items.","Returns <code>true</code> if the range contains no items.","Returns <code>true</code> if the ordering is the <code>Equal</code> variant.","Returns <code>true</code> if the path exists on disk and is pointing at …","Checks if the associated thread has finished running its …","Return true if the <code>ArrayVec</code> is completely filled to its …","Returns <code>true</code> if the ordering is either the <code>Greater</code> or <code>Equal</code>…","Returns <code>true</code> if the ordering is the <code>Greater</code> variant.","Returns <code>true</code> if the ordering is either the <code>Less</code> or <code>Equal</code> …","Return true if the value is the <code>Left</code> variant.","If Left, return true otherwise, return false. Exclusive …","Returns <code>true</code> if the ordering is the <code>Less</code> variant.","Returns <code>true</code> if the ordering is not the <code>Equal</code> variant.","Returns true if the data is owned, i.e. if <code>to_mut</code> would be …","Determines whether the mutex is poisoned.","Returns <code>true</code> if the <code>Path</code> is relative, i.e., not absolute.","Return true if the value is the <code>Right</code> variant.","If Right, return true otherwise, return false. Exclusive …","","","","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","Returns <code>true</code> if the path exists on disk and is pointing at …","Composable external iteration.","Returns an iterator visiting all values in the underlying …","Gets an iterator over the entries of the map, sorted by …","Gets an iterator that visits the elements in the <code>BTreeSet</code> …","Returns a front-to-back iterator.","Produces an iterator over the path’s components viewed …","Gets a mutable iterator over the entries of the map, …","Returns a front-to-back iterator that returns mutable …","","Create an iterator running multiple iterators in lockstep.","Waits for the associated thread to finish.","Combine all iterator elements into one String, separated …","Creates an owned <code>PathBuf</code> with <code>path</code> adjoined to <code>self</code>.","Sort the k smallest elements into a new iterator, in …","Returns a reference to this entry’s key.","Returns a reference to this entry’s key.","Gets an iterator over the keys of the map, in sorted order.","Outputs the detailed cause of parsing an integer failing.","Return an iterator adaptor that flattens an iterator of …","Return an iterator adaptor that flattens an iterator of …","","","","","","Returns a reference to the last element in the set, if any.","","","","","","","Returns the last entry in the map for in-place …","Returns the last key-value pair in the map. The key in …","","","","Panics","‘Less than or equal to’ comparison for two <code>Rc</code>s.","‘Less than or equal to’ comparison for two <code>Arc</code>s.","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","If <code>Left</code>, or <code>Both</code>, return <code>Some</code> with the left value, …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Return the number of elements in the <code>ArrayVec</code>.","","Returns the length of the binary heap.","Returns the number of elements in the map.","","","","","Returns the number of elements in the set.","Returns the number of elements in the deque.","","","Loads a value from the atomic integer.","Acquires a mutex, blocking the current thread until it is …","","","","Panics","Less-than comparison for two <code>Rc</code>s.","Less-than comparison for two <code>Arc</code>s.","Rearranges the internal storage of this deque so it is one …","Makes a mutable reference into the given <code>Rc</code>.","Makes a mutable reference into the given <code>Arc</code>.","Map <code>f</code> over the contained value and return the result in the","Maps a <code>Bound&lt;T&gt;</code> to a <code>Bound&lt;U&gt;</code> by applying a function to …","Apply the functions <code>f</code> and <code>g</code> on the value <code>a</code> and <code>b</code> …","Convert each item of the iterator using the <code>Into</code> trait.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return an iterator adaptor that applies the provided …","See <code>.map_ok()</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","","","","","","Return all maximum elements of an iterator.","Return all maximum elements of an iterator, as determined …","Return all minimum elements of an iterator, as determined …","Basic functions for dealing with memory.","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merges the two base …","Create an iterator that merges items from both this and …","Queries the file system to get information about a file, …","","","","","","Return all minimum elements of an iterator.","Return all minimum elements of an iterator, as determined …","Return all minimum elements of an iterator, as determined …","Return the minimum and maximum elements in the iterator.","Return the minimum and maximum element of an iterator, as …","Return the minimum and maximum element of an iterator, as …","Performs the <code>*</code> operation.","Return an iterator adaptor that iterates over the …","An iterator adaptor that allows the user to peek at …","","","","","","","","","","","","","","","","Converts an iterator of tuples into a tuple of containers.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inequality for two <code>Rc</code>s.","Inequality for two <code>Arc</code>s.","Performs the unary <code>-</code> operation.","","Create a new empty <code>ArrayVec</code>.","Creates an empty <code>BinaryHeap</code> as a max-heap.","","","Makes a new, empty <code>BTreeMap</code>.","Constructs a new empty <code>OsString</code>.","Makes a new, empty <code>BTreeSet</code>.","Creates an empty deque.","Creates a new <code>Cell</code> containing the given value.","Creates a new <code>RefCell</code> containing <code>value</code>.","Constructs a new <code>Rc&lt;T&gt;</code>.","Constructs a new <code>Weak&lt;T&gt;</code>, without allocating any memory. …","Constructs a new <code>Arc&lt;T&gt;</code>.","Directly wraps a string slice as a <code>Path</code> slice.","Creates a new condition variable which is ready to be …","Creates a new mutex in an unlocked state ready for use.","Constructs a new <code>RandomState</code> that is initialized with …","Creates a new <code>DefaultHasher</code>.","Creates a new inclusive range. Equivalent to writing …","Creates a new atomic integer.","Create a new empty <code>ArrayVec</code> (const fn).","Constructs a new <code>Rc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …","Constructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …","Makes a new empty BTreeMap with a reasonable choice for B.","Makes a new <code>BTreeSet</code> with a reasonable choice of B.","Creates an empty deque.","Constructs a new <code>Rc</code> with uninitialized contents.","Constructs a new <code>Arc</code> with uninitialized contents.","Constructs a new reference-counted slice with …","Constructs a new atomically reference-counted slice with …","Constructs a new <code>Rc</code> with uninitialized contents, with the …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new reference-counted slice with …","Constructs a new atomically reference-counted slice with …","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume and return the next value of this iterator if a …","Consume and return the next item if it is equal to <code>expected</code>…","Advances the iterator and returns the next items grouped …","Wakes up all blocked threads on this condvar.","Wakes up one blocked thread on this condvar.","","","","","","","","","","","","","","Overloadable operators.","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Ensures a value is in the entry by inserting, if empty, …","Return an iterator adaptor that pads the sequence to a …","Returns the <code>Path</code> without its final component, if there is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Panics","Partial comparison for two <code>Rc</code>s.","Partial comparison for two <code>Arc</code>s.","","","","","","","","","","","","","","","","Collect all iterator elements into one of two partitions. …","Returns the index of the partition point according to the …","Partition a sequence of <code>Result</code>s into one list of all the <code>Ok</code>…","Returns the greatest item in the binary heap, or <code>None</code> if …","Works exactly like <code>.next()</code> with the only difference that …","Returns a reference to the next() value without advancing …","Returns a mutable reference to the greatest item in the …","Returns a mutable reference to the next() value without …","","","","","Return an iterator adaptor that borrows from this iterator …","Return an iterator adaptor that iterates over all …","Constructs a new <code>Pin&lt;Rc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","Constructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…","","Remove the last element in the vector and return it.","Removes the greatest item from the binary heap and returns …","Remove the element at <code>index</code> and shift down the following …","Removes the last element from the deque and returns it, or …","Removes and returns the first element in the map. The key …","Removes the first element from the set and returns it, if …","Removes the first element and returns it, or <code>None</code> if the …","Removes and returns the last element in the map. The key …","Removes the last element from the set and returns it, if …","","","","Return the position of the maximum element in the iterator.","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the minimum element in the iterator.","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the positions of the minimum and maximum elements in","Return the postions of the minimum and maximum elements of …","Return the postions of the minimum and maximum elements of …","Return an iterator adaptor that yields the indices of all …","Return an iterator that iterates through the powerset of …","Iterate over the entire iterator and multiply all the …","","Provides type based access to context intended for error …","","","","","Returns <code>true</code> if the two <code>Rc</code>s point to the same allocation …","Returns <code>true</code> if the two <code>Weak</code>s point to the same allocation …","Returns <code>true</code> if the two <code>Arc</code>s point to the same allocation …","Push <code>element</code> to the end of the vector.","Pushes an item onto the binary heap.","Extends the string with the given &amp;OsStr slice.","Appends an element to the back of the deque.","Prepends an element to the deque.","Push <code>element</code> to the end of the vector without checking the …","Constructs a double-ended iterator over a sub-range of …","Constructs a double-ended iterator over a sub-range of …","Creates an iterator that covers the specified range in the …","Constructs a mutable double-ended iterator over a …","Creates an iterator that covers the specified mutable …","","Fill <code>buf</code> with the contents of the “front” slice as …","","Returns an iterator over the entries within a directory.","","","Reads a symbolic link, returning the file that the link …","","","","Return either value of left, right, or the product of <code>f</code> …","Performs the <code>%</code> operation.","Returns the capacity left in the <code>ArrayVec</code>.","Remove the element at <code>index</code> and shift down the following …","Removes a key from the map, returning the value at the key …","Removes a key from the map, returning the value at the key …","If the set contains an element equal to the value, removes …","Removes and returns the element at <code>index</code> from the deque. …","Removes a key from the map, returning the stored key and …","Adds a value to the set, replacing the existing element, …","Replaces the contained value with <code>val</code>, and returns the old …","Replaces the wrapped value with a new one, returning the …","Replaces the wrapped value with a new one computed from <code>f</code>, …","","Request a reference of type <code>T</code> as context about this error.","Request a reference of type <code>T</code> as context about this error.","Request a reference of type <code>T</code> as context about this error.","Request a value of type <code>T</code> as context about this error.","Request a value of type <code>T</code> as context about this error.","Request a value of type <code>T</code> as context about this error.","Reserves capacity for at least <code>additional</code> elements more …","Reserves capacity for at least <code>additional</code> more capacity to …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves the minimum capacity for at least <code>additional</code> …","Reserves the minimum capacity for at least <code>additional</code> more …","Reserves the minimum capacity for at least <code>additional</code> more …","Reset the peeking “cursor”","Modifies the deque in-place so that <code>len()</code> is equal to …","Modifies the deque in-place so that <code>len()</code> is equal to …","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Retains only the elements specified by the predicate.","Reverses the <code>Ordering</code>.","","","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","If <code>Right</code>, or <code>Both</code>, return <code>Some</code> with the right value, …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","Rotates the double-ended queue <code>mid</code> places to the left.","Rotates the double-ended queue <code>k</code> places to the right.","","","","Sets the contained value.","Assign to each reference in <code>self</code> from the <code>from</code> iterator, …","Set the vector’s length without dropping or moving out …","Performs the <code>&lt;&lt;</code> operation.","Performs the <code>&lt;&lt;=</code> operation.","Performs the <code>&gt;&gt;</code> operation.","Performs the <code>&gt;&gt;=</code> operation.","Discards capacity with a lower bound.","Shrinks the capacity of the <code>OsString</code> with a lower bound.","Shrinks the capacity of the deque with a lower bound.","Discards as much additional capacity as possible.","Shrinks the capacity of the <code>OsString</code> to match its length.","Shrinks the capacity of the deque as much as possible.","","","","","","","","","","","","","","Utilities for the slice primitive type.","","","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","","The lower-level source of this error, if any.","","Returns an iterator starting with the current error and …","Splits the collection into two at the given key. Returns …","Splits the collection into two at the value. Returns a new …","Splits the deque into two at the given index.","Returns the lower bound of the range (inclusive).","The lower bound of the range (inclusive).","Start index bound.","","","","","Determines whether <code>base</code> is a prefix of <code>self</code>.","Return an iterator adaptor that steps <code>n</code> elements in the …","Stores a value into the atomic integer.","Utilities for the <code>str</code> primitive type.","Returns a path that, when joined onto <code>base</code>, yields <code>self</code>.","Gets the number of strong (<code>Rc</code>) pointers to this allocation.","Gets the number of strong (<code>Rc</code>) pointers pointing to this …","Gets the number of strong (<code>Arc</code>) pointers to this …","Performs the <code>-</code> operation.","Returns the difference of <code>self</code> and <code>rhs</code> as a new …","Returns the difference of <code>self</code> and <code>rhs</code> as a new <code>BTreeSet&lt;T&gt;</code>…","Iterate over the entire iterator and add all the elements.","Swaps elements at indices <code>i</code> and <code>j</code>.","Swaps the values of two <code>Cell</code>s. Difference with …","Swaps the wrapped value of <code>self</code> with the wrapped value of …","Stores a value into the atomic integer, returning the …","Remove the element at <code>index</code> and swap the last element into …","Remove the element at <code>index</code> and swap the last element into …","Removes an element from anywhere in the deque and returns …","Removes an element from anywhere in the deque and returns …","Queries the metadata about a file without following …","Visits the elements representing the symmetric difference, …","Returns the ArrayVec, replacing the original with a new …","Removes and returns the element in the set, if any, that …","Takes the value of the cell, leaving <code>Default::default()</code> in …","Takes the wrapped value, leaving <code>Default::default()</code> in its …","Return an iterator adaptor that borrows from a <code>Clone</code>-able …","Split into an iterator pair that both yield all elements …","Chains two orderings.","Chains the ordering with the given function.","Native threads.","Extracts a handle to the underlying thread.","Temporal quantification.","Acquires a mutable reference to the owned form of the data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a <code>Path</code> to an owned <code>PathBuf</code>.","Yields a <code>&amp;str</code> slice if the <code>Path</code> is valid unicode.","","","","","","","","Converts a <code>Path</code> to a <code>Cow&lt;str&gt;</code>.","Accumulate the elements in the iterator in a tree-like …","Shortens the vector, keeping the first <code>len</code> elements and …","Shortens the deque, keeping the first <code>len</code> elements and …","","","Immutably borrows the wrapped value, returning an error if …","Mutably borrows the wrapped value, returning an error if …","Immutably borrows the wrapped value, returning an error if …","<code>.try_collect()</code> is more convenient way of writing …","Returns <code>Ok(true)</code> if the path points at an existing entity.","Copy all elements from the slice and append to the <code>ArrayVec</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","Tries to insert a key-value pair into the map, and returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to acquire this lock.","Constructs a new <code>Rc&lt;T&gt;</code>, returning an error if the …","Constructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …","Constructs a new <code>Rc</code> with uninitialized contents, returning …","Constructs a new <code>Arc</code> with uninitialized contents, …","Constructs a new <code>Rc</code> with uninitialized contents, with the …","Constructs a new <code>Arc</code> with uninitialized contents, with the …","Constructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …","Push <code>element</code> to the end of the vector.","Tries to reserve capacity for at least <code>additional</code> elements …","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve the minimum capacity for at least …","Tries to reserve the minimum capacity for at least …","Tries to reserve the minimum capacity for at least …","","","Returns the inner value, if the <code>Rc</code> has exactly one strong …","Returns the inner value, if the <code>Arc</code> has exactly one strong …","Return an iterator adaptor that iterates over the …","Return an iterator over all contiguous windows producing …","Return an iterator that groups the items in tuples of a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Undo the effect of leaked guards on the borrow state of …","Visits the elements representing the union, i.e., all the …","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that filters out elements that …","Immediately drops the guard, and consequently unlocks the …","Returns the left value","If we have the only reference to <code>T</code> then unwrap it. …","If we have the only reference to <code>T</code> then unwrap it. …","Returns the right value","Return an iterator adaptor that applies a mutating function","Updates the contained value using a function and returns …","Attempts to upgrade the <code>Weak</code> pointer to an <code>Rc</code>, delaying …","Gets an iterator over the values of the map, in order by …","Gets a mutable iterator over the values of the map, in …","Blocks the current thread until this condition variable …","Waits on this condition variable for a notification, …","Waits on this condition variable for a notification, …","Waits on this condition variable for a notification, …","Blocks the current thread until this condition variable …","Gets the number of <code>Weak</code> pointers to this allocation.","Gets the number of <code>Weak</code> pointers pointing to this …","Gets the number of <code>Weak</code> pointers to this allocation.","Return an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","Creates an empty <code>BinaryHeap</code> with at least the specified …","","","Creates a new <code>OsString</code> with at least the given capacity.","Creates an empty deque with space for at least <code>capacity</code> …","","","Creates an empty deque with space for at least <code>capacity</code> …","Creates an owned <code>PathBuf</code> like <code>self</code> but with the given …","Creates an owned <code>PathBuf</code> like <code>self</code> but with the given file …","","","Return an iterator adaptor that wraps each element in a …","","","","","Writes some data into this <code>Hasher</code>.","","","","","","","","Writes a single <code>i128</code> into this hasher.","Writes a single <code>i16</code> into this hasher.","Writes a single <code>i32</code> into this hasher.","Writes a single <code>i64</code> into this hasher.","Writes a single <code>i8</code> into this hasher.","Writes a single <code>isize</code> into this hasher.","Writes a length prefix into this hasher, as part of being …","","","Writes a single <code>str</code> into this hasher.","Writes a single <code>u128</code> into this hasher.","Writes a single <code>u16</code> into this hasher.","Writes a single <code>u32</code> into this hasher.","Writes a single <code>u64</code> into this hasher.","Writes a single <code>u8</code> into this hasher.","Writes a single <code>usize</code> into this hasher.","Create an iterator which iterates over both this and the …","Create an iterator which iterates over both this and the …","","","","","","","","","","","","","","","A by-value array iterator.","The error type returned when a conversion from a slice to …","","","Returns a mutable slice of all elements that have not been …","Returns an immutable slice of all elements that have not …","","","","","","","","","","","","Creates an iterator over <code>T</code> which returns no elements.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Creates an array <code>[T; N]</code> where each array element <code>T</code> is …","Converts a mutable reference to <code>T</code> into a mutable reference …","Converts a reference to <code>T</code> into a reference to an array of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Creates a new iterator over the given <code>array</code>.","Creates an iterator over the elements in a …","","","","","","","","","","","Creates an array <code>[T; N]</code> where each fallible array element <code>T</code>…","","","","","","Trait for equality comparisons which are equivalence …","Derive macro generating an impl of the trait <code>Eq</code>.","An ordering where a compared value is equal to another.","An ordering where a compared value is greater than another.","An ordering where a compared value is less than another.","Trait for types that form a total order.","Derive macro generating an impl of the trait <code>Ord</code>.","An <code>Ordering</code> is the result of a comparison between two …","Trait for equality comparisons which are partial …","Derive macro generating an impl of the trait <code>PartialEq</code>.","Trait for types that form a partial order.","Derive macro generating an impl of the trait <code>PartialOrd</code>.","A helper struct for reverse ordering.","","","Restrict a value to a certain interval.","","","","This method returns an <code>Ordering</code> between <code>self</code> and <code>other</code>.","","","This method tests for <code>self</code> and <code>other</code> values to be equal, …","","","Returns the argument unchanged.","This method tests greater than or equal to (for <code>self</code> and …","","This method tests greater than (for <code>self</code> and <code>other</code>) and is …","","","Calls <code>U::from(self)</code>.","This method tests less than or equal to (for <code>self</code> and <code>other</code>…","","This method tests less than (for <code>self</code> and <code>other</code>) and is …","","Compares and returns the maximum of two values.","Compares and returns the maximum of two values.","Returns the maximum of two values with respect to the …","Returns the element that gives the maximum value from the …","Compares and returns the minimum of two values.","Compares and returns the minimum of two values.","Returns the minimum of two values with respect to the …","Returns the element that gives the minimum value from the …","This method tests for <code>!=</code>. The default implementation is …","This method returns an ordering between <code>self</code> and <code>other</code> …","","","","","","Possible alignments returned by <code>Formatter::align</code>","This structure represents a safely precompiled version of …","<code>b</code> formatting.","Indication that contents should be center-aligned.","<code>?</code> formatting.","Derive macro generating an impl of the trait <code>Debug</code>.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","A struct to help with <code>fmt::Debug</code> implementations.","Format trait for an empty format, <code>{}</code>.","The error type which is returned from formatting a message …","Configuration for formatting.","Indication that contents should be left-aligned.","<code>e</code> formatting.","<code>x</code> formatting.","<code>o</code> formatting.","<code>p</code> formatting.","The type returned by formatter methods.","Indication that contents should be right-aligned.","<code>E</code> formatting.","<code>X</code> formatting.","A trait for writing or formatting into Unicode-accepting …","Flag indicating what form of alignment was requested.","Determines if the <code>#</code> flag was specified.","Get the formatted string, if it has no arguments to be …","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>DebugList</code> builder designed to assist with …","Creates a <code>DebugMap</code> builder designed to assist with …","Creates a <code>DebugSet</code> builder designed to assist with …","Creates a <code>DebugStruct</code> builder designed to assist with …","Creates a <code>DebugTuple</code> builder designed to assist with …","","","Adds the contents of an iterator of entries to the set …","Adds the contents of an iterator of entries to the list …","Adds the contents of an iterator of entries to the map …","Adds a new entry to the set output.","Adds a new entry to the list output.","Adds a new entry to the map output.","","","Adds a new field to the generated struct output.","Adds a new field to the generated tuple struct output.","Character used as ‘fill’ whenever there is alignment.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Finishes output and returns any error encountered.","Marks the struct as non-exhaustive, indicating to the …","Flags for formatting","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","Formats the value using the given formatter.","","","","","","The <code>format</code> function takes an <code>Arguments</code> struct and returns …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Adds the key part of a new entry to the map output.","This function takes a string slice and emits it to the …","Performs the correct padding for an integer which has …","","Optionally specified precision for numeric types. …","","Determines if the <code>0</code> flag was specified.","Determines if the <code>-</code> flag was specified.","Determines if the <code>+</code> flag was specified.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Adds the value part of a new entry to the map output.","Optionally specified integer width that the output should …","The <code>write</code> function takes an output stream, and an <code>Arguments</code>…","Writes a <code>char</code> into this writer, returning whether the …","","Glue for usage of the <code>write!</code> macro with implementors of …","","Writes some formatted information into this instance.","Writes a string slice into this writer, returning whether …","Writes some data to the underlying buffer contained within …","","A builder used to create directories in various manners.","Entries returned by the <code>ReadDir</code> iterator.","An object providing access to an open file on the …","Representation of the various timestamps on a file.","A structure representing a type of file with accessors for …","Metadata information about a file.","Options and flags which can be used to configure how a …","Representation of the various permissions on a file.","Iterator over the entries in a directory.","Returns the last access time of this metadata.","Sets the option for the append mode.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the canonical, absolute form of a path with all …","","","","","","","","","","","Copies the contents of one file to another. This function …","Opens a file in write-only mode.","Sets the option to create a new file, or open it if it …","Creates the specified directory with the options …","Creates a new, empty directory at the provided path","Recursively create a directory and all of its parent …","Creates a new file in read-write mode; error if the file …","Sets the option to create a new file, failing if it …","Returns the creation time listed in this metadata.","","","","","","","","Returns the bare file name of this directory entry without …","","Returns the file type for the file that this entry points …","Returns the file type for this metadata.","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Creates a new hard link on the filesystem.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns <code>true</code> if this metadata is for a directory. The …","Tests whether this file type represents a directory. The …","","Returns <code>true</code> if this metadata is for a regular file. The …","Tests whether this file type represents a regular file. …","","","","Returns <code>true</code> if this metadata is for a symbolic link.","Tests whether this file type represents a symbolic link. …","","","Returns the size of the file, in bytes, this metadata is …","Given a path, query the file system to get information …","Queries metadata about the underlying file.","Returns the metadata for the file that this entry points …","","","","","Returns the last modification time listed in this metadata.","","","Creates a blank new set of options ready for configuration.","Create a new <code>FileTimes</code> with no times set.","Creates a new set of options with default mode/security …","","","Attempts to open a file in read-only mode.","Opens a file at <code>path</code> with the options specified by <code>self</code>.","Returns a new OpenOptions object.","Returns the full path to the file that this entry …","Returns the permissions of the file this metadata is for.","","Read the entire contents of a file into a bytes vector.","","","Sets the option for read access.","","","","Returns an iterator over the entries within a directory.","Reads a symbolic link, returning the file that the link …","","","Read the entire contents of a file into a string.","","","","","Returns <code>true</code> if these permissions describe a readonly …","Indicates that directories should be created recursively, …","Removes an empty directory.","Removes a directory at this path, after removing all its …","Removes a file from the filesystem.","Rename a file or directory to a new name, replacing the …","","","Set the last access time of a file.","Truncates or extends the underlying file, updating the …","","Changes the modification time of the underlying file.","Set the last modified time of a file.","Changes the permissions found on a file or a directory.","Changes the permissions on the underlying file.","Modifies the readonly flag for this set of permissions. If …","Changes the timestamps of the underlying file.","","Creates a new symbolic link on the filesystem.","","","","","","","","","","","","","","","","","Query the metadata about a file without following symlinks.","Attempts to sync all OS-internal metadata to disk.","This function is similar to <code>sync_all</code>, except that it might …","","","","","","Sets the option for truncating a previous file.","Creates a new <code>File</code> instance that shares the same …","Returns <code>Ok(true)</code> if the path points at an existing entity.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write a slice as the entire contents of a file.","","","Sets the option for write access.","","","","A trait for creating instances of <code>Hasher</code>.","Used to create a default <code>BuildHasher</code> instance for types …","A hashable type.","Derive macro generating an impl of the trait <code>Hash</code>.","A trait for hashing an arbitrary stream of bytes.","Type of the hasher that will be created.","An implementation of SipHash 2-4.","","","Creates a new hasher.","","","","Returns the hash value for the values written so far.","","","Returns the argument unchanged.","Feeds this value into the given <code>Hasher</code>.","Calculates the hash of a single value.","Feeds a slice of this type into the given <code>Hasher</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>SipHasher</code> with the two initial keys set to 0.","Creates a <code>SipHasher</code> that is keyed off the provided keys.","","","","","Writes some data into this <code>Hasher</code>.","","Writes a single <code>i128</code> into this hasher.","Writes a single <code>i16</code> into this hasher.","Writes a single <code>i32</code> into this hasher.","Writes a single <code>i64</code> into this hasher.","Writes a single <code>i8</code> into this hasher.","Writes a single <code>isize</code> into this hasher.","Writes a length prefix into this hasher, as part of being …","Writes a single <code>str</code> into this hasher.","","Writes a single <code>u128</code> into this hasher.","Writes a single <code>u16</code> into this hasher.","Writes a single <code>u32</code> into this hasher.","Writes a single <code>u64</code> into this hasher.","Writes a single <code>u8</code> into this hasher.","Writes a single <code>usize</code> into this hasher.","A socket address could not be bound because the address is …","A nonexistent interface was requested or the requested …","An entity already exists, often a file.","Program argument list too long.","A borrowed byte buffer which is incrementally filled and …","A writeable view of the unfilled portion of a <code>BorrowedBuf</code>.","The operation failed because a pipe was closed.","A <code>BufRead</code> is a type of <code>Read</code>er which has an internal …","The <code>BufReader&lt;R&gt;</code> struct adds buffering to any reader.","Wraps a writer and buffers its output.","An iterator over <code>u8</code> values of a reader.","Adapter to chain together two readers.","The connection was aborted (terminated) by the remote …","The connection was refused by the remote server.","The connection was reset by the remote server.","Cross-device or cross-filesystem (hard) link or rename.","Sets the offset to the current position plus the specified …","A <code>Cursor</code> wraps an in-memory buffer and provides it with a …","Deadlock (avoided).","A non-empty directory was specified where an empty …","A reader which is always at EOF.","Sets the offset to the size of this object plus the …","The error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…","A list specifying general categories of I/O error.","Executable file is busy.","File larger than allowed or supported.","Loop in the filesystem or IO subsystem; often, too many …","Filesystem quota was exceeded.","The remote host is not reachable.","This operation was interrupted.","An error returned by <code>BufWriter::into_inner</code> which combines …","Data not valid for the operation were encountered.","A filename was invalid.","A parameter was incorrect.","A buffer type used with <code>Write::write_vectored</code>.","A buffer type used with <code>Read::read_vectored</code>.","The filesystem object is, unexpectedly, a directory.","Wraps a writer and buffers output to it, flushing whenever …","An iterator over the lines of an instance of <code>BufRead</code>.","The system’s networking is down.","The network containing the remote host is not reachable.","A filesystem object is, unexpectedly, not a directory.","The network operation failed because it was not connected …","An entity was not found, often a file.","Seek on unseekable file.","A custom error that does not fall under any other I/O …","An operation could not be completed, because it failed to …","The operation lacked the necessary privileges to complete.","The <code>Read</code> trait allows for reading bytes from a source.","The filesystem or storage medium is read-only, but a write …","A reader which yields one byte over and over and over and …","Resource is busy.","A specialized <code>Result</code> type for I/O operations.","The <code>Seek</code> trait provides a cursor which can be moved within …","Enumeration of possible methods to seek within an I/O …","A writer which will move data into the void.","An iterator over the contents of an instance of <code>BufRead</code> …","Stale network file handle.","Sets the offset to the provided number of bytes.","A handle to the standard error stream of a process.","A locked reference to the <code>Stderr</code> handle.","A handle to the standard input stream of a process.","A locked reference to the <code>Stdin</code> handle.","A handle to the global standard output stream of the …","A locked reference to the <code>Stdout</code> handle.","The underlying storage (typically, a filesystem) is full.","Reader adapter which limits the bytes read from an …","The I/O operation’s timeout expired, causing it to be …","Too many (hard) links to the same filesystem object.","An error returned when an operation could not be completed …","This operation is unsupported on this platform.","The operation needs to block to complete, but the blocking …","A trait for objects which are byte-oriented sinks.","An error returned when an operation could not be completed …","Error returned for the buffered data from …","Advance the internal cursor of the slice.","Advance the cursor by asserting that <code>n</code> bytes have been …","Advance the internal cursor of the slice.","Advance a slice of slices.","Advance a slice of slices.","Appends data to the cursor, advancing position within its …","","","","","","","Returns a mutable reference to the whole cursor.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the internally buffered data.","Returns a reference to the internally buffered data.","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Returns the number of bytes the internal buffer can hold …","Returns the number of bytes the internal buffer can hold …","Returns the total capacity of the buffer.","Returns the available space in the cursor.","","Creates an adapter which will chain this stream with …","Clears the buffer, resetting the filled region to empty.","","","","","","","","","","","","","","","Tells this buffer that <code>amt</code> bytes have been consumed from …","","","","","","","Copies the entire contents of a reader into a writer.","","","","","","","","","","Attempt to downgrade the inner error to <code>E</code> if any.","","Constructs a new handle to an empty reader.","Initializes all bytes in the cursor.","","","","Returns the error which caused the call to …","Returns the contents of the internal buffer, filling it …","","","","","","","Returns a shared reference to the filled portion of the …","Flush this output stream, ensuring that all intermediately …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Shows a human-readable description of the <code>ErrorKind</code>.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Converts an <code>ErrorKind</code> into an <code>Error</code>.","Converts a [<code>alloc::ffi::NulError</code>] into a <code>Error</code>.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new instance of an <code>Error</code> from a particular OS …","Gets a mutable reference to the underlying reader.","Gets a mutable reference to the underlying writer.","Gets a mutable reference to the underlying writer.","Returns a mutable reference to the inner error wrapped by …","Gets a mutable reference to the underlying value in this …","Gets mutable references to the underlying readers in this …","Gets a mutable reference to the underlying reader.","Gets a reference to the underlying reader.","Gets a reference to the underlying writer.","Gets a reference to the underlying writer.","Returns a reference to the inner error wrapped by this …","Gets a reference to the underlying value in this cursor.","Gets references to the underlying readers in this <code>Chain</code>.","Gets a reference to the underlying reader.","Check if the underlying <code>Read</code> has any data left to be read.","","Returns the length of the initialized part of the buffer.","Returns a mutable reference to the initialized portion of …","Returns a shared reference to the initialized portion of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>IntoInnerError</code> and returns the error which …","Unwraps this <code>BufReader&lt;R&gt;</code>, returning the underlying reader.","Unwraps this <code>BufWriter&lt;W&gt;</code>, returning the underlying writer.","Returns the perhaps-unwritten data.  Some of this data may …","Unwraps this <code>LineWriter</code>, returning the underlying writer.","Consumes the <code>Error</code>, returning its inner error (if any).","Returns the buffered writer instance which generated the …","Consumes this cursor, returning the underlying value.","Consumes the <code>Chain</code>, returning the wrapped readers.","Consumes the <code>Take</code>, returning the wrapped reader.","","","","Disassembles this <code>BufWriter&lt;W&gt;</code>, returning the underlying …","Consumes the <code>IntoInnerError</code> and returns the error which …","Returns <code>true</code> if the remaining slice is empty.","","","","","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","","","","","","","","","","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","","","","","","","","Returns the corresponding <code>ErrorKind</code> for this error.","Returns an error representing the last OS error which …","Returns the length of the filled part of the buffer.","Returns the number of bytes that can be read before this …","Consumes this handle and returns an iterator over input …","Returns an iterator over the lines of this reader.","Locks this handle to the standard input stream, returning …","Locks this handle to the standard output stream, returning …","Locks this handle to the standard error stream, returning …","Creates a new <code>BufReader&lt;R&gt;</code> with a default buffer capacity. …","Creates a new <code>BufWriter&lt;W&gt;</code> with a default buffer capacity. …","Creates a new <code>LineWriter</code>.","Creates a new I/O error from a known kind of error as well …","Creates a new <code>IoSliceMut</code> wrapping a byte slice.","Creates a new cursor wrapping the provided underlying …","Creates a new <code>IoSlice</code> wrapping a byte slice.","","","","Creates a new I/O error from an arbitrary error payload.","","Returns the current position of this cursor.","The I/O Prelude.","","","","Returns the OS error that this error represents (if any).","Pull some bytes from this source into the specified …","","","","","","","","","","","Pull some bytes from this source into the specified buffer.","","","","Read the exact number of bytes required to fill <code>cursor</code>.","","","","Read the exact number of bytes required to fill <code>buf</code>.","","Locks this handle and reads a line of input, appending it …","","Read all bytes until a newline (the <code>0xA</code> byte) is reached, …","","","","Read all bytes until EOF in this source, placing them into …","Read all bytes from a reader into a new <code>String</code>.","","","","Read all bytes until EOF in this source, appending them to …","","Read all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF is …","","","","","Like <code>read</code>, except that it reads into a slice of buffers.","","","Reborrow this cursor by cloning it with a smaller lifetime.","Returns the remaining slice.","Creates an instance of a reader that infinitely repeats …","Rewind to the beginning of a stream.","Seek to an offset, in bytes, in a stream.","Seek to an offset, in bytes, in the underlying reader.","Seek to the offset, in bytes, in the underlying writer.","","","Seeks relative to the current position. If the new …","Asserts that the first <code>n</code> bytes of the buffer are …","Asserts that the first <code>n</code> unfilled bytes of the cursor are …","Sets the number of bytes that can be read before this …","Sets the position of this cursor.","Creates an instance of a writer which will successfully …","","","Returns an iterator over the contents of this reader split …","Constructs a new handle to the standard error of the …","Constructs a new handle to the standard input of the …","Constructs a new handle to the standard output of the …","Returns the length of this stream (in bytes).","","","Returns the current seek position from the start of the …","Returns the current seek position from the start of the …","","","Creates an adapter which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a cursor over the unfilled part of the buffer.","Returns a mutable reference to the uninitialized part of …","Creates a new <code>BufReader&lt;R&gt;</code> with the specified buffer …","Creates a new <code>BufWriter&lt;W&gt;</code> with at least the specified …","Creates a new <code>LineWriter</code> with at least the specified …","Write a buffer into this writer, returning how many bytes …","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to write an entire buffer into this writer.","","","","","","","","Attempts to write multiple buffers into this writer.","","","","","","Writes a formatted string into this writer, returning any …","","","","","","","","","Like <code>write</code>, except that it writes from a slice of buffers.","","","","","","","","Returns the number of bytes written to this cursor since …","","","","A <code>BufRead</code> is a type of <code>Read</code>er which has an internal …","The <code>Read</code> trait allows for reading bytes from a source.","The <code>Seek</code> trait provides a cursor which can be moved within …","A trait for objects which are byte-oriented sinks.","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Creates an adapter which will chain this stream with …","Tells this buffer that <code>amt</code> bytes have been consumed from …","Returns the contents of the internal buffer, filling it …","Flush this output stream, ensuring that all intermediately …","Check if the underlying <code>Read</code> has any data left to be read.","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","Returns an iterator over the lines of this reader.","Pull some bytes from this source into the specified …","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>cursor</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until a newline (the <code>0xA</code> byte) is reached, …","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Read all bytes into <code>buf</code> until the delimiter <code>byte</code> or EOF is …","Like <code>read</code>, except that it reads into a slice of buffers.","Rewind to the beginning of a stream.","Seek to an offset, in bytes, in a stream.","Returns an iterator over the contents of this reader split …","Returns the length of this stream (in bytes).","Returns the current seek position from the start of the …","Creates an adapter which will read at most <code>limit</code> bytes …","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","","An iterator over <code>N</code> elements of the iterator at a time.","Like <code>Iterator::by_ref</code>, but requiring <code>Sized</code> so it can …","An iterator that links two iterators together, in a chain.","An iterator that clones the elements of an underlying …","An iterator that copies the elements of an underlying …","An iterator that repeats endlessly.","An iterator able to yield elements from both ends.","An iterator that yields nothing.","An iterator that yields the current count and the element …","An iterator that knows its exact length.","Extend a collection with the contents of an iterator.","An iterator that filters the elements of <code>iter</code> with …","An iterator that uses <code>f</code> to both filter and map elements …","An iterator that maps each element to an iterator, and …","An iterator that flattens one level of nesting in an …","An iterator where each iteration calls the provided …","Conversion from an <code>Iterator</code>.","An iterator that yields <code>None</code> forever after the underlying …","An iterator that always continues to yield <code>None</code> when …","An iterator that calls a function with a reference to each …","An iterator adapter that places a separator between all …","An iterator adapter that places a separator between all …","Which kind of iterator are we turning this into?","Conversion into an <code>Iterator</code>.","The type of the elements being iterated over.","The type of the elements being iterated over.","An interface for dealing with iterators.","An iterator that maps the values of <code>iter</code> with <code>f</code>.","An iterator that only accepts elements while <code>predicate</code> …","An iterator that yields an element exactly once.","An iterator that yields a single element of type <code>A</code> by …","An iterator with a <code>peek()</code> that returns an optional …","Trait to represent types that can be created by …","An iterator that repeats an element endlessly.","An iterator that repeats elements of type <code>A</code> endlessly by …","A double-ended iterator with the direction inverted.","An iterator to maintain state while iterating another …","An iterator that skips over <code>n</code> elements of <code>iter</code>.","An iterator that rejects elements while <code>predicate</code> returns …","Objects that have a notion of <em>successor</em> and <em>predecessor</em> …","An iterator for stepping iterators by a custom amount.","An new iterator where each successive item is computed …","Trait to represent types that can be created by summing up …","An iterator that only iterates over the first <code>n</code> iterations …","An iterator that only accepts elements while <code>predicate</code> …","An iterator that reports an accurate length using …","A type that upholds all invariants of <code>Step</code>.","An iterator that iterates two other iterators …","","","Advances the iterator from the back by <code>n</code> elements.","","","","","","","","","","","Advances the iterator by <code>n</code> elements.","","","","","","","","","","Tests if every element of the iterator matches a predicate.","Tests if any element of the iterator matches a predicate.","Returns an iterator over <code>N</code> elements of the iterator at a …","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Borrows an iterator, rather than consuming it.","Takes two iterators and creates a new iterator over both …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator which <code>clone</code>s all of its elements.","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Transforms an iterator into a collection.","Collects all the items from an iterator into a collection.","Creates an iterator which copies all of its elements.","","","Consumes the iterator, counting the number of iterations …","","","","","","","","","Repeats an iterator endlessly.","","Creates an iterator that yields nothing.","Creates an iterator which gives the current iteration …","Determines if the elements of this <code>Iterator</code> are equal to …","Determines if the elements of this <code>Iterator</code> are equal to …","Extends a collection with the contents of an iterator.","Extends a collection with exactly one element.","Reserves capacity in a collection for the given number of …","Creates an iterator which uses a closure to determine if …","Creates an iterator that both filters and maps.","Searches for an element of an iterator that satisfies a …","","","","Applies function to the elements of iterator and returns …","Creates an iterator that works like map, but flattens …","Creates an iterator that flattens nested structure.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Folds every element into an accumulator by applying an …","","","","","","","","","","","","","","","","","","","","","Calls a closure on each element of an iterator.","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","Returns the value that would be obtained by taking the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new iterator where each iteration calls the …","Creates a new iterator where each iteration calls the …","Creates a value from an iterator.","Creates an iterator which ends after the first <code>None</code>.","Determines if the elements of this <code>Iterator</code> are …","Determines if the elements of this <code>Iterator</code> are …","Does something with each element of an iterator, passing …","Creates a new iterator which places a copy of <code>separator</code> …","Creates a new iterator which places an item generated by …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an iterator from a value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an iterator over the remaining elements of the …","Returns <code>true</code> if the iterator is empty.","","","","","","","","","Checks if the elements of this iterator are partitioned …","Checks if the elements of this iterator are sorted.","Checks if the elements of this iterator are sorted using …","Checks if the elements of this iterator are sorted using …","","","Consumes the iterator, returning the last element.","","","","","","Determines if the elements of this <code>Iterator</code> are …","","Returns the exact remaining length of the iterator.","","","","","","","","","","","Determines if the elements of this <code>Iterator</code> are …","Takes a closure and creates an iterator which calls that …","Creates an iterator that both yields elements based on a …","Returns the maximum element of an iterator.","Returns the element that gives the maximum value with …","Returns the element that gives the maximum value from the …","Returns the minimum element of an iterator.","Returns the element that gives the minimum value with …","Returns the element that gives the minimum value from the …etermines if the elements of this <code>Iterator</code> are unequal to …","Advances the iterator and returns the next value.","","","","","","","","","","","Overflow Behavior","","","","","","","","","","","","","","","","","","","","","","Removes and returns an element from the end of the …","","","","","","","","","","","","","","","","","","","","","","","Advances the iterator and returns an array containing the …","Returns the <code>n</code>th element of the iterator.","","","","","","","","","","","","Returns the <code>n</code>th element from the end of the iterator.","","","","","","","","","","Creates an iterator that yields an element exactly once.","Creates an iterator that lazily generates a value exactly …","Lexicographically compares the elements of this <code>Iterator</code> …","Lexicographically compares the elements of this <code>Iterator</code> …","Consumes an iterator, creating two collections from it.","Reorders the elements of this iterator <em>in-place</em> according …","Creates an iterator which can use the <code>peek</code> and <code>peek_mut</code> …","","","Searches for an element in an iterator, returning its …","Method which takes an iterator and generates <code>Self</code> from the …","Iterates over the entire iterator, multiplying all the …","Reduces the elements to a single one, by repeatedly …","Creates a new iterator that endlessly repeats a single …","Creates a new iterator that repeats elements of type <code>A</code> …","Reverses an iterator’s direction.","Searches for an element of an iterator from the back that …","","","","","","An iterator method that reduces the iterator’s elements …","","","","","","","","","","","","","","","","Searches for an element in an iterator from the right, …","An iterator adapter similar to <code>fold</code> that holds internal …","","","","","Returns the bounds on the remaining length of the iterator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an iterator that skips the first <code>n</code> elements.","Creates an iterator that <code>skip</code>s elements based on a …","Creates an iterator starting at the same point, but …","Returns the number of <em>successor</em> steps required to get from …","Creates a new iterator where each successive item is …","Method which takes an iterator and generates <code>Self</code> from the …","Sums the elements of an iterator.","Creates an iterator that yields the first <code>n</code> elements, or …","Creates an iterator that yields elements based on a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fallibly transforms an iterator into a collection, short …","Applies function to the elements of iterator and returns …","","","An iterator method that applies a function as long as it …","","","","","","","","","","","","","","","","","","","","","An iterator method that applies a fallible function to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reduces the elements to a single one by repeatedly …","","","This is the reverse version of <code>Iterator::try_fold()</code>: it …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts an iterator of pairs into a pair of containers.","Converts the arguments to iterators and zips them.","‘Zips up’ two iterators into a single iterator of …","Assume only that alignment conditions are met.","What transmutation safety conditions shall the compiler …","Are values of a type transmutable into values of another …","Opaque type representing the discriminant of an enum.","Assume only that lifetime conditions are met.","A wrapper to inhibit compiler from automatically calling <code>T</code>…","A wrapper type to construct uninitialized instances of <code>T</code>.","Do not assume that <em>you</em> have ensured any safety properties …","Assume only that safety conditions are met.","Assume only that dynamically-satisfiable validity …","","Returns the ABI-required minimum alignment of a type in …","Returns the ABI-required minimum alignment of the type of …","Returns the ABI-required minimum alignment of the type of …","When <code>true</code>, the compiler assumes that <em>you</em> are ensuring …","Assume both <code>self</code> and <code>other_assumptions</code>.","Extracts the values from an array of <code>MaybeUninit</code> …","Returns the contents of this <code>MaybeUninit</code> as a slice of …","Returns the contents of this <code>MaybeUninit</code> as a mutable …","Gets a mutable pointer to the contained value. Reading …","Gets a pointer to the contained value. Reading from this …","Extracts the value from the <code>MaybeUninit&lt;T&gt;</code> container. This …","Drops the contained value in place.","Gets a mutable (unique) reference to the contained value.","Reads the value from the <code>MaybeUninit&lt;T&gt;</code> container. The …","Gets a shared reference to the contained value.","","","","","","","","","Assume <code>self</code>, excepting <code>other_assumptions</code>.","","","","","","","","","","Bitwise-copies a value.","","","","Returns a value uniquely identifying the enum variant in <code>v</code>.","Disposes of a value.","Manually drops the contained value. This is exactly …","","","","","","","","Takes ownership and “forgets” about the value <strong>without </strong>…","Like <code>forget</code>, but also accepts unsized values.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Extracts the value from the <code>ManuallyDrop</code> container.","When <code>true</code>, the compiler assume that <em>you</em> are ensuring that …","Returns the ABI-required minimum alignment of a type in …","Returns the ABI-required minimum alignment of the type of …","Returns <code>true</code> if dropping values of type <code>T</code> matters.","Wrap a value to be manually dropped.","Creates a new <code>MaybeUninit&lt;T&gt;</code> initialized with the given …","","Moves <code>src</code> into the referenced <code>dest</code>, returning the previous …","When <code>true</code>, the compiler assumes that <em>you</em> have ensured that …","Returns the size of a type in bytes.","Returns the size of the pointed-to value in bytes.","Returns the size of the pointed-to value in bytes.","Returns the contents of this slice of <code>MaybeUninit</code> as a …","Returns the contents of this mutable slice of <code>MaybeUninit</code> …","Gets a mutable pointer to the first element of the array.","Gets a pointer to the first element of the array.","Assuming all the elements are initialized, get a mutable …","Assuming all the elements are initialized, get a slice to …","","Swaps the values at two mutable locations, without …","Replaces <code>dest</code> with the default value of <code>T</code>, returning the …","Takes the value from the <code>ManuallyDrop&lt;T&gt;</code> container out.","","","","","Reinterprets the bits of a value of one type as another …","Interprets <code>src</code> as having type <code>&amp;U</code>, and then reads <code>src</code> …","","","","","","","","","","","","","Creates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state.","Create a new array of <code>MaybeUninit&lt;T&gt;</code> items, in an …","Bypasses Rust’s normal memory-initialization checks by …","When <code>true</code>, the compiler assumes that <em>you</em> are ensuring that …","Returns the number of variants in the enum type <code>T</code>.","Sets the value of the <code>MaybeUninit&lt;T&gt;</code>.","Copies the elements from <code>src</code> to <code>this</code>, returning a mutable …","Clones the elements from <code>src</code> to <code>this</code>, returning a mutable …","Returns the value of type <code>T</code> represented by the all-zero …","Creates a new <code>MaybeUninit&lt;T&gt;</code> in an uninitialized state, …","","The addition operator <code>+</code>.","The addition assignment operator <code>+=</code>.","APIs like <code>try_for_each</code> don’t need values with <code>Break</code>, so …","The bitwise AND operator <code>&amp;</code>.","The bitwise AND assignment operator <code>&amp;=</code>.","The bitwise OR operator <code>|</code>.","The bitwise OR assignment operator <code>|=</code>.","The bitwise XOR operator <code>^</code>.","The bitwise XOR assignment operator <code>^=</code>.","An endpoint of a range of keys.","Exit the operation without running subsequent phases.","It’s frequently the case that there’s no value needed …","Trait that indicates that this is a pointer or a wrapper …","The generator completed with a return value.","Move on to the next phase of the operation as normal.","Used to tell an operation whether it should exit early or …","Used for immutable dereferencing operations, like <code>*v</code>.","Used for mutable dereferencing operations, like in <code>*v = 1;</code>.","<code>DispatchFromDyn</code> is used in the implementation of object …","The division operator <code>/</code>.","The division assignment operator <code>/=</code>.","Custom code within the destructor.","An exclusive bound.","The version of the call operator that takes an immutable …","The version of the call operator that takes a mutable …","The version of the call operator that takes a by-value …","Used to specify which residuals can be converted into …","The trait implemented by builtin generator types.","The result of a generator resumption.","An inclusive bound.","Used for indexing operations (<code>container[index]</code>) in …","Used for indexing operations (<code>container[index]</code>) in mutable …","The multiplication operator <code>*</code>.","The multiplication assignment operator <code>*=</code>.","The unary negation operator <code>-</code>.","The unary logical negation operator <code>!</code>.","<code>OneSidedRange</code> is implemented for built-in range types that …","The resulting type after applying the <code>+</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>*</code> operator.","The resulting type after applying the <code>/</code> operator.","The resulting type after applying the <code>%</code> operator.","The resulting type after applying the <code>-</code> operator.","The resulting type after applying the <code>!</code> operator.","The resulting type after applying the <code>&amp;</code> operator.","The resulting type after applying the <code>|</code> operator.","The resulting type after applying the <code>^</code> operator.","The resulting type after applying the <code>&lt;&lt;</code> operator.","The resulting type after applying the <code>&gt;&gt;</code> operator.","The returned type after the call operator is used.","The returned type after indexing.","The type of the value produced by <code>?</code> when <em>not</em> …","A (half-open) range bounded inclusively below and …","<code>RangeBounds</code> is implemented by Rust’s built-in range …","A range only bounded inclusively below (<code>start..</code>).","An unbounded range (<code>..</code>).","A range bounded inclusively below and above (<code>start..=end</code>).","A range only bounded exclusively above (<code>..end</code>).","A range only bounded inclusively above (<code>..=end</code>).","The remainder operator <code>%</code>.","The remainder assignment operator <code>%=</code>.","Allows retrieving the canonical type implementing <code>Try</code> that …","The type of the value passed to <code>FromResidual::from_residual</code>","The type of value this generator returns.","The left shift operator <code>&lt;&lt;</code>. Note that because this trait …","The left shift assignment operator <code>&lt;&lt;=</code>.","The right shift operator <code>&gt;&gt;</code>. Note that because this trait …","The right shift assignment operator <code>&gt;&gt;=</code>.","The subtraction operator <code>-</code>.","The subtraction assignment operator <code>-=</code>.","The resulting type after dereferencing.","The <code>?</code> operator and <code>try {}</code> blocks.","The “return” type of this meta-function.","An infinite endpoint. Indicates that there is no bound in …","Implement <code>FromResidual&lt;Yeet&lt;T&gt;&gt;</code> on your type to enable …","The type of value this generator yields.","The generator suspended with a value.","Performs the <code>+</code> operation.","Performs the <code>+=</code> operation.","Performs the <code>&amp;</code> operation.","Performs the <code>&amp;=</code> operation.","Performs the <code>|</code> operation.","Performs the <code>|=</code> operation.","Performs the <code>^</code> operation.","Performs the <code>^=</code> operation.","","","","","","","","","","","","","","","Used in <code>?</code> to decide whether the operator should produce a …","","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …","Performs the call operation.","Performs the call operation.","Performs the call operation.","","","","","","","","","","","","","","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Returns <code>true</code> if <code>item</code> is contained in the range.","Converts the <code>ControlFlow</code> into an <code>Option</code> which is <code>Some</code> if …","","Dereferences the value.","Mutably dereferences the value.","Performs the <code>/</code> operation.","Performs the <code>/=</code> operation.","Executes the destructor for this type.","The upper bound of the range (exclusive).","The upper bound of the range (exclusive).","The upper bound of the range (inclusive)","End index bound.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs the type from its <code>Output</code> type.","","Constructs the type from a compatible <code>Residual</code> type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the indexing (<code>container[index]</code>) operation.","","","","","","","","","Performs the mutable indexing (<code>container[index]</code>) operation.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if this is a <code>Break</code> variant.","Returns <code>true</code> if this is a <code>Continue</code> variant.","Maps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;T, C&gt;</code> by applying a …","Maps <code>ControlFlow&lt;B, C&gt;</code> to <code>ControlFlow&lt;B, T&gt;</code> by applying a …","Performs the <code>*</code> operation.","Performs the <code>*=</code> operation.","Performs the unary <code>-</code> operation.","","Performs the unary <code>!</code> operation.","","","Performs the <code>%</code> operation.","Performs the <code>%=</code> operation.","Resumes the execution of this generator.","Performs the <code>&lt;&lt;</code> operation.","Performs the <code>&lt;&lt;=</code> operation.","Performs the <code>&gt;&gt;</code> operation.","Performs the <code>&gt;&gt;=</code> operation.","","The lower bound of the range (inclusive).","The lower bound of the range (inclusive).","Start index bound.","","","","","","","","Performs the <code>-</code> operation.","Performs the <code>-=</code> operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over a slice in (non-overlapping) chunks (<code>N</code> …","An iterator over a slice in (non-overlapping) mutable …","A windowed iterator over a slice in overlapping chunks (<code>N</code> …","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) mutable …","An iterator over a slice in (non-overlapping) mutable …","Helper trait for <code>[T]::concat</code>.","An iterator over the escaped version of a byte slice.","An iterator over slice in (non-overlapping) chunks …","An iterator over slice in (non-overlapping) mutable chunks …","Immutable slice iterator","Mutable slice iterator.","Helper trait for <code>[T]::join</code>","The resulting type after concatenation","The resulting type after concatenation","The output type returned by methods.","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) chunks (…","An iterator over a slice in (non-overlapping) mutable …","An iterator over a slice in (non-overlapping) mutable …","An iterator over subslices separated by elements that …","An iterator over the subslices of the vector which are …","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","A helper trait used for indexing operations.","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","An iterator over the mutable subslices of the vector which …","An iterator over the mutable subslices of the vector which …","An iterator over subslices separated by elements that …","An iterator over subslices separated by elements that …","An iterator over overlapping subslices of length <code>size</code>.","Returns a slice which contains items not yet handled by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Implementation of <code>[T]::concat</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a reference to T into a slice of length 1 …","Forms a mutable slice from a pointer range.","Forms a slice from a pointer range.","Forms a slice from a pointer and a length.","Performs the same functionality as <code>from_raw_parts</code>, except …","Converts a reference to T into a slice of length 1 …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","Returns a shared reference to the output at this location, …","Returns a mutable reference to the output at this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","","","","","","","","Implementation of <code>[T]::join</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs bounds-checking of a range.","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","Returns the remainder of the original slice that is not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator over the bytes of a string slice.","An iterator over the <code>char</code>s of a string slice, and their …","An iterator over the <code>char</code>s of a string slice.","An iterator of <code>u16</code> over the string encoded as UTF-16.","The associated error which can be returned from parsing.","The return type of <code>str::escape_debug</code>.","The return type of <code>str::escape_default</code>.","The return type of <code>str::escape_unicode</code>.","Parse a value from a string","An iterator over the lines of a string, as string slices.","Created with the method <code>lines_any</code>.","Created with the method <code>match_indices</code>.","Created with the method <code>matches</code>.","An error returned when parsing a <code>bool</code> using <code>from_str</code> fails","Created with the method <code>rmatch_indices</code>.","Created with the method <code>rmatches</code>.","Created with the method <code>rsplit</code>.","Created with the method <code>rsplitn</code>.","Created with the method <code>rsplit_terminator</code>.","Created with the method <code>split</code>.","An iterator over the non-ASCII-whitespace substrings of a …","An iterator over the substrings of a string, terminated by …","Created with the method <code>splitn</code>.","Created with the method <code>split_terminator</code>.","An iterator over the non-whitespace substrings of a string,","An item returned by the <code>Utf8Chunks</code> iterator.","An iterator used to decode a slice of mostly UTF-8 bytes …","Errors which can occur when attempting to interpret a …","","","Returns remainder of the split string","Views the underlying data as a subslice of the original …","Returns remainder of the split string","Returns remainder of the split string","Returns remainder of the split string","Returns remainder of the split string","Returns remainder of the split string","Returns remainder of the split string","Returns remainder of the split string","Returns remainder of the split string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Provides more information about the failure:","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a boxed slice of bytes to a boxed string slice …","Parses a string <code>s</code> to return a value of this type.","Converts a slice of bytes to a string slice.","Converts a mutable slice of bytes to a mutable string …","Converts a slice of bytes to a string slice without …","Converts a slice of bytes to a string slice without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Returns the invalid sequence that caused a failure.","","","","","","","","","","","Creates a new iterator to decode the bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the byte position of the next character, or the …","The string Pattern API.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the next validated UTF-8 substring.","Returns the index in the given string up to which valid …","Associated type for <code>&lt;&amp;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;[char; N] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Associated type for <code>&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","Expresses that every byte of the haystack has been …","A marker trait to express that a <code>ReverseSearcher</code> can be …","Expresses that a match of the pattern has been found at …","A string pattern.","Expresses that <code>haystack[a..b]</code> has been rejected as a …","A reverse searcher for a string pattern.","Result of calling <code>Searcher::next()</code> or …","A searcher for a string pattern.","Associated searcher for this pattern","Associated type for <code>&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Getter for the underlying string to be searched in","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs the associated searcher from <code>self</code> and the …","Checks whether the pattern matches anywhere in the haystack","Checks whether the pattern matches at the front of the …","Checks whether the pattern matches at the back of the …","Performs the next search step starting from the front.","","","","","","","Performs the next search step starting from the back.","","","","","","","Finds the next <code>Match</code> result. See <code>next()</code>.","","","","","","","Finds the next <code>Match</code> result. See <code>next_back()</code>.","","","","","","","Finds the next <code>Reject</code> result. See <code>next()</code> and <code>next_match()</code>.","","","","","Finds the next <code>Reject</code> result. See <code>next_back()</code>.","","","","","Removes the pattern from the front of haystack, if it …","Removes the pattern from the back of haystack, if it …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An error returned by <code>LocalKey::try_with</code>.","Thread factory, which can be used in order to configure …","An owned permission to join on a thread (block on its …","A thread local storage key which owns its contents.","A specialized <code>Result</code> type for threads.","A scope to spawn scoped threads in.","An owned permission to join on a scoped thread (block on …","A handle to a thread.","A unique identifier for a running thread.","","This returns a numeric identifier for the thread …","Returns an estimate of the default amount of parallelism a …","","","","","","","","","","","","","","","","","","","","","","","Gets a handle to the thread that invokes it.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a copy of the contained value.","","","Gets the thread’s unique identifier.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the associated thread has finished running its …","Waits for the associated thread to finish.","Names the thread-to-be. Currently the name is used for …","Gets the thread’s name.","","Generates the base configuration for spawning a thread, …","Determines whether the current thread is unwinding because …","Blocks unless or until the current thread’s token is …","Blocks unless or until the current thread’s token is …","Use <code>park_timeout</code>.","","","Replaces the contained value, returning the old value.","Replaces the contained value, returning the old value.","Create a scope for spawning scoped threads.","Sets or initializes the contained value.","Sets or initializes the contained value.","Puts the current thread to sleep for at least the …","Use <code>sleep</code>.","Spawns a new thread, returning a <code>JoinHandle</code> for it.","Spawns a new thread within a scope, returning a …","Spawns a new thread by taking ownership of the <code>Builder</code>, …","Spawns a new scoped thread using the settings set through …","Spawns a new thread without any lifetime restrictions by …","Sets the size of the stack (in bytes) for the new thread.","Takes the contained value, leaving <code>Default::default()</code> in …","Takes the contained value, leaving <code>Default::default()</code> in …","Extracts a handle to the underlying thread.","","","","","","","","","","","","","","","","","","","","","Acquires a reference to the value in this TLS key.","","","","","","","","","Atomically makes the handle’s token available if it is …","Acquires a reference to the value in this TLS key.","Acquires a reference to the contained value.","Acquires a mutable reference to the contained value.","Cooperatively gives up a timeslice to the OS scheduler.","A <code>Duration</code> type to represent a span of time, typically …","An error which can be returned when converting a …","A measurement of a monotonically nondecreasing clock. …","The maximum duration.","The duration of one microsecond.","The duration of one millisecond.","The duration of one nanosecond.","The duration of one second.","A measurement of the system clock, useful for talking to …","An error returned from the <code>duration_since</code> and <code>elapsed</code> …","An anchor in time which can be used to create new …","An anchor in time which can be used to create new …","A duration of zero time.","Panics","Panics","","","","","Returns the total number of whole microseconds contained …","Returns the total number of whole milliseconds contained …","Returns the total number of nanoseconds contained by this …","Returns the number of <em>whole</em> seconds contained by this …","Returns the number of seconds contained by this <code>Duration</code> …","Returns the number of seconds contained by this <code>Duration</code> …","","","","","","","","","","","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …","Checked <code>Duration</code> addition. Computes <code>self + other</code>, …","Checked <code>Duration</code> division. Computes <code>self / other</code>, …","Returns the amount of time elapsed from another instant to …","Checked <code>Duration</code> multiplication. Computes <code>self * other</code>, …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …","Checked <code>Duration</code> subtraction. Computes <code>self - other</code>, …","","","","","","","","","","","","","","","","","","Divide <code>Duration</code> by <code>Duration</code> and return <code>f32</code>.","Divide <code>Duration</code> by <code>Duration</code> and return <code>f64</code>.","Divide <code>Duration</code> by <code>f32</code>.","Divide <code>Duration</code> by <code>f64</code>.","Returns the positive duration which represents how far …","Returns the amount of time elapsed from another instant to …","Returns the amount of time elapsed from an earlier point …","Returns the amount of time elapsed since this instant was …","Returns the difference between the clock time when this …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of whole …","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this <code>Duration</code> spans no time.","","","Multiplies <code>Duration</code> by <code>f32</code>.","Multiplies <code>Duration</code> by <code>f64</code>.","Creates a new <code>Duration</code> from the specified number of whole …","Returns an instant corresponding to “now”.","Returns the system time corresponding to “now”.","","","","","","Saturating <code>Duration</code> addition. Computes <code>self + other</code>, …","Returns the amount of time elapsed from another instant to …","Saturating <code>Duration</code> multiplication. Computes <code>self * other</code>, …","Saturating <code>Duration</code> subtraction. Computes <code>self - other</code>, …","","Returns the amount of time elapsed from another instant to …","","","","","","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in whole …","Returns the fractional part of this <code>Duration</code>, in …","","","","","","","","","","","","","","","The checked version of <code>from_secs_f32</code>.","The checked version of <code>from_secs_f64</code>.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,65,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,366,0,0,26,0,0,0,0,61,0,0,0,0,0,0,367,0,26,0,0,0,0,0,0,9,25,61,0,0,0,0,0,14,15,0,0,368,369,370,371,372,373,374,375,376,377,378,2,0,0,0,0,0,0,0,0,0,0,0,65,65,0,0,9,25,65,0,0,0,0,0,0,0,379,0,26,14,15,0,0,0,368,2,2,380,2,2,3,6,7,8,3,6,7,8,9,6,7,381,381,11,3,12,14,15,9,6,7,16,17,18,11,0,382,382,0,0,0,19,20,22,9,9,9,9,9,9,9,25,26,22,27,22,3,7,11,28,12,9,9,30,22,19,32,33,34,20,20,22,9,9,9,9,9,9,9,2,2,28,28,25,33,20,12,12,3,6,7,26,22,16,3,6,7,19,11,36,0,0,0,0,0,0,0,0,33,33,20,20,381,11,11,381,11,11,11,374,41,18,383,375,41,18,384,41,18,385,81,22,22,9,2,2,16,30,54,41,14,15,17,55,105,56,57,28,28,18,25,58,59,11,19,32,32,33,33,34,20,20,12,3,83,53,44,45,46,6,7,60,61,62,8,63,26,64,65,27,36,386,81,22,22,9,2,16,30,54,41,14,15,17,55,105,56,57,28,18,25,58,59,11,19,32,32,33,34,20,12,3,83,53,44,45,46,6,7,60,61,62,8,63,26,64,65,27,36,25,367,44,46,12,22,16,28,11,381,9,50,20,381,381,22,16,17,28,18,11,53,22,9,2,16,54,41,17,55,56,57,28,18,25,58,59,11,19,32,33,34,20,3,44,45,46,6,60,61,62,8,63,26,64,65,36,22,9,2,16,28,18,11,32,22,9,2,16,54,41,17,55,56,57,28,18,25,58,59,11,19,32,33,34,20,12,3,44,45,46,6,60,61,62,8,63,26,64,65,36,26,0,22,9,2,17,28,18,58,11,19,32,33,20,12,61,62,381,9,381,381,381,381,27,27,27,12,381,9,381,18,387,11,8,63,17,9,3,6,7,64,36,381,381,33,20,381,381,381,381,0,81,22,2,16,54,41,17,28,18,58,11,19,32,33,34,20,83,53,44,45,46,8,27,379,81,22,9,2,54,41,28,33,20,388,22,9,54,41,28,9,50,20,60,62,18,12,371,33,20,50,50,50,50,50,50,33,20,33,20,22,16,11,17,18,16,22,17,11,33,34,20,3,381,381,381,381,389,9,9,9,63,8,387,8,8,63,63,12,17,22,22,9,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,54,41,17,28,28,28,28,28,28,28,28,28,28,18,25,58,11,11,11,11,11,11,11,19,32,33,20,12,12,12,12,12,12,12,12,12,12,12,12,46,60,61,62,8,63,26,65,381,12,9,9,22,9,16,16,54,54,41,41,17,17,28,28,28,18,18,11,11,16,16,17,17,18,18,11,11,16,16,11,11,12,9,9,9,9,9,27,27,27,27,27,27,27,27,27,12,12,12,9,381,381,9,6,7,9,6,7,381,381,381,390,45,18,17,17,381,9,25,22,9,11,0,215,391,22,9,9,2,2,16,30,54,41,14,15,17,55,105,56,57,28,18,25,58,59,11,19,32,33,33,33,34,20,20,20,12,3,83,53,44,45,46,6,7,60,60,61,62,62,8,63,26,64,65,27,36,9,63,64,381,381,381,381,381,9,6,7,381,381,381,81,22,22,9,9,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,16,16,16,30,54,54,54,41,41,41,14,15,17,17,55,105,56,57,28,28,28,28,28,28,18,18,25,58,59,11,11,11,19,19,19,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,3,83,53,53,53,44,45,46,6,7,60,61,62,62,62,8,63,26,64,65,27,27,36,81,22,2,2,2,2,16,54,41,17,28,28,28,18,11,33,20,19,27,27,33,34,20,366,28,28,11,11,0,22,28,19,32,33,20,54,17,18,11,19,8,8,63,63,54,17,54,17,11,19,32,33,20,53,8,8,63,63,27,27,33,20,8,8,63,63,8,8,63,63,381,22,28,19,32,33,20,25,25,12,0,79,22,9,2,17,28,18,25,58,11,33,20,12,61,62,8,63,26,65,367,79,33,20,378,81,54,17,28,11,8,8,63,63,392,28,11,8,8,63,63,81,22,54,17,18,11,15,381,381,18,381,381,81,22,9,9,2,16,30,54,54,41,41,14,15,17,55,105,56,57,28,18,25,25,58,59,11,19,32,33,34,20,3,83,53,44,45,46,6,7,60,61,62,8,63,26,64,65,27,36,28,9,381,381,381,381,22,9,19,32,53,63,27,22,22,22,22,9,9,16,16,54,54,54,41,41,17,17,17,55,105,56,57,18,18,59,11,11,11,12,3,6,7,8,63,64,36,16,17,2,12,30,33,34,20,7,16,28,17,16,28,0,50,50,50,12,2,25,12,18,81,22,16,17,18,11,3,6,7,8,63,61,12,30,22,61,61,61,9,25,61,61,2,53,12,9,25,8,63,6,18,18,12,0,16,17,18,11,12,17,11,0,0,30,381,12,381,14,15,17,60,381,381,9,55,105,56,57,18,6,7,8,63,64,36,17,17,22,28,19,32,33,20,9,25,9,25,9,9,9,81,22,9,16,17,55,105,56,57,18,11,6,7,27,53,22,28,19,32,33,20,11,33,20,9,26,25,381,9,25,381,381,9,25,55,105,56,8,63,381,381,381,0,381,381,381,12,55,105,56,8,63,381,381,381,381,381,381,370,381,381,9,9,9,9,9,9,9,9,9,9,9,9,9,55,105,381,59,59,59,59,59,59,59,59,59,59,59,59,59,3,3,3,3,3,3,3,3,3,3,3,3,3,64,64,64,64,64,64,64,64,64,64,64,64,64,2,2,2,2,2,2,33,20,373,81,22,16,54,41,17,28,18,11,19,32,33,34,20,12,83,53,44,45,63,27,22,33,20,17,18,11,33,20,33,20,33,20,33,20,9,55,105,56,57,59,3,6,7,8,63,64,36,9,55,105,56,57,3,6,7,8,63,64,36,3,64,64,381,83,83,9,6,7,8,63,64,6,7,8,63,0,0,0,0,25,14,15,25,25,14,15,14,15,14,15,381,12,22,9,2,2,2,2,2,2,2,2,2,2,2,2,2,17,28,28,28,28,28,28,28,28,28,18,58,11,19,32,33,20,12,12,12,12,12,12,12,12,12,12,12,12,61,62,9,381,11,381,16,59,64,16,64,59,6,64,36,381,381,33,20,9,22,16,22,11,17,18,11,17,18,9,6,7,381,381,381,381,381,381,381,381,381,381,381,381,9,50,20,20,60,62,33,34,20,22,16,28,11,11,22,17,18,11,17,11,9,11,11,12,9,9,12,9,9,9,25,372,22,22,54,17,18,11,17,18,19,32,32,62,50,50,50,50,50,50,16,28,11,16,28,11,59,11,11,22,16,17,18,11,11,61,9,9,63,64,9,25,9,25,9,9,9,11,11,6,7,9,19,381,22,376,393,377,394,16,28,11,16,28,11,9,55,105,56,57,59,3,6,7,8,63,64,36,0,0,0,381,381,381,381,381,381,381,9,50,20,50,17,18,11,63,8,387,8,8,63,63,12,381,27,0,12,33,34,20,369,41,18,381,11,19,32,27,22,22,11,11,12,18,22,18,19,32,381,381,61,61,0,30,0,2,22,9,2,16,54,41,17,55,56,57,28,18,25,58,59,11,19,32,33,34,20,12,3,44,45,46,6,60,61,62,8,63,26,64,65,36,12,12,9,2,2,33,20,60,62,12,381,22,11,382,382,32,32,32,381,12,22,63,64,81,22,22,9,2,16,30,54,41,14,15,17,55,105,56,57,28,18,25,58,59,11,19,32,33,33,34,20,20,3,83,53,44,45,46,6,7,60,61,62,8,63,26,64,65,27,36,22,17,81,22,9,2,16,30,54,41,14,15,17,55,105,56,57,28,18,25,58,59,11,19,32,33,34,20,3,83,53,44,45,46,6,7,60,61,62,8,63,26,64,65,27,36,53,33,20,33,20,33,20,20,22,16,28,11,16,28,11,63,64,33,20,381,381,381,81,22,9,2,16,30,54,41,14,15,17,55,105,56,57,28,18,25,58,59,11,19,32,33,34,20,12,3,83,53,44,45,46,6,7,60,61,62,8,63,26,64,65,27,36,32,18,381,381,53,9,33,20,9,381,19,34,17,17,83,83,83,83,83,33,34,20,381,16,54,41,28,11,54,41,11,12,12,54,41,381,0,0,0,0,390,22,9,11,45,9,11,9,390,390,390,390,390,390,390,28,45,390,390,390,390,390,390,390,381,381,395,396,397,398,399,400,401,402,403,404,405,403,406,407,0,0,152,152,152,152,152,207,152,207,152,207,152,207,152,207,152,152,152,207,207,152,152,207,207,0,0,0,152,207,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,207,152,152,152,207,207,152,207,0,152,207,152,207,208,0,0,61,61,61,0,0,0,0,0,0,0,0,208,208,80,208,208,208,80,208,208,408,208,208,208,409,208,409,208,208,208,409,208,409,208,0,80,0,0,0,80,0,0,408,409,208,208,208,208,208,0,0,0,209,0,0,0,0,0,0,0,0,0,0,209,0,0,0,0,0,209,0,0,0,103,103,197,213,214,212,210,211,103,209,104,197,213,214,212,210,211,103,209,104,197,209,104,197,209,104,197,104,103,103,103,103,103,104,104,212,210,211,212,210,211,209,104,213,214,103,213,214,212,210,211,213,103,215,391,410,411,412,413,414,415,416,209,104,104,197,197,0,213,214,212,210,211,103,209,104,197,104,213,214,212,210,211,103,209,104,197,211,103,103,104,103,104,103,103,103,209,104,197,104,197,213,214,212,210,211,103,209,104,197,213,214,212,210,211,103,209,104,197,213,214,212,210,211,103,209,104,197,211,103,0,216,103,216,103,103,216,103,103,0,0,0,0,0,0,0,0,0,149,218,219,219,149,149,149,149,149,219,225,149,167,218,221,222,223,224,219,225,149,167,218,221,222,223,224,0,149,218,221,222,223,149,218,221,222,223,0,219,218,224,0,0,219,218,149,149,149,218,221,149,222,223,225,225,225,149,219,219,219,225,149,167,218,221,222,223,224,219,219,225,149,167,218,221,222,223,224,222,219,149,0,223,225,149,219,225,149,167,218,221,222,223,224,167,219,223,223,149,223,223,149,223,219,219,223,149,223,219,219,149,0,219,225,149,218,222,224,149,149,149,218,221,224,167,149,219,218,219,225,149,149,0,219,219,218,219,219,219,0,0,219,219,0,219,219,219,219,222,224,0,0,0,0,219,219,221,219,222,219,221,0,219,222,219,149,0,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,0,219,219,149,218,221,222,223,218,219,0,219,225,149,167,218,221,222,223,224,219,225,149,167,218,221,222,223,224,219,225,149,167,218,221,222,223,224,149,0,219,219,218,219,219,219,0,0,0,0,0,367,0,227,227,367,227,227,227,390,227,227,227,79,367,79,227,227,227,227,227,227,227,390,227,390,390,390,390,390,390,390,390,227,390,390,390,390,390,390,242,242,242,242,0,0,242,0,0,0,0,0,242,242,242,242,170,0,242,242,0,170,0,0,242,242,242,242,242,242,0,242,242,242,0,0,242,0,0,242,242,242,242,242,242,242,242,242,0,242,0,242,0,0,0,0,0,242,170,0,0,0,0,0,0,242,0,242,242,242,242,242,0,242,0,228,166,229,228,229,166,230,231,232,233,234,235,166,230,231,232,233,234,235,236,237,246,248,48,239,230,231,232,233,234,235,249,228,247,241,242,166,243,244,229,170,240,245,238,250,251,236,237,246,248,48,239,230,231,232,233,234,235,249,228,247,241,242,166,243,244,229,170,240,245,238,250,251,236,237,417,418,417,236,237,239,166,48,417,239,241,242,243,244,229,170,241,241,242,243,244,229,170,242,419,236,231,241,243,240,245,0,241,243,244,228,229,228,246,48,247,48,237,0,166,241,242,170,247,419,236,231,241,243,240,245,239,418,237,248,232,232,233,234,234,235,241,241,241,241,241,166,244,244,236,237,246,246,248,48,48,239,230,231,232,233,234,235,249,228,247,247,241,242,242,166,243,244,229,170,240,245,238,250,251,236,237,246,248,48,48,48,48,239,239,239,230,231,232,233,234,235,249,228,247,241,242,166,243,244,229,170,240,245,238,250,251,48,236,237,248,48,241,240,245,236,237,248,48,241,240,245,419,242,239,166,166,236,237,246,248,48,239,230,231,232,233,234,235,249,228,247,241,242,166,243,244,229,170,240,245,238,250,251,247,236,237,246,248,48,247,241,240,245,238,250,251,237,247,241,236,230,231,249,417,241,237,248,232,232,233,234,234,235,418,241,241,241,241,241,244,244,48,48,239,245,230,419,230,232,234,236,237,248,48,228,241,229,238,250,251,48,242,241,0,246,48,247,48,417,236,230,231,249,241,243,240,245,236,249,417,241,243,245,417,236,230,231,417,241,230,231,419,236,230,231,417,0,236,230,231,417,231,419,236,230,231,249,417,241,240,166,241,0,420,420,236,237,241,243,236,239,166,245,241,0,238,48,419,0,0,0,420,241,243,236,420,241,243,417,241,242,243,244,229,170,246,48,247,242,236,237,246,248,48,239,230,231,232,233,234,235,249,228,247,241,242,166,243,244,229,170,240,245,238,250,251,236,237,246,248,48,239,230,231,232,233,234,235,249,228,247,241,242,166,243,244,229,170,240,245,238,250,251,236,237,246,248,48,239,230,231,232,233,234,235,249,228,247,241,242,166,243,244,229,170,240,245,238,250,251,239,166,236,237,248,418,237,248,232,232,233,234,234,235,241,241,241,241,241,166,244,244,237,248,232,232,233,234,234,235,418,248,232,232,233,234,234,235,418,248,232,232,234,234,418,237,248,232,232,233,234,234,235,418,241,241,241,241,241,244,244,166,421,422,423,0,0,0,0,417,418,417,417,419,419,418,419,417,418,419,417,417,417,417,419,417,417,419,417,420,420,419,420,420,417,418,418,418,418,418,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113,0,113,285,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,254,424,255,256,257,258,259,260,261,262,253,254,285,255,256,257,263,258,259,260,261,262,285,285,285,425,425,425,253,254,265,266,264,255,256,267,257,263,258,268,269,270,271,272,273,274,259,275,260,276,277,261,278,279,280,281,282,262,283,284,253,254,265,266,264,255,256,267,257,263,258,268,269,270,271,272,273,274,259,275,260,276,277,261,278,279,280,281,282,262,283,284,285,285,253,254,265,266,264,256,267,257,263,258,268,269,270,271,272,273,274,259,275,260,276,277,261,278,279,280,281,282,262,283,284,253,254,265,266,264,256,267,257,263,258,268,269,270,271,272,273,274,259,275,260,276,277,261,278,279,280,281,282,262,283,284,285,285,285,285,285,285,253,254,285,264,256,257,258,268,270,260,262,285,266,0,285,285,285,426,426,426,285,285,285,256,270,259,285,285,285,253,254,265,266,264,255,256,267,257,263,258,268,269,270,271,272,273,274,259,275,260,276,277,261,278,279,280,281,282,262,283,284,253,254,265,285,264,255,256,267,257,258,268,269,270,271,272,273,274,259,275,260,276,277,261,278,285,425,425,425,253,254,265,266,264,255,256,267,257,263,258,268,269,270,271,272,273,274,259,275,260,276,277,261,278,279,280,281,282,262,283,284,0,0,427,285,285,285,285,285,285,253,254,265,266,264,255,256,267,257,263,258,268,269,270,271,272,273,274,259,275,260,276,277,261,278,279,280,281,282,262,283,284,113,253,254,265,266,264,255,256,267,257,263,258,268,269,270,271,272,273,274,259,275,260,276,277,261,278,279,280,281,282,262,283,284,264,428,264,267,257,258,270,271,273,259,285,285,285,285,253,254,285,256,257,270,260,262,285,266,428,264,267,257,258,270,271,273,259,281,282,285,285,285,285,285,285,285,285,285,253,253,253,253,253,253,253,253,253,253,253,253,253,254,254,254,254,254,254,254,254,254,254,254,254,254,265,265,265,265,265,265,265,265,265,265,265,265,265,266,266,266,266,266,266,266,266,266,266,266,266,266,255,255,255,255,255,255,255,255,255,255,255,255,255,256,256,256,256,256,256,256,256,256,256,256,256,256,267,267,267,267,267,267,267,267,267,267,267,267,267,257,257,257,257,257,257,257,257,257,257,257,257,257,263,263,263,263,263,263,263,263,263,263,263,263,263,258,268,268,268,268,268,268,268,268,268,268,268,268,268,269,269,269,269,269,269,269,269,269,269,269,269,269,270,270,270,270,270,270,270,270,270,270,270,270,270,271,271,271,271,271,271,271,271,271,271,271,271,271,272,272,272,272,272,272,272,272,272,272,272,272,272,273,273,273,273,273,273,273,273,273,273,273,273,273,274,274,274,274,274,274,274,274,274,274,274,274,274,259,259,259,259,259,259,259,259,259,259,259,259,259,275,275,275,275,275,275,275,275,275,275,275,275,275,260,260,260,260,260,260,260,260,260,260,260,260,260,276,276,276,276,276,276,276,276,276,276,276,276,276,277,277,277,277,277,277,277,277,277,277,277,277,277,261,261,261,261,261,261,261,261,261,261,261,261,261,278,278,278,278,278,278,278,278,278,278,278,278,278,279,280,280,280,280,280,280,280,280,280,280,280,280,280,281,281,281,281,281,281,281,281,281,281,281,281,281,282,282,282,282,282,282,282,282,282,282,282,282,282,262,262,262,262,262,262,262,262,262,262,262,262,262,283,283,283,283,283,283,283,283,283,283,283,283,283,284,284,284,284,284,284,284,284,284,284,284,284,284,285,285,253,254,265,266,264,255,256,267,257,263,258,268,269,270,271,272,273,274,259,275,260,276,277,261,278,279,280,281,282,262,283,284,424,253,254,266,264,255,256,267,257,258,268,269,270,271,273,259,260,277,261,279,281,282,262,285,285,255,256,257,258,270,259,260,277,261,279,262,424,255,256,258,270,259,260,277,261,262,0,0,285,285,285,285,285,266,259,285,429,285,285,0,0,285,424,256,270,259,253,254,424,264,255,256,267,257,258,268,269,270,271,273,259,260,277,261,285,285,253,254,265,266,285,264,255,256,267,257,263,258,268,269,270,271,272,273,274,259,275,260,276,277,261,278,279,281,282,262,283,284,285,285,285,425,0,430,285,285,285,253,254,265,266,264,256,267,257,263,258,268,269,270,271,272,273,274,259,275,260,276,277,261,278,279,280,281,282,262,283,284,285,285,253,254,285,264,255,256,267,257,263,258,268,269,270,271,273,274,259,275,260,276,277,261,278,285,253,254,265,266,264,255,256,267,257,263,258,268,269,270,271,272,273,274,259,275,260,276,277,261,278,279,280,281,282,262,283,284,253,254,265,266,264,255,256,267,257,263,258,268,269,270,271,272,273,274,259,275,260,276,277,261,278,279,280,281,282,262,283,284,285,253,254,424,264,255,256,267,257,258,268,269,270,271,273,259,260,277,261,253,254,265,266,264,255,256,267,257,263,258,268,269,270,271,272,273,274,259,275,260,276,277,261,278,279,280,281,282,262,283,284,285,0,285,286,0,0,0,286,0,0,286,286,286,286,0,0,0,286,286,37,37,37,37,37,37,37,37,37,37,287,288,37,286,287,288,37,286,286,287,288,37,286,287,288,37,286,288,0,288,288,288,0,0,288,287,288,286,287,288,37,286,0,0,287,288,37,286,287,288,287,288,37,286,288,286,0,0,0,288,37,288,0,286,0,0,0,37,37,37,37,37,37,286,0,0,288,287,288,37,286,0,0,287,288,37,286,287,288,37,286,287,288,37,286,37,37,0,286,0,37,37,37,0,37,294,0,0,289,0,0,0,0,0,0,0,289,289,0,290,289,0,0,0,0,0,0,0,26,0,0,0,0,0,0,26,0,0,0,0,0,0,0,368,369,370,371,372,373,431,374,375,432,376,377,153,378,433,0,0,0,0,0,0,0,0,0,0,433,434,0,0,0,0,0,0,379,0,435,26,0,434,290,368,380,374,383,375,384,432,436,289,290,116,291,292,293,294,289,290,116,291,292,293,294,433,289,289,437,169,153,289,290,116,291,292,293,289,290,116,291,292,293,290,387,291,292,293,289,116,379,388,371,438,439,8,292,293,387,116,291,291,292,292,293,293,289,290,116,291,292,293,289,290,116,291,292,293,294,289,290,116,291,292,293,294,433,289,440,289,116,116,291,291,292,292,293,293,116,116,291,291,292,292,293,293,116,116,291,291,292,292,293,293,116,116,291,291,292,292,293,293,290,116,291,292,293,378,116,116,291,291,292,292,293,293,392,116,116,291,291,292,292,293,293,289,290,116,291,292,293,294,291,289,289,289,289,370,441,373,291,431,291,290,372,442,434,376,393,377,394,291,8,291,387,116,291,291,292,292,293,293,369,443,289,290,116,291,292,293,289,290,116,291,292,293,294,289,290,116,291,292,293,294,289,290,116,291,292,293,294,397,398,444,445,446,447,0,0,0,0,0,0,0,0,0,0,0,0,0,0,448,449,450,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,295,295,296,311,312,297,313,314,315,316,317,318,319,298,299,300,306,301,307,302,303,308,304,309,305,310,295,296,311,312,297,313,314,315,316,317,318,319,298,299,300,306,301,307,302,303,308,304,309,305,310,295,296,297,298,299,300,301,302,303,304,305,295,296,297,298,299,300,301,302,303,304,305,448,299,300,306,301,307,302,303,308,304,309,305,310,295,296,311,312,297,313,314,315,316,317,318,319,298,298,299,300,306,301,307,302,303,308,304,309,305,310,298,295,296,311,312,297,313,314,315,316,317,318,319,298,299,300,306,301,307,302,303,308,304,309,305,310,0,0,0,0,0,0,450,450,450,450,450,450,295,296,311,312,297,313,314,315,316,317,318,319,298,299,300,306,301,307,302,303,308,304,309,305,310,295,296,311,312,297,313,314,315,316,317,318,319,298,299,300,306,301,307,302,303,308,304,309,305,310,307,308,310,301,307,302,303,308,305,310,449,318,319,298,299,300,306,301,307,302,303,308,304,309,305,310,295,296,311,312,297,313,314,315,316,317,318,319,298,299,300,306,301,307,302,303,308,304,309,305,310,295,296,311,312,297,313,318,319,298,299,300,306,301,307,302,303,308,304,309,305,310,299,300,306,301,307,302,303,308,304,309,305,310,299,300,306,301,307,302,303,308,304,309,305,310,0,301,303,305,295,296,311,312,297,313,314,315,316,317,318,319,298,299,300,306,301,307,302,303,308,304,309,305,310,295,296,297,298,299,300,301,302,303,304,305,298,298,295,296,311,312,297,313,314,315,316,317,318,319,298,299,300,306,301,307,302,303,308,304,309,305,310,295,296,311,312,297,313,314,315,316,317,318,319,298,299,300,306,301,307,302,303,308,304,309,305,310,295,296,311,312,297,313,314,315,316,317,318,319,298,299,300,306,301,307,302,303,308,304,309,305,310,0,0,0,0,366,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,321,322,323,324,325,326,327,328,329,330,321,331,332,322,320,323,324,325,326,327,328,333,334,335,336,337,338,329,330,339,340,341,342,343,344,321,331,332,322,320,323,324,325,326,327,328,333,334,335,336,337,338,329,330,339,340,341,342,343,344,321,331,332,322,320,323,324,325,326,327,328,333,334,335,336,337,338,329,330,339,340,341,342,343,344,321,331,332,322,320,323,324,325,326,327,328,333,334,335,336,337,338,329,330,339,340,341,342,343,344,322,320,331,332,331,332,343,331,320,321,331,331,332,332,322,320,323,324,325,326,327,328,333,334,335,336,337,338,329,330,339,340,340,341,341,342,342,343,344,340,341,342,321,331,332,322,320,323,324,325,326,327,328,333,334,335,336,337,338,329,330,339,340,341,342,343,344,0,366,0,0,0,0,321,331,332,322,320,323,324,325,326,327,328,333,334,335,336,337,338,329,330,339,340,341,342,343,344,321,322,320,323,324,325,326,327,328,333,334,335,336,337,338,329,330,339,340,341,342,344,343,320,322,320,337,329,330,320,322,333,334,344,321,322,320,323,324,325,326,327,328,333,334,335,336,337,338,329,330,339,340,341,342,344,321,322,320,323,324,325,326,333,334,335,336,337,338,329,330,320,320,322,0,322,320,320,331,332,320,320,322,320,337,338,329,330,339,340,341,342,321,331,332,322,320,323,324,325,326,327,328,333,334,335,336,337,338,329,330,339,340,341,342,343,344,331,332,340,341,342,340,341,342,321,331,332,322,320,323,324,325,326,327,328,333,334,335,336,337,338,329,330,339,340,341,342,343,344,321,331,332,322,320,323,324,325,326,327,328,333,334,335,336,337,338,329,330,339,340,341,342,343,344,321,331,332,322,320,323,324,325,326,327,328,333,334,335,336,337,338,329,330,339,340,341,342,343,344,343,331,0,0,0,0,0,345,0,345,0,345,0,0,0,451,0,345,346,347,348,349,350,351,345,346,347,348,349,350,351,345,346,347,348,349,350,351,345,346,347,348,349,350,351,345,345,346,347,348,349,350,351,345,346,347,348,349,350,351,452,346,347,348,349,350,351,345,346,347,348,349,350,351,451,451,451,451,452,346,347,348,349,350,351,453,346,347,348,349,350,351,452,346,347,348,349,350,351,453,346,347,348,349,350,351,452,347,348,349,350,453,347,348,349,350,451,451,345,346,347,348,349,350,351,345,346,347,348,349,350,351,345,346,347,348,349,350,351,345,346,347,348,349,350,351,454,455,454,455,0,0,0,0,0,0,0,0,0,0,352,0,356,357,358,359,355,360,352,176,356,357,358,359,355,360,352,176,355,352,176,355,352,176,0,355,352,356,357,358,359,355,355,360,352,176,356,357,358,359,355,360,352,176,356,357,352,176,356,357,358,359,355,360,352,176,359,359,360,176,357,360,0,0,0,0,355,357,356,356,0,356,356,0,0,0,358,360,360,360,360,356,356,359,355,352,176,355,356,357,358,359,355,360,352,176,356,357,358,359,355,360,352,176,356,356,357,358,359,355,360,352,176,176,356,356,356,0,0,0,0,193,193,193,193,193,0,0,0,217,193,361,217,193,361,217,193,193,193,193,193,193,193,361,217,364,193,365,361,217,364,193,365,361,217,193,193,361,193,361,217,193,361,217,364,193,365,361,217,364,193,365,361,217,193,193,364,193,193,193,193,193,193,364,361,217,361,217,361,217,193,365,361,217,364,364,193,365,365,361,217,364,193,365,193,193,193,193,193,193,361,217,193,361,217,364,193,365,193,193,193,193,193,193,361,217,361,217,193,364,365,193,361,193,193,361,361,217,193,361,217,193,193,193,193,193,193,361,217,364,193,365,364,365,361,217,364,193,365,193,193,361,217,364,193,365,361,217,364,193,365],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[[2,[1]],1]],[[[2,[1]],[2,[1]]]],[[]],[[[2,[1]],[2,[1]]]],[[[2,[1]],1]],[[3,4],[[5,[4]]]],[[6,4],[[5,[4]]]],[[7,4],[[5,[4]]]],[[8,4],[[5,[4]]]],[[3,4],[[5,[4]]]],[[6,4],[[5,[4]]]],[[7,4],[[5,[4]]]],[[8,4],[[5,[4]]]],[9,10],[6,10],[7,10],[[],10],[[],10],[11],[3],[12,13],[14,14],[15,15],[9,10],[6,10],[7,10],[[16,16]],[[17,17]],[[18,18]],[[11,11]],0,[[]],[[]],0,0,0,[19],[20,21],[22],[9],[9,9],[9,23],[9,12],[9],[9,1],[9,24],[25,25],[26,26],[22],[27,4],[22],[3],[7],[11],[28,23],[12,23],[[[29,[9]]],[[9,[29,29]]]],[[[29,[9]]],[[9,[29,29]]]],[30,31],[22],[19],[32],[33],[34],[20],[20,35],[22],[9,9],[9,24],[9],[9,23],[9,12],[9],[9,1],[2],[[[2,[23]]],12],[28,23],[28,12],[25,25],[33],[20],[12,12],[12,23],[3],[6],[7],[26,26],[22],[16],[3],[6],[7],[19],[11],[36,1],0,0,0,0,0,0,0,0,[[[33,[37]]],33],[33,33],[[[20,[37]]],20],[20,20],[[],[[5,[38,39]]]],[11,38],[11,38],[[],40],[11,[[5,[4,4]]]],[11,[[5,[4,4]]]],[11,[[5,[4,4]]]],[[]],[[41,41],41],[[18,18],18],[[]],[[]],[[41,41],41],[[18,18],18],[[]],[[41,41],41],[[18,18],18],[[]],[[]],[22],[[]],[[]],[[]],[2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,23],[[]],[[]],[[]],[[]],[[]],[[]],[32,42],[[]],[33],[[]],[[]],[[]],[20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,38],[[]],[44,45],[46],[12,[[5,[47,48]]]],[22,4],[16,4],[28,4],[11,4],[[],49],[9,[[38,[50]]]],[[],[[38,[50]]]],[20,[[38,[50]]]],[4,51],[[],52],[22],[16],[17],[28],[18],[11],[53],[22,22],[9,9],[2,2],[16,16],[54,54],[41,41],[17,17],[55,55],[56,56],[57,57],[28,28],[18,18],[25,25],[58,58],[59,59],[11,11],[19,19],[32,32],[33,33],[34,34],[20,20],[3,3],[44,44],[45,45],[46,46],[6,6],[60,60],[61,61],[62,62],[8,8],[63,63],[26,26],[64,64],[65,65],[36,36],[[22,22]],[[9,9]],[[2,2]],[[16,16]],[[28,28]],[[18,18]],[[11,11]],[[32,32]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[12,47]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26,26],0,[[22,22],61],[[9,9],61],[[2,2],61],[[17,17],61],[[28,28],61],[[18,18],61],[[58,58],61],[[11,11],61],[[19,19],61],[[32,32],61],[[33,33],61],[[20,20],61],[[12,12],61],[[61,61],61],[[62,62],61],[[],66],[9],[[],38],[[],[[68,[67]]]],[4,69],[4,70],[[27,4,4,65],4],[[27,4,4,65,65],[[5,[4,4]]]],[[27,4,4,65,65],[[5,[4,4]]]],[12,71],[[]],[[9,4]],[[],10],[18,10],[[],10],[11,10],[8,10],[63,10],[17,10],[9,4],[3,4],[6,4],[7,4],[64,4],[36,4],[[],[[72,[4,44]]]],[[],[[72,[4,44]]]],[[]],[[]],[[],[[66,[[74,[73]]]]]],[[],[[66,[74]]]],[[],[[66,[75]]]],[[],[[66,[[75,[73]]]]]],[[],76],[[],[[81,[[0,[77,78,79,80]]]]]],[[],22],[[],2],[[],16],[[],[[54,[82]]]],[[],[[41,[82]]]],[[],[[17,[67]]]],[[],28],[[],[[18,[67]]]],[[],58],[[],[[11,[67]]]],[[],19],[[],32],[[],33],[[],34],[[],20],[[],83],[[],53],[[],44],[[],45],[[],46],[[],8],[[],27],[[]],[81],[22],[9],[2],[54],[41],[28,23],[33],[20],[[]],[22],[9],[54],[41],[28,23],[9,1],[[],1],[20,1],[60,1],[62,1],[[18,18],84],[12,85],[[]],[[[33,[86]]],[[5,[33,[33,[86]]]]]],[[[20,[86]]],[[5,[20,[20,[86]]]]]],[50,38],[50,38],[50,38],[50,38],[50,38],[50,38],[[[33,[86]]],33],[[[20,[86]]],20],[33,34],[20,87],[22,88],[16,89],[11,90],[17,91],[18,92],[16,93],[22],[17],[11],[33],[34],[20],[3],[4],[4],[[],[[95,[94]]]],[[],[[95,[96]]]],[[]],[9],[9],[9],[63],0,[[],26],[8,26],[8,26],[63,26],[63,26],[12,10],[17,14],[22,10],[[22,22],10],[[9,9],10],[[[2,[23]],12],10],[[2,68],10],[[2,2],10],[[[2,[1]],1],10],[[[2,[23]],23],10],[[[2,[12]],12],10],[[[2,[12]],47],10],[[[2,[23]],23],10],[[[2,[1]],1],10],[2,10],[[[2,[12]],23],10],[2,10],[[[2,[12]],28],10],[[[2,[23]],28],10],[[[2,[1]],97],10],[[[2,[12]],12],10],[[[2,[23]],47],10],[[[2,[23]],12],10],[[[2,[12]],23],10],[[54,54],10],[[41,41],10],[[17,17],10],[[28,2],10],[[28,2],10],[[28,12],10],[[28,1],10],[[28,23],10],[[28,1],10],[[28,12],10],[[28,47],10],[[28,23],10],[[28,28],10],[[18,18],10],[[25,25],10],[[58,58],10],[[11,11],10],[11,10],[11,10],[[11,68],10],[11,10],[11,10],[11,10],[[19,19],10],[[32,32],10],[[33,33],10],[[20,20],10],[[12,23],10],[[12,28],10],[[12,23],10],[[12,47],10],[[12,12],10],[[12,2],10],[[12,2],10],[[12,2],10],[[12,28],10],[[12,2],10],[[12,23],10],[[12,47],10],[[46,46],10],[[60,60],10],[[61,61],10],[[62,62],10],[[8,8],10],[[63,63],10],[[26,26],10],[[65,65],10],[[],[[5,[39]]]],[12,10],[[9,1]],[[9,1]],[22],[9],[16],[16],[54],[54],[41],[41],[17],[17],[28],[28],[28],[18],[18],[11],[11],[16],[16],[17],[17],[18],[18],[11],[11],[[16,4]],[[16,4]],[[11,4]],[[11,4]],[12,[[38,[23]]]],[[[9,[5,5]]],[[5,[9]]]],[9],[[[9,[38,38]]],[[38,[9]]]],[[[9,[5,5]]],[[5,[9]]]],[9],[[27,4,65],4],[[27,4,65],4],[[27,4,65],4],[[27,4,65],4],[[27,4,65],4],[[27,4,65],4],[[27,4,65],4],[[27,65,65],[[5,[4,4]]]],[[27,4,65],4],[12,[[38,[23]]]],[12,[[38,[23]]]],[12,[[38,[23]]]],[9,[[5,[48]]]],[[],98],[[],99],[9,38],[6,38],[7,38],[9,38],[6,38],[7,38],[[],38],[[],38],[[],38],[[],31],[45,31],[18,38],[17,[[38,[100]]]],[17,38],[[],101],[9,9],[25,25],[[[22,[102]]],[[5,[48]]]],[9,[[5,[48]]]],[[[11,[102]]],[[5,[48]]]],0,[103,[[5,[104]]]],[103,[[5,[104]]]],[[22,103],[[5,[104]]]],[[9,103],[[5,[104]]]],[[9,103],[[5,[104]]]],[[2,103],[[5,[104]]]],[[2,103],[[5,[104]]]],[[16,103],[[5,[104]]]],[[30,103],[[5,[104]]]],[[54,103],[[5,[104]]]],[[41,103],[[5,[104]]]],[[14,103],[[5,[104]]]],[[15,103],[[5,[104]]]],[[17,103],[[5,[104]]]],[[55,103],[[5,[104]]]],[[105,103],[[5,[104]]]],[[56,103],[[5,[104]]]],[[57,103],[[5,[104]]]],[[28,103],[[5,[104]]]],[[18,103],[[5,[104]]]],[[25,103],[[5,[104]]]],[[58,103],[[5,[104]]]],[[59,103],[[5,[104]]]],[[11,103],[[5,[104]]]],[[19,103],[[5,[104]]]],[[32,103],[[5,[104]]]],[[33,103],[[5,[104]]]],[[33,103],[[5,[104]]]],[[33,103],[[5,[104]]]],[[34,103],[[5,[104]]]],[[20,103],[[5,[104]]]],[[20,103],[[5,[104]]]],[[20,103],[[5,[104]]]],[[12,103],[[5,[104]]]],[[3,103],[[5,[104]]]],[[83,103],[[5,[104]]]],[[53,103],[[5,[104]]]],[[44,103],[[5,[104]]]],[[45,103],[[5,[104]]]],[[46,103],[[5,[104]]]],[[6,103],[[5,[104]]]],[[7,103],[[5,[104]]]],[[60,103],[[5,[104]]]],[[60,103],[[5,[104]]]],[[61,103],[[5,[104]]]],[[62,103],[[5,[104]]]],[[62,103],[[5,[104]]]],[[8,103],[[5,[104]]]],[[63,103],[[5,[104]]]],[[26,103],[[5,[104]]]],[[64,103],[[5,[104]]]],[[65,103],[[5,[104]]]],[[27,103],[[5,[104]]]],[[36,103],[[5,[104]]]],[9],[63],[64],[[],38],[[],5],[[],38],[[],5],[[],106],[9],[6],[7],[[]],[1,107],[1,108],[[]],[[],22],[[]],[[]],[5,9],[[],2],[[[68,[67]]],2],[12,[[2,[12]]]],[28,[[2,[23]]]],[28,[[2,[23]]]],[109,[[2,[24]]]],[68,2],[24,[[2,[24]]]],[23,[[2,[23]]]],[47,[[2,[12]]]],[47,[[2,[12]]]],[1,[[2,[1]]]],[97,[[2,[1]]]],[97,[[2,[1]]]],[109,[[2,[24]]]],[[]],[[],16],[[]],[[[68,[67]]],16],[[]],[[[72,[82]]],[[54,[82]]]],[[],[[54,[82]]]],[[]],[[[110,[82]]],[[41,[82]]]],[[]],[[],[[41,[82]]]],[[]],[[]],[[]],[[],[[17,[67]]]],[[]],[[]],[[]],[[]],[[[2,[23]]],28],[97,28],[47,28],[[]],[[[111,[23,67]]],28],[[],28],[[],[[18,[67]]]],[[]],[[]],[[]],[[]],[[],[[11,[67]]]],[68,11],[[]],[[],19],[112],[[]],[[],32],[112],[[]],[[[33,[1]]],33],[[[68,[67]]],33],[47,[[33,[12]]]],[28,[[33,[23]]]],[[[111,[67]]],33],[109,[[33,[24]]]],[97,[[33,[1]]]],[112],[[]],[[],33],[1,[[33,[1]]]],[12,[[33,[12]]]],[24,[[33,[24]]]],[2,33],[23,[[33,[23]]]],[[],33],[[]],[[[111,[67]]],20],[109,[[20,[24]]]],[97,[[20,[1]]]],[24,[[20,[24]]]],[12,[[20,[12]]]],[1,[[20,[1]]]],[112],[23,[[20,[23]]]],[2,20],[47,[[20,[12]]]],[[[20,[1]]],20],[[],20],[[]],[[[68,[67]]],20],[[],20],[28,[[20,[23]]]],[[]],[[]],[112],[[]],[[],53],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[112,62],[112],[[]],[[]],[[]],[[]],[[]],[4,27],[[]],[[]],[113,[[81,[[0,[77,78,79,80]]]]]],[[],22],[[],2],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],[[2,[1]]]],[[],16],[[],54],[[],41],[[],[[17,[67]]]],[[],28],[[],28],[[],28],[[],[[18,[67]]]],[[],[[11,[67]]]],[[],33],[[],20],[[],19],[4,27],[[]],[[],33],[[],34],[[],20],[1,5],[1,[[5,[28]]]],[[[68,[102,67]]],28],[11,38],[11,38],0,[[22,22],10],[[28,28],10],[[19,19],10],[[32,32],10],[[33,33],10],[[20,20],10],[54,38],[17,38],[18,38],[[11,4],38],[19],[[[8,[4]],1],38],[[[8,[4]]],38],[[[63,[4]],1],38],[[[63,[4]]],38],[54,38],[17,38],[54,38],[17,38],[[11,4],38],[19],[32],[33,38],[20,38],[53,[[5,[114]]]],[[[8,[4]]],38],[[[8,[4]],1],38],[[[63,[4]]],38],[[[63,[4]],1],38],[27,4],[[]],[33],[20],[[[8,[4]]]],[[[8,[4]],1]],[[[63,[4]]]],[[[63,[4]],1]],[[[8,[4]],1]],[[[8,[4]]]],[[[63,[4]]]],[[[63,[4]],1]],[[],115],[[22,22],10],[[28,28],10],[[19,19],10],[[32,32],10],[[33,33],10],[[20,20],10],[25,10],[25,10],[12,10],0,[[]],[22],[9],[2],[17],[28],[18],[25],[58],[11],[33],[20],[12],[61],[62],[8],[63],[26],[65],[[],31],[[]],[[]],[[]],[[]],[[[81,[[0,[78,79,80]]]]],4],[54],[17],[[28,116],23],[[11,4]],[[[8,[4]],1]],[[[8,[4]]]],[[[63,[4]]]],[[[63,[4]],1]],[[]],[[28,116],23],[[11,4]],[[[8,[4]]]],[[[8,[4]],1]],[[[63,[4]],1]],[[[63,[4]]]],[[[81,[[0,[77,78,79,80]]]],[0,[77,78,79,80]]],4],[[22,4]],[54,38],[17,38],[18,10],[[11,4]],[15,117],[[],118],[[],119],[[18,18],120],[[],[[122,[121]]]],[[],122],[[]],[[]],[[]],[9,5],[[]],[[]],[[]],[[]],[[[54,[82]]],[[72,[82]]]],[[]],[[[41,[82]]],[[110,[82]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,[[38,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,[[111,[23,67]]]],[[]],[[],[[72,[[68,[67]],44]]]],[[],[[72,[[68,[67]],44]]]],[[],123],[[],[[123,[124]]]],[22,[[5,[22]]]],[9],[19],[32],[53,[[5,[114]]]],[63],[27,4],[22],[22],[22,125],[22],[[]],[9,9],[16,126],[16,127],[54],[54],[54],[41],[41],[17,105],[17,128],[17,55],[[]],[[]],[[]],[[]],[18,129],[18,130],[[]],[11,131],[11,132],[11,133],[12,134],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,135],[17,136],[2],[[[111,[12,67]]],47],[30,31],[33],[34],[20],[7],[16,[[68,[67]]]],[28,[[5,[97,28]]]],[17,137],[16,[[68,[67]]]],[28,[[68,[102,67]]]],0,[50,10],[50,10],[50,10],[12,10],[2,10],[25,10],[12,10],[[18,18],10],[[[81,[[0,[77,78,79,80]]]]],10],[22,10],[16,10],[17,10],[18,10],[11,10],[3,10],[6,10],[7,10],[8,10],[63,10],[61,10],[12,10],[30,10],[22,10],[61,10],[61,10],[61,10],[9,10],[25,10],[61,10],[61,10],[2,10],[53,10],[12,10],[9,10],[25,10],[8,10],[63,10],[6,10],[[18,18],10],[[18,18],10],[12,10],0,[16,127],[17,55],[18,129],[11,133],[12,134],[17,105],[11,131],0,0,[30,[[5,[[111,[86,67]]]]]],[1,97],[12,47],[4,[[3,[67]]]],[14],[15],[17,56],[60,138],[[],[[140,[139]]]],[[],140],[9,38],[55,38],[105,38],[56,38],[57,38],[18,38],[6,38],[7,38],[8,38],[63,38],[64,38],[36,[[38,[141]]]],[17,[[38,[100]]]],[17,38],[[22,22],10],[[28,28],10],[[19,19],10],[[32,32],10],[[33,33],10],[[20,20],10],[9,38],[25,38],[9,9],[25,25],[9],[9],[9],[[[81,[[0,[77,78,79,80]]]]],4],[22,4],[9,4],[16,4],[17,4],[55,4],[105,4],[56,4],[57,4],[18,4],[11,4],[6,4],[7,4],[[27,65],4],[53,[[5,[142,[114,[142]]]]]],[[22,22],10],[[28,28],10],[[19,19],10],[[32,32],10],[[33,33],10],[[20,20],10],[11],[33],[20],[9,9],[26,26],[25,25],[[],[[144,[143]]]],[9,9],[25,25],[[],[[144,[145]]]],[[],[[144,[145]]]],[9,9],[25,25],[55,38],[105,38],[56,38],[8,38],[63,38],[[],[[68,[67]]]],[[],[[68,[67]]]],[[],[[68,[67]]]],0,[[],[[147,[146]]]],[[],147],[[],148],[12,[[5,[149,48]]]],[55,38],[105,38],[56,38],[8,38],[63,38],[[],[[68,[67]]]],[[],[[68,[67]]]],[[],[[68,[67]]]],[[],150],[[],150],[[],150],[[]],[[],151],[[],59],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,68],10],[2,10],[[[2,[1]],1],10],[2,10],[[[2,[1]],1],10],[[[2,[1]],97],10],[[33,33],10],[[20,20],10],[[]],[[],[[81,[[0,[77,78,79,80]]]]]],[[],22],[[],16],[[],[[54,[82]]]],[[],[[41,[82]]]],[[],[[17,[67]]]],[[],28],[[],[[18,[67]]]],[[],[[11,[67]]]],[[],19],[[],32],[[],33],[[],34],[[],20],[[],12],[[],83],[[],53],[[],44],[[],45],[[],63],[4,27],[[],22],[[],33],[[],20],[[],17],[[],18],[[],11],[[],[[33,[37]]]],[[],[[20,[37]]]],[4,33],[4,20],[[],[[33,[37]]]],[[],[[20,[37]]]],[4,33],[4,20],[9,38],[55,38],[105,38],[56,38],[57,38],[59,38],[3,38],[6,38],[7,38],[8,38],[63,38],[64,38],[36,[[38,[141]]]],[9,38],[55,38],[105,38],[56,38],[57,38],[3,38],[6,38],[7,38],[8,38],[63,38],[64,38],[36,[[38,[141]]]],[3,[[5,[152]]]],[[64,153],38],[64,38],[[],38],[83],[83],[[9,4],38],[[6,4],38],[[7,4],38],[[8,4],38],[[63,4],38],[[64,4],38],[[6,4],38],[[7,4],38],[[8,4],38],[[63,4],38],0,0,[5],0,[25],[14],[15],[25],[25],[14],[15],[14],[15],[14],[15],[4,154],[12,[[38,[12]]]],[[22,22],[[38,[61]]]],[[9,9],[[38,[61]]]],[[[2,[12]],47],[[38,[61]]]],[[[2,[12]],12],[[38,[61]]]],[[[2,[23]],23],[[38,[61]]]],[[2,2],[[38,[61]]]],[[[2,[23]],12],[[38,[61]]]],[[[2,[23]],47],[[38,[61]]]],[[[2,[12]],12],[[38,[61]]]],[[[2,[23]],28],[[38,[61]]]],[[[2,[23]],23],[[38,[61]]]],[[[2,[12]],23],[[38,[61]]]],[[[2,[12]],28],[[38,[61]]]],[[[2,[12]],23],[[38,[61]]]],[[[2,[23]],12],[[38,[61]]]],[[17,17],[[38,[61]]]],[[28,12],[[38,[61]]]],[[28,28],[[38,[61]]]],[[28,12],[[38,[61]]]],[[28,47],[[38,[61]]]],[[28,2],[[38,[61]]]],[[28,23],[[38,[61]]]],[[28,23],[[38,[61]]]],[[28,2],[[38,[61]]]],[[28,1],[[38,[61]]]],[[18,18],[[38,[61]]]],[[58,58],[[38,[61]]]],[[11,11],[[38,[61]]]],[[19,19],[[38,[61]]]],[[32,32],[[38,[61]]]],[[33,33],[[38,[61]]]],[[20,20],[[38,[61]]]],[[12,28],[[38,[61]]]],[[12,23],[[38,[61]]]],[[12,47],[[38,[61]]]],[[12,47],[[38,[61]]]],[[12,12],[[38,[61]]]],[[12,2],[[38,[61]]]],[[12,2],[[38,[61]]]],[[12,23],[[38,[61]]]],[[12,2],[[38,[61]]]],[[12,2],[[38,[61]]]],[[12,23],[[38,[61]]]],[[12,28],[[38,[61]]]],[[61,61],[[38,[61]]]],[[62,62],[[38,[61]]]],[9],[[]],[11,4],[[]],[16,38],[59,38],[64,38],[16,[[38,[155]]]],[64,38],[59,38],[6,38],[64,38],[36,38],[[],156],[4,157],[[],[[29,[33]]]],[[],[[29,[20]]]],[[[29,[9]],158],159],[22,38],[16,38],[[22,4],38],[11,38],[17,38],[18,38],[11,38],[17,38],[18,38],[9,[[38,[4]]]],[6,[[38,[4]]]],[7,[[38,[4]]]],[[],[[38,[4]]]],[[],[[38,[4]]]],[[],[[38,[4]]]],[[],[[38,[4]]]],[[],[[38,[4]]]],[[],[[38,[4]]]],[[],[[150,[4]]]],[[],[[150,[4]]]],[[],[[150,[4]]]],[[],160],[[],161],[[],38],[162],[162],[162],[[20,162]],[162],[162],[[33,33],10],[[34,34],10],[[20,20],10],[22],[16],[28],[11],[11],[22],[17,163],[18,164],[11,133],[17,165],[11,131],[9,[[5,[4,48]]]],[[[11,[102]]],[[5,[4,48]]]],[[[11,[102]],166],[[5,[48]]]],[12,[[5,[167,48]]]],[9,[[5,[48]]]],[[9,97],[[5,[4,48]]]],[12,[[5,[47,48]]]],[[9,68],[[5,[4,48]]]],[[9,97],[[5,[4,48]]]],[[9,102,68],[[5,[4,48]]]],[25],[[]],[22,4],[[22,4]],[54,38],[17,38],[18,10],[[11,4],38],[17,38],[18,38],[19],[32],[32],[62,168],[50,38],[50,38],[50,38],[50,38],[50,38],[50,38],[[16,4]],[[28,4]],[[11,4]],[[16,4]],[[28,4]],[[11,4]],[59],[[11,4]],[[11,4,169]],[22],[16],[17],[18],[11],[11],[61,61],[9,38],[9],[63],[64],[9,38],[25,38],[9,9],[25,25],[9],[9],[9],[[11,4]],[[11,4]],[6,[[38,[4]]]],[7,[[38,[4]]]],[[9,170],[[5,[31,48]]]],[19],[[],4],[[22,4]],[[]],[[]],[[]],[[]],[[16,4]],[[28,4]],[[11,4]],[16],[28],[11],[9],[55],[105],[56],[57],[59],[3],[6],[7],[8],[63],[64],[36],0,0,0,[[],[[3,[67]]]],[[],[[3,[67]]]],[[],[[3,[67]]]],[[],[[3,[67]]]],[[],[[3,[67]]]],[[],[[3,[67]]]],[[],[[3,[67]]]],[9,[[38,[50]]]],[[],[[38,[50]]]],[20,[[38,[50]]]],[50,171],[17,17],[18,18],[[11,4],11],[63],0,[[],26],[8,26],[8,26],[63,26],[63,26],[12,10],[4,172],[[27,4,65]],0,[12,[[5,[12,173]]]],[33,4],[34,4],[20,4],[[]],[[41,41],41],[[18,18],18],[[],38],[[11,4,4]],[[19,19]],[[32,32]],[[27,4,65],4],[[22,4],38],[[22,4]],[[11,4],38],[[11,4],38],[12,[[5,[149,48]]]],[[18,18],174],[22,22],[18,38],[19],[32],[[],175],[[]],[[61,61],61],[61,61],0,[30,176],0,[2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,47],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[12,47],[12,[[38,[1]]]],[[],97],[[],97],[[[2,[1]]],97],[[],97],[[],97],[[],97],[[],97],[12,[[2,[1]]]],[[],38],[[22,4]],[[11,4]],[[],5],[[],5],[32,[[5,[42,177]]]],[32,[[5,[43,178]]]],[32,[[5,[177]]]],[[],5],[12,[[5,[10,48]]]],[22,[[5,[179]]]],[63],[64],[[],5],[[],5],[[],[[5,[22]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[33,[[5,[33]]]],[[],5],[[],5],[20,[[5,[20]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[22,4],[[5,[179]]]],[17,[[5,[180]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[53,[[5,[142,[181,[142]]]]]],[[],[[5,[33,182]]]],[[],[[5,[20,182]]]],[[],[[5,[[33,[37]],182]]]],[[],[[5,[[20,[37]],182]]]],[[],[[5,[[33,[37]],182]]]],[[],[[5,[[20,[37]],182]]]],[[],[[5,[[29,[20]],182]]]],[22,[[5,[179]]]],[[16,4],[[5,[183]]]],[[28,4],[[5,[183]]]],[[11,4],[[5,[183]]]],[[16,4],[[5,[183]]]],[[28,4],[[5,[183]]]],[[11,4],[[5,[183]]]],[63],[64],[33,[[5,[33]]]],[20,[[5,[20]]]],[[],184],[[],185],[[],186],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[32],[[18,18],188],[[],189],[[],190],[142],[9],[33],[20],[9],[[],191],[19],[34,[[38,[33]]]],[17,57],[17,192],[[83,142],[[5,[142,[114,[142]]]]]],[[83,142,193],[[5,[114]]]],[[83,142,194],[[5,[114]]]],[[83,142,193],[[5,[114]]]],[[83,142],[[5,[142,[114,[142]]]]]],[33,4],[34,4],[20,4],[[],195],[4,16],[4,[[54,[82]]]],[4,[[41,[82]]]],[4,28],[4,[[11,[67]]]],[4,54],[4,41],[4,11],[12,47],[12,47],[[],54],[[],41],[[],196],0,0,0,0,[[]],[[[22,[102]]],[[5,[4,48]]]],[9,[[5,[4,48]]]],[[[11,[102]]],[[5,[4,48]]]],[45],[9,[[5,[48]]]],[[[11,[102]]],[[5,[48]]]],[[9,197],[[5,[48]]]],[198],[199],[35],[200],[201],[202],[4],[[28,1],[[5,[104]]]],[[45,1]],[1],[203],[204],[194],[31],[102],[4],[[],205],[[],206],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[152,4],[[5,[4]]]],[[152,4],[[5,[4]]]],[152],[152],[[]],[[]],[[]],[[]],[152,152],[207,207],[[]],[[]],[152,4],[207,1],[152],[[],152],[[152,103],[[5,[104]]]],[[207,103],[[5,[104]]]],[[207,103],[[5,[104]]]],[152],[[]],[62,207],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[152,10],[152,38],[152,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],152],[[[8,[4]]],152],[152,38],[152,38],[162],[152],[152],[[]],[[]],[[],97],[[],5],[[],5],[[]],[[],5],[[],5],[[],187],[[],187],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[208,208],[[208,208]],[[]],[[],61],[[208,208],61],[[],208],[[],10],[[208,208],10],[[208,103],[[5,[104]]]],[[]],[[],10],[[208,208],10],[[],10],[[208,208],10],[208],[[]],[[],10],[[208,208],10],[[],10],[[208,208],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],[[38,[61]]]],[[208,208],[[38,[61]]]],[[]],[[],5],[[],5],[[],187],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[103,[[38,[209]]]],[103,10],[197,[[38,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[209,209],[104,104],[197,197],[[]],[[]],[[]],[[104,104],61],[103,210],[103,211],[103,212],[[103,1],213],[[103,1],214],[[],104],[104,1],[212,212],[210,210],[211,211],[[212,215],212],[[210,215],210],[[211,215,215],211],[[209,209],10],[[104,104],10],[[213,1,215],213],[[214,215],214],[103,141],[213,[[5,[104]]]],[214,[[5,[104]]]],[212,[[5,[104]]]],[210,[[5,[104]]]],[211,[[5,[104]]]],[213,[[5,[104]]]],[103,194],[103,[[5,[104]]]],[103,[[5,[104]]]],[103,[[5,[104]]]],[103,[[5,[104]]]],[103,[[5,[104]]]],[103,[[5,[104]]]],[103,[[5,[104]]]],[103,[[5,[104]]]],[103,[[5,[104]]]],[[209,103],[[5,[104]]]],[[104,103],[[5,[104]]]],[[104,103],[[5,[104]]]],[[197,103],[[5,[104]]]],[[197,103],[[5,[104]]]],[197,97],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[104],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[211,215],211],[[103,1],[[5,[104]]]],[[103,10,1,1],[[5,[104]]]],[[104,104],[[38,[61]]]],[103,[[38,[4]]]],[162],[103,10],[103,10],[103,10],[[]],[[]],[[]],[[],97],[[],97],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[211,215],211],[103,[[38,[4]]]],[[216,197],[[5,[104]]]],[141,[[5,[104]]]],[[103,141],[[5,[104]]]],[197,[[5,[104]]]],[[103,197],[[5,[104]]]],[[103,197],[[5,[104]]]],[1,[[5,[104]]]],[[103,1],[[5,[104]]]],[[103,1],[[5,[104]]]],0,0,0,0,0,0,0,0,0,[149,[[5,[217,48]]]],[[218,10],218],[219,21],[219,35],[149,220],[149,200],[149,200],[149,31],[149,31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[5,[47,48]]]],[149,149],[218,218],[221,221],[222,222],[223,223],[[]],[[]],[[]],[[]],[[]],[[],[[5,[31,48]]]],[[],[[5,[219,48]]]],[[218,10],218],[224,[[5,[48]]]],[[],[[5,[48]]]],[[],[[5,[48]]]],[[],[[5,[219,48]]]],[[218,10],218],[149,[[5,[217,48]]]],[149,200],[149,200],[[218,35],218],[[],221],[149,31],[[222,222],10],[[223,223],10],[225,28],[225,23],[225,[[5,[223,48]]]],[149,223],[219,[[5,[48]]]],[219,[[5,[48]]]],[[219,103],[[5,[104]]]],[[225,103],[[5,[104]]]],[[149,103],[[5,[104]]]],[[167,103],[[5,[104]]]],[[218,103],[[5,[104]]]],[[221,103],[[5,[104]]]],[[222,103],[[5,[104]]]],[[223,103],[[5,[104]]]],[[224,103],[[5,[104]]]],[[]],[226,219],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[194,222],[35,219],[149,194],[[],[[5,[48]]]],[223],[225,31],[149,31],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[219,35],[223,10],[223,10],[149,10],[223,10],[223,10],[149,10],[223,10],[219,10],[219,10],[223,10],[149,10],[223,10],[219,10],[219,10],[149,31],[[],[[5,[149,48]]]],[219,[[5,[149,48]]]],[225,[[5,[149,48]]]],[149,194],[[218,194],218],[222,194],[[224,194],224],[149,[[5,[217,48]]]],[149,200],[149,200],[[],218],[[],221],[[],224],[167,[[38,[[5,[225,48]]]]]],[149,31],[[],[[5,[219,48]]]],[218,[[5,[219,48]]]],[[],218],[225,47],[149,222],[149,31],[[],[[5,[[68,[102,67]],48]]]],[219,[[5,[4,48]]]],[219,[[5,[4,48]]]],[[218,10],218],[[219,31],[[5,[4,48]]]],[[219,166],[[5,[48]]]],[[219,166],[[5,[48]]]],[[],[[5,[167,48]]]],[[],[[5,[47,48]]]],[[219,68],[[5,[4,48]]]],[[219,68],[[5,[4,48]]]],[[],[[5,[97,48]]]],[[219,97],[[5,[4,48]]]],[[219,97],[[5,[4,48]]]],[219,[[5,[4,48]]]],[219,[[5,[4,48]]]],[222,10],[[224,10],224],[[],[[5,[48]]]],[[],[[5,[48]]]],[[],[[5,[48]]]],[[],[[5,[48]]]],[[219,170],[[5,[31,48]]]],[[219,170],[[5,[31,48]]]],[[221,217],221],[[219,31],[[5,[48]]]],[[222,194]],[[219,217],[[5,[48]]]],[[221,217],221],[222,[[5,[48]]]],[[219,222],[[5,[48]]]],[[222,10]],[[219,221],[[5,[48]]]],[149,31],[[],[[5,[48]]]],[149,200],[149,200],[149,31],[149,31],[149,200],[149,200],[149,31],[149,194],[149,31],[149,194],[149,200],[149,200],[149,31],[149,31],[149,31],[149,194],[[],[[5,[149,48]]]],[219,[[5,[48]]]],[219,[[5,[48]]]],[[]],[[]],[[]],[[]],[[]],[[218,10],218],[219,[[5,[219,48]]]],[[],[[5,[10,48]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[149,194],[[],[[5,[48]]]],[219,[[5,[4,48]]]],[219,[[5,[4,48]]]],[[218,10],218],[[219,31],[[5,[4,48]]]],[219,[[5,[4,48]]]],[219,[[5,[4,48]]]],0,0,0,0,0,0,0,[[]],[[]],[[]],[227,227],[[]],[[],227],[[],31],[227,31],[[227,103],[[5,[104]]]],[[]],[[]],[[],31],[[]],[[]],[[],227],[[31,31],227],[[]],[[],5],[[],5],[[],187],[[]],[227],[198],[199],[35],[200],[201],[202],[4],[1],[[227,1]],[203],[204],[194],[31],[102],[4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[228,4]],[[166,4],166],[[229,4]],[4],[4],[166],[230,21],[231,21],[232,21],[233,21],[234,21],[235,21],[166],[230,35],[231,35],[232,35],[233,35],[234,35],[235,35],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[236],[237],[[]],[[]],[[],238],[236,4],[237,4],[239,4],[166,4],[48,[[38,[50]]]],[[],240],[239,239],[241,241],[242,242],[243,243],[244,244],[229,229],[170,170],[[241,241]],[[]],[[]],[[]],[[]],[[]],[[]],[[242,242],61],[4],[[236,4]],[[231,4]],[[241,4]],[[243,4]],[[240,4]],[[245,4]],[[],[[5,[31,48]]]],[[],241],[[],243],[[],244],[228],[229],[228],[246,1],[48,1],[247,1],[48,[[5,[[111,[67]],48]]]],[237],[[],243],[166,166],[[241,241],10],[[242,242],10],[[170,170],10],[247,48],[[],[[5,[48]]]],[236,[[5,[48]]]],[231,[[5,[48]]]],[241,[[5,[48]]]],[243,[[5,[48]]]],[240,[[5,[48]]]],[245,[[5,[48]]]],[239],[[],[[5,[48]]]],[237,[[5,[48]]]],[248,[[5,[48]]]],[232,[[5,[48]]]],[232,[[5,[48]]]],[233,[[5,[48]]]],[234,[[5,[48]]]],[234,[[5,[48]]]],[235,[[5,[48]]]],[[[241,[[68,[102]]]]],[[5,[48]]]],[241,[[5,[48]]]],[241,[[5,[48]]]],[[[241,[111]]],[[5,[48]]]],[[[241,[68]]],[[5,[48]]]],[166,[[5,[48]]]],[244,[[5,[48]]]],[244,[[5,[48]]]],[[236,103],[[5,[104]]]],[[237,103],[[5,[104]]]],[[246,103],[[5,[104]]]],[[246,103],[[5,[104]]]],[[248,103],[[5,[104]]]],[[48,103],[[5,[104]]]],[[48,103],[[5,[104]]]],[[239,103],[[5,[104]]]],[[230,103],[[5,[104]]]],[[231,103],[[5,[104]]]],[[232,103],[[5,[104]]]],[[233,103],[[5,[104]]]],[[234,103],[[5,[104]]]],[[235,103],[[5,[104]]]],[[249,103],[[5,[104]]]],[[228,103],[[5,[104]]]],[[247,103],[[5,[104]]]],[[247,103],[[5,[104]]]],[[241,103],[[5,[104]]]],[[242,103],[[5,[104]]]],[[242,103],[[5,[104]]]],[[166,103],[[5,[104]]]],[[243,103],[[5,[104]]]],[[244,103],[[5,[104]]]],[[229,103],[[5,[104]]]],[[170,103],[[5,[104]]]],[[240,103],[[5,[104]]]],[[245,103],[[5,[104]]]],[[238,103],[[5,[104]]]],[[250,103],[[5,[104]]]],[[251,103],[[5,[104]]]],[[]],[[]],[[]],[[]],[247,48],[242,48],[252,48],[[]],[[],239],[[],239],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[35,48],[236],[237],[248],[48,[[38,[50]]]],[241],[240],[245],[236],[237],[248],[48,[[38,[50]]]],[241],[240],[245],[[],[[5,[10,48]]]],[242],[239,4],[166],[166],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[247,48],[236],[237,[[5,[[247,[237]]]]]],[246,[[68,[102,67]]]],[248,[[5,[[247,[248]]]]]],[48,[[38,[[111,[50,67]]]]]],[247],[241],[240],[245],[[]],[[]],[[]],[237],[247],[241,10],[236,10],[230,10],[231,10],[249,10],[[],10],[241,10],[237,10],[248,10],[232,10],[232,10],[233,10],[234,10],[234,10],[235,10],[[],10],[[[241,[68]]],10],[[[241,[[68,[102]]]]],10],[241,10],[241,10],[[[241,[111]]],10],[244,10],[244,10],[48,242],[[],48],[239,4],[245,31],[230,[[251,[231]]]],[[],251],[230,231],[232,233],[234,235],[[],236],[[],237],[[],248],[242,48],[[],228],[[],241],[[],229],[238,[[38,[[5,[102,48]]]]]],[250,[[38,[[5,[[68,[102,67]],48]]]]]],[251,[[38,[[5,[97,48]]]]]],[[],48],[[242,242],[[38,[61]]]],[241,31],0,[162],[162],[162],[48,[[38,[35]]]],[[],[[5,[4,48]]]],[236,[[5,[4,48]]]],[230,[[5,[4,48]]]],[231,[[5,[4,48]]]],[249,[[5,[4,48]]]],[241,[[5,[4,48]]]],[243,[[5,[4,48]]]],[240,[[5,[4,48]]]],[245,[[5,[4,48]]]],[[236,166],[[5,[48]]]],[[249,166],[[5,[48]]]],[166,[[5,[48]]]],[[241,166],[[5,[48]]]],[[243,166],[[5,[48]]]],[[245,166],[[5,[48]]]],[166,[[5,[48]]]],[236,[[5,[48]]]],[230,[[5,[48]]]],[231,[[5,[48]]]],[[],[[5,[48]]]],[241,[[5,[48]]]],[[230,97],[[5,[4,48]]]],[[231,97],[[5,[4,48]]]],[97,[[5,[4,48]]]],[[236,68],[[5,[4,48]]]],[[230,68],[[5,[4,48]]]],[[231,68],[[5,[4,48]]]],[68,[[5,[4,48]]]],[[],[[5,[97,48]]]],[[236,97],[[5,[4,48]]]],[[230,97],[[5,[4,48]]]],[[231,97],[[5,[4,48]]]],[97,[[5,[4,48]]]],[[231,102,68],[[5,[4,48]]]],[[102,68],[[5,[4,48]]]],[236,[[5,[4,48]]]],[230,[[5,[4,48]]]],[231,[[5,[4,48]]]],[249,[[5,[4,48]]]],[[],[[5,[4,48]]]],[241,[[5,[4,48]]]],[240,[[5,[4,48]]]],[166,166],[241],[102,249],[[],[[5,[48]]]],[170,[[5,[31,48]]]],[[236,170],[[5,[31,48]]]],[[237,170],[[5,[31,48]]]],[[241,170],[[5,[31,48]]]],[[243,170],[[5,[31,48]]]],[[236,200],[[5,[48]]]],[[239,4],239],[[166,4],166],[[245,31]],[[241,31]],[[],244],[238],[48,[[38,[50]]]],[102,250],[[],234],[[],230],[[],232],[[],[[5,[31,48]]]],[241,[[5,[31,48]]]],[243,[[5,[31,48]]]],[236,[[5,[31,48]]]],[[],[[5,[31,48]]]],[241,[[5,[31,48]]]],[243,[[5,[31,48]]]],[31,245],[[]],[[]],[[]],[[]],[[]],[[]],[[],97],[[],97],[[],97],[[],97],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[239,166],[166],[4,236],[4,237],[4,248],[[],[[5,[4,48]]]],[237,[[5,[4,48]]]],[248,[[5,[4,48]]]],[232,[[5,[4,48]]]],[232,[[5,[4,48]]]],[233,[[5,[4,48]]]],[234,[[5,[4,48]]]],[234,[[5,[4,48]]]],[235,[[5,[4,48]]]],[[[241,[[68,[102]]]]],[[5,[4,48]]]],[241,[[5,[4,48]]]],[[[241,[111]]],[[5,[4,48]]]],[[[241,[68]]],[[5,[4,48]]]],[241,[[5,[4,48]]]],[166,[[5,[4,48]]]],[244,[[5,[4,48]]]],[244,[[5,[4,48]]]],[237,[[5,[48]]]],[248,[[5,[48]]]],[232,[[5,[48]]]],[232,[[5,[48]]]],[233,[[5,[48]]]],[234,[[5,[48]]]],[234,[[5,[48]]]],[235,[[5,[48]]]],[[],[[5,[48]]]],[248,[[5,[48]]]],[232,[[5,[48]]]],[232,[[5,[48]]]],[233,[[5,[48]]]],[234,[[5,[48]]]],[234,[[5,[48]]]],[235,[[5,[48]]]],[[],[[5,[48]]]],[[248,197],[[5,[48]]]],[[232,197],[[5,[48]]]],[[232,197],[[5,[48]]]],[[234,197],[[5,[48]]]],[[234,197],[[5,[48]]]],[197,[[5,[48]]]],[237,[[5,[4,48]]]],[248,[[5,[4,48]]]],[232,[[5,[4,48]]]],[232,[[5,[4,48]]]],[233,[[5,[4,48]]]],[234,[[5,[4,48]]]],[234,[[5,[4,48]]]],[235,[[5,[4,48]]]],[[],[[5,[4,48]]]],[241,[[5,[4,48]]]],[[[241,[68]]],[[5,[4,48]]]],[241,[[5,[4,48]]]],[[[241,[[68,[102]]]]],[[5,[4,48]]]],[[[241,[111]]],[[5,[4,48]]]],[244,[[5,[4,48]]]],[244,[[5,[4,48]]]],[166,4],0,0,0,0,0,0,0,[[]],[[]],[[],238],[[],240],[4],[[],[[5,[48]]]],[[],[[5,[48]]]],[[],[[5,[10,48]]]],[[],10],[[],10],[[],251],[[],[[5,[4,48]]]],[166,[[5,[48]]]],[166,[[5,[48]]]],[[],[[5,[48]]]],[97,[[5,[4,48]]]],[68,[[5,[4,48]]]],[97,[[5,[4,48]]]],[[102,68],[[5,[4,48]]]],[[],[[5,[4,48]]]],[[],[[5,[48]]]],[170,[[5,[31,48]]]],[102,250],[[],[[5,[31,48]]]],[[],[[5,[31,48]]]],[31,245],[[],[[5,[4,48]]]],[[],[[5,[48]]]],[[],[[5,[48]]]],[197,[[5,[48]]]],[[],[[5,[4,48]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[253,4],[[5,[4]]]],[[254,4],[[5,[4]]]],[4,[[5,[4]]]],[[255,4],[[5,[4]]]],[[256,4],[[5,[4]]]],[[257,4],[[5,[4]]]],[[258,4],[[5,[4]]]],[[259,4],[[5,[4]]]],[[260,4],[[5,[4]]]],[[261,4],[[5,[4]]]],[[262,4],[[5,[4]]]],[[253,4],[[5,[4]]]],[[254,4],[[5,[4]]]],[4,[[5,[4]]]],[[255,4],[[5,[4]]]],[[256,4],[[5,[4]]]],[[257,4],[[5,[4]]]],[[263,4],[[5,[4]]]],[[258,4],[[5,[4]]]],[[259,4],[[5,[4]]]],[[260,4],[[5,[4]]]],[[261,4],[[5,[4]]]],[[262,4],[[5,[4]]]],[[],10],[[],10],[[],264],[4],[4,38],[4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],256],[253,253],[254,254],[265,265],[266,266],[264,264],[256,256],[267,267],[257,257],[263,263],[258,258],[268,268],[269,269],[270,270],[271,271],[272,272],[273,273],[274,274],[259,259],[275,275],[260,260],[276,276],[277,277],[261,261],[278,278],[279,279],[280,280],[281,281],[282,282],[262,262],[283,283],[284,284],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],267],[[],61],[[],61],[[]],[[]],[[],257],[253,4],[254,4],[[],4],[264,4],[256,4],[257,4],[258,4],[268,4],[270,4],[260,4],[262,4],[[],263],[[],266],[[],266],[[],258],[[],10],[[],10],[[]],[[]],[4],[[],268],[[],269],[[],38],[256,38],[270,38],[259,38],[[],38],[[],253],[[],254],[[253,103],[[5,[104]]]],[[254,103],[[5,[104]]]],[[265,103],[[5,[104]]]],[[266,103],[[5,[104]]]],[[264,103],[[5,[104]]]],[[255,103],[[5,[104]]]],[[256,103],[[5,[104]]]],[[267,103],[[5,[104]]]],[[257,103],[[5,[104]]]],[[263,103],[[5,[104]]]],[[258,103],[[5,[104]]]],[[268,103],[[5,[104]]]],[[269,103],[[5,[104]]]],[[270,103],[[5,[104]]]],[[271,103],[[5,[104]]]],[[272,103],[[5,[104]]]],[[273,103],[[5,[104]]]],[[274,103],[[5,[104]]]],[[259,103],[[5,[104]]]],[[275,103],[[5,[104]]]],[[260,103],[[5,[104]]]],[[276,103],[[5,[104]]]],[[277,103],[[5,[104]]]],[[261,103],[[5,[104]]]],[[278,103],[[5,[104]]]],[[279,103],[[5,[104]]]],[[280,103],[[5,[104]]]],[[281,103],[[5,[104]]]],[[282,103],[[5,[104]]]],[[262,103],[[5,[104]]]],[[283,103],[[5,[104]]]],[[284,103],[[5,[104]]]],[253],[254],[265],[[]],[264],[255],[256],[267],[257],[258],[268],[269],[270],[271],[272],[273],[274],[259],[275],[260],[276],[277],[261],[278],[[]],[4],[4,38],[4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],280],[[],285],[[]],[[],270],[[],10],[[],10],[[],271],[[],272],[[],265],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[264,[[38,[152]]]],[[],10],[264,10],[267,10],[257,10],[258,10],[270,10],[271,10],[273,10],[259,10],[[],10],[[],10],[[],10],[[],10],[253,38],[254,38],[[],38],[256,38],[257,38],[270,38],[260,38],[262,38],[[],10],[266,4],[[],4],[264,4],[267,4],[257,4],[258,4],[270,4],[271,4],[273,4],[259,4],[281,4],[282,4],[[],10],[[],273],[[],274],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],38],[253,38],[254,38],[265,38],[266,38],[264,38],[255,38],[256,38],[267,38],[257,38],[263,38],[258,38],[268,38],[269,38],[270,38],[271,38],[272,38],[273,38],[274,38],[259,38],[275,38],[260,38],[276,38],[277,38],[261,38],[278,38],[279,38],[280,38],[281,38],[282,38],[262,38],[283,38],[284,38],[[],38],[253,38],[254,38],[266,38],[264,38],[255,38],[256,38],[267,38],[257,38],[258,38],[268,38],[269,38],[270,38],[271,38],[273,38],[259,38],[260,38],[277,38],[261,38],[279,38],[281,38],[282,38],[262,38],[[],[[5,[152]]]],[4,38],[[255,4],38],[[256,4],38],[[257,4],38],[[258,4],38],[[270,4],38],[[259,4],38],[[260,4],38],[[277,4],38],[[261,4],38],[[279,4],38],[[262,4],38],[4,38],[[255,4],38],[[256,4],38],[[258,4],38],[[270,4],38],[[259,4],38],[[260,4],38],[[277,4],38],[[261,4],38],[[262,4],38],[[],281],[[],282],[[],[[38,[61]]]],[[],[[38,[61]]]],[[]],[[],4],[[],64],[266,38],[259,38],[[],[[38,[4]]]],[[]],[[]],[[],38],[[],262],[[],283],[[],259],[[],38],[256,38],[270,38],[259,38],[253],[254],[[]],[264],[255],[256],[267],[257],[258],[268],[269],[270],[271],[273],[259],[260],[277],[261],[[],[[38,[4]]]],[[],275],[253],[254],[265],[266],[[]],[264],[255],[256],[267],[257],[263],[258],[268],[269],[270],[271],[272],[273],[274],[259],[275],[260],[276],[277],[261],[278],[279],[281],[282],[262],[283],[284],[4,260],[[],276],[4,277],[[],[[38,[4]]]],[38,284],[[]],[[]],[4,261],[[],278],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[253],[254],[[]],[264],[255],[256],[267],[257],[263],[258],[268],[269],[270],[271],[273],[274],[259],[275],[260],[276],[277],[261],[278],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[]],[253],[254],[[]],[264],[255],[256],[267],[257],[258],[268],[269],[270],[271],[273],[259],[260],[277],[261],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[]],[[],279],[[],279],0,0,0,0,0,0,0,0,0,0,[[286,286],286],[[],4],[[],4],[[],4],0,[[286,286],286],[[]],[37],[37],[37],[37],[37],[37],[37],[37],[37],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[286,286],286],[287,287],[288,288],[37,37],[286,286],[[]],[[]],[[]],[[]],[[288,288],61],[[]],[[],288],[288],[288],[[],287],[[]],[288],[[287,287],10],[[288,288],10],[[286,286],10],[[287,103],[[5,[104]]]],[[288,103],[[5,[104]]]],[[37,103],[[5,[104]]]],[[286,103],[[5,[104]]]],[[]],[[]],[[]],[[]],[[]],[[]],[287],[288],[[]],[[]],[[]],[[]],[288],0,[[],4],[[],4],[[],10],[[],288],[[],37],[[288,288],[[38,[61]]]],[[]],0,[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[286,286],286],[[]],[[]],[288],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],187],[[],187],[[],187],[[],187],[[],37],[[]],[[]],0,[[],4],[37],[[]],[[]],[[]],[[],37],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],289],[289,289],[289,38],[[]],[[]],[[]],[289,289],[290,290],[116,116],[291,291],[292,292],[293,293],[[]],[[]],[[]],[[]],[[]],[[]],[[290,290],61],[[],10],[291,10],[292,10],[293,10],[289,38],[[],116],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],26],[116,26],[291,26],[291,26],[292,26],[292,26],[293,26],[293,26],[[289,289],10],[[290,290],10],[[116,116],10],[[291,291],10],[[292,292],10],[[293,293],10],[[289,103],[[5,[104]]]],[[290,103],[[5,[104]]]],[[116,103],[[5,[104]]]],[[291,103],[[5,[104]]]],[[292,103],[[5,[104]]]],[[293,103],[[5,[104]]]],[[294,103],[[5,[104]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],289],[[]],[[[289,[62]]],289],[116,38],[[116,1],38],[[[291,[4]],1],38],[[[291,[4]]],38],[[[292,[4]],1],38],[[[292,[4]]],38],[[[293,[4]]],38],[[[293,[4]],1],38],[[116,1],38],[116,38],[[[291,[4]],1],38],[[[291,[4]]],38],[[[292,[4]],1],38],[[[292,[4]]],38],[[[293,[4]]],38],[[[293,[4]],1],38],[[116,1]],[116],[[[291,[4]],1]],[[[291,[4]]]],[[[292,[4]]]],[[[292,[4]],1]],[[[293,[4]],1]],[[[293,[4]]]],[116],[[116,1]],[[[291,[4]]]],[[[291,[4]],1]],[[[292,[4]]]],[[[292,[4]],1]],[[[293,[4]],1]],[[[293,[4]]]],[290],[116],[291],[292],[293],[[]],[116],[[116,1]],[[[291,[4]]]],[[[291,[4]],1]],[[[292,[4]]]],[[[292,[4]],1]],[[[293,[4]]]],[[[293,[4]],1]],[[]],[[116,1]],[116],[[[291,[4]]]],[[[291,[4]],1]],[[[292,[4]]]],[[[292,[4]],1]],[[[293,[4]],1]],[[[293,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[289,10],[289,10],[289,289],[289,289],[[]],[[]],[[]],[291,38],[[]],[[291,4],38],[[290,290],[[38,[61]]]],[[]],[[]],[29,290],[[]],[[]],[[]],[[]],[291],0,0,[[],26],[116,26],[291,26],[291,26],[292,26],[292,26],[293,26],[293,26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[295],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[295,295],[296,296],[297,297],[298,298],[299,299],[300,300],[301,301],[302,302],[303,303],[304,304],[305,305],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[299,4],[300,4],[306,4],[301,4],[307,4],[302,4],[303,4],[308,4],[304,4],[309,4],[305,4],[310,4],[[295,103],[[5,[104]]]],[[296,103],[[5,[104]]]],[[311,103],[[5,[104]]]],[[312,103],[[5,[104]]]],[[297,103],[[5,[104]]]],[[313,103],[[5,[104]]]],[[314,103],[[5,[104]]]],[[315,103],[[5,[104]]]],[[316,103],[[5,[104]]]],[[317,103],[[5,[104]]]],[[318,103],[[5,[104]]]],[[319,103],[[5,[104]]]],[[298,103],[[5,[104]]]],[[298,103],[[5,[104]]]],[[299,103],[[5,[104]]]],[[300,103],[[5,[104]]]],[[306,103],[[5,[104]]]],[[301,103],[[5,[104]]]],[[307,103],[[5,[104]]]],[[302,103],[[5,[104]]]],[[303,103],[[5,[104]]]],[[308,103],[[5,[104]]]],[[304,103],[[5,[104]]]],[[309,103],[[5,[104]]]],[[305,103],[[5,[104]]]],[[310,103],[[5,[104]]]],[298],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8],[8],[4],[4],[[]],[[],38],[[],38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[307],[308],[310],[301,10],[307,10],[302,10],[303,10],[308,10],[305,10],[310,10],[[]],[318,38],[319,38],[298,[[38,[102]]]],[299,38],[300,38],[306,38],[301,38],[307,38],[302,38],[303,38],[308,38],[304,38],[309,38],[305,38],[310,38],[295,38],[296,38],[311,38],[312,38],[297,38],[313,38],[314,38],[315,38],[316,38],[317,38],[318,38],[319,38],[298,[[38,[102]]]],[299,38],[300,38],[306,38],[301,38],[307,38],[302,38],[303,38],[308,38],[304,38],[309,38],[305,38],[310,38],[295,38],[296,38],[311,38],[312,38],[297,38],[313,38],[318,38],[319,38],[298,[[38,[102]]]],[299,38],[300,38],[306,38],[301,38],[307,38],[302,38],[303,38],[308,38],[304,38],[309,38],[305,38],[310,38],[[299,4],38],[[300,4],38],[[306,4],38],[[301,4],38],[[307,4],38],[[302,4],38],[[303,4],38],[[308,4],38],[[304,4],38],[[309,4],38],[[305,4],38],[[310,4],38],[[299,4],38],[[300,4],38],[[306,4],38],[[301,4],38],[[307,4],38],[[302,4],38],[[303,4],38],[[308,4],38],[[304,4],38],[[309,4],38],[[305,4],38],[[310,4],38],[[[292,[4]]],[[8,[4]]]],[301],[303],[305],[295],[296],[311],[312],[297],[313],[314],[315],[316],[317],[318],[319],[298],[299],[300],[306],[301],[307],[302],[303],[308],[304],[309],[305],[310],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],97],[298],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[320,10],[320,10],[321,1],[322,1],[323,1],[324,1],[325,1],[326,1],[327,1],[328,1],[329,1],[330,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[321,321],[331,331],[332,332],[322,322],[320,320],[323,323],[324,324],[325,325],[326,326],[327,327],[328,328],[333,333],[334,334],[335,335],[336,336],[337,337],[338,338],[329,329],[330,330],[339,339],[340,340],[341,341],[342,342],[343,343],[344,344],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[322,4],[320,4],[331,1],[332,1],[[331,331],10],[[332,332],10],[[343,343],10],[331,[[38,[4]]]],[320,38],[[321,103],[[5,[104]]]],[[331,103],[[5,[104]]]],[[331,103],[[5,[104]]]],[[332,103],[[5,[104]]]],[[332,103],[[5,[104]]]],[[322,103],[[5,[104]]]],[[320,103],[[5,[104]]]],[[323,103],[[5,[104]]]],[[324,103],[[5,[104]]]],[[325,103],[[5,[104]]]],[[326,103],[[5,[104]]]],[[327,103],[[5,[104]]]],[[328,103],[[5,[104]]]],[[333,103],[[5,[104]]]],[[334,103],[[5,[104]]]],[[335,103],[[5,[104]]]],[[336,103],[[5,[104]]]],[[337,103],[[5,[104]]]],[[338,103],[[5,[104]]]],[[329,103],[[5,[104]]]],[[330,103],[[5,[104]]]],[[339,103],[[5,[104]]]],[[340,103],[[5,[104]]]],[[340,103],[[5,[104]]]],[[341,103],[[5,[104]]]],[[341,103],[[5,[104]]]],[[342,103],[[5,[104]]]],[[342,103],[[5,[104]]]],[[343,103],[[5,[104]]]],[[344,103],[[5,[104]]]],[340],[341],[342],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[111,[67]]],[[111,[1,67]]]],[1,5],[[],[[5,[1,331]]]],[[],[[5,[1,331]]]],[[],1],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[343],[320,10],[322,38],[320,38],[337,[[38,[1]]]],[329,[[38,[1]]]],[330,[[38,[1]]]],[320,4],[[]],[[]],[[]],[[],344],[321,[[38,[1]]]],[322,38],[320,[[38,[102]]]],[323,[[38,[1]]]],[324,[[38,[1]]]],[325,[[38,[1]]]],[326,[[38,[1]]]],[327,[[38,[1]]]],[328,[[38,[1]]]],[333,38],[334,38],[335,[[38,[1]]]],[336,[[38,[1]]]],[337,[[38,[1]]]],[338,[[38,[1]]]],[329,[[38,[1]]]],[330,[[38,[1]]]],[339,[[38,[204]]]],[340,[[38,[141]]]],[341,[[38,[141]]]],[342,[[38,[141]]]],[344,[[38,[343]]]],[321,[[38,[1]]]],[322,38],[320,[[38,[102]]]],[323,[[38,[1]]]],[324,[[38,[1]]]],[325,[[38,[1]]]],[326,[[38,[1]]]],[333,38],[334,38],[335,[[38,[1]]]],[336,[[38,[1]]]],[337,[[38,[1]]]],[338,[[38,[1]]]],[329,[[38,[1]]]],[330,[[38,[1]]]],[[320,4],38],[[320,4],38],[322,4],0,[322,38],[320,38],[320,[[38,[4]]]],[162],[162],[320,38],[320,[[38,[4]]]],[322],[320],[337],[338],[329],[330],[339],[340],[341],[342],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],97],[[],97],[[],97],[[],97],[[],97],[340],[341],[342],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[343,1],[331,4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[345,345],[346,346],[347,347],[348,348],[349,349],[350,350],[351,351],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[345,345],10],[[345,103],[[5,[104]]]],[[346,103],[[5,[104]]]],[[347,103],[[5,[104]]]],[[348,103],[[5,[104]]]],[[349,103],[[5,[104]]]],[[350,103],[[5,[104]]]],[[351,103],[[5,[104]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[346,1],[347,1],[348,1],[349,1],[350,1],[351,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[1,10],[1,10],[1,10],[[],345],[346,345],[347,345],[348,345],[349,345],[350,345],[351,345],[[],345],[346,345],[347,345],[348,345],[349,345],[350,345],[351,345],[[],38],[346,38],[347,38],[348,38],[349,38],[350,38],[351,38],[[],38],[346,38],[347,38],[348,38],[349,38],[350,38],[351,38],[[],38],[347,38],[348,38],[349,38],[350,38],[[],38],[347,38],[348,38],[349,38],[350,38],[1,[[38,[1]]]],[1,[[38,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[352,353],[[],[[5,[354,48]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[355,355],[352,352],[176,176],[[]],[[]],[[]],[[],176],[[355,355],10],[[352,352],10],[[356,103],[[5,[104]]]],[[357,103],[[5,[104]]]],[[358,103],[[5,[104]]]],[[359,103],[[5,[104]]]],[[355,103],[[5,[104]]]],[[355,103],[[5,[104]]]],[[360,103],[[5,[104]]]],[[352,103],[[5,[104]]]],[[176,103],[[5,[104]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[356,[19]]]],[357,38],[352],[176,352],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[359,10],[359,[[5,[[111,[86,67]]]]]],[[360,97],360],[176,[[38,[1]]]],[[],357],[[],360],[[],10],[[]],[193],[194],[162],[102],[[[356,[19]]]],[[[356,[32]]]],[[]],[[[356,[32]]]],[[[356,[19]]]],[193],[194],[[],30],[358,359],[360,[[5,[30,48]]]],[[360,358],[[5,[359,48]]]],[360,[[5,[30,48]]]],[[360,4],360],[[[356,[19]]]],[[[356,[32]]]],[359,176],[[]],[[]],[[]],[[],97],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[356,[[5,[355]]]],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[[],187],[176],[356],[[[356,[32]]]],[[[356,[32]]]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[361,193],361],[[217,193],217],[[193,193],193],[[361,193]],[[217,193]],[[193,193]],[193,203],[193,203],[193,203],[193,31],[193,362],[193,363],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[361,193],[[38,[361]]]],[[217,193],[[38,[217]]]],[[193,193],[[38,[193]]]],[[193,194],[[38,[193]]]],[[361,361],[[38,[193]]]],[[193,194],[[38,[193]]]],[[361,193],[[38,[361]]]],[[217,193],[[38,[217]]]],[[193,193],[[38,[193]]]],[361,361],[217,217],[364,364],[193,193],[365,365],[[]],[[]],[[]],[[]],[[]],[[361,361],61],[[217,217],61],[[193,193],61],[[],193],[364,1],[[193,194],193],[[193,194]],[[193,193],362],[[193,193],363],[[193,362],193],[[193,363],193],[364,193],[[361,361],193],[[217,217],[[5,[193,364]]]],[361,193],[217,[[5,[193,364]]]],[[361,361],10],[[217,217],10],[[193,193],10],[[365,365],10],[[361,103],[[5,[104]]]],[[217,103],[[5,[104]]]],[[364,103],[[5,[104]]]],[[364,103],[[5,[104]]]],[[193,103],[[5,[104]]]],[[365,103],[[5,[104]]]],[[365,103],[[5,[104]]]],[[]],[[]],[[]],[[]],[[]],[31,193],[31,193],[31,193],[31,193],[362,193],[363,193],[361],[217],[193],[[]],[[]],[[]],[[]],[[]],[193,10],[[193,194],193],[[193,194]],[[193,362],193],[[193,363],193],[[31,194],193],[[],361],[[],217],[[361,361],[[38,[61]]]],[[217,217],[[38,[61]]]],[[193,193],[[38,[61]]]],[162],[162],[[193,193],193],[[361,361],193],[[193,194],193],[[193,193],193],[[361,193],361],[[361,361],193],[[217,193],217],[[193,193],193],[[361,193]],[[217,193]],[[193,193]],[193,194],[193,194],[193,194],[[],193],[[],193],[[]],[[]],[[]],[[]],[[]],[[],97],[[],97],[[],5],[[],5],[[],5],[[],5],[[],5],[362,[[5,[193,365]]]],[363,[[5,[193,365]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],187],[[],187],[[],187],[[],187],[[],187]],"p":[[15,"str"],[4,"Cow"],[3,"VecIntoIter"],[15,"usize"],[4,"Result"],[3,"SliceIter"],[3,"SliceIterMut"],[3,"Range"],[4,"Either"],[15,"bool"],[3,"VecDeque"],[3,"Path"],[3,"Ancestors"],[4,"BTreeEntry"],[4,"HashMapEntry"],[3,"BinaryHeap"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"Cell"],[3,"Arc"],[3,"BorrowedFd"],[3,"ArrayVec"],[3,"OsStr"],[3,"CStr"],[4,"EitherOrBoth"],[4,"Bound"],[3,"AtomicUsize"],[3,"OsString"],[3,"Pin"],[3,"JoinHandle"],[15,"u64"],[3,"RefCell"],[3,"Rc"],[3,"RcWeak"],[15,"i32"],[3,"Chars"],[19,"MaybeUninit"],[4,"Option"],[3,"ExactlyOneError"],[3,"Batching"],[3,"HashSet"],[3,"Ref"],[3,"RefMut"],[3,"RandomHasher"],[3,"DefaultHasher"],[3,"BuildHasherDefault"],[3,"PathBuf"],[3,"Error"],[3,"Product"],[8,"Error"],[3,"IntoChunks"],[3,"CircularTupleWindows"],[3,"Mutex"],[3,"HashMap"],[3,"BTreeIter"],[3,"BTreeKeys"],[3,"BTreeValues"],[3,"PhantomData"],[3,"MultiPeek"],[3,"ParseIntError"],[4,"Ordering"],[4,"Infallible"],[3,"RangeInclusive"],[3,"Peekable"],[4,"AtomicOrdering"],[3,"CoalesceBy"],[3,"Global"],[3,"Vec"],[3,"Combinations"],[3,"CombinationsWithReplacement"],[3,"Components"],[3,"HashMap"],[3,"DedupEq"],[3,"DedupPred2CoalescePred"],[3,"DedupPredWithCount2CoalescePred"],[8,"Default"],[8,"Clone"],[8,"Eq"],[8,"Hash"],[8,"Ord"],[3,"MapToIndex"],[3,"RandomState"],[3,"Condvar"],[3,"Difference"],[3,"Display"],[8,"Any"],[3,"Weak"],[3,"Drain"],[3,"Drain"],[3,"Drain"],[3,"DrainFilter"],[3,"DrainFilter"],[3,"DrainSorted"],[3,"ById"],[3,"DuplicatesBy"],[3,"ByFn"],[3,"String"],[3,"FilterMapOk"],[3,"FilterOk"],[3,"OccupiedEntry"],[3,"FlattenOk"],[15,"u8"],[3,"Formatter"],[3,"Error"],[3,"BTreeIterMut"],[4,"FoldWhile"],[3,"Format"],[3,"FormatWith"],[3,"CString"],[3,"HashSet"],[3,"Box"],[15,"never"],[8,"IntoIterator"],[3,"PoisonError"],[3,"GroupBy"],[3,"RangeFull"],[3,"OccupiedEntry"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"Intersection"],[3,"IntersperseElementSimple"],[3,"IntersperseWith"],[3,"GroupingMap"],[3,"MapForGrouping"],[3,"IntoIter"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"Iter"],[3,"IntoIter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"Iter"],[3,"IntoIterSorted"],[3,"IntoKeys"],[3,"IntoValues"],[4,"IntErrorKind"],[3,"KMergeByLt"],[3,"KMergeBy"],[15,"char"],[3,"MutexGuard"],[3,"MapSpecialCaseFnInto"],[3,"MapSpecialCase"],[3,"MapSpecialCaseFnOk"],[3,"MergeLte"],[3,"MergeBy"],[3,"MergeJoinBy"],[3,"Metadata"],[4,"MinMaxResult"],[3,"MultiProduct"],[3,"IntoIter"],[8,"FnOnce"],[3,"PadUsing"],[3,"PeekMut"],[3,"PeekingTakeWhile"],[3,"Permutations"],[3,"Context"],[4,"Poll"],[3,"Positions"],[3,"Powerset"],[3,"Demand"],[3,"Range"],[3,"Range"],[3,"RangeMut"],[3,"BorrowedCursor"],[3,"ReadDir"],[3,"ExitCode"],[8,"FnMut"],[4,"SeekFrom"],[3,"Source"],[3,"Step"],[3,"StripPrefixError"],[3,"SymmetricDifference"],[3,"TakeWhileRef"],[3,"Thread"],[3,"BorrowError"],[3,"BorrowMutError"],[3,"CapacityError"],[3,"OccupiedError"],[4,"TryLockError"],[3,"AllocError"],[3,"TryReserveError"],[3,"TupleCombinations"],[3,"TupleWindows"],[3,"Tuples"],[3,"TypeId"],[3,"Union"],[3,"Unique"],[3,"UniqueBy"],[3,"Update"],[3,"ValuesMut"],[3,"Duration"],[15,"u32"],[3,"WhileSome"],[3,"WithPosition"],[3,"Arguments"],[15,"i128"],[15,"i16"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[3,"ZipEq"],[3,"ZipLongest"],[3,"TryFromSliceError"],[3,"Reverse"],[4,"Alignment"],[3,"DebugList"],[3,"DebugMap"],[3,"DebugSet"],[3,"DebugStruct"],[3,"DebugTuple"],[8,"Debug"],[8,"Write"],[3,"SystemTime"],[3,"OpenOptions"],[3,"File"],[3,"stat"],[3,"FileTimes"],[3,"Permissions"],[3,"FileType"],[3,"DirBuilder"],[3,"DirEntry"],[3,"OwnedFd"],[3,"SipHasher"],[3,"IoSliceMut"],[3,"IoSlice"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[3,"BufReader"],[3,"BufWriter"],[3,"Bytes"],[3,"BorrowedBuf"],[3,"Chain"],[3,"Cursor"],[4,"ErrorKind"],[3,"Empty"],[3,"Sink"],[3,"Take"],[3,"WriterPanicked"],[3,"IntoInnerError"],[3,"LineWriter"],[3,"Repeat"],[3,"Split"],[3,"Lines"],[3,"NulError"],[3,"FlatMap"],[3,"Flatten"],[3,"ByRefSized"],[3,"Chain"],[3,"Copied"],[3,"Enumerate"],[3,"Rev"],[3,"Skip"],[3,"Take"],[3,"Repeat"],[3,"Cycle"],[3,"ArrayChunks"],[3,"IntersperseWith"],[3,"Empty"],[3,"Cloned"],[3,"Filter"],[3,"FilterMap"],[3,"Fuse"],[3,"Inspect"],[3,"Intersperse"],[3,"Map"],[3,"MapWhile"],[3,"Scan"],[3,"SkipWhile"],[3,"StepBy"],[3,"TakeWhile"],[3,"Zip"],[3,"FromFn"],[3,"Once"],[3,"OnceWith"],[3,"RepeatWith"],[3,"Successors"],[8,"Iterator"],[3,"Assume"],[3,"Discriminant"],[3,"ManuallyDrop"],[4,"ControlFlow"],[4,"GeneratorState"],[3,"RangeFrom"],[3,"RangeTo"],[3,"RangeToInclusive"],[3,"Yeet"],[3,"Split"],[3,"SplitInclusive"],[3,"RSplit"],[3,"EscapeAscii"],[3,"Windows"],[3,"Chunks"],[3,"ChunksExact"],[3,"ArrayWindows"],[3,"ArrayChunks"],[3,"RChunks"],[3,"RChunksExact"],[3,"ChunksMut"],[3,"ChunksExactMut"],[3,"ArrayChunksMut"],[3,"RChunksMut"],[3,"RChunksExactMut"],[3,"SplitMut"],[3,"SplitInclusiveMut"],[3,"RSplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"GroupBy"],[3,"GroupByMut"],[3,"Bytes"],[3,"SplitInclusive"],[3,"CharIndices"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitWhitespace"],[3,"SplitAsciiWhitespace"],[3,"Utf8Error"],[3,"ParseBoolError"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"EncodeUtf16"],[3,"EscapeDebug"],[3,"EscapeDefault"],[3,"EscapeUnicode"],[3,"Utf8Chunk"],[3,"Utf8Chunks"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharArraySearcher"],[3,"CharArrayRefSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ThreadId"],[3,"NonZeroU64"],[3,"NonZeroUsize"],[3,"AccessError"],[3,"LocalKey"],[3,"__FastLocalKeyInner"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"Builder"],[3,"Instant"],[15,"f32"],[15,"f64"],[3,"SystemTimeError"],[3,"FromFloatSecsError"],[8,"FromStr"],[8,"BuildHasher"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"BitAnd"],[8,"BitOr"],[8,"Shl"],[8,"Shr"],[8,"Index"],[8,"Deref"],[8,"AddAssign"],[8,"Itertools"],[8,"IteratorExt"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"Borrow"],[8,"BorrowMut"],[8,"RangeBounds"],[8,"DerefMut"],[8,"ResultEither"],[8,"Hasher"],[8,"Display"],[8,"IndexMut"],[8,"ShlAssign"],[8,"ShrAssign"],[13,"Vacant"],[13,"Occupied"],[13,"Included"],[13,"Excluded"],[13,"Borrowed"],[13,"Owned"],[13,"Left"],[13,"Right"],[13,"Both"],[13,"Left"],[13,"Right"],[13,"Occupied"],[13,"Vacant"],[8,"PartialEq"],[8,"PartialOrd"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"],[8,"Read"],[8,"Write"],[8,"BufRead"],[8,"Seek"],[13,"Start"],[13,"End"],[13,"Current"],[8,"DoubleEndedIterator"],[8,"Step"],[8,"Extend"],[8,"FromIterator"],[8,"ExactSizeIterator"],[8,"Product"],[8,"Sum"],[8,"Not"],[8,"BitXor"],[8,"Try"],[8,"Generator"],[8,"Residual"],[8,"BitXorAssign"],[8,"Fn"],[8,"DivAssign"],[8,"Drop"],[8,"FromResidual"],[8,"MulAssign"],[8,"RemAssign"],[8,"SubAssign"],[13,"Continue"],[13,"Break"],[13,"Yielded"],[13,"Complete"],[8,"Concat"],[8,"Join"],[8,"SliceIndex"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[13,"Match"],[13,"Reject"]],"a":{"!":[4573],"!=":[2092,2100],"%":[112,4597,4598],"%=":[4598],"&":[26,4541],"&*":[44,4554],"&=":[27,4542],"*":[44,45,79,4554,4555,4570,4571],"*=":[4571],"+":[12,13,4538,4539],"+=":[13,4539],"-":[82,123,4572,4606,4607],"-=":[4607],"..":[104,4590,4592,4593,4595],"..=":[106,4594,4596],"/":[47,4557,4558],"/=":[4558],"<":[2097,2102],"<<":[117,4602],"<<=":[118,4603],"<=":[2097,2102],"==":[2092,2100],">":[2097,2102],">=":[2097,2102],">>":[119,4604],">>=":[120,4605],"?":[4609],"[":[69,70,4568,4569],"[]":[69,70,4568,4569],"]":[69,70,4568,4569],"^":[4545],"^=":[4546],"available_concurrency":[5874],"basename":[715],"dirname":[1473],"drop_while":[4233],"errno":[2962],"foldl":[3526],"foldr":[4182],"futimens":[2480],"futimes":[2480],"getfinalpathnamebyhandle":[2342],"getlasterror":[2962],"hardware_concurrency":[5874],"inject":[3526],"mkdir":[2357],"num_cpus":[5874],"realpath":[2342],"reverse":[4175],"rmdir":[2466],"setfiletime":[2480],"{:?}":[41,2147],"{}":[46,2154],"|":[28,4543],"|=":[29,4544]}},\
"aoc_nums":{"doc":"","t":[18,18,18,18,8,8,8,8,8,8,8,8,8,18,18,18,18,6,18,16,16,16,16,16,3,18,18,16,18,18,8,8,8,8,8,8,8,8,8,8,16,18,10,11,11,10,11,11,11,11,11,10,11,11,11,11,10,10,10,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,11,11,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,11,10,10],"n":["BITS","EIGHT","FIVE","FOUR","Int","IntConv","IntOps","IntOpsRust","IntOpsSafe","IntOpsTry","IntSigned","IntSized","IntUnsigned","MAX","MIN","NEG_ONE","NINE","NumResult","ONE","Output","Output","Output","Output","Output","Overflow","SEVEN","SIX","Signed","THREE","TWO","TryAdd","TryAddAssign","TryDiv","TryDivAssign","TryMul","TryMulAssign","TryRem","TryRemAssign","TrySub","TrySubAssign","Unsigned","ZERO","add_2","add_3","add_4","add_signed","borrow","borrow_mut","clone","clone_into","cmp","div_2","eq","fmt","fmt","from","from_char","from_isize","from_u8","from_usize","into","mul_2","mul_3","mul_4","pan_char","pan_f32","pan_f64","pan_i128","pan_i16","pan_i32","pan_i64","pan_i8","pan_isize","pan_u128","pan_u16","pan_u32","pan_u64","pan_u8","pan_usize","partial_cmp","provide","qck_f32","qck_f64","qck_i128","qck_i16","qck_i32","qck_i64","qck_i8","qck_isize","qck_u128","qck_u16","qck_u32","qck_u64","qck_u8","qck_usize","rem_2","safe_add","safe_sub","signed_diff","signum","sub_2","sub_signed","to_char","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","try_add","try_add_assign","try_div","try_div_assign","try_from","try_into","try_mul","try_mul_assign","try_rem","try_rem_assign","try_sub","try_sub_assign","type_id","unsigned_abs","unsigned_diff"],"q":["aoc_nums","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add two numbers together","Add three numbers together","Add four numbers together","Add a signed number","","","","","","Divide one number by another","","","","Returns the argument unchanged.","","","","Safely convert from <code>usize</code>","Calls <code>U::from(self)</code>.","Multiply two numbers together","Multiply three numbers together","Multiply four numbers together","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Find the remainder from dividing one number by another","","","Signed difference between two numbers","","Subtract one number from another","Subtract a signed number","","Safely convert to <code>f32</code>","Safely convert to <code>f64</code>","Safely convert to <code>i128</code>","Safely convert to <code>i16</code>","Safely convert to <code>i32</code>","Safely convert to <code>i64</code>","Safely convert to <code>i8</code>","Safely convert to <code>isize</code>","","","Safely convert to <code>u128</code>","Safely convert to <code>u16</code>","Safely convert to <code>u32</code>","Safely convert to <code>u64</code>","Safely convert to <code>u8</code>","Safely convert to <code>usize</code>","","","","","","","","","","","","","","","Unsigned difference between two numbers"],"i":[27,27,27,27,0,0,0,0,0,0,0,0,0,27,27,28,27,0,27,29,30,31,32,33,0,27,27,27,27,27,0,0,0,0,0,0,0,0,0,0,27,27,27,27,27,27,2,2,2,2,2,27,2,2,2,2,34,34,34,34,2,27,27,27,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,2,2,34,34,34,34,34,34,34,34,34,34,34,34,34,34,27,35,35,27,27,27,27,34,34,34,34,34,34,34,34,34,2,2,34,34,34,34,34,34,29,36,30,37,2,2,31,38,32,39,33,40,2,27,27],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],1],[[],1],[[],1],[[]],[[]],[2,2],[[]],[[2,2],3],[[],1],[[2,2],4],[[2,5],6],[[2,5],6],[[]],[7,1],[8,1],[9,1],[10,1],[[]],[[],1],[[],1],[[],1],[[],7],[[],11],[[],12],[[],13],[[],14],[[],15],[[],16],[[],17],[[],8],[[],18],[[],19],[[],20],[[],21],[[],9],[[],10],[[2,2],[[22,[3]]]],[23],[[],11],[[],12],[[],13],[[],14],[[],15],[[],16],[[],17],[[],8],[[],18],[[],19],[[],20],[[],21],[[],9],[[],10],[[],1],[[]],[[]],[[],1],[[]],[[],1],[[],1],[[],[[1,[7]]]],[[],[[1,[11]]]],[[],[[1,[12]]]],[[],[[1,[13]]]],[[],[[1,[14]]]],[[],[[1,[15]]]],[[],[[1,[16]]]],[[],[[1,[17]]]],[[],[[1,[8]]]],[[]],[[],24],[[],[[1,[18]]]],[[],[[1,[19]]]],[[],[[1,[20]]]],[[],[[1,[21]]]],[[],[[1,[9]]]],[[],[[1,[10]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],25],[[],25],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],[[25,[2]]]],[[],26],[[]],[[],1]],"p":[[6,"NumResult"],[3,"Overflow"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"char"],[15,"isize"],[15,"u8"],[15,"usize"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[4,"Option"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"Int"],[8,"IntSigned"],[8,"TryAdd"],[8,"TryDiv"],[8,"TryMul"],[8,"TryRem"],[8,"TrySub"],[8,"IntConv"],[8,"IntOpsSafe"],[8,"TryAddAssign"],[8,"TryDivAssign"],[8,"TryMulAssign"],[8,"TryRemAssign"],[8,"TrySubAssign"]]},\
"aoc_ocr":{"doc":"","t":[12,3,11,11,11,11,11,5,11,11,11,11],"n":["0","DrawDots","borrow","borrow_mut","fmt","from","into","read_dots","to_string","try_from","try_into","type_id"],"q":["aoc_ocr","","","","","","","","","","",""],"d":["","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[1,0,1,1,1,1,1,0,1,1,1,1],"f":[0,0,[[]],[[]],[[1,2],3],[[]],[[]],[4,[[6,[5]]]],[[],5],[[],7],[[],7],[[],8]],"p":[[3,"DrawDots"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[3,"String"],[6,"GenResult"],[4,"Result"],[3,"TypeId"]]},\
"aoc_parallel":{"doc":"","t":[8,3,11,11,11,11,11,11,11,5,5,0,11,11,11,11,11,2,2],"n":["IteratorThreadMap","ThreadMap","borrow","borrow_mut","drop","from","into","into_iter","next","num_cpus","num_cpus_max","prelude","start","thread_map","try_from","try_into","type_id","IteratorThreadMap","ThreadMap"],"q":["aoc_parallel","","","","","","","","","","","","","","","","","aoc_parallel::prelude",""],"d":["","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,0,0,0,1,9,1,1,1,0,0],"f":[0,0,[[]],[[]],[1],[[]],[[]],[[]],[1,2],[[],[[2,[3]]]],[[]],0,[[[0,[4,5,6]],3],1],[3,1],[[],7],[[],7],[[],8],0,0],"p":[[3,"ThreadMap"],[4,"Option"],[15,"usize"],[8,"Fn"],[8,"Clone"],[8,"Send"],[4,"Result"],[3,"TypeId"],[8,"IteratorThreadMap"]]},\
"aoc_parser":{"doc":"","t":[13,8,8,13,8,4,6,3,3,13,4,3,3,8,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,14,14,14,14,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,5,5,14,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,11,11,11,11,11,11,14,14,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["ConfirmedError","FromParser","IntoIteratorDisplayDelim","Item","ParseDelimiter","ParseError","ParseResult","ParseWhitespace","Parser","Parser","ParserAny","ParserDelim","ParserRepeat","ResultParser","Simple","Wrapped","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","confirm","delim_fn","delim_ints","delim_items","delim_uints","display","display_delim","display_delim","display_delim_with","display_delim_with","done","end","enum_decl_parser_display","enum_display","enum_parser","enum_parser_display","err","expect","expect","expect","expect_next","expect_word","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_parser","input_param","input_param_opt","input_params","int","into","into","into","into","into","into","into_iter","into_iter","is_valid","is_valid","item","item_range","map_parse_err","map_parse_err_auto","map_parse_err_line","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","nest","new","new_lines","next","next","next","of","opt_fn","parse","parse_display_enum","parse_from_lines","parse_from_lines","parse_from_str","parse_from_str","peek","peek_rest","peek_word","provide","repeat","set_ignore_whitespace","set_word_pred","skip_whitespace","struct_display","struct_parser","struct_parser_display","take_exactly","take_rest","take_rest_while","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","uint","with_params","word","word_if","word_into","wrap","wrap_auto","wrap_lines","wrap_lines_auto","wrap_lines_auto_items","0","0","1","0","0","0"],"q":["aoc_parseraoc_parser::ParseError","","","aoc_parser::ParserAny","",""],"d":["","Trait implemented by types which can be produced by …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Assert that there is no more input to consume","","","","","Return a <code>ParseError</code> with the current position","","","Consume a specific string from the input","Consume and return the next character from the input","Consume a specific word from the input","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Utility method to parse a parameter from the start of an …","Utility method to parse an optional parameter from the …","","Consume and return a decimal integer from the input","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Map error from <code>ParseError</code> to <code>Box &lt;dyn Error&gt;</code> using the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume and return the next character from the input","","","","","","","","","Return the next character from the input without consuming …","","Return a word from the input without consuming it","","","","","Consume any whitespace from the start of the remaining …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume and return an unsigned decimal integer from the …","Utility method to prepend parameters to an example","Consume and return a single word from the input","Consume and return a single word from the input, …","Consume and return a single word from the input, …","","","","","","","","","","",""],"i":[2,0,0,2,0,0,0,0,0,2,0,0,0,0,8,8,1,4,22,2,3,1,8,4,22,2,3,1,8,3,1,3,1,1,1,1,1,1,0,32,32,32,32,2,1,0,0,0,0,1,33,3,1,1,1,3,3,8,8,4,22,2,3,1,8,8,8,8,8,31,0,0,0,1,4,22,2,3,1,8,4,22,33,33,1,1,34,34,34,4,4,4,4,4,4,4,4,4,4,4,4,4,22,22,22,22,22,22,22,22,22,22,22,22,22,1,1,1,4,22,1,2,1,0,0,31,31,31,31,1,1,1,8,1,1,1,1,0,0,0,1,1,1,3,1,3,8,4,22,2,3,1,8,4,22,2,3,1,8,4,22,2,3,1,8,1,0,1,1,1,1,1,1,1,1,35,36,35,37,38,39],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[1,1],[[]],[[]],[1,1],[1,4],[1,[[4,[5,6]]]],[1,[[4,[6]]]],[1,[[4,[5,6]]]],0,0,0,0,0,[2,7],[1,7],0,0,0,0,[1,8],[1,7],[[3,1],7],[[1,9],[[7,[1]]]],[1,[[7,[10]]]],[[1,9],[[7,[1]]]],[[3,11],12],[[3,11],12],[[8,11],12],[[8,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[13,8],[14,8],[15,8],[9,8],[1,7],[[9,[16,[5]]],[[17,[5]]]],[9,[[17,[[18,[5]]]]]],0,[1,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[1,7],[[1,20],7],[[],17],[1,17],[[21,9],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,7],[9,1],[[],1],[4,18],[22,18],[1,[[18,[10]]]],[2,2],[1],0,0,[[],17],[[],17],[9,17],[9,17],[1,[[18,[10]]]],[1,9],[1,[[18,[9]]]],[23],[1,22],[[1,19],1],[1,1],[[1,[20,[24]]],[[7,[1]]]],0,0,0,[[1,24],[[7,[25]]]],[1,25],[[1,[20,[24]]],[[7,[25]]]],[[]],[[]],[[],13],[[],13],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[1,7],[[],[[28,[9]]]],[1,[[7,[9]]]],[[1,29],[[7,[9]]]],[1,7],[9,7],[9,17],[[],17],[30,[[17,[28]]]],[30,[[17,[[28,[31]]]]]],0,0,0,0,0,0],"p":[[3,"Parser"],[4,"ParserAny"],[3,"ParseWhitespace"],[3,"ParserDelim"],[8,"FromStr"],[8,"FnMut"],[6,"ParseResult"],[4,"ParseError"],[15,"str"],[15,"char"],[3,"Formatter"],[6,"Result"],[3,"String"],[3,"Overflow"],[6,"GenError"],[8,"Into"],[6,"GenResult"],[4,"Option"],[15,"bool"],[8,"RangeBounds"],[15,"usize"],[3,"ParserRepeat"],[3,"Demand"],[15,"u32"],[4,"InpStr"],[4,"Result"],[3,"TypeId"],[3,"Vec"],[8,"FnOnce"],[8,"Iterator"],[8,"FromParser"],[8,"IntoIteratorDisplayDelim"],[8,"ParseDelimiter"],[8,"ResultParser"],[13,"Simple"],[13,"Wrapped"],[13,"Parser"],[13,"Item"],[13,"ConfirmedError"]]},\
"aoc_pos":{"doc":"","tn":["Around","Around","Axis","AxisRowCol","AxisWXYZ","AxisXY","AxisXYZ","AxisXYZT","AxisXYZW","Col","Dir2d","DirGeo","DirGeoHexLat","Down","East","East","GenAxis","GenPos","HardLeft","HardRight","Left","Left","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MAX","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","MIN","None","None","North","NorthEast","NorthWest","PosGeo","PosGeoHexLat","PosRowCol","PosWXYZ","PosXY","PosXYZ","PosXYZT","PosXYZW","PosYX","Right","Right","Row","SoftLeft","SoftRight","South","SouthEast","SouthWest","T","Turn2d","TurnHex","Up","Val","W","W","West","West","X","X","X","X","X","Y","Y","Y","Y","Y","Z","Z","Z","Z","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","adjacent","adjacent_4","adjacent_4","adjacent_4","adjacent_4","adjacent_8","adjacent_8","after","ahead","ahead","ahead","ahead","around","around","around","around","as_array","as_array","before","behind","behind","behind","behind","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","col","default","default","default","default","default","default","default","default","default","down","down","down","down","down","down","down","e","e","east","east","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hard_left","hard_right","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","left","left","left","left","left","left","left","left","left","left","mul","mul","mul","mul","mul","mul","mul","mul","mul","n","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","north","north_east","north_west","nw","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rem","rem","rem","rem","rem","rem","rem","rem","rem","right","right","right","right","right","right","right","right","right","right","row","soft_left","soft_right","south","south_east","south_west","sub","sub","sub","sub","sub","sub","sub","sub","sub","t","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_add","try_add","try_add","try_add","try_add","try_add","try_add","try_add","try_add","try_add","try_add","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_mul","try_mul","try_mul","try_mul","try_mul","try_mul","try_mul","try_mul","try_mul","try_sub","try_sub","try_sub","try_sub","try_sub","try_sub","try_sub","try_sub","try_sub","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","up","up","up","up","up","up","up","w","w","wane","wane","wax","wax","west","west","x","x","x","x","x","x","y","y","y","y","y","y","z","z","z","z","zero","zero"],"q":["aoc_pos","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[5,11,40,0,0,0,0,0,0,21,0,0,0,13,8,10,0,0,11,11,5,13,40,2,4,6,9,12,14,15,16,17,40,2,4,6,9,12,14,15,16,17,5,11,8,10,10,0,0,0,0,0,0,0,0,0,5,13,21,11,11,8,10,10,24,0,0,13,40,23,25,8,10,19,22,23,24,25,19,22,23,24,25,22,23,24,25,40,2,4,6,9,12,14,15,16,17,2,4,4,6,6,8,9,10,12,13,14,15,16,17,2,4,6,9,12,14,15,16,17,9,2,4,6,12,4,12,16,14,15,16,17,6,8,10,13,40,40,16,14,15,16,17,5,11,19,2,4,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,5,11,19,2,4,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,5,11,19,2,4,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,5,11,19,2,4,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,2,4,6,9,12,13,14,15,16,17,12,2,4,6,9,12,14,15,16,17,2,4,12,14,15,16,17,6,9,6,9,5,11,19,2,4,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,5,11,19,2,4,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,5,11,19,2,2,4,4,4,6,6,6,8,9,9,10,21,12,12,12,13,22,14,14,23,15,15,24,16,16,25,17,17,10,10,2,4,6,9,12,13,14,15,16,17,2,12,14,15,16,17,2,12,14,15,16,17,5,11,19,2,4,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,40,40,2,4,6,8,12,13,14,15,16,17,2,4,6,9,12,14,15,16,17,6,2,4,6,9,12,14,15,16,17,2,4,6,9,12,14,15,16,17,6,9,9,9,2,4,6,9,12,13,14,15,16,17,2,4,6,9,12,14,15,16,17,2,4,6,8,12,13,14,15,16,17,12,10,10,6,9,9,2,4,6,9,12,14,15,16,17,16,5,11,19,2,4,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,2,4,4,6,9,12,12,14,15,16,17,5,11,19,2,4,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,5,11,19,2,4,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,2,4,6,9,12,14,15,16,17,2,4,6,9,12,14,15,16,17,5,11,19,2,4,6,8,9,10,21,12,13,22,14,23,15,24,16,25,17,2,4,12,14,15,16,17,15,17,15,17,15,17,6,9,2,4,14,15,16,17,2,4,14,15,16,17,14,15,16,17,40,40],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[4,[3]],5],[[4,[3]]]],[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[6,[1]],[6,[1]]],[[6,[1]]]],[[[6,[1]]],[[7,[[6,[1]]]]]],[[8,5],8],[[[9,[1]],[9,[1]]],[[9,[1]]]],[[10,11],10],[[[12,[1]],[12,[1]]],[[12,[1]]]],[[13,5],13],[[[14,[1]],[14,[1]]],[[14,[1]]]],[[[15,[1]],[15,[1]]],[[15,[1]]]],[[[16,[1]],[16,[1]]],[[16,[1]]]],[[[17,[1]],[17,[1]]],[[17,[1]]]],[[[2,[1]],[2,[1]]]],[[[4,[1]],[4,[1]]]],[[[6,[1]],[6,[1]]]],[[[9,[1]],[9,[1]]]],[[[12,[1]],[12,[1]]]],[[[14,[1]],[14,[1]]]],[[[15,[1]],[15,[1]]]],[[[16,[1]],[16,[1]]]],[[[17,[1]],[17,[1]]]],[[[9,[1]]],[[18,[[9,[1]]]]]],[[[2,[1]]],[[18,[[2,[1]]]]]],[[[4,[1]]],[[18,[[4,[1]]]]]],[[[6,[1]]],[[18,[[6,[1]]]]]],[[[12,[1]]],[[18,[[12,[1]]]]]],[[[4,[1]]],[[18,[[4,[1]]]]]],[[[12,[1]]],[[18,[[12,[1]]]]]],[[[16,[1]],1],[[7,[[16,[1]]]]]],[[[14,[1]],1],[[7,[[14,[1]]]]]],[[[15,[1]],1],[[7,[[15,[1]]]]]],[[[16,[1]],1],[[7,[[16,[1]]]]]],[[[17,[1]],1],[[7,[[17,[1]]]]]],[[[6,[1]]],[[6,[1]]]],[8,8],[10,10],[13,13],[[]],[[]],[[[16,[1]],1],[[7,[[16,[1]]]]]],[[[14,[1]],1],[[7,[[14,[1]]]]]],[[[15,[1]],1],[[7,[[15,[1]]]]]],[[[16,[1]],1],[[7,[[16,[1]]]]]],[[[17,[1]],1],[[7,[[17,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[11,11],[19,19],[[[2,[20]]],[[2,[20]]]],[[[4,[20]]],[[4,[20]]]],[[[6,[20]]],[[6,[20]]]],[8,8],[[[9,[20]]],[[9,[20]]]],[10,10],[21,21],[[[12,[20]]],[[12,[20]]]],[13,13],[22,22],[[[14,[20]]],[[14,[20]]]],[23,23],[[[15,[20]]],[[15,[20]]]],[24,24],[[[16,[20]]],[[16,[20]]]],[25,25],[[[17,[20]]],[[17,[20]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[26]],2],27],[[[4,[26]],4],27],[[[6,[26]],6],27],[[[9,[26]],9],27],[[[12,[26]],12],27],[[13,13],27],[[[14,[26]],14],27],[[[15,[26]],15],27],[[[16,[26]],16],27],[[[17,[26]],17],27],0,[[],[[2,[1]]]],[[],[[4,[1]]]],[[],[[6,[1]]]],[[],[[9,[1]]]],[[],[[12,[1]]]],[[],[[14,[1]]]],[[],[[15,[1]]]],[[],[[16,[1]]]],[[],[[17,[1]]]],[[[2,[1]],1],[[7,[[2,[1]]]]]],[[[4,[1]],1],[[7,[[4,[1]]]]]],[[[12,[1]],1],[[7,[[12,[1]]]]]],[[[14,[1]],1],[[7,[[14,[1]]]]]],[[[15,[1]],1],[[7,[[15,[1]]]]]],[[[16,[1]],1],[[7,[[16,[1]]]]]],[[[17,[1]],1],[[7,[[17,[1]]]]]],0,0,[[[6,[1]],1],[[7,[[6,[1]]]]]],[[[9,[1]],1],[[7,[[9,[1]]]]]],[[5,5],28],[[11,11],28],[[19,19],28],[[[2,[29]],2],28],[[[4,[29]],4],28],[[[6,[29]],6],28],[[8,8],28],[[[9,[29]],9],28],[[10,10],28],[[21,21],28],[[[12,[29]],12],28],[[13,13],28],[[22,22],28],[[[14,[29]],14],28],[[23,23],28],[[[15,[29]],15],28],[[24,24],28],[[[16,[29]],16],28],[[25,25],28],[[[17,[29]],17],28],[[5,30],31],[[11,30],31],[[19,30],31],[[[2,[1]],30],31],[[[4,[1]],30],31],[[[6,[1]],30],31],[[8,30],31],[[[9,[1]],30],31],[[10,30],31],[[21,30],31],[[[12,[1]],30],31],[[13,30],31],[[22,30],31],[[[14,[1]],30],31],[[23,30],31],[[[15,[1]],30],31],[[24,30],31],[[[16,[1]],30],31],[[25,30],31],[[[17,[1]],30],31],[[]],[[]],[[]],[[]],[[],[[2,[1]]]],[[],[[4,[1]]]],[13,[[4,[[0,[1,3]]]]]],[[]],[8,[[6,[[0,[1,3]]]]]],[[],[[6,[1]]]],[[]],[[]],[[],[[9,[1]]]],[[]],[[]],[[]],[13,[[12,[[0,[1,3]]]]]],[[]],[[],[[12,[1]]]],[[]],[[]],[[],[[14,[1]]]],[[]],[[]],[[]],[[],[[15,[1]]]],[[]],[[],[[16,[1]]]],[[]],[[]],[[],[[17,[1]]]],[[]],[10,10],[10,10],[[[2,[32]]]],[[[4,[32]]]],[[[6,[32]]]],[[[9,[32]]]],[[[12,[32]]]],[13],[[[14,[32]]]],[[[15,[32]]]],[[[16,[32]]]],[[[17,[32]]]],[[[2,[1]],19]],[[[12,[1]],21]],[[[14,[1]],22]],[[[15,[1]],23]],[[[16,[1]],24]],[[[17,[1]],25]],[[[2,[1]],19]],[[[12,[1]],21]],[[[14,[1]],22]],[[[15,[1]],23]],[[[16,[1]],24]],[[[17,[1]],25]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[[2,[1]],1],[[7,[[2,[1]]]]]],[[[4,[1]],1],[[7,[[4,[1]]]]]],[[[6,[1]]],[[6,[1]]]],[8,8],[[[12,[1]],1],[[7,[[12,[1]]]]]],[13,13],[[[14,[1]],1],[[7,[[14,[1]]]]]],[[[15,[1]],1],[[7,[[15,[1]]]]]],[[[16,[1]],1],[[7,[[16,[1]]]]]],[[[17,[1]],1],[[7,[[17,[1]]]]]],[[[2,[1]],1],[[2,[1]]]],[[[4,[1]],1],[[4,[1]]]],[[[6,[1]],1],[[6,[1]]]],[[[9,[1]],1],[[9,[1]]]],[[[12,[1]],1],[[12,[1]]]],[[[14,[1]],1],[[14,[1]]]],[[[15,[1]],1],[[15,[1]]]],[[[16,[1]],1],[[16,[1]]]],[[[17,[1]],1],[[17,[1]]]],0,[[[2,[[0,[1,34]]]]],[[2,[[0,[1,34]]]]]],[[[4,[[0,[1,34]]]]],[[4,[[0,[1,34]]]]]],[[[6,[[0,[1,34]]]]],[[6,[[0,[1,34]]]]]],[[[9,[[0,[1,34]]]]],[[9,[[0,[1,34]]]]]],[[[12,[[0,[1,34]]]]],[[12,[[0,[1,34]]]]]],[[[14,[[0,[1,34]]]]],[[14,[[0,[1,34]]]]]],[[[15,[[0,[1,34]]]]],[[15,[[0,[1,34]]]]]],[[[16,[[0,[1,34]]]]],[[16,[[0,[1,34]]]]]],[[[17,[[0,[1,34]]]]],[[17,[[0,[1,34]]]]]],[[1,1],[[2,[1]]]],[[1,1],[[4,[1]]]],[[1,1],[[6,[1]]]],[[1,1],[[9,[1]]]],[[1,1],[[12,[1]]]],[[1,1,1],[[14,[1]]]],[[1,1,1,1],[[15,[1]]]],[[1,1,1,1],[[16,[1]]]],[[1,1,1,1],[[17,[1]]]],[[[6,[1]],1],[[7,[[6,[1]]]]]],[[[9,[1]],1],[[7,[[9,[1]]]]]],[[[9,[1]],1],[[7,[[9,[1]]]]]],0,[[[2,[35]],2],[[36,[27]]]],[[[4,[35]],4],[[36,[27]]]],[[[6,[35]],6],[[36,[27]]]],[[[9,[35]],9],[[36,[27]]]],[[[12,[35]],12],[[36,[27]]]],[[13,13],[[36,[27]]]],[[[14,[35]],14],[[36,[27]]]],[[[15,[35]],15],[[36,[27]]]],[[[16,[35]],16],[[36,[27]]]],[[[17,[35]],17],[[36,[27]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[6,[1]],[6,[1]]],[[6,[1]]]],[[[9,[1]],[9,[1]]],[[9,[1]]]],[[[12,[1]],[12,[1]]],[[12,[1]]]],[[[14,[1]],[14,[1]]],[[14,[1]]]],[[[15,[1]],[15,[1]]],[[15,[1]]]],[[[16,[1]],[16,[1]]],[[16,[1]]]],[[[17,[1]],[17,[1]]],[[17,[1]]]],[[[2,[1]],1],[[7,[[2,[1]]]]]],[[[4,[1]],1],[[7,[[4,[1]]]]]],[[[6,[1]]],[[6,[1]]]],[8,8],[[[12,[1]],1],[[7,[[12,[1]]]]]],[13,13],[[[14,[1]],1],[[7,[[14,[1]]]]]],[[[15,[1]],1],[[7,[[15,[1]]]]]],[[[16,[1]],1],[[7,[[16,[1]]]]]],[[[17,[1]],1],[[7,[[17,[1]]]]]],0,[10,10],[10,10],[[[6,[1]],1],[[7,[[6,[1]]]]]],[[[9,[1]],1],[[7,[[9,[1]]]]]],[[[9,[1]],1],[[7,[[9,[1]]]]]],[[[2,[1]],[2,[1]]],[[2,[1]]]],[[[4,[1]],[4,[1]]],[[4,[1]]]],[[[6,[1]],[6,[1]]],[[6,[1]]]],[[[9,[1]],[9,[1]]],[[9,[1]]]],[[[12,[1]],[12,[1]]],[[12,[1]]]],[[[14,[1]],[14,[1]]],[[14,[1]]]],[[[15,[1]],[15,[1]]],[[15,[1]]]],[[[16,[1]],[16,[1]]],[[16,[1]]]],[[[17,[1]],[17,[1]]],[[17,[1]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]],[2,[1]]],[[7,[[2,[1]]]]]],[[[4,[1]],[4,[1]]],[[7,[[4,[1]]]]]],[[[4,[1]]],[[7,[[4,[1]]]]]],[[[6,[1]],[6,[1]]],[[7,[[6,[1]]]]]],[[[9,[1]],[9,[1]]],[[7,[[9,[1]]]]]],[[[12,[1]],[12,[1]]],[[7,[[12,[1]]]]]],[[[12,[1]]],[[7,[[12,[1]]]]]],[[[14,[1]],[14,[1]]],[[7,[[14,[1]]]]]],[[[15,[1]],[15,[1]]],[[7,[[15,[1]]]]]],[[[16,[1]],[16,[1]]],[[7,[[16,[1]]]]]],[[[17,[1]],[17,[1]]],[[7,[[17,[1]]]]]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[[2,[[0,[1,38]]]],[0,[1,38]]],[[7,[[2,[[0,[1,38]]]]]]]],[[[4,[[0,[1,38]]]],[0,[1,38]]],[[7,[[4,[[0,[1,38]]]]]]]],[[[6,[[0,[1,38]]]],[0,[1,38]]],[[7,[[6,[[0,[1,38]]]]]]]],[[[9,[[0,[1,38]]]],[0,[1,38]]],[[7,[[9,[[0,[1,38]]]]]]]],[[[12,[[0,[1,38]]]],[0,[1,38]]],[[7,[[12,[[0,[1,38]]]]]]]],[[[14,[[0,[1,38]]]],[0,[1,38]]],[[7,[[14,[[0,[1,38]]]]]]]],[[[15,[[0,[1,38]]]],[0,[1,38]]],[[7,[[15,[[0,[1,38]]]]]]]],[[[16,[[0,[1,38]]]],[0,[1,38]]],[[7,[[16,[[0,[1,38]]]]]]]],[[[17,[[0,[1,38]]]],[0,[1,38]]],[[7,[[17,[[0,[1,38]]]]]]]],[[[2,[1]],[2,[1]]],[[7,[[2,[1]]]]]],[[[4,[1]],[4,[1]]],[[7,[[4,[1]]]]]],[[[6,[1]],[6,[1]]],[[7,[[6,[1]]]]]],[[[9,[1]],[9,[1]]],[[7,[[9,[1]]]]]],[[[12,[1]],[12,[1]]],[[7,[[12,[1]]]]]],[[[14,[1]],[14,[1]]],[[7,[[14,[1]]]]]],[[[15,[1]],[15,[1]]],[[7,[[15,[1]]]]]],[[[16,[1]],[16,[1]]],[[7,[[16,[1]]]]]],[[[17,[1]],[17,[1]]],[[7,[[17,[1]]]]]],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],[[[2,[1]],1],[[7,[[2,[1]]]]]],[[[4,[1]],1],[[7,[[4,[1]]]]]],[[[12,[1]],1],[[7,[[12,[1]]]]]],[[[14,[1]],1],[[7,[[14,[1]]]]]],[[[15,[1]],1],[[7,[[15,[1]]]]]],[[[16,[1]],1],[[7,[[16,[1]]]]]],[[[17,[1]],1],[[7,[[17,[1]]]]]],0,0,[[[15,[1]],1],[[7,[[15,[1]]]]]],[[[17,[1]],1],[[7,[[17,[1]]]]]],[[[15,[1]],1],[[7,[[15,[1]]]]]],[[[17,[1]],1],[[7,[[17,[1]]]]]],[[[6,[1]],1],[[7,[[6,[1]]]]]],[[[9,[1]],1],[[7,[[9,[1]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]]],"p":[[8,"Int"],[3,"PosXY"],[8,"IntSigned"],[3,"PosYX"],[4,"Turn2d"],[3,"PosGeo"],[6,"NumResult"],[4,"DirGeo"],[3,"PosGeoHexLat"],[4,"DirGeoHexLat"],[4,"TurnHex"],[3,"PosRowCol"],[4,"Dir2d"],[3,"PosXYZ"],[3,"PosWXYZ"],[3,"PosXYZT"],[3,"PosXYZW"],[3,"ArrayVec"],[4,"AxisXY"],[8,"Clone"],[4,"AxisRowCol"],[4,"AxisXYZ"],[4,"AxisWXYZ"],[4,"AxisXYZT"],[4,"AxisXYZW"],[8,"Ord"],[4,"Ordering"],[15,"bool"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Hash"],[3,"IntoIter"],[8,"Neg"],[8,"PartialOrd"],[4,"Option"],[4,"Result"],[8,"TryMul"],[3,"TypeId"],[8,"GenPos"]]},\
"aoc_search":{"doc":"Iterative search algorithms for solutions in a problem …","t":[0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,2,16,13,3,3,8,8,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12],"n":["pairs_map","permutations","prelude","priority","PairsMap","borrow","borrow_mut","from","from_iter","index","into","is_empty","keys","len","try_from","try_into","type_id","values","PermutationsHelper","borrow","borrow_mut","clone","clone_into","deref","fmt","from","into","new","new_circular","new_mirror","next","to_owned","try_from","try_into","type_id","PairsMap","PermutationsHelper","PrioritySearch","PrioritySearchAdder","Item","New","PrioritySearch","PrioritySearchAdder","PrioritySearchVisitor","Seen","SeenState","Unvisited","Visited","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","from","from","from","into","into","into","into_iter","is_empty","len","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","multiunzip","next","push","seen_get_mut","seen_push","seen_visited","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","visit","with_grid_range","with_grid_size","with_hash_map","0"],"q":["aoc_search","","","","aoc_search::pairs_map","","","","","","","","","","","","","","aoc_search::permutations","","","","","","","","","","","","","","","","","aoc_search::prelude","","","","aoc_search::priority","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aoc_search::priority::SeenState"],"d":["","Generate permutations of <code>usize</code> from <code>0 .. len</code>.","Standard prelude for wildcard imports.","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","The <code>PermutationsHelper</code> type. See the module level …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new <code>PermutationsHelper</code>.","Create a new <code>PermutationsHelper</code> in “circular” mode.","Create a new <code>PermutationsHelper</code> in “mirror” mode.","Find the next permutation in the sequence.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,20,12,0,0,0,0,0,12,12,10,13,10,12,13,10,12,12,12,12,13,10,12,13,10,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,21,21,21,12,13,10,12,13,10,12,13,10,12,20,13,13,13,22],"f":[0,0,0,0,0,[[]],[[]],[[]],[1,2],[2],[[]],[2,3],[2],[2,4],[[],5],[[],5],[[],6],[2],0,[[]],[[]],[7,7],[[]],[7],[[7,8],9],[[]],[[]],[4,7],[4,7],[4,7],[7,3],[[]],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,0,[10],[[]],[[]],[[]],[[]],[[]],[[]],[[[12,[[0,[11,11]]]]],[[12,[[0,[11,11]]]]]],[[]],[[],[[12,[11]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,3],[13,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,14],[13,13],[[],12],[[],3],[[],3],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[10],[[],[[18,[[13,[15,[17,[[16,[12]]]]]]]]]],[[],[[13,[15,[17,[[16,[12]]]]]]]],[[],[[13,[[19,[12]]]]]],0],"p":[[8,"IntoIterator"],[3,"PairsMap"],[15,"bool"],[15,"usize"],[4,"Result"],[3,"TypeId"],[3,"PermutationsHelper"],[3,"Formatter"],[6,"Result"],[3,"PrioritySearchAdder"],[8,"Clone"],[4,"SeenState"],[3,"PrioritySearch"],[4,"Option"],[3,"GridCursor"],[3,"Vec"],[3,"GridBuf"],[6,"NumResult"],[3,"AHashMap"],[8,"PrioritySearchVisitor"],[8,"Seen"],[13,"Unvisited"]]},\
"arrayvec":{"doc":"<strong>arrayvec</strong> provides the types <code>ArrayVec</code> and <code>ArrayString</code>:  …","tn":["ArrayString","ArrayVec","CapacityError","Drain","IntoIter","as_mut","as_mut_ptr","as_mut_slice","as_mut_str","as_ptr","as_ref","as_ref","as_slice","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clear","clear","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","deref","deref","deref_mut","deref_mut","drain","drop","drop","drop","element","eq","eq","eq","eq","eq","extend","flush","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_byte_string","from_iter","from_str","ge","ge","ge","gt","gt","gt","hash","hash","insert","into","into","into","into","into","into_inner","into_inner_unchecked","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_full","is_full","le","le","le","len","len","lt","lt","lt","new","new","new","new_const","new_const","next","next","next_back","next_back","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pop","pop","pop_at","provide","push","push","push_str","push_unchecked","remaining_capacity","remaining_capacity","remove","remove","retain","set_len","set_len","simplify","size_hint","size_hint","swap_pop","swap_remove","take","to_owned","to_owned","to_owned","to_owned","to_string","to_string","truncate","truncate","try_extend_from_slice","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_push","try_push","try_push_str","type_id","type_id","type_id","type_id","type_id","write","write_char","write_str","zero_filled"],"q":["arrayvecd":["A string with a fixed capacity.","A vector with a fixed capacity.","Error value indicating insufficient capacity","A draining iterator for <code>ArrayVec</code>.","By-value iterator for <code>ArrayVec</code>.","","Return a raw mutable pointer to the vector’s buffer.","Return a mutable slice containing all elements of the …","Return a mutable string slice of the whole <code>ArrayString</code>.","Return a raw pointer to the vector’s buffer.","","","Return a slice containing all elements of the vector.","Return a string slice of the whole <code>ArrayString</code>.","","","","","","","","","","","","","","Return the capacity of the <code>ArrayVec</code>.","Return the capacity of the <code>ArrayString</code>.","Remove all elements in the vector.","Make the string empty.","","","","","","","","","","","","","","Return an empty array","Return an empty <code>ArrayString</code>","","","","","Create a draining iterator that removes the specified …","","","","Extract the overflowing element","","","","","","Extend the <code>ArrayVec</code> with an iterator.","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ArrayString</code> from a <code>str</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ArrayString</code> from a byte string literal.","Create an <code>ArrayVec</code> from an iterator.","","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inner fixed size array, if it is full to its …","Return the inner fixed size array.","","","","","","Returns whether the <code>ArrayVec</code> is empty.","Returns whether the string is empty.","Return true if the <code>ArrayVec</code> is completely filled to its …","Return if the <code>ArrayString</code> is completely filled.","","","","Return the number of elements in the <code>ArrayVec</code>.","Return the length of the string.","","","","Create a new empty <code>ArrayVec</code>.","Create a new empty <code>ArrayString</code>.","Create a new <code>CapacityError</code> from <code>element</code>.","Create a new empty <code>ArrayVec</code> (const fn).","Create a new empty <code>ArrayString</code> (const fn).","","","","","","","","","Remove the last element in the vector and return it.","Removes the last character from the string and returns it.","Remove the element at <code>index</code> and shift down the following …","","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","Push <code>element</code> to the end of the vector without checking the …","Returns the capacity left in the <code>ArrayVec</code>.","Returns the capacity left in the <code>ArrayString</code>.","Remove the element at <code>index</code> and shift down the following …","Removes a <code>char</code> from this <code>ArrayString</code> at a byte position …","Retains only the elements specified by the predicate.","Set the vector’s length without dropping or moving out …","Set the strings’s length.","Convert into a <code>CapacityError</code> that does not carry an …","","","Remove the element at <code>index</code> and swap the last element into …","Remove the element at <code>index</code> and swap the last element into …","Returns the ArrayVec, replacing the original with a new …","","","","","","","Shortens the vector, keeping the first <code>len</code> elements and …","Shortens this <code>ArrayString</code> to the specified length.","Copy all elements from the slice and append to the <code>ArrayVec</code>…","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","","","","","","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","","","","","","","","","Create a new <code>ArrayString</code> value fully filled with ASCII …"],"i":[0,0,0,0,0,1,1,1,2,1,1,2,1,2,1,1,5,10,2,2,7,1,1,5,10,2,7,1,2,1,2,1,5,2,7,1,2,1,5,2,7,1,2,7,1,2,1,2,1,2,1,1,5,10,7,1,1,2,2,7,1,1,1,5,2,2,7,7,1,1,5,10,2,2,7,2,1,2,1,2,2,1,2,2,1,2,1,1,5,10,2,7,1,1,1,1,1,5,10,1,2,1,2,1,2,2,1,2,1,2,2,1,2,7,1,2,5,10,5,10,1,2,2,7,1,2,1,7,1,2,2,1,1,2,1,2,1,1,2,7,5,10,1,1,1,1,5,2,7,2,7,1,2,1,1,1,5,10,2,2,2,7,1,1,5,10,2,7,1,2,2,1,5,10,2,7,1,2,2,2],"f":[0,0,0,0,0,[1],[1],[1],[2,3],[1],[1],[2,3],[1],[2,3],[[]],[1],[[]],[[]],[[]],[2,3],[[]],[[]],[1],[[]],[[]],[[]],[[]],[1,4],[2,4],[1],[2],[1,1],[5,5],[2,2],[[[7,[6]]],[[7,[6]]]],[[1,1]],[[2,2]],[[]],[[]],[[]],[[]],[[1,1],8],[[2,2],8],[[[7,[9]],7],8],[[],1],[[],2],[1],[2,3],[1],[2,3],[1,10],[1],[5],[10],[7],[[1,1],11],[1,11],[[2,2],11],[[2,3],11],[[[7,[12]],7],11],[[1,13]],[[[1,[14]]],15],[[1,16],17],[[5,16],17],[[2,16],17],[[2,16],17],[[7,16],17],[[7,16],17],[[]],[[],1],[[]],[[]],[3,[[18,[2,[7,[3]]]]]],[[]],[[]],[[],[[18,[2,19]]]],[13,1],[3,[[18,[2]]]],[[1,1],11],[[2,2],11],[[2,3],11],[[1,1],11],[[2,2],11],[[2,3],11],[1],[2],[[1,4]],[[]],[[]],[[]],[[]],[[]],[1,[[18,[1]]]],[1],[1],[1],[1,5],[[]],[[]],[1,11],[2,11],[1,11],[2,11],[[1,1],11],[[2,2],11],[[2,3],11],[1,4],[2,4],[[1,1],11],[[2,2],11],[[2,3],11],[[],1],[[],2],[[],7],[[],1],[[],2],[5,20],[10,20],[5,20],[10,20],[[1,1],[[20,[8]]]],[[2,3],[[20,[8]]]],[[2,2],[[20,[8]]]],[[[7,[21]],7],[[20,[8]]]],[1,20],[2,[[20,[22]]]],[[1,4],20],[23],[1],[[2,22]],[[2,3]],[1],[1,4],[2,4],[[1,4]],[[2,4],22],[1],[[1,4]],[[2,4]],[7,7],[5],[10],[[1,4],20],[[1,4]],[1,1],[[]],[[]],[[]],[[]],[[],24],[[],24],[[1,4]],[[2,4]],[1,[[18,[7]]]],[[],[[18,[1]]]],[[],18],[[],18],[[],18],[[],18],[25,[[18,[2]]]],[3,[[18,[2]]]],[[],18],[[1,4],[[18,[7]]]],[[],18],[[],18],[[],18],[[],18],[[],18],[1,[[18,[7]]]],[[2,22],[[18,[[7,[22]]]]]],[[2,3],[[18,[[7,[3]]]]]],[[],26],[[],26],[[],26],[[],26],[[],26],[[[1,[14]]],[[15,[4]]]],[[2,22],17],[[2,3],17],[[],2]],"p":[[3,"ArrayVec"],[3,"ArrayString"],[15,"str"],[15,"usize"],[3,"IntoIter"],[8,"Clone"],[3,"CapacityError"],[4,"Ordering"],[8,"Ord"],[3,"Drain"],[15,"bool"],[8,"PartialEq"],[8,"IntoIterator"],[15,"u8"],[6,"Result"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"Utf8Error"],[4,"Option"],[8,"PartialOrd"],[15,"char"],[3,"Demand"],[3,"String"],[3,"Arguments"],[3,"TypeId"]]},\
"atty":{"doc":"atty is a simple utility that answers one question","t":[13,13,13,4,11,11,11,11,11,11,5,5,11,11,11],"n":["Stderr","Stdin","Stdout","Stream","borrow","borrow_mut","clone","fmt","from","into","is","isnt","try_from","try_into","type_id"],"q":["atty","","","","","","","","","","","","","",""],"d":["","","","possible stream sources","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","returns true if this is a tty","returns true if this is <em>not</em> a tty","","",""],"i":[1,1,1,0,1,1,1,1,1,1,0,0,1,1,1],"f":[0,0,0,0,[[]],[[]],[1,1],[[1,2],3],[[]],[[]],[1,4],[1,4],[[],5],[[],5],[[],6]],"p":[[4,"Stream"],[3,"Formatter"],[6,"Result"],[15,"bool"],[4,"Result"],[3,"TypeId"]]},\
"bitflags":{"doc":"A typesafe bitmask flag generator useful for sets of …","t":[14],"n":["bitflags"],"q":["bitflags"],"d":["The macro used to generate the flag structures."],"i":[0],"f":[0],"p":[]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"p":[]},\
"clap":{"doc":"<strong>Command Line Argument Parser for Rust</strong>","t":[13,13,13,13,13,13,13,13,13,13,3,4,13,3,4,8,24,3,3,13,4,8,13,13,13,13,4,6,8,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,2,4,13,13,13,13,13,8,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,8,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,8,3,13,13,13,13,2,13,13,13,13,8,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,8,4,4,13,3,13,13,13,14,10,10,10,10,11,11,0,11,11,11,11,11,14,11,11,11,11,11,11,0,11,11,10,11,11,11,11,11,10,11,10,10,10,10,11,11,11,11,0,11,10,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,14,10,10,13,13,13,13,13,13,13,13,13,3,4,13,3,4,3,13,4,13,3,3,6,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,13,16,3,3,3,13,3,3,13,13,13,13,13,13,13,3,13,13,13,13,13,13,8,13,13,13,13,13,16,4,3,8,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,4,4,13,13,13,13,13,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,13,13,13,13,3,4,3,3,13,4,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["AllArgsOverrideSelf","AllowExternalSubcommands","AllowHyphenValues","AllowHyphenValues","AllowInvalidUtf8","AllowInvalidUtf8ForExternalSubcommands","AllowMissingPositional","AllowNegativeNumbers","Always","AnyPath","App","AppSettings","Append","Arg","ArgAction","ArgEnum","ArgEnum","ArgGroup","ArgMatches","ArgRequiredElseHelp","ArgSettings","Args","ArgsNegateSubcommands","ArgumentConflict","ArgumentNotFound","Auto","ColorChoice","Command","CommandFactory","CommandLine","CommandName","CommandString","CommandWithArguments","Count","DefaultValue","DeriveDisplayOrder","DirPath","DisableColoredHelp","DisableHelpFlag","DisableHelpSubcommand","DisableVersionFlag","DisplayHelp","DisplayHelpOnMissingArgumentOrSubcommand","DisplayVersion","DontCollapseArgsInUsage","DontDelimitTrailingValues","EmailAddress","EmptyValue","EnvVariable","Error","ErrorKind","Exclusive","ExecutablePath","FilePath","ForbidEmptyValues","Format","FromArgMatches","Global","Help","HelpExpected","Hidden","Hidden","HiddenLongHelp","HiddenShortHelp","HideDefaultValue","HidePossibleValues","HidePossibleValues","Hostname","IgnoreCase","IgnoreErrors","IncOccurrence","Indices","InferLongArgs","InferSubcommands","IntoApp","InvalidSubcommand","InvalidUtf8","InvalidValue","Io","Last","MissingRequiredArgument","MissingSubcommand","Multicall","MultipleOccurrences","MultipleValues","Never","NextLineHelp","NextLineHelp","NoAutoHelp","NoAutoVersion","NoBinaryName","NoEquals","OsValues","Other","Parser","PossibleValue","PropagateVersion","RequireDelimiter","RequireEquals","Required","Result","Set","SetFalse","SetTrue","StoreValue","Subcommand","SubcommandPrecedenceOverArg","SubcommandRequired","SubcommandRequiredElseHelp","SubcommandsNegateReqs","TakesValue","TooFewValues","TooManyOccurrences","TooManyValues","TrailingVarArg","UnexpectedMultipleUsage","Unknown","UnknownArgument","UnrecognizedSubcommand","Url","UseLongFormatForHelpSubcommand","UseValueDelimiter","Username","ValueEnum","ValueHint","ValueSource","ValueValidation","Values","Version","WaitOnError","WrongNumberOfValues","arg","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow_mut","builder","clone","clone_into","command","command","command","command","command_for_update","command_for_update","command_for_update","default","eq","equivalent","error","fmt","from","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_str","from_str","from_str","has_subcommand","into","into_app","into_app","into_app_for_update","into_app_for_update","parse","parse","parse_from","parse_from","parser","to_owned","to_possible_value","to_possible_value","try_from","try_into","try_parse","try_parse","try_parse_from","try_parse_from","try_update_from","try_update_from","type_id","update_from","update_from","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","value_parser","value_variants","value_variants","AllArgsOverrideSelf","AllowExternalSubcommands","AllowHyphenValues","AllowHyphenValues","AllowInvalidUtf8","AllowInvalidUtf8ForExternalSubcommands","AllowMissingPositional","AllowNegativeNumbers","AnyPath","App","AppSettings","Append","Arg","ArgAction","ArgGroup","ArgRequiredElseHelp","ArgSettings","ArgsNegateSubcommands","BoolValueParser","BoolishValueParser","Command","CommandName","CommandString","CommandWithArguments","Count","DeriveDisplayOrder","DirPath","DisableColoredHelp","DisableHelpFlag","DisableHelpSubcommand","DisableVersionFlag","DontCollapseArgsInUsage","DontDelimitTrailingValues","EmailAddress","EnumValueParser","Exclusive","ExecutablePath","FalseyValueParser","FilePath","ForbidEmptyValues","Global","Help","HelpExpected","Hidden","Hidden","HiddenLongHelp","HiddenShortHelp","HideDefaultValue","HidePossibleValues","HidePossibleValues","Hostname","IgnoreCase","IgnoreErrors","IncOccurrence","InferLongArgs","InferSubcommands","Last","Multicall","MultipleOccurrences","MultipleValues","NextLineHelp","NextLineHelp","NoAutoHelp","NoAutoVersion","NoBinaryName","NonEmptyStringValueParser","OsStringValueParser","Other","Parser","PathBufValueParser","PossibleValue","PossibleValuesParser","PropagateVersion","RangedI64ValueParser","RangedU64ValueParser","RequireDelimiter","RequireEquals","Required","Set","SetFalse","SetTrue","StoreValue","StringValueParser","SubcommandPrecedenceOverArg","SubcommandRequired","SubcommandRequiredElseHelp","SubcommandsNegateReqs","TakesValue","TrailingVarArg","TypedValueParser","Unknown","Url","UseLongFormatForHelpSubcommand","UseValueDelimiter","Username","Value","ValueHint","ValueParser","ValueParserFactory","Version","WaitOnError","about","action","after_help","after_long_help","alias","alias","alias","aliases","aliases","aliases","allow_external_subcommands","allow_hyphen_values","allow_hyphen_values","allow_invalid_utf8","allow_invalid_utf8_for_external_subcommands","allow_missing_positional","allow_negative_numbers","arg","arg","arg_required_else_help","args","args","args_conflicts_with_subcommands","args_override_self","author","before_help","before_long_help","bin_name","bitor","bitor","bool","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","color","conflicts_with","conflicts_with","conflicts_with_all","conflicts_with_all","debug_assert","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_missing_value","default_missing_value_os","default_missing_values","default_missing_values_os","default_value","default_value_if","default_value_if_os","default_value_ifs","default_value_ifs_os","default_value_os","default_values","default_values_os","disable_colored_help","disable_help_flag","disable_help_subcommand","disable_version_flag","display_name","display_order","display_order","dont_collapse_args_in_usage","dont_delimit_trailing_values","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","error","exclusive","find_subcommand","find_subcommand_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forbid_empty_values","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_str","get_about","get_action","get_after_help","get_after_long_help","get_all_aliases","get_all_aliases","get_all_long_flag_aliases","get_all_short_aliases","get_all_short_flag_aliases","get_arg_conflicts_with","get_arguments","get_author","get_before_help","get_before_long_help","get_bin_name","get_color","get_default_values","get_display_name","get_external_subcommand_value_parser","get_global","get_groups","get_help","get_help","get_help_heading","get_help_heading","get_id","get_index","get_long","get_long_about","get_long_and_visible_aliases","get_long_flag","get_long_help","get_long_version","get_matches","get_matches_from","get_matches_mut","get_name","get_name","get_name","get_name_and_aliases","get_next_help_heading","get_num_vals","get_opts","get_positionals","get_possible_values","get_short","get_short_and_visible_aliases","get_short_flag","get_subcommand_help_heading","get_subcommand_value_name","get_subcommands","get_subcommands_mut","get_subommand_help_heading","get_value_delimiter","get_value_hint","get_value_names","get_value_parser","get_version","get_visible_aliases","get_visible_aliases","get_visible_long_flag_aliases","get_visible_name","get_visible_short_aliases","get_visible_short_flag_aliases","global","global_setting","group","group","groups","groups","has_subcommands","hash","help","help","help_expected","help_heading","help_heading","help_template","hide","hide","hide","hide_default_value","hide_long_help","hide_possible_values","hide_possible_values","hide_short_help","id","id","ignore_case","ignore_errors","index","infer_long_args","infer_subcommands","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_allow_external_subcommands_set","is_allow_hyphen_values_set","is_allow_invalid_utf8_for_external_subcommands_set","is_allow_invalid_utf8_set","is_allow_missing_positional_set","is_allow_negative_numbers_set","is_arg_required_else_help_set","is_args_conflicts_with_subcommands_set","is_disable_colored_help_set","is_disable_help_flag_set","is_disable_help_subcommand_set","is_disable_version_flag_set","is_dont_collapse_args_in_usage_set","is_dont_delimit_trailing_values_set","is_exclusive_set","is_forbid_empty_values_set","is_global_set","is_hidden","is_hide_default_value_set","is_hide_long_help_set","is_hide_possible_values_set","is_hide_set","is_hide_set","is_hide_set","is_hide_short_help_set","is_ignore_case_set","is_last_set","is_multicall_set","is_multiple_occurrences_set","is_multiple_values_set","is_next_line_help_set","is_next_line_help_set","is_no_binary_name_set","is_positional","is_propagate_version_set","is_require_equals_set","is_require_value_delimiter_set","is_required_set","is_set","is_set","is_subcommand_negates_reqs_set","is_subcommand_precedence_over_arg_set","is_subcommand_required_set","is_takes_value_set","is_trailing_var_arg_set","is_use_value_delimiter_set","last","long","long_about","long_flag","long_flag_alias","long_flag_aliases","long_help","long_version","map","map","matches","max_occurrences","max_term_width","max_values","min_values","multicall","multiple","multiple_occurrences","multiple_values","mut_arg","mut_subcommand","name","name","name","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","next_display_order","next_help_heading","next_line_help","next_line_help","no_binary_name","number_of_values","os_string","override_help","override_usage","overrides_with","overrides_with_all","parse","parse","parse","parse","parse","parse","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","parse_ref","partial_cmp","path_buf","possible_value","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","possible_values","print_help","print_long_help","propagate_version","range","range","raw","render_long_version","render_usage","render_version","require_delimiter","require_equals","require_value_delimiter","required","required","required_if_eq","required_if_eq_all","required_if_eq_any","required_unless_present","required_unless_present_all","required_unless_present_any","requires","requires","requires_all","requires_all","requires_if","requires_ifs","set_bin_name","setting","setting","short","short_alias","short_aliases","short_flag","short_flag_alias","short_flag_aliases","string","subcommand","subcommand_help_heading","subcommand_negates_reqs","subcommand_precedence_over_arg","subcommand_required","subcommand_value_name","subcommands","takes_value","takes_values","term_width","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","trailing_var_arg","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get_matches","try_get_matches_from","try_get_matches_from_mut","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unset_global_setting","unset_setting","unset_setting","use_delimiter","use_value_delimiter","validator","validator_os","value_delimiter","value_hint","value_name","value_names","value_parser","value_parser","value_terminator","version","visible_alias","visible_alias","visible_aliases","visible_aliases","visible_long_flag_alias","visible_long_flag_aliases","visible_short_alias","visible_short_aliases","visible_short_flag_alias","visible_short_flag_aliases","write_help","write_long_help","ActualNumOccurrences","ActualNumValues","ArgumentConflict","ArgumentNotFound","Bool","ContextKind","ContextValue","Custom","DisplayHelp","DisplayHelpOnMissingArgumentOrSubcommand","DisplayVersion","EmptyValue","Error","ErrorKind","ExpectedNumValues","Format","InvalidArg","InvalidSubcommand","InvalidSubcommand","InvalidUtf8","InvalidValue","InvalidValue","Io","MaxOccurrences","MinValues","MissingRequiredArgument","MissingSubcommand","NoEquals","None","Number","PriorArg","Result","String","Strings","SuggestedArg","SuggestedCommand","SuggestedSubcommand","SuggestedValue","TooFewValues","TooManyOccurrences","TooManyValues","TrailingArg","UnexpectedMultipleUsage","UnknownArgument","UnrecognizedSubcommand","Usage","ValidValue","ValueValidation","WrongNumberOfValues","as_str","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","context","eq","eq","eq","equivalent","equivalent","exit","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","info","into","into","into","into","kind","kind","print","provide","raw","source","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","use_stderr","0","0","0","0","ArgMatches","CommandLine","DefaultValue","Downcast","EnvVariable","Indices","MatchesError","OsValues","RawValues","UnknownArgument","ValueSource","Values","ValuesRef","args_present","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains_id","default","default","default","default","default","default","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_count","get_flag","get_many","get_one","get_raw","index_of","indices_of","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_present","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","occurrences_of","partial_cmp","provide","remove_many","remove_one","remove_subcommand","size_hint","size_hint","size_hint","size_hint","size_hint","subcommand","subcommand_matches","subcommand_name","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_contains_id","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_get_many","try_get_one","try_get_raw","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_remove_many","try_remove_one","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_of","value_of_lossy","value_of_os","value_of_t","value_of_t_or_exit","value_source","values_of","values_of_lossy","values_of_os","values_of_t","values_of_t_or_exit","actual","expected"],"q":["clapclap::builderclap::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","clap::error::ContextValue","","","","clap::parserclap::parser::MatchesError",""],"d":["Deprecated, replaced with <code>ArgAction::Set</code>","Deprecated, replaced with …","Deprecated, replaced with <code>Command::allow_hyphen_values</code> and …","Deprecated, replaced with <code>Arg::allow_hyphen_values</code> and …","Deprecated, replaced with <code>Arg::value_parser</code>","Deprecated, replaced with …","Deprecated, replaced with <code>Command::allow_missing_positional</code>…","Deprecated, replaced with <code>Command::allow_negative_numbers</code> …","Enables colored output regardless of whether or not the …","Any existing path.","Deprecated, replaced with <code>Command</code>","Application level settings, which affect how <code>Command</code> …","When encountered, store the associated value(s) in …","The abstract representation of a command line argument. …","Behavior of arguments when they are encountered while …","Parse arguments into enums.","Deprecated, replaced with <code>ValueEnum</code> Generates the <code>ValueEnum</code>…","Family of related arguments.","Container for parse results.","Deprecated, replaced with <code>Command::arg_required_else_help</code> …","Various settings that apply to arguments and may be set, …","Parse a set of arguments into a user-defined container.","Deprecated, replaced with …","Occurs when the user provides two values which conflict …","Occurs when using the <code>ArgMatches::value_of_t</code> and friends …","Enables colored output only when the output is going to a …","Represents the color preferences for program output","Build a command-line interface.","Create a <code>Command</code> relevant for a user-defined container.","Value was passed in on the command-line","Name of a command, without arguments. May be relative to …","A single string containing a command and its arguments.","Capture the remaining arguments as a command name and …","When encountered, increment a <code>u8</code> counter","Value came <code>Arg::default_value</code>","Displays the arguments and <code>subcommands</code> in the help message …","Path to a directory.","Deprecated, replaced with <code>Command::disable_colored_help</code> and","Deprecated, replaced with <code>Command::disable_help_flag</code> and …","Deprecated, replaced with <code>Command::disable_help_subcommand</code> …","Deprecated, replaced with <code>Command::disable_version_flag</code> and","Not a true “error” as it means <code>--help</code> or similar was …","Occurs when either an argument or a <code>Subcommand</code> is …","Not a true “error” as it means <code>--version</code> or similar …","Deprecated, replaced with …","Deprecated, replaced with …","Email address.","Occurs when the user provides an empty value for an option …","Value came [<code>Arg::env</code>][crate::Arg::env]","","Command line argument parser kind of error","Deprecated, replaced with <code>Arg::exclusive</code> and …","Path to an executable file.","Path to a file.","Deprecated, replaced with […","Represents a Format error (which is a part of <code>Display</code>). …","Converts an instance of <code>ArgMatches</code> to a user-defined …","Deprecated, replaced with <code>Arg::global</code> and …","When encountered, display <code>Command::print_help</code>","Deprecated, replaced with <code>Command::help_expected</code>","Deprecated, replaced with <code>Command::hide</code> and …","Deprecated, replaced with <code>Arg::hide</code> and <code>Arg::is_hide_set</code>","Deprecated, replaced with <code>Arg::hide_long_help</code> and …","Deprecated, replaced with <code>Arg::hide_short_help</code> and …","Deprecated, replaced with <code>Arg::hide_default_value</code> and …","Deprecated, replaced with <code>Command::hide_possible_values</code> and","Deprecated, replaced with <code>Arg::hide_possible_values</code> and …","Host name of a computer. Shells usually parse <code>/etc/hosts</code> …","Deprecated, replaced with <code>Arg::ignore_case</code> and …","Deprecated, replaced with <code>Command::ignore_errors</code>","Deprecated, replaced with <code>ArgAction::SetTrue</code> or …","Iterate over indices for where an argument appeared when …","Deprecated, replaced with <code>Command::infer_long_args</code>","Deprecated, replaced with <code>Command::infer_subcommands</code>","Create a <code>Command</code> relevant for a user-defined container.","Occurs when the user provides an unrecognized <code>Subcommand</code> …","Occurs when the user provides a value containing invalid …","Occurs when an <code>Arg</code> has a set of possible values, and the …","Represents an I/O error. Can occur when writing to <code>stderr</code> …","Deprecated, replaced with <code>Arg::last</code> and <code>Arg::is_last_set</code>","Occurs when the user does not provide one or more required …","Occurs when a subcommand is required (as defined by …","Deprecated, replaced with <code>Command::multicall</code> and …","Deprecated, replaced with <code>Arg::action</code> (Issue #3772)","Deprecated, replaced with <code>Arg::multiple_values</code> and …","Disables colored output no matter if the output is going …","Deprecated, replaced with <code>Command::next_line_help</code> and …","Deprecated, replaced with <code>Arg::next_line_help</code> and …","Deprecated, replaced with <code>Arg::action</code>","Deprecated, replaced with <code>Arg::action</code>","Deprecated, replaced with <code>Command::no_binary_name</code>","Occurs when the user doesn’t use equals for an option …","Deprecated, replaced with <code>ArgMatches::get_many()</code>","None of the hints below apply. Disables shell completion …","Parse command-line arguments into <code>Self</code>.","A possible value of an argument.","Deprecated, replaced with <code>Command::propagate_version</code> and …","Deprecated, replaced with <code>Arg::require_value_delimiter</code> and …","Deprecated, replaced with <code>Arg::require_equals</code> and …","Deprecated, replaced with <code>Arg::required</code> and …","","When encountered, store the associated value(s) in …","When encountered, act as if <code>&quot;false&quot;</code> was encountered on the …","When encountered, act as if <code>&quot;true&quot;</code> was encountered on the …","Deprecated, replaced with <code>ArgAction::Set</code> or …","Parse a sub-command into a user-defined enum.","Deprecated, replaced with …","Deprecated, replaced with <code>Command::subcommand_required</code> and …","Deprecated, replaced with <code>Command::subcommand_required</code> …","Deprecated, replaced with <code>Command::subcommand_negates_reqs</code> …","Deprecated, replaced with <code>Arg::takes_value</code> and …","Occurs when the user provides fewer values for an argument …","Occurs when a user provides more occurrences for an …","Occurs when a user provides more values for an argument …","Deprecated, replaced with <code>Command::trailing_var_arg</code> and …","Occurs when the user provides multiple values to an …","Default value if hint is not specified. Follows shell …","Occurs when a user provides a flag, option, argument or …","Occurs when the user provides an unrecognized <code>Subcommand</code> …","Complete web address.","Deprecated, this is now the default","Deprecated, replaced with <code>Arg::use_value_delimiter</code> and …","Name of a local operating system user.","Parse arguments into enums.","Provide shell with hint on how to complete an argument.","Origin of the argument’s value","Occurs when the user provides a value for an argument with …","Deprecated, replaced with <code>ArgMatches::get_many()</code>","When encountered, display <code>Command::version</code>","Deprecated, replace","Occurs when the user provides a different number of values …","Create an <code>Arg</code> from a usage string.","Append to <code>Command</code> so it can instantiate <code>Self</code>.","Append to <code>Command</code> so it can update <code>self</code>.","Append to <code>Command</code> so it can instantiate <code>Self</code>.","Append to <code>Command</code> so it can update <code>self</code>.","","","Define <code>Command</code> line arguments","","","Build a <code>Command</code> that can instantiate <code>Self</code>.","Build a <code>Command</code> that can instantiate <code>Self</code>.","Build a <code>Command</code> that can instantiate <code>Self</code>.","Requires <code>cargo</code> feature flag to be enabled.","Build a <code>Command</code> that can update <code>self</code>.","Build a <code>Command</code> that can update <code>self</code>.","Build a <code>Command</code> that can update <code>self</code>.","","","","Error reporting","","Returns the argument unchanged.","Instantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …","Instantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …","Instantiate <code>Self</code> from <code>ArgMatches</code>, parsing the arguments as …","Parse an argument into <code>Self</code>.","Parse an argument into <code>Self</code>.","Parse an argument into <code>Self</code>.","Test whether <code>Self</code> can parse a specific subcommand","Calls <code>U::from(self)</code>.","Deprecated, replaced with <code>CommandFactory::command</code>","Deprecated, replaced with <code>CommandFactory::command</code>","Deprecated, replaced with …","Deprecated, replaced with …","Parse from <code>std::env::args_os()</code>, exit on error","Parse from <code>std::env::args_os()</code>, exit on error","Parse from iterator, exit on error","Parse from iterator, exit on error","<code>Command</code> line argument parser","","The canonical argument value.","The canonical argument value.","","","Parse from <code>std::env::args_os()</code>, return Err on error.","Parse from <code>std::env::args_os()</code>, return Err on error.","Parse from iterator, return Err on error.","Parse from iterator, return Err on error.","Update from iterator, return Err on error.","Update from iterator, return Err on error.","","Update from iterator, exit on error","Update from iterator, exit on error","Assign values from <code>ArgMatches</code> to <code>self</code>.","Assign values from <code>ArgMatches</code> to <code>self</code>.","Assign values from <code>ArgMatches</code> to <code>self</code>.","Select a <code>ValueParser</code> implementation from the intended type","All possible argument values, in display order.","All possible argument values, in display order.","Deprecated, replaced with <code>ArgAction::Set</code>","Deprecated, replaced with …","Deprecated, replaced with <code>Command::allow_hyphen_values</code> and …","Deprecated, replaced with <code>Arg::allow_hyphen_values</code> and …","Deprecated, replaced with <code>Arg::value_parser</code>","Deprecated, replaced with …","Deprecated, replaced with <code>Command::allow_missing_positional</code>…","Deprecated, replaced with <code>Command::allow_negative_numbers</code> …","Any existing path.","Deprecated, replaced with <code>Command</code>","Application level settings, which affect how <code>Command</code> …","When encountered, store the associated value(s) in …","The abstract representation of a command line argument. …","Behavior of arguments when they are encountered while …","Family of related arguments.","Deprecated, replaced with <code>Command::arg_required_else_help</code> …","Various settings that apply to arguments and may be set, …","Deprecated, replaced with …","Implementation for <code>ValueParser::bool</code>","Parse bool-like string values, everything else is <code>true</code>","Build a command-line interface.","Name of a command, without arguments. May be relative to …","A single string containing a command and its arguments.","Capture the remaining arguments as a command name and …","When encountered, increment a <code>u8</code> counter","Displays the arguments and <code>subcommands</code> in the help message …","Path to a directory.","Deprecated, replaced with <code>Command::disable_colored_help</code> and","Deprecated, replaced with <code>Command::disable_help_flag</code> and …","Deprecated, replaced with <code>Command::disable_help_subcommand</code> …","Deprecated, replaced with <code>Command::disable_version_flag</code> and","Deprecated, replaced with …","Deprecated, replaced with …","Email address.","Parse an <code>ValueEnum</code> value.","Deprecated, replaced with <code>Arg::exclusive</code> and …","Path to an executable file.","Parse false-like string values, everything else is <code>true</code>","Path to a file.","Deprecated, replaced with […","Deprecated, replaced with <code>Arg::global</code> and …","When encountered, display <code>Command::print_help</code>","Deprecated, replaced with <code>Command::help_expected</code>","Deprecated, replaced with <code>Command::hide</code> and …","Deprecated, replaced with <code>Arg::hide</code> and <code>Arg::is_hide_set</code>","Deprecated, replaced with <code>Arg::hide_long_help</code> and …","Deprecated, replaced with <code>Arg::hide_short_help</code> and …","Deprecated, replaced with <code>Arg::hide_default_value</code> and …","Deprecated, replaced with <code>Command::hide_possible_values</code> and","Deprecated, replaced with <code>Arg::hide_possible_values</code> and …","Host name of a computer. Shells usually parse <code>/etc/hosts</code> …","Deprecated, replaced with <code>Arg::ignore_case</code> and …","Deprecated, replaced with <code>Command::ignore_errors</code>","Deprecated, replaced with <code>ArgAction::SetTrue</code> or …","Deprecated, replaced with <code>Command::infer_long_args</code>","Deprecated, replaced with <code>Command::infer_subcommands</code>","Deprecated, replaced with <code>Arg::last</code> and <code>Arg::is_last_set</code>","Deprecated, replaced with <code>Command::multicall</code> and …","Deprecated, replaced with <code>Arg::action</code> (Issue #3772)","Deprecated, replaced with <code>Arg::multiple_values</code> and …","Deprecated, replaced with <code>Command::next_line_help</code> and …","Deprecated, replaced with <code>Arg::next_line_help</code> and …","Deprecated, replaced with <code>Arg::action</code>","Deprecated, replaced with <code>Arg::action</code>","Deprecated, replaced with <code>Command::no_binary_name</code>","Parse non-empty string values","Implementation for <code>ValueParser::os_string</code>","None of the hints below apply. Disables shell completion …","Generated parser, usually <code>ValueParser</code>.","Implementation for <code>ValueParser::path_buf</code>","A possible value of an argument.","Verify the value is from an enumerated set of <code>PossibleValue</code>…","Deprecated, replaced with <code>Command::propagate_version</code> and …","Parse number that fall within a range of values","Parse number that fall within a range of values","Deprecated, replaced with <code>Arg::require_value_delimiter</code> and …","Deprecated, replaced with <code>Arg::require_equals</code> and …","Deprecated, replaced with <code>Arg::required</code> and …","When encountered, store the associated value(s) in …","When encountered, act as if <code>&quot;false&quot;</code> was encountered on the …","When encountered, act as if <code>&quot;true&quot;</code> was encountered on the …","Deprecated, replaced with <code>ArgAction::Set</code> or …","Implementation for <code>ValueParser::string</code>","Deprecated, replaced with …","Deprecated, replaced with <code>Command::subcommand_required</code> and …","Deprecated, replaced with <code>Command::subcommand_required</code> …","Deprecated, replaced with <code>Command::subcommand_negates_reqs</code> …","Deprecated, replaced with <code>Arg::takes_value</code> and …","Deprecated, replaced with <code>Command::trailing_var_arg</code> and …","Parse/validate argument values","Default value if hint is not specified. Follows shell …","Complete web address.","Deprecated, this is now the default","Deprecated, replaced with <code>Arg::use_value_delimiter</code> and …","Name of a local operating system user.","Argument’s value type","Provide shell with hint on how to complete an argument.","Parse/validate argument values","Register a type with value_parser!","When encountered, display <code>Command::version</code>","Deprecated, replace","Sets the program’s description for the short help (<code>-h</code>).","Specify the behavior when parsing an argument","Free-form help text for after auto-generated short help (<code>-h</code>…","Free-form help text for after auto-generated long help (…","Add an alias, which functions as a hidden long flag.","Sets a hidden alias to this subcommand.","Sets a <em>hidden</em> alias for this argument value.","Add aliases, which function as hidden long flags.","Sets multiple hidden aliases to this subcommand.","Sets multiple <em>hidden</em> aliases for this argument value.","Assume unexpected positional arguments are a <code>subcommand</code>.","Allows values which start with a leading hyphen (<code>-</code>)","Specifies that leading hyphens are allowed in all argument …","Deprecated, replaced with <code>value_parser</code>","Specifies that external subcommands that are invalid UTF-8 …","Allows one to implement two styles of CLIs where …","Allows negative numbers to pass as values.","Adds an argument to this group by name","Adds an argument to the list of valid possibilities.","Exit gracefully if no arguments are present (e.g. <code>$ myprog</code>…","Adds multiple arguments to this group by name","Adds multiple arguments to the list of valid possibilities.","Specifies that use of an argument prevents the use of …","Deprecated, replaced with <code>ArgAction::Set</code>","Sets the author(s) for the help message.","Free-form help text for before auto-generated short help (…","Free-form help text for before auto-generated long help (…","Overrides the runtime-determined name of the binary for …","","","<code>bool</code> parser for argument values","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Prepare for introspecting on all included <code>Command</code>s","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets when to color output.","This argument is mutually exclusive with the specified …","Specify an argument or group that must <strong>not</strong> be present when …","This argument is mutually exclusive with the specified …","Specify arguments or groups that must <strong>not</strong> be present when …","Catch problems earlier in the development cycle.","","","","","","","","","","","","","","","","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when the flag is present but no …","Value for the argument when not present.","Specifies the value of the argument if <code>arg</code> has been used …","Provides a conditional default value in the exact same …","Specifies multiple values and conditions in the same …","Provides multiple conditional default values in the exact …","Value for the argument when not present.","Value for the argument when not present.","Value for the argument when not present.","Disables colorized help messages.","Disables <code>-h</code> and <code>--help</code> flag.","Disables the <code>help</code> <code>subcommand</code>.","Disables <code>-V</code> and <code>--version</code> flag.","Overrides the runtime-determined display name of the …","Allows custom ordering of args within the help message.","Set the placement of this subcommand within the help.","Disables the automatic collapsing of positional args into …","Disables the automatic delimiting of values after <code>--</code> or …","","","","","","","","","","","","","Custom error message for post-parsing validation","This argument must be passed alone; it conflicts with all …","Find subcommand such that its name or one of aliases …","Find subcommand such that its name or one of aliases …","","","","","","","","","","","","","","","","","","","","","","","Deprecated, replaced with […","","","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Get the help message specified via <code>Command::about</code>.","Behavior when parsing the argument","Returns the help heading for listing subcommands.","Returns the help heading for listing subcommands.","Get <em>all</em> aliases for this argument, if any, both visible …","Iterate through the set of <em>all</em> the aliases for this …","Iterate through the set of <em>all</em> the long aliases for this …","Get <em>all</em> short aliases for this argument, if any, both …","Iterate through the set of <em>all</em> the short aliases for this …","Get a list of all arguments the given argument conflicts …","Iterate through the set of arguments.","Get the authors of the cmd.","Returns the help heading for listing subcommands.","Returns the help heading for listing subcommands.","Get the name of the binary.","Should we color the output?","Get the default values specified for this argument, if any","Get the name of the binary.","Configured parser for values passed to an external …","Deprecated, replaced with <code>Arg::is_global_set</code>","Iterate through the set of groups.","Get the help specified for this argument, if any","Get the help specified for this argument, if any","Get the help heading specified for this argument, if any","Deprecated, replaced with <code>Command::get_next_help_heading</code>","Get the name of the argument","Get the index of this argument, if any","Get the long option name for this argument, if any","Get the help message specified via <code>Command::long_about</code>.","Get the long option name and its visible aliases, if any","Get the long flag of the subcommand.","Get the long help specified for this argument, if any","Get the long version of the cmd.","Parse <code>env::args_os</code>, exiting on failure.","Parse the specified arguments, exiting on failure.","Parse <code>env::args_os</code>, exiting on failure.","Deprecated, replaced with <code>Arg::get_id</code>","Get the name of the cmd.","Get the name of the argument value","Returns all valid values of the argument value.","Get the custom section heading specified via …","Get the number of values for this argument.","Iterate through the <em>options</em>.","Iterate through the <em>positionals</em> arguments.","Deprecated, replaced with […","Get the short option name for this argument, if any","Get the short option name and its visible aliases, if any","Get the short flag of the subcommand.","Returns the help heading for listing subcommands.","Returns the subcommand value name.","Iterate through the set of subcommands, getting a …","Iterate through the set of subcommands, getting a mutable …","Deprecated, replaced with <code>App::get_subcommand_help_heading</code>","Get the delimiter between multiple values","Get the value hint of this argument","Get the names of values for this argument.","Configured parser for argument values","Get the version of the cmd.","Get visible aliases for this argument, if any","Iterate through the <em>visible</em> aliases for this subcommand.","Iterate through the <em>visible</em> long aliases for this …","Get the name if argument value is not hidden, <code>None</code> …","Get visible short aliases for this argument, if any","Iterate through the <em>visible</em> short aliases for this …","Specifies that an argument can be matched to all child …","Apply a setting for the current command and all …","The name of the <code>ArgGroup</code> the argument belongs to.","Adds an <code>ArgGroup</code> to the application.","The names of <code>ArgGroup</code>’s the argument belongs to.","Adds multiple <code>ArgGroup</code>s to the <code>Command</code> at once.","Returns <code>true</code> if this <code>Command</code> has subcommands.","","Sets the description of the argument for short help (<code>-h</code>).","Sets the help description of the value.","Panic if help descriptions are omitted.","Override the current help section.","Deprecated, replaced with <code>Command::next_help_heading</code>","Sets the help template to be used, overriding the default …","Do not display the argument in help message.","Specifies that this <code>subcommand</code> should be hidden from help …","Hides this value from help and shell completions.","Do not display the default value of the argument in the …","Hides an argument from long help (<code>--help</code>).","Do not display the possible values in the help message.","Tells <code>clap</code> <em>not</em> to print possible values when displaying …","Hides an argument from short help (<code>-h</code>).","Set the identifier used for referencing this argument in …","Sets the group name.","Match values against <code>Arg::possible_values</code> without matching …","Try not to fail on parse errors, like missing option …","Specifies the index of a positional argument <strong>starting at</strong> 1.","Allow partial matches of long arguments or their aliases.","Allow partial matches of subcommand names and their aliases…","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Report whether <code>Command::allow_external_subcommands</code> is set","Report whether <code>Arg::allow_hyphen_values</code> is set","Report whether …","Deprecated, replaced with [<code>Arg::get_value_parser()</code>","Report whether <code>Command::allow_missing_positional</code> is set","Report whether <code>Command::allow_negative_numbers</code> is set","Report whether <code>Command::arg_required_else_help</code> is set","Report whether <code>Command::args_conflicts_with_subcommands</code> is …","Report whether <code>Command::disable_colored_help</code> is set","Report whether <code>Command::disable_help_flag</code> is set","Report whether <code>Command::disable_help_subcommand</code> is set","Report whether <code>Command::disable_version_flag</code> is set","Report whether <code>Command::dont_collapse_args_in_usage</code> is set","Report whether <code>Command::dont_delimit_trailing_values</code> is set","Reports whether <code>Arg::exclusive</code> is set","Deprecated, replaced with <code>Arg::get_value_parser()</code>","Report whether <code>Arg::global</code> is set","Deprecated, replaced with <code>PossibleValue::is_hide_set</code>","Report whether <code>Arg::hide_default_value</code> is set","Report whether <code>Arg::hide_long_help</code> is set","Report whether <code>Arg::hide_possible_values</code> is set","Report whether <code>Arg::hide</code> is set","Report whether <code>Command::hide</code> is set","Report if <code>PossibleValue::hide</code> is set","Report whether <code>Arg::hide_short_help</code> is set","Reports whether <code>Arg::ignore_case</code> is set","Reports whether <code>Arg::last</code> is set","Report whether <code>Command::multicall</code> is set","<code>Arg::multiple_occurrences</code> is going away  (Issue #3772)","Report whether <code>Arg::multiple_values</code> is set","Report whether <code>Arg::next_line_help</code> is set","Report whether <code>Command::next_line_help</code> is set","Report whether <code>Command::no_binary_name</code> is set","Checks whether this argument is a positional or not.","Report whether <code>Command::propagate_version</code> is set","Report whether <code>Arg::require_equals</code> is set","Report whether <code>Arg::require_value_delimiter</code> is set","Reports whether <code>Arg::required</code> is set","Check if the <code>ArgSettings</code> variant is currently set on the …","Check if the given <code>AppSettings</code> variant is currently set on …","Report whether <code>Command::subcommand_negates_reqs</code> is set","Report whether <code>Command::subcommand_precedence_over_arg</code> is …","Report whether <code>Command::subcommand_required</code> is set","Report whether <code>Arg::is_takes_value_set</code> is set","Report whether <code>Command::trailing_var_arg</code> is set","Report whether <code>Arg::use_value_delimiter</code> is set","This arg is the last, or final, positional argument (i.e. …","Sets the long version of the argument without the …","Sets the program’s description for the long help (<code>--help</code>…","Sets the long version of the subcommand flag without the …","Add an alias, which functions as a “hidden” long flag …","Add aliases, which function as “hidden” long flag …","Sets the description of the argument for long help (<code>--help</code>…","Sets the version for the long version (<code>--version</code>) and help …","Adapt a <code>TypedValueParser</code> from one value to another","Adapt a <code>TypedValueParser</code> from one value to another","Tests if the value is valid for this argument value","Deprecated, for flags, this is replaced with …","Sets the maximum terminal width at which to wrap help …","The <em>maximum</em> number of values are for this argument.","The <em>minimum</em> number of values for this argument.","Multiple-personality program dispatched on the binary name …","Allows more than one of the <code>Arg</code>s in this group to be used. …","Deprecated, replaced with <code>Arg::action</code> (Issue #3772)","Specifies that the argument may have an unknown number of …","Allows one to mutate an <code>Arg</code> after it’s been added to a …","Allows one to mutate a <code>Command</code> after it’s been added as …","Deprecated, replaced with <code>Arg::id</code> to avoid confusion with …","Deprecated, replaced with <code>ArgGroup::id</code>","(Re)Sets the program’s name.","Custom parser for argument values","Create a new <code>Arg</code> with a unique name.","Create a <code>ArgGroup</code> using a unique name.","Creates a new instance of an <code>Command</code>.","Create a <code>PossibleValue</code> with its name.","Implementation for <code>ValueParser::string</code>","Implementation for <code>ValueParser::os_string</code>","Implementation for <code>ValueParser::path_buf</code>","Parse an <code>ValueEnum</code>","Verify the value is from an enumerated set pf <code>PossibleValue</code>…","Select full range of <code>i64</code>","Select full range of <code>u64</code>","Implementation for <code>ValueParser::bool</code>","Parse false-like string values, everything else is <code>true</code>","Parse bool-like string values, everything else is <code>true</code>","Parse non-empty string values","Change the starting value for assigning future display …","Set the default section heading for future args.","Render the help on the line after the argument.","Places the help string for all arguments and subcommands …","Specifies that the parser should not assume the first …","The number of values allowed for this argument.","<code>OsString</code> parser for argument values","Overrides the <code>clap</code> generated help message (both <code>-h</code> and …","Overrides the <code>clap</code> generated usage string for help and …","Sets an overridable argument.","Sets multiple mutually overridable arguments by name.","Parse the argument value","Parse the argument value","","","","","Parse the argument value","","","","","","","","","","","","","<code>PathBuf</code> parser for argument values","Deprecated, replaced with […","Reflect on enumerated value properties","Reflect on enumerated value properties","Reflect on enumerated value properties","Deprecated, replaced with […","","","","","","Prints the short help message (<code>-h</code>) to <code>io::stdout()</code>.","Prints the long help message (<code>--help</code>) to <code>io::stdout()</code>.","Specifies to use the version of the current command for …","Narrow the supported range","Narrow the supported range","Consume all following arguments.","Version message rendered as if the user ran <code>--version</code>.","Usage statement","Version message rendered as if the user ran <code>-V</code>.","Deprecated, replaced with <code>Arg::require_value_delimiter</code>","Requires that options use the <code>--option=val</code> syntax","Specifies that <em>multiple values</em> may only be set using the …","Specifies that the argument must be present.","Require an argument from the group to be present when …","This argument is required only if the specified <code>arg</code> is …","Specify this argument is required based on multiple …","Specify this argument is required based on multiple …","Set this arg as required as long as the specified argument …","Sets this arg as required unless <em>all</em> of the specified …","Sets this arg as required unless <em>any</em> of the specified …","Sets an argument that is required when this one is present","Specify an argument or group that must be present when …","Require these arguments names when this one is presen","Specify arguments or groups that must be present when this …","Require another argument if this arg was present at …","Allows multiple conditional requirements.","Set binary name. Uses <code>&amp;mut self</code> instead of <code>self</code>.","Apply a setting to the argument.","Apply a setting for the current command or subcommand.","Sets the short version of the argument without the …","Add an alias, which functions as a hidden short flag.","Add aliases, which functions as a hidden short flag.","Sets the short version of the subcommand flag without the …","Add an alias, which functions as  “hidden” short flag …","Add aliases, which function as “hidden” short flag …","<code>String</code> parser for argument values","Adds a subcommand to the list of valid possibilities.","Sets the help heading used for subcommands when printing …","Allows <code>subcommands</code> to override all requirements of the …","Prevent subcommands from being consumed as an arguments …","If no <code>subcommand</code> is present at runtime, error and exit …","Sets the value name used for subcommands when printing …","Adds multiple subcommands to the list of valid …","Specifies that the argument takes a value at run time.","Returns whether this action accepts values on the …","Sets the terminal width at which to wrap help messages.","","","","","","","","","","","","","","","","","","","","","","","Specifies that the final positional argument is a “VarArg…","","","","","","","","","","","","","","","","","","","","","Parse <code>env::args_os</code>, returning a <code>clap::Result</code> on failure.","Parse the specified arguments, returning a <code>clap::Result</code> on …","Parse the specified arguments, returning a <code>clap::Result</code> on …","","","","","","","","","","","","","","","","","","","","","Describes the content of <code>AnyValue</code>","","","","","","","","","","","","","","","","","","","","","Remove a setting and stop propagating down to subcommands.","Remove a setting from the argument.","Remove a setting for the current command or subcommand.","Deprecated, replaced with <code>Arg::use_value_delimiter</code>","Specifies that an argument should allow grouping of …","Deprecated, replaced with [<code>Arg::value_parser(...)</code>]","Deprecated, replaced with [<code>Arg::value_parser(...)</code>]","Separator between the arguments values, defaults to <code>,</code> …","Provide the shell a hint about how to complete this …","Placeholder for the argument’s value in the help message …","Placeholders for the argument’s values in the help …","Create the specified <code>Self::Parser</code>","Specify the type of the argument.","Sentinel to <strong>stop</strong> parsing multiple values of a give …","Sets the version for the short version (<code>-V</code>) and help …","Add an alias, which functions as a visible long flag.","Sets a visible alias to this subcommand.","Add aliases, which function as visible long flags.","Sets multiple visible aliases to this subcommand.","Add an alias, which functions as a “visible” long flag …","Add aliases, which function as <em>visible</em> long flag …","Add an alias, which functions as a visible short flag.","Add aliases, which function as visible short flags.","Add an alias, which functions as  “visible” short flag …","Add aliases, which function as <em>visible</em> short flag …","Writes the short help message (<code>-h</code>) to a <code>io::Write</code> object.","Writes the long help message (<code>--help</code>) to a <code>io::Write</code> …","Number of occurrences present","Number of values present","Occurs when the user provides two values which conflict …","Occurs when using the <code>ArgMatches::value_of_t</code> and friends …","A single value","Semantics for a piece of error information","A piece of error information","An opaque message to the user","Not a true “error” as it means <code>--help</code> or similar was …","Occurs when either an argument or a <code>Subcommand</code> is …","Not a true “error” as it means <code>--version</code> or similar …","Occurs when the user provides an empty value for an option …","Command Line Argument Parser Error","Command line argument parser kind of error","Number of allowed values","Represents a Format error (which is a part of <code>Display</code>). …","The cause of the error","The cause of the error","Occurs when the user provides an unrecognized <code>Subcommand</code> …","Occurs when the user provides a value containing invalid …","Rejected values","Occurs when an <code>Arg</code> has a set of possible values, and the …","Represents an I/O error. Can occur when writing to <code>stderr</code> …","Maximum number of allowed occurrences","Minimum number of allowed values","Occurs when the user does not provide one or more required …","Occurs when a subcommand is required (as defined by …","Occurs when the user doesn’t use equals for an option …","<code>ContextKind</code> is self-sufficient, no additional information …","A single value","Existing arguments","Short hand for <code>Result</code> type","A single value","Many values","Potential fix for the user","Potential fix for the user","Potential fix for the user","Potential fix for the user","Occurs when the user provides fewer values for an argument …","Occurs when a user provides more occurrences for an …","Occurs when a user provides more values for an argument …","Trailing argument","Occurs when the user provides multiple values to an …","Occurs when a user provides a flag, option, argument or …","Occurs when the user provides an unrecognized <code>Subcommand</code> …","A usage string","Accepted values","Occurs when the user provides a value for an argument with …","Occurs when the user provides a different number of values …","End-user description of the error case, where relevant","","","","","","","","","","","","","","","Additional information to further qualify the error","","","","","","Prints the error and exits.","","","","","","","Format the existing message with the Command’s context","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Deprecated, replaced with <code>Error::context()</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Type of error for programmatic processing","Deprecated, replaced with <code>Error::kind()</code>","Prints formatted and colored error to <code>stdout</code> or <code>stderr</code> …","","Create an unformatted error","","","","","","","","","","","","","","","","","","","Should the message be written to <code>stdout</code> or not?","","","","","Container for parse results.","Value was passed in on the command-line","Value came <code>Arg::default_value</code>","Failed to downcast <code>AnyValue</code> to the specified type","Value came [<code>Arg::env</code>][crate::Arg::env]","Iterate over indices for where an argument appeared when …","Violation of <code>ArgMatches</code> assumptions","Deprecated, replaced with <code>ArgMatches::get_many()</code>","Iterate over raw argument values via <code>ArgMatches::get_raw</code>.","Argument not defined in <code>Command</code>","Origin of the argument’s value","Deprecated, replaced with <code>ArgMatches::get_many()</code>","Iterate over multiple values for an argument via …","Check if any args were present on the command line","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if values are present for the argument or group id","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the value of a specific <code>ArgAction::Count</code> flag","Gets the value of a specific <code>ArgAction::SetTrue</code> or …","Iterate over values of a specific option or positional …","Gets the value of a specific option or positional argument.","Iterate over the original argument values.","The first index of that an argument showed up.","All indices an argument appeared at when parsing.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Deprecated, replaced with <code>ArgAction::SetTrue</code> or …","","","","","","","","","","","Deprecated, replaced with  <code>ArgAction::Count</code>, …","","","Return values of a specific option or positional argument.","Returns the value of a specific option or positional …","Return the name and <code>ArgMatches</code> of the current subcommand.","","","","","","The name and <code>ArgMatches</code> of the current subcommand.","The <code>ArgMatches</code> for the current subcommand.","The name of the current subcommand.","","","","","","","","","","Non-panicking version of <code>ArgMatches::contains_id</code>","","","","","","","","","Non-panicking version of <code>ArgMatches::get_many</code>","Non-panicking version of <code>ArgMatches::get_one</code>","Non-panicking version of <code>ArgMatches::get_raw</code>","","","","","","","","","Non-panicking version of <code>ArgMatches::remove_many</code>","Non-panicking version of <code>ArgMatches::remove_one</code>","","","","","","","","","Deprecated, replaced with <code>ArgMatches::get_one()</code>","Deprecated, replaced with <code>ArgMatches::get_one()</code>","Deprecated, replaced with <code>ArgMatches::get_one()</code>","Deprecated, replaced with <code>ArgMatches::get_one()</code>","Deprecated, replaced with <code>ArgMatches::get_one()</code>","Report where argument value came from","Deprecated, replaced with <code>ArgMatches::get_many()</code>","Deprecated, replaced with <code>ArgMatches::get_many()</code>","Deprecated, replaced with <code>ArgMatches::get_many()</code>","Deprecated, replaced with <code>ArgMatches::get_many()</code>","Deprecated, replaced with <code>ArgMatches::get_many()</code>","Type for value stored in <code>ArgMatches</code>","The target type to downcast to"],"i":[19,19,19,20,20,19,19,19,2,22,0,0,17,0,0,0,0,0,0,19,0,0,19,44,44,2,0,0,0,74,22,22,22,17,74,19,22,19,19,19,19,44,44,44,19,19,22,44,74,0,0,20,22,22,20,44,0,20,17,19,19,20,20,20,20,19,20,22,20,19,17,0,19,19,0,44,44,44,44,20,44,44,19,20,20,2,19,20,19,19,19,44,0,22,0,0,19,20,20,20,0,17,17,17,17,0,19,19,19,19,20,44,44,44,19,44,22,44,44,22,19,20,22,0,0,0,44,0,17,19,44,0,78,78,79,79,2,2,0,2,2,80,80,80,0,80,80,80,2,2,2,0,2,2,81,81,81,27,27,27,79,2,80,80,80,80,82,82,82,82,0,2,27,27,2,2,82,82,82,82,82,82,2,82,82,81,81,81,0,27,27,19,19,19,20,20,19,19,19,22,0,0,17,0,0,0,19,0,19,0,0,0,22,22,22,17,19,22,19,19,19,19,19,19,22,0,20,22,0,22,20,20,17,19,19,20,20,20,20,19,20,22,20,19,17,19,19,20,19,20,20,19,20,19,19,19,0,0,22,83,0,0,0,19,0,0,20,20,20,17,17,17,17,0,19,19,19,19,20,19,0,22,22,19,20,22,84,0,0,0,17,19,14,16,14,14,16,14,11,16,14,11,14,16,14,16,14,14,14,18,14,14,18,14,14,14,14,14,14,14,19,20,21,21,17,19,16,18,20,14,11,22,23,24,25,30,31,34,36,37,38,39,40,21,17,19,16,18,20,14,11,22,23,24,25,30,31,34,36,37,38,39,40,14,21,17,19,16,18,20,14,11,22,23,24,25,30,31,34,36,37,38,39,40,21,17,19,16,18,20,14,11,22,23,24,25,30,31,34,36,37,38,39,40,16,14,16,18,16,18,14,16,18,14,11,22,23,24,25,30,34,36,37,38,39,40,16,16,16,16,16,16,16,16,16,16,16,16,14,14,14,14,14,16,14,14,14,19,16,18,20,14,11,22,16,18,14,11,22,14,16,14,14,21,17,19,16,16,18,20,14,14,11,22,23,24,25,30,31,34,36,37,38,39,40,16,21,21,21,21,21,21,21,21,21,17,19,16,16,18,18,20,14,11,11,11,22,23,24,25,30,31,31,34,34,36,36,37,38,39,40,22,14,16,14,14,16,14,14,16,14,14,14,14,14,14,14,14,16,14,14,16,14,16,11,16,14,16,16,16,14,16,14,16,14,14,14,14,16,14,11,11,14,16,14,14,16,16,16,14,14,14,14,14,14,16,16,16,16,14,16,14,14,11,16,14,16,14,16,14,16,14,14,22,16,11,14,16,14,14,16,14,11,16,16,16,14,16,16,18,16,14,16,14,14,21,17,19,16,18,20,14,11,22,23,24,25,30,31,34,36,37,38,39,40,14,16,14,16,14,14,14,14,14,14,14,14,14,14,16,16,16,11,16,16,16,16,14,11,16,16,16,14,16,16,16,14,14,16,14,16,16,16,16,14,14,14,14,16,14,16,16,16,14,14,14,14,16,14,84,84,11,16,14,16,16,14,18,16,16,14,14,16,18,14,21,16,18,14,11,23,24,25,30,31,34,36,37,38,39,40,14,14,16,14,14,16,21,14,14,16,16,84,84,23,24,25,31,84,23,24,25,30,31,34,36,37,38,39,40,16,21,16,21,84,84,16,30,31,37,38,39,14,14,14,34,36,16,14,14,14,16,16,16,16,18,16,16,16,16,16,16,16,18,16,18,16,16,14,16,14,16,16,16,14,14,14,21,14,14,14,14,14,14,14,16,17,14,21,17,19,16,18,20,14,11,22,23,24,25,30,31,34,36,37,38,39,40,16,14,14,21,17,19,16,18,20,14,11,22,23,24,25,30,31,34,36,37,38,39,40,14,14,14,21,17,19,16,18,20,14,11,22,23,24,25,30,31,34,36,37,38,39,40,21,21,17,19,16,18,20,14,11,22,23,24,25,30,31,34,36,37,38,39,40,14,16,14,16,16,16,16,16,16,16,16,83,16,16,14,16,14,16,14,14,14,16,16,14,14,14,14,62,62,44,44,63,0,0,62,44,44,44,44,0,0,62,44,62,62,44,44,62,44,44,62,62,44,44,44,63,63,62,0,63,63,62,62,62,62,44,44,44,62,44,44,44,62,62,44,44,44,62,63,44,7,62,63,44,7,62,63,44,62,63,44,7,62,63,44,62,63,7,62,63,44,44,7,7,7,62,63,44,7,7,7,7,62,63,44,7,7,7,7,7,7,7,62,63,44,44,7,62,63,44,7,62,63,44,7,62,63,44,7,7,85,86,87,88,0,74,74,68,74,0,0,0,0,68,0,0,0,6,68,6,69,70,71,72,73,74,68,6,69,70,71,72,73,74,68,6,69,70,71,72,73,74,68,6,69,70,71,72,73,74,74,6,6,69,70,71,72,73,6,74,6,74,68,68,6,69,70,71,72,73,74,68,6,69,70,71,72,73,74,6,6,6,6,6,6,6,68,6,69,70,71,72,73,74,69,70,71,72,73,6,69,70,71,72,73,69,70,71,72,73,6,74,68,6,6,6,69,70,71,72,73,6,6,6,68,6,69,70,71,72,73,74,68,6,68,6,69,70,71,72,73,74,6,6,6,68,6,69,70,71,72,73,74,6,6,68,6,69,70,71,72,73,74,6,6,6,6,6,6,6,6,6,6,6,89,89],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[1,1],[1,1],[1,1],[[]],[[]],0,[2,2],[[]],[[],1],[[],1],[[],1],0,[[],1],[[],1],[[],1],[[],2],[[2,2],3],[[],3],0,[[2,4],5],[[]],[6,[[8,[7]]]],[6,[[8,[7]]]],[6,[[8,[7]]]],[[9,3],[[8,[10]]]],[[9,3],[[8,[10]]]],[[9,3],[[8,[10]]]],[9,3],[[]],[[],1],[[],1],[[],1],[[],1],[[]],[[]],[[]],[[]],0,[[]],[[],[[12,[11]]]],[[],[[12,[11]]]],[[],8],[[],8],[[],[[8,[7]]]],[[],[[8,[7]]]],[[],[[8,[7]]]],[[],[[8,[7]]]],[[],[[8,[7]]]],[[],[[8,[7]]]],[[],13],[[]],[[]],[6,[[8,[7]]]],[6,[[8,[7]]]],[6,[[8,[7]]]],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[14,[15,[[12,[9]]]]],14],[[16,17],16],[[14,[15,[9]]],14],[[14,[15,[9]]],14],[[16,[15,[9]]],16],[[14,[15,[9]]],14],[[11,9],11],[16,16],[14,14],[11,11],[[14,3],14],[[16,3],16],[[14,3],14],[[16,3],16],[[14,3],14],[[14,3],14],[[14,3],14],0,[[14,[15,[16]]],14],[[14,3],14],[18,18],[14,14],[[14,3],14],[[14,3],14],[[14,[15,[9]]],14],[[14,[15,[9]]],14],[[14,[15,[9]]],14],[[14,[15,[10]]],14],[[19,19]],[[20,20]],[[],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14],[21,21],[17,17],[19,19],[16,16],[18,18],[20,20],[14,14],[11,11],[22,22],[23,23],[24,24],[25,25],[[[30,[[0,[26,27,26,28,29]]]]],[[30,[[0,[26,27,26,28,29]]]]]],[31,31],[[[34,[[0,[26,[33,[32]],26,28,29]]]]],[[34,[[0,[26,[33,[32]],26,28,29]]]]]],[[[36,[[0,[26,[33,[35]]]]]]],[[36,[[0,[26,[33,[35]]]]]]]],[37,37],[38,38],[39,39],[40,40],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[16,16],41],[[14,2],14],0,0,[16,16],[18,18],[14],[[],16],[[],18],[[],14],[[],11],[[],22],[[],23],[[],24],[[],25],[[],[[30,[[0,[27,26,28,29]]]]]],[[],[[34,[[0,[[33,[32]],26,28,29]]]]]],[[],[[36,[[33,[35]]]]]],[[],37],[[],38],[[],39],[[],40],[[16,9],16],[[16,42],16],[16,16],[16,16],[[16,9],16],0,0,[16,16],[16,16],[[16,42],16],[16,16],[16,16],[[14,3],14],[[14,3],14],[[14,3],14],[[14,3],14],[[14,[15,[10]]],14],[[16,43],16],[[14,43],14],[[14,3],14],[[14,3],14],[[19,19],3],[[16,16],3],[[18,18],3],[[20,20],3],[[14,14],3],[[11,11],3],[[22,22],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[14,44,45],7],[[16,3],16],[14,[[12,[14]]]],[14,[[12,[14]]]],[[21,4],[[8,[46]]]],[[17,4],5],[[19,4],5],[[16,4],5],[[16,4],[[8,[46]]]],[[18,4],5],[[20,4],5],[[14,4],5],[[14,4],5],[[11,4],5],[[22,4],5],[[23,4],5],[[24,4],5],[[25,4],5],[[[30,[[0,[47,27,26,28,29]]]],4],5],[[31,4],5],[[[34,[[0,[47,[33,[32]],26,28,29]]]],4],5],[[[36,[[0,[47,[33,[35]]]]]],4],5],[[37,4],5],[[38,4],5],[[39,4],5],[[40,4],5],[[16,3],16],[[[48,[32]]],21],[[],21],[[]],[49,21],[[[50,[32]]],21],[[[51,[32]]],21],[[[52,[32]]],21],[[[53,[32]]],21],[[],21],[[]],[[]],[16,16],[[]],[[]],[18,18],[[]],[[]],[[]],[9,11],[9,11],[[]],[[]],[[]],[[]],[[]],[[]],[[],31],[[]],[[[54,[32]]],[[34,[[0,[[33,[32]],26,28,29]]]]]],[[[54,[35]]],[[36,[[33,[35]]]]]],[[]],[[]],[[]],[[]],[[]],[9,[[8,[22]]]],[14,[[12,[9]]]],[16,17],[14,[[12,[9]]]],[14,[[12,[9]]]],[16,[[12,[[55,[9]]]]]],[14,56],[14,56],[16,[[12,[[55,[57]]]]]],[14,56],[[14,16],[[55,[16]]]],[14,56],[14,[[12,[9]]]],[14,[[12,[9]]]],[14,[[12,[9]]]],[14,[[12,[9]]]],[14,2],[16],[14,[[12,[9]]]],[14,[[12,[21]]]],[16,3],[14,56],[16,[[12,[9]]]],[11,[[12,[9]]]],[16,[[12,[9]]]],[14,[[12,[9]]]],[16,9],[16,[[12,[43]]]],[16,[[12,[9]]]],[14,[[12,[9]]]],[16,[[12,[[55,[9]]]]]],[14,[[12,[9]]]],[16,[[12,[9]]]],[14,[[12,[9]]]],[14,6],[14,6],[14,6],[16,9],[14,9],[11,9],[11,56],[14,[[12,[9]]]],[16,[[12,[43]]]],[14,56],[14,56],[16,12],[16,[[12,[57]]]],[16,[[12,[[55,[57]]]]]],[14,[[12,[57]]]],[14,[[12,[9]]]],[14,[[12,[9]]]],[14,56],[14,56],[14,[[12,[9]]]],[16,[[12,[57]]]],[16,22],[16,12],[16,21],[14,[[12,[9]]]],[16,[[12,[[55,[9]]]]]],[14,56],[14,56],[11,[[12,[9]]]],[16,[[12,[[55,[57]]]]]],[14,56],[[16,3],16],[[14,19],14],0,[[14,[15,[18]]],14],[16,16],[14,14],[14,3],[22],[[16,[15,[[12,[9]]]]],16],[[11,9],11],[[14,3],14],[16,16],[14,14],[[14,[15,[9]]],14],[[16,3],16],[[14,3],14],[[11,3],11],[[16,3],16],[[16,3],16],[[16,3],16],[[14,3],14],[[16,3],16],[[16,[15,[9]]],16],[[18,[15,[9]]],18],[[16,3],16],[[14,3],14],[[16,43],16],[[14,3],14],[[14,3],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,3],[16,3],[14,3],[16,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[16,3],[16,3],[16,3],[11,3],[16,3],[16,3],[16,3],[16,3],[14,3],[11,3],[16,3],[16,3],[16,3],[14,3],[16,3],[16,3],[16,3],[14,3],[14,3],[16,3],[14,3],[16,3],[16,3],[16,3],[[16,20],3],[[14,19],3],[14,3],[14,3],[14,3],[16,3],[14,3],[16,3],[[16,3],16],[[16,9],16],[[14,[15,[[12,[9]]]]],14],[[14,9],14],[[14,9],14],[14,14],[[16,[15,[[12,[9]]]]],16],[[14,[15,[9]]],14],0,0,[[11,9,3],3],[[16,43],16],[[14,43],14],[[16,43],16],[[16,43],16],[[14,3],14],[[18,3],18],[[16,3],16],[[16,3],16],[14,14],[14,14],[[16,[15,[9]]],16],[[18,[15,[9]]],18],[[14,[15,[10]]],14],[[],21],[[[15,[9]]],16],[[[15,[9]]],18],[[[15,[10]]],14],[9,11],[[],23],[[],24],[[],25],[[],[[30,[[0,[27,26,28,29]]]]]],[[[15,[31]]],31],[[],[[34,[[0,[[33,[32]],26,28,29]]]]]],[[],[[36,[[33,[35]]]]]],[[],37],[[],38],[[],39],[[],40],[[14,[15,[[12,[43]]]]],14],[14,14],[[16,3],16],[[14,3],14],[[14,3],14],[[16,43],16],[[],21],[[14,[15,[9]]],14],[[14,[15,[9]]],14],0,[16,16],[[1,[12,[16]],58],[[8,[7]]]],[[1,[12,[16]],58],[[8,[7]]]],[[23,1,[12,[16]],58],[[8,[7]]]],[[24,1,[12,[16]],58],[[8,[7]]]],[[25,1,[12,[16]],58],[[8,[7]]]],[[31,1,[12,[16]],58],[[8,[10,7]]]],[[1,[12,[16]],42],[[8,[7]]]],[[23,1,[12,[16]],42],[[8,[7]]]],[[24,1,[12,[16]],42],[[8,[7]]]],[[25,1,[12,[16]],42],[[8,[7]]]],[[[30,[[0,[27,26,28,29]]]],1,[12,[16]],42],[[8,[7]]]],[[31,1,[12,[16]],42],[[8,[7]]]],[[[34,[[0,[[33,[32]],26,28,29]]]],1,[12,[16]],42],[[8,[7]]]],[[[36,[[0,[[33,[35]],26,28,29]]]],1,[12,[16]],42],[[8,[7]]]],[[37,1,[12,[16]],42],[[8,[7]]]],[[38,1,[12,[16]],42],[[8,[7]]]],[[39,1,[12,[16]],42],[[8,[7]]]],[[40,1,[12,[16]],42],[[8,[7]]]],[[16,16],[[12,[41]]]],[[],21],[16,16],[21,[[12,[[59,[56]]]]]],[[],[[12,[[59,[56]]]]]],[[],[[12,[[59,[56]]]]]],[16,16],[[[30,[[0,[27,26,28,29]]]]],[[12,[[59,[56]]]]]],[31,[[12,[[59,[56]]]]]],[37,[[12,[[59,[56]]]]]],[38,[[12,[[59,[56]]]]]],[39,[[12,[[59,[56]]]]]],[14,60],[14,60],[[14,3],14],[[[34,[[0,[[33,[32]],26,28,29]]]],[54,[32]]],[[34,[[0,[[33,[32]],26,28,29]]]]]],[[[36,[[33,[35]]]],[54,[35]]],[[36,[[33,[35]]]]]],[[16,3],16],[14,10],[14,10],[14,10],[[16,3],16],[[16,3],16],[[16,3],16],[[16,3],16],[[18,3],18],0,[16,16],[16,16],0,[16,16],[16,16],0,0,[16,16],[18,18],0,[16,16],[[14,[15,[10]]]],[16,16],[14,14],[[16,57],16],[[16,57],16],[16,16],[[14,57],14],[[14,57],14],[14,14],[[],21],[[14,[15,[14]]],14],[14,14],[[14,3],14],[[14,3],14],[[14,3],14],[14,14],[14,14],[[16,3],16],[17,3],[[14,43],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[14,3],14],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[14,[[61,[6]]]],[14,[[61,[6]]]],[14,[[61,[6]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[14,19],14],[16,16],[14,14],[[16,3],16],[[16,3],16],[16,16],[16,16],[[16,57],16],[[16,22],16],[[16,9],16],[16,16],[[]],[[16,[15,[21]]],16],[[16,9],16],[[14,[15,[9]]],14],[[16,[15,[9]]],16],[[14,[15,[9]]],14],[16,16],[14,14],[[14,9],14],[14,14],[[16,57],16],[16,16],[[14,57],14],[14,14],[14,60],[14,60],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[44,[[12,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[62,62],[63,63],[44,44],[[]],[[]],[[]],[7,56],[[62,62],3],[[63,63],3],[[44,44],3],[[],3],[[],3],[7,64],[[62,4],5],[[63,4],5],[[44,4],5],[[44,4],5],[[7,4],5],[[7,4],5],[[7,1],7],[[]],[[]],[[]],[[]],[46,7],[65,7],0,[[]],[[]],[[]],[[]],[7,44],0,[7,60],[66],[[44,45],7],[7,[[12,[67]]]],[[]],[[]],[[]],[[],10],[[],10],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],13],[[],13],[[],13],[[],13],[7,3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[6,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[68,68],[6,6],[[[69,[26]]],[[69,[26]]]],[70,70],[71,71],[72,72],[73,73],[74,74],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[74,74],41],[[6,9],3],[[],6],[[],69],[[],70],[[],71],[[],72],[[],73],[[6,6],3],[[74,74],3],[[],3],[[],3],[[68,4],5],[[68,4],5],[[6,4],5],[[[69,[47]],4],5],[[70,4],5],[[71,4],5],[[72,4],5],[[73,4],5],[[74,4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[6,9],75],[[6,9],3],[[6,9],[[12,[[69,[[0,[76,26,28,29]]]]]]]],[[6,9],12],[[6,9],[[12,[70]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[69,12],[70,[[12,[42]]]],[71,[[12,[9]]]],[72,[[12,[42]]]],[73,[[12,[43]]]],[69,12],[70,[[12,[42]]]],[71,[[12,[9]]]],[72,[[12,[42]]]],[73,[[12,[43]]]],0,[[74,74],[[12,[41]]]],[66],[[6,9],[[12,[[0,[[0,[76,26,28,29]]]]]]]],[[6,9],[[12,[[0,[76,26,28,29]]]]]],[6,12],[69],[70],[71],[72],[73],[6,12],0,[6,[[12,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[6,9],[[8,[3,68]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[6,9],[[8,[[12,[[69,[[0,[76,26,28,29]]]]]],68]]]],[[6,9],[[8,[12,68]]]],[[6,9],[[8,[[12,[70]],68]]]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[6,9],[[8,[[12,[[0,[[0,[76,26,28,29]]]]]],68]]]],[[6,9],[[8,[[12,[[0,[76,26,28,29]]]],68]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],0,0,0,[[6,9],[[8,[7]]]],[[6,9]],0,0,0,0,[[6,9],[[8,[55,7]]]],[[6,9],55],0,0],"p":[[6,"Command"],[4,"ColorChoice"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[3,"Error"],[4,"Result"],[15,"str"],[3,"String"],[3,"PossibleValue"],[4,"Option"],[3,"TypeId"],[3,"App"],[8,"Into"],[3,"Arg"],[4,"ArgAction"],[3,"ArgGroup"],[4,"AppSettings"],[4,"ArgSettings"],[3,"ValueParser"],[4,"ValueHint"],[3,"StringValueParser"],[3,"OsStringValueParser"],[3,"PathBufValueParser"],[8,"Clone"],[8,"ValueEnum"],[8,"Send"],[8,"Sync"],[3,"EnumValueParser"],[3,"PossibleValuesParser"],[15,"i64"],[8,"TryFrom"],[3,"RangedI64ValueParser"],[15,"u64"],[3,"RangedU64ValueParser"],[3,"BoolValueParser"],[3,"FalseyValueParser"],[3,"BoolishValueParser"],[3,"NonEmptyStringValueParser"],[4,"Ordering"],[3,"OsStr"],[15,"usize"],[4,"ErrorKind"],[8,"Display"],[3,"Error"],[8,"Debug"],[3,"RangeToInclusive"],[3,"RangeFull"],[3,"RangeTo"],[3,"RangeFrom"],[3,"RangeInclusive"],[3,"Range"],[8,"RangeBounds"],[3,"Vec"],[8,"Iterator"],[15,"char"],[3,"OsString"],[3,"Box"],[6,"Result"],[6,"Result"],[4,"ContextKind"],[4,"ContextValue"],[15,"never"],[3,"Error"],[3,"Demand"],[8,"Error"],[4,"MatchesError"],[3,"ValuesRef"],[3,"RawValues"],[3,"Values"],[3,"OsValues"],[3,"Indices"],[4,"ValueSource"],[15,"u8"],[8,"Any"],[4,"Cow"],[8,"Args"],[8,"Subcommand"],[8,"CommandFactory"],[8,"FromArgMatches"],[8,"Parser"],[8,"ValueParserFactory"],[8,"TypedValueParser"],[13,"Bool"],[13,"String"],[13,"Strings"],[13,"Number"],[13,"Downcast"]]},\
"clap_derive":{"doc":"clap_derive","t":[24,24,24,24,24],"n":["ArgEnum","Args","Parser","Subcommand","ValueEnum"],"q":["clap_derive","","","",""],"d":["Generates the <code>ValueEnum</code> impl.","Generates the <code>Args</code> impl.","Generates the <code>Parser</code> implementation.","Generates the <code>Subcommand</code> impl.","Generates the <code>ValueEnum</code> impl."],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"p":[]},\
"clap_lex":{"doc":"Minimal, flexible command-line parser","tn":["ArgCursor","Current","End","ParsedArg","RawArgs","RawOsStr","RawOsString","SeekFrom","ShortFlags","Start","advance_by","as_raw_bytes","as_ref","as_ref","assert_from_raw_bytes","assert_from_raw_vec","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","contains","cursor","default","default","default","deref","display","ends_with","ends_with_os","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_args","from_raw_bytes_unchecked","from_raw_vec_unchecked","from_str","from_string","hash","hash","hash","index","index","index","index","index","index","index","index","index","index","index","index","insert","into","into","into","into","into","into","into_box","into_iter","into_os_string","into_raw_vec","into_string","is_empty","is_empty","is_empty","is_end","is_escape","is_long","is_number","is_number","is_short","is_stdio","new","new","new","next","next","next_flag","next_os","next_value_os","partial_cmp","partial_cmp","partial_cmp","partial_cmp","peek","peek_os","raw_len","remaining","rfind","rsplit_once","seek","shrink_to_fit","split","split_at","split_off","split_once","starts_with","starts_with_os","strip_prefix","strip_suffix","to_long","to_os_str","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_short","to_str","to_str_lossy","to_value","to_value_os","trim_end_matches","trim_matches","trim_start_matches","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0"],"q":["clap_lexclap_lex::SeekFrom","",""],"d":["Position within <code>RawArgs</code>","Sets the offset to the current position plus the specified …","Sets the offset to the size of this object plus the …","Command-line Argument","Command-line arguments","A container for borrowed byte strings converted by this …","A container for owned byte strings converted by this crate.","Enumeration of possible methods to seek within an I/O …","Walk through short flags within a <code>ParsedArg</code>","Sets the offset to the provided number of bytes.","Move the iterator forward by <code>n</code> short flags","Returns the byte string stored by this container.","","","Wraps a byte string, without copying or encoding …","Wraps a byte string, without copying or encoding …","","","","","","","","","","","","","","","","Equivalent to <code>String::clear</code>.","","","","","","","","","","","","","","","","","Equivalent to <code>str::contains</code>.","Create a cursor for walking the arguments","","","","","Safely print an argument that may contain non-UTF8 content","Equivalent to <code>str::ends_with</code>.","Equivalent to <code>str::ends_with</code> but accepts this type for the …","","","","","","","","","","","","","","","","","Equivalent to <code>str::find</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","<strong>NOTE:</strong> The argument returned will be the current binary.","Wraps a byte string, without copying or encoding …","Wraps a byte string, without copying or encoding …","Wraps a string, without copying or encoding conversion.","Wraps a string, without copying or encoding conversion.","","","","","","","","","","","","","","","","Inject arguments before the <code>RawArgs::next</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Equivalent to <code>String::into_boxed_str</code>.","","Converts this representation back to a platform-native …","Returns the byte string stored by this container.","Equivalent to <code>OsString::into_string</code>.","Argument is length of 0","No short flags left","Equivalent to <code>str::is_empty</code>.","Any remaining args?","Does the argument look like an argument escape (<code>--</code>)","Can treat as a long-flag","Does the argument look like a number","Does the short flag look like a number","Can treat as a short-flag","Does the argument look like a stdio argument (<code>-</code>)","Example","Converts a platform-native string into a representation …","Converts a platform-native string into a representation …","Advance the cursor, returning the next <code>ParsedArg</code>","","Advance the iterator, returning the next short flag on …","Advance the cursor, returning a raw argument value.","Advance the iterator, returning everything left as a value","","","","","Return the next <code>ParsedArg</code>","Return a raw argument value.","Returns the length of the byte string stored by this …","Return all remaining raw arguments, advancing the cursor …","Equivalent to <code>str::rfind</code>.","Equivalent to <code>str::rsplit_once</code>.","Adjust the cursor’s position","Equivalent to <code>String::shrink_to_fit</code>.","Equivalent to <code>str::split</code>, but empty patterns are not …","Equivalent to <code>str::split_at</code>.","Equivalent to <code>String::split_off</code>.","Equivalent to <code>str::split_once</code>.","Equivalent to <code>str::starts_with</code>.","Equivalent to <code>str::starts_with</code> but accepts this type for …","Equivalent to <code>str::strip_prefix</code>.","Equivalent to <code>str::strip_suffix</code>.","Treat as a long-flag","Converts this representation back to a platform-native …","","","","","","","","Treat as a short-flag","Equivalent to <code>OsStr::to_str</code>.","Converts this string to the best UTF-8 representation …","Treat as a value","Treat as a value","Equivalent to <code>str::trim_end_matches</code>.","Equivalent to <code>str::trim_matches</code>.","Equivalent to <code>str::trim_start_matches</code>.","Equivalent to <code>String::truncate</code>.","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,12,12,0,0,0,0,0,0,12,1,4,4,5,4,5,9,10,11,1,4,5,5,12,9,10,11,1,4,5,12,5,9,10,11,1,5,12,9,10,11,1,5,12,10,11,4,5,4,9,9,4,5,5,11,4,4,9,10,11,4,4,4,4,4,4,5,5,5,5,5,5,12,4,9,10,11,1,4,5,12,9,9,10,11,1,5,5,5,12,9,4,5,4,5,11,4,5,4,4,4,4,4,4,5,5,5,5,5,5,9,9,10,11,1,5,12,5,1,5,5,5,11,1,4,9,11,11,11,1,11,11,9,4,5,9,1,1,9,1,10,11,4,5,9,9,4,9,4,4,9,5,4,4,5,4,4,4,4,4,11,4,9,10,11,1,4,5,12,11,4,4,11,11,4,4,4,5,9,10,11,1,5,12,9,10,11,1,5,12,9,10,11,1,4,5,12,37,38,39],"f":[0,0,0,0,0,0,0,0,0,0,[[1,2],[[3,[2]]]],[4],[4,4],[5,4],[[],4],[[[8,[6,7]]],5],[[]],[[]],[[]],[[]],[[]],[[]],[5,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5],[9,9],[10,10],[11,11],[1,1],[5,5],[12,12],[[]],[[]],[[]],[[]],[[]],[[]],[[10,10],13],[[11,11],13],[[4,4],13],[[5,5],13],[4,14],[9,10],[[],9],[[],4],[[],5],[5],[11,15],[4,14],[[4,4],14],[[9,9],14],[[10,10],14],[[11,11],14],[[4,16],14],[[4,5],14],[[4,5],14],[[4,17],14],[[4,16],14],[[4,4],14],[[5,17],14],[[5,17],14],[[5,4],14],[[5,16],14],[[5,5],14],[[5,4],14],[[12,12],14],[4,[[18,[2]]]],[[9,19],20],[[10,19],20],[[11,19],20],[[1,19],20],[[4,19],[[3,[21]]]],[[5,19],[[3,[21]]]],[[12,19],[[3,[21]]]],[[],9],[[]],[[]],[[]],[[]],[[]],[16,5],[[[22,[4,7]]],5],[[]],[[],9],[[],4],[[[8,[6,7]]],5],[17,4],[16,5],[11],[4],[5],[[4,[23,[2]]]],[[4,[24,[2]]]],[[4,[25,[2]]]],[[4,26]],[[4,[27,[2]]]],[[4,[28,[2]]]],[[5,[24,[2]]]],[[5,[23,[2]]]],[[5,[25,[2]]]],[[5,26]],[[5,[27,[2]]]],[[5,[28,[2]]]],[[9,10]],[[]],[[]],[[]],[[]],[[]],[[]],[5,[[22,[4,7]]]],[[]],[5,29],[5,[[8,[6,7]]]],[5,[[3,[16,5]]]],[11,14],[1,14],[4,14],[[9,10],14],[11,14],[11,14],[11,14],[1,14],[11,14],[11,14],[30,9],[31,[[32,[4]]]],[29,5],[[9,10],[[18,[11]]]],[1,18],[1,[[18,[[3,[33,4]]]]]],[[9,10],[[18,[31]]]],[1,[[18,[4]]]],[[10,10],[[18,[13]]]],[[11,11],[[18,[13]]]],[[4,4],[[18,[13]]]],[[5,5],[[18,[13]]]],[[9,10],[[18,[11]]]],[[9,10],[[18,[31]]]],[4,2],[[9,10],34],[4,[[18,[2]]]],[4,18],[[9,10,12]],[5],[4,35],[[4,2]],[[5,2],5],[4,18],[4,14],[[4,4],14],[4,[[18,[4]]]],[4,[[18,[4]]]],[11,18],[4,[[32,[31]]]],[[]],[[]],[[]],[[]],[4],[[]],[[]],[11,[[18,[1]]]],[4,[[18,[17]]]],[4,[[32,[17]]]],[11,[[3,[17,4]]]],[11,4],[4,4],[4,4],[4,4],[[5,2]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],0,0,0],"p":[[3,"ShortFlags"],[15,"usize"],[4,"Result"],[3,"RawOsStr"],[3,"RawOsString"],[15,"u8"],[3,"Global"],[3,"Vec"],[3,"RawArgs"],[3,"ArgCursor"],[3,"ParsedArg"],[4,"SeekFrom"],[4,"Ordering"],[15,"bool"],[8,"Display"],[3,"String"],[15,"str"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"Box"],[3,"RangeTo"],[3,"RangeInclusive"],[3,"RangeFrom"],[3,"RangeFull"],[3,"RangeToInclusive"],[3,"Range"],[3,"OsString"],[8,"IntoIterator"],[3,"OsStr"],[4,"Cow"],[15,"char"],[8,"Iterator"],[3,"Split"],[3,"TypeId"],[13,"Start"],[13,"End"],[13,"Current"]]},\
"either":{"doc":"The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","t":[4,2,13,2,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,11,11,11,12,12],"n":["Either","Left","Left","Right","Right","all","any","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","borrow","borrow_mut","cause","clone","clone_from","clone_into","cmp","collect","consume","count","deref","deref_mut","description","either","either_into","either_with","eq","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","fill_buf","find","find_map","flip","flush","fmt","fmt","fold","for_both","for_each","from","from","hash","into","into","into_future","into_inner","into_iter","into_iter","is_left","is_right","last","left","left_and_then","left_or","left_or_default","left_or_else","len","map","map_left","map_right","next","next_back","nth","partial_cmp","partition","poll","position","provide","read","read_exact","read_line","read_to_end","read_to_string","read_until","rfind","rfold","right","right_and_then","right_or","right_or_default","right_or_else","seek","size_hint","source","to_owned","to_string","try_from","try_into","try_left","try_right","type_id","unwrap_left","unwrap_right","write","write_all","write_fmt","0","0"],"q":["either","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","either::Either",""],"d":["The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","","A value of type <code>L</code>.","","A value of type <code>R</code>.","","","","","","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","","","","","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","","","","","","","","","","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","","","","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","","","","","Evaluate the provided expression for both <code>Either::Left</code> and …","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","Extract the value of an either over two equivalent types.","","Convert the inner value to an iterator.","Return true if the value is the <code>Left</code> variant.","Return true if the value is the <code>Right</code> variant.","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","","","","","","","","","","","","","","","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","","","","","","","Macro for unwrapping the left side of an <code>Either</code>, which …","Dual to <code>try_left!</code>, see its documentation for more …","","Returns the left value","Returns the right value","","","","",""],"i":[0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,32,33],"f":[0,0,0,0,0,[1,2],[1,2],[1,3],[1,4],[1,5],[1,6],[1],[1],[1,1],[[[7,[1]]],[[1,[7,7]]]],[[[7,[1]]],[[1,[7,7]]]],[1],[1,6],[1],[1,3],[1,1],[1,4],[1,5],[[]],[[]],[1,[[9,[8]]]],[[[1,[10,10]]],[[1,[10,10]]]],[[[1,[10,10]],[1,[10,10]]]],[[]],[[[1,[11,11]],1],12],[1],[[1,13]],[1,13],[1],[1],[1,3],[1],[1],[1],[[[1,[14,14]],1],2],[[1,3]],[[1,3]],[1],[[[1,[15,15]]],[[15,[1]]]],[1],[[[1,[9,9]]],[[9,[1]]]],[[[1,[15,15]]],[[15,[1]]]],[1],[1,16],[1,9],[1,9],[1,1],[1,16],[[1,17],18],[[[1,[19,19]],17],18],[1],0,[1],[[]],[15,1],[[[1,[20,20]]]],[1,15],[[]],[[]],[1],[[]],[1,1],[1,2],[1,2],[1,9],[1,9],[1,1],[1],[1],[1],[1,13],[1,1],[1,1],[1,1],[1,9],[1,9],[[1,13],9],[[[1,[21,21]],1],[[9,[12]]]],[1],[[[7,[1]],22],23],[1,[[9,[13]]]],[24],[1,[[16,[13]]]],[1,16],[[1,25],[[16,[13]]]],[[1,26],[[16,[13]]]],[[1,25],[[16,[13]]]],[[1,27,26],[[16,[13]]]],[1,9],[1],[1,9],[1,1],[1],[1],[1],[[1,28],[[16,[29]]]],[1],[1,[[9,[8]]]],[[]],[[],25],[[],15],[[],15],0,0,[[],30],[1],[1],[1,[[16,[13]]]],[1,16],[[1,31],16],0,0],"p":[[4,"Either"],[15,"bool"],[15,"str"],[3,"Path"],[3,"OsStr"],[3,"CStr"],[3,"Pin"],[8,"Error"],[4,"Option"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[15,"usize"],[8,"PartialEq"],[4,"Result"],[6,"Result"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Hash"],[8,"PartialOrd"],[3,"Context"],[4,"Poll"],[3,"Demand"],[3,"String"],[3,"Vec"],[15,"u8"],[4,"SeekFrom"],[15,"u64"],[3,"TypeId"],[3,"Arguments"],[13,"Left"],[13,"Right"]]},\
"getrandom":{"doc":"Interface to the operating system’s random number …","t":[18,18,3,18,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11],"n":["CUSTOM_START","ERRNO_NOT_POSITIVE","Error","FAILED_RDRAND","INTERNAL_START","IOS_SEC_RANDOM","NODE_CRYPTO","NODE_RANDOM_FILL_SYNC","NO_RDRAND","UNSUPPORTED","VXWORKS_RAND_SECURE","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","WINDOWS_RTL_GEN_RANDOM","borrow","borrow_mut","clone","code","eq","fmt","fmt","from","from","getrandom","into","raw_os_error","try_from","try_into","type_id"],"q":["getrandom","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Codes at or above this point can be used by users to …","The platform-specific <code>errno</code> returned a non-positive value.","A small and <code>no_std</code> compatible error type","RDRAND instruction failed due to a hardware issue.","Codes below this point represent OS Errors (i.e. positive …","Call to iOS <code>SecRandomCopyBytes</code> failed.","NodeJS does not have support for the <code>crypto</code> module.","NodeJS does not have support for <code>crypto.randomFillSync</code>.","RDRAND instruction unsupported on this target.","This target/platform is not supported by <code>getrandom</code>.","On VxWorks, call to <code>randSecure</code> failed (random number …","The browser does not have support for <code>self.crypto</code>.","The browser does not have support for …","Call to Windows <code>RtlGenRandom</code> failed.","","","","Extract the bare error code.","","","","","Returns the argument unchanged.","Fill <code>dest</code> with random bytes from the system’s preferred …","Calls <code>U::from(self)</code>.","Extract the raw OS error code (if this error came from the …","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[1,1],[1,2],[[1,1],3],[[1,4],5],[[1,4],5],[2,1],[[]],[[],[[6,[1]]]],[[]],[1,[[8,[7]]]],[[],6],[[],6],[[],9]],"p":[[3,"Error"],[3,"NonZeroU32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[15,"i32"],[4,"Option"],[3,"TypeId"]]},\
"hashbrown":{"doc":"This crate is a Rust port of Google’s high-performance …","tn":["AllocError","CapacityOverflow","HashMap","HashSet","TryReserveError","borrow","borrow_mut","clone","clone_into","eq","fmt","from","hash_map","hash_set","into","raw","to_owned","try_from","try_into","type_id","layout","DefaultHashBuilder","Drain","DrainFilter","Entry","EntryRef","HashMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Keys","Occupied","Occupied","Occupied","OccupiedEntry","OccupiedEntryRef","OccupiedError","RawEntryBuilder","RawEntryBuilderMut","RawEntryMut","RawOccupiedEntryMut","RawVacantEntryMut","Vacant","Vacant","Vacant","VacantEntry","VacantEntryRef","Values","ValuesMut","allocator","and_modify","and_modify","and_modify","and_replace_entry_with","and_replace_entry_with","and_replace_entry_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","contains_key","default","drain","drain_filter","drop","entry","entry","entry_ref","eq","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_hash","from_hash","from_iter","from_key","from_key","from_key_hashed_nocheck","from_key_hashed_nocheck","get","get","get","get","get_key_value","get_key_value","get_key_value_mut","get_key_value_mut","get_many_key_value_mut","get_many_key_value_unchecked_mut","get_many_mut","get_many_unchecked_mut","get_mut","get_mut","get_mut","get_mut","hasher","index","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert","insert_hashed_nocheck","insert_key","insert_unique_unchecked","insert_with_hasher","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_key","into_key","into_key_value","into_keys","into_mut","into_mut","into_mut","into_values","is_empty","iter","iter_mut","key","key","key","key","key","key","key","key_mut","keys","len","len","len","len","len","len","len","len","len","len","next","next","next","next","next","next","next","next","next","next","or_default","or_default","or_insert","or_insert","or_insert","or_insert_with","or_insert_with","or_insert_with","or_insert_with_key","or_insert_with_key","raw_entry","raw_entry_mut","raw_table","remove","remove","remove","remove","remove_entry","remove_entry","remove_entry","remove_entry","replace_entry","replace_entry","replace_entry_with","replace_entry_with","replace_entry_with","replace_key","replace_key","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","values","values_mut","with_capacity_and_hasher","with_capacity_and_hasher_in","with_hasher","with_hasher_in","0","0","0","0","0","0","Difference","Drain","DrainFilter","Entry","HashSet","Intersection","IntoIter","Iter","Occupied","OccupiedEntry","SymmetricDifference","Union","Vacant","VacantEntry","allocator","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","default","difference","drain","drain_filter","drop","entry","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get","get","get_or_insert","get_or_insert_owned","get_or_insert_with","hasher","insert","insert","insert","insert_unique_unchecked","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_value","is_disjoint","is_empty","is_subset","is_superset","iter","len","len","len","len","next","next","next","next","next","next","next","next","or_insert","remove","remove","replace","replace","reserve","retain","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sub","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity_and_hasher","with_capacity_and_hasher_in","with_hasher","with_hasher_in","0","0","Bucket","RawDrain","RawIntoIter","RawIter","RawIterHash","RawTable","allocator","as_mut","as_ptr","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","bucket_index","buckets","capacity","clear","clear_no_drop","clone","clone","clone","clone_from","clone_from_with_hasher","clone_into","clone_into","clone_into","copy_from_nonoverlapping","data_end","default","drain","drain_iter_from","drop","drop","drop","drop","erase","erase_entry","erase_no_drop","find","from","from","from","from","from","from","get","get_many_mut","get_many_unchecked_mut","get_mut","insert","insert_entry","insert_no_grow","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter_from","is_empty","iter","iter","iter","iter_hash","len","new","new_in","next","next","next","next","read","reflect_insert","reflect_remove","remove","remove_entry","replace_bucket_with","reserve","shrink_to","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_insert_no_grow","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_with_capacity","try_with_capacity_in","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity_in","write"],"q":["hashbrown","","","","","","","","","","","","","","","","","","","","hashbrown::TryReserveError","hashbrown::hash_maphashbrown::hash_map::Entry","","hashbrown::hash_map::EntryRef","","hashbrown::hash_map::RawEntryMut","","hashbrown::hash_sethashbrown::hash_set::Entry","","hashbrown::raw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The memory allocator returned an error","Error due to the computed capacity exceeding the collection…","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","The error type for <code>try_reserve</code> methods.","","","","","","","Returns the argument unchanged.","A hash map implemented with quadratic probing and SIMD …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","Calls <code>U::from(self)</code>.","Experimental and unsafe <code>RawTable</code> API. This module is only …","","","","","The layout of the allocation request that failed.","Dummy default hasher for <code>HashMap</code>.","A draining iterator over the entries of a <code>HashMap</code> in …","A draining iterator over entries of a <code>HashMap</code> which don’…","A view into a single entry in a map, which may either be …","A view into a single entry in a map, which may either be …","A hash map implemented with quadratic probing and SIMD …","An owning iterator over the entries of a <code>HashMap</code> in …","An owning iterator over the keys of a <code>HashMap</code> in arbitrary …","An owning iterator over the values of a <code>HashMap</code> in …","An iterator over the entries of a <code>HashMap</code> in arbitrary …","A mutable iterator over the entries of a <code>HashMap</code> in …","An iterator over the keys of a <code>HashMap</code> in arbitrary order. …","An occupied entry.","An occupied entry.","An occupied entry.","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","The error returned by <code>try_insert</code> when the key already …","A builder for computing where in a <code>HashMap</code> a key-value …","A builder for computing where in a <code>HashMap</code> a key-value …","A view into a single entry in a map, which may either be …","A view into an occupied entry in a <code>HashMap</code>. It is part of …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A vacant entry.","A vacant entry.","A vacant entry.","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","A view into a vacant entry in a <code>HashMap</code>. It is part of the …","An iterator over the values of a <code>HashMap</code> in arbitrary …","A mutable iterator over the values of a <code>HashMap</code> in …","Returns a reference to the underlying allocator.","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides in-place mutable access to an occupied entry …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","","","Returns <code>true</code> if the map contains a value for the specified …","Creates an empty <code>HashMap&lt;K, V, S, A&gt;</code>, with the <code>Default</code> …","Clears the map, returning all key-value pairs as an …","Drains elements which are true under the given predicate, …","","Gets the given key’s corresponding entry in the map for …","The entry in the map that was already occupied.","Gets the given key’s corresponding entry by reference in …","","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","Inserts all new key-values from the iterator to existing …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>RawEntryMut</code> from the given hash and matching …","Access an immutable entry by hash and matching function.","","Creates a <code>RawEntryMut</code> from the given key.","Access an immutable entry by key.","Creates a <code>RawEntryMut</code> from the given key and its hash.","Access an immutable entry by a key and its hash.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Gets a reference to the value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a reference to the key and value in the entry.","Returns the key-value pair corresponding to the supplied …","Gets a mutable reference to the key and value in the entry.","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Attempts to get mutable references to <code>N</code> values in the map …","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Gets a mutable reference to the value in the entry.","Returns a reference to the map’s <code>BuildHasher</code>.","Returns a reference to the value corresponding to the …","Inserts a key-value pair into the map.","Sets the value of the entry, and returns a …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns an …","Sets the value of the entry, and returns the entry’s old …","Sets the value of the entry with the VacantEntryRef’s …","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry, and returns the entry’s old …","Insert a key-value pair into the map without checking if …","Set the value of an entry with a custom hasher function.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a consuming iterator, that is, one that moves each …","Creates an iterator over the entries of a <code>HashMap</code> in …","Creates an iterator over the entries of a <code>HashMap</code> in …","","","","","","","","","","","Converts the entry into a mutable reference to the key in …","Take ownership of the key.","Take ownership of the key.","Converts the OccupiedEntry into a mutable reference to the …","Creates a consuming iterator visiting all the keys in …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntry into a mutable reference to the …","Converts the OccupiedEntryRef into a mutable reference to …","Creates a consuming iterator visiting all the values in …","Returns <code>true</code> if the map contains no elements.","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","Gets a reference to the key in the entry.","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Returns a reference to this entry’s key.","Gets a reference to the key in the entry.","Gets a reference to the key that would be used when …","Gets a mutable reference to the key in the entry.","An iterator visiting all keys in arbitrary order. The …","Returns the number of elements in the map.","","","","","","","","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting the result of …","Ensures a value is in the entry by inserting, if empty, …","Ensures a value is in the entry by inserting, if empty, …","Creates a raw immutable entry builder for the HashMap.","Creates a raw entry builder for the HashMap.","Returns a mutable reference to the <code>RawTable</code> used …","Removes a key from the map, returning the value at the key …","Takes the value out of the entry, and returns it.","Takes the value out of the entry, and returns it. Keeps …","Takes the value out of the entry, and returns it. Keeps …","Removes a key from the map, returning the stored key and …","Take the ownership of the key and value from the map.","Take the ownership of the key and value from the map. …","Take the ownership of the key and value from the map. …","Replaces the entry, returning the old key and value. The …","Replaces the entry, returning the old key and value. The …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Provides shared access to the key and owned access to the …","Replaces the key in the hash map with the key used to …","Replaces the key in the hash map with the key used to …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate. …","Shrinks the capacity of the map with a lower limit. It …","Shrinks the capacity of the map as much as possible. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to insert a key-value pair into the map, and returns …","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","","","","","","","","","","","","","The value which was not inserted, because the entry was …","An iterator visiting all values in arbitrary order. The …","An iterator visiting all values mutably in arbitrary order.","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> with the specified capacity, …","Creates an empty <code>HashMap</code> which will use the given hash …","Creates an empty <code>HashMap</code> which will use the given hash …","","","","","","","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>HashSet</code>.","A draining iterator over entries of a <code>HashSet</code> which don’…","A view into a single entry in a set, which may either be …","A hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>HashSet</code>.","An iterator over the items of a <code>HashSet</code>.","An occupied entry.","A view into an occupied entry in a <code>HashSet</code>. It is part of …","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>HashSet</code>…","A vacant entry.","A view into a vacant entry in a <code>HashSet</code>. It is part of the …","Returns a reference to the underlying allocator.","Returns the intersection of <code>self</code> and <code>rhs</code> as a new …","Returns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.","Returns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of elements the set can hold without …","Clears the set, removing all values.","","","","","","","","","","","","","","Returns <code>true</code> if the set contains a value.","Creates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …","Visits the values representing the difference, i.e., the …","Clears the set, returning all elements in an iterator.","Drains elements which are true under the given predicate, …","","Gets the given value’s corresponding entry in the set …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the value in the set, if any, that …","Returns a reference to this entry’s value.","Gets a reference to the value in the entry.","Gets a reference to the value that would be used when …","Inserts the given <code>value</code> into the set if it is not present, …","Inserts an owned copy of the given <code>value</code> into the set if …","Inserts a value computed from <code>f</code> into the set if the given …","Returns a reference to the set’s <code>BuildHasher</code>.","Adds a value to the set.","Sets the value of the entry, and returns an OccupiedEntry.","Sets the value of the entry with the VacantEntry’s value.","Insert a value the set without checking if the value …","Visits the values representing the intersection, i.e., the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a consuming iterator, that is, one that moves each …","","","","","","","","","Take ownership of the value.","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …","Returns <code>true</code> if the set contains no elements.","Returns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…","Returns <code>true</code> if the set is a superset of another, i.e., …","An iterator visiting all elements in arbitrary order. The …","Returns the number of elements in the set.","","","","","","","","","","","","Ensures a value is in the entry by inserting if it was …","Removes a value from the set. Returns whether the value was","Takes the value out of the entry, and returns it. Keeps …","Adds a value to the set, replacing the existing value, if …","Replaces the entry, returning the old value. The new value …","Reserves capacity for at least <code>additional</code> more elements to …","Retains only the elements specified by the predicate.","Shrinks the capacity of the set with a lower limit. It …","Shrinks the capacity of the set as much as possible. It …","","","","","","","","","Returns the difference of <code>self</code> and <code>rhs</code> as a new …","Visits the values representing the symmetric difference, …","Removes and returns the value in the set, if any, that is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","","","","","","","","","","Visits the values representing the union, i.e., all the …","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates an empty <code>HashSet</code> with the specified capacity, using","Creates a new empty hash set which will use the given …","Creates a new empty hash set which will use the given …","","","A reference to a hash table bucket containing a <code>T</code>.","Iterator which consumes elements without freeing the table …","Iterator which consumes a table and returns elements.","Iterator which returns a raw pointer to every full bucket …","Iterator over occupied buckets that could match a given …","A raw hash table with an unsafe API.","Returns a reference to the underlying allocator.","","","","","","","","","","","","","","","","Returns a pointer to an element in the table.","Returns the index of a bucket from a <code>Bucket</code>.","Returns the number of buckets in the table.","Returns the number of elements the map can hold without …","Removes all elements from the table without freeing the …","Marks all table buckets as empty without dropping their …","","","","","Variant of <code>clone_from</code> to use when a hasher is available.","","","","","Returns pointer to one past last element of data table.","","Returns an iterator which removes all elements from the …","Returns an iterator which removes all elements from the …","","","","","Erases an element from the table, dropping it in place.","Finds and erases an element from the table, dropping it in …","Erases an element from the table without dropping it.","Searches for an element in the table.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to an element in the table.","Attempts to get mutable references to <code>N</code> entries in the …","","Gets a mutable reference to an element in the table.","Inserts a new element into the table, and returns its raw …","Inserts a new element into the table, and returns a …","Inserts a new element into the table, without growing the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Returns an iterator which consumes all elements from the …","Returns <code>true</code> if the table contains no elements.","Returns an iterator over every element in the table. It is …","","","Returns an iterator over occupied buckets that could match …","Returns the number of elements in the table.","Creates a new empty hash table without allocating any …","Creates a new empty hash table without allocating any …","","","","","","Refresh the iterator so that it reflects an insertion into …","Refresh the iterator so that it reflects a removal from …","Removes an element from the table, returning it.","Finds and removes an element from the table, returning it.","Temporary removes a bucket, applying the given function to …","Ensures that at least <code>additional</code> items can be inserted …","Shrinks the table to fit <code>max(self.len(), min_size)</code> …","","","","","","","","","","","","","Attempts to insert a new element without growing the table …","","","","","","","Tries to ensure that at least <code>additional</code> items can be …","Attempts to allocate a new hash table with at least enough …","Attempts to allocate a new hash table using the given …","","","","","","","Allocates a new hash table with at least enough capacity …","Allocates a new hash table using the given allocator, with …",""],"i":[1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0,1,1,1,1,62,0,0,0,0,0,0,0,0,0,0,0,0,9,10,12,0,0,0,0,0,0,0,0,9,10,12,0,0,0,0,8,9,10,12,9,10,12,63,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,63,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,8,8,8,14,15,16,8,8,14,15,16,8,8,8,8,18,8,35,8,8,8,8,8,8,14,21,22,23,24,15,16,17,25,26,9,27,28,29,10,30,31,12,33,34,35,35,63,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,26,29,8,26,29,26,29,8,27,30,33,8,27,8,27,8,8,8,8,8,27,30,33,8,8,8,9,27,28,10,30,31,12,33,34,28,27,8,28,63,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,8,8,8,14,21,22,23,24,15,16,17,18,25,27,31,34,27,8,27,30,33,8,8,8,8,27,10,30,31,12,33,34,27,8,8,14,21,22,23,24,15,16,17,25,14,21,22,23,24,15,16,17,18,25,10,12,9,10,12,9,10,12,10,12,8,8,8,8,27,30,33,8,27,30,33,30,33,27,30,33,30,33,8,8,8,8,14,21,22,23,24,15,16,17,18,25,8,14,15,16,35,63,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,8,63,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,8,63,8,14,21,22,23,24,15,16,17,18,25,26,9,27,28,29,10,30,31,12,33,34,35,35,8,8,8,8,8,8,64,65,66,67,68,69,0,0,0,0,0,0,0,0,50,0,0,0,50,0,42,42,42,42,42,43,51,48,49,44,45,46,47,50,52,53,42,43,51,48,49,44,45,46,47,50,52,53,42,42,42,43,44,45,46,47,42,42,43,44,45,46,47,42,42,42,42,42,49,42,42,42,42,42,43,51,48,44,45,46,47,50,52,53,42,42,43,51,48,49,44,45,46,47,50,52,53,42,42,50,52,53,42,42,42,42,42,50,53,42,42,42,43,51,48,49,44,45,46,47,50,52,53,42,42,43,51,48,49,44,45,46,47,53,42,42,42,42,42,42,43,51,48,43,51,48,49,44,45,46,47,50,42,52,42,52,42,42,42,42,43,51,48,49,44,45,46,47,42,42,42,42,43,44,45,46,47,42,43,51,48,49,44,45,46,47,50,52,53,42,43,51,48,49,44,45,46,47,50,52,53,42,42,43,51,48,49,44,45,46,47,50,52,53,42,42,42,42,42,70,71,0,0,0,0,0,0,40,54,54,54,54,40,55,59,58,61,54,40,55,59,58,61,40,40,40,40,40,40,54,40,55,40,40,54,40,55,54,40,40,40,40,54,40,59,58,40,40,40,40,54,40,55,59,58,61,40,40,40,40,40,40,40,54,40,55,59,58,61,40,55,59,58,61,40,40,40,59,58,40,40,40,40,55,59,58,61,54,55,55,40,40,40,40,40,55,59,58,54,40,55,54,40,55,59,58,61,40,54,40,55,59,58,61,40,40,40,54,40,55,59,58,61,40,40,54],"f":[0,0,0,0,0,[[]],[[]],[1,1],[[]],[[1,1],2],[[1,3],4],[[]],0,0,[[]],0,[[]],[[],5],[[],5],[[],6],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[8,[[0,[0,7]]]]]],[[[9,[[0,[0,7]]]]],[[9,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]]],[[10,[[0,[0,7]]]]]],[[[12,[11,[0,[0,7]]]]],[[12,[11,[0,[0,7]]]]]],[[[9,[[0,[0,7]]]]],[[9,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]]],[[10,[[0,[0,7]]]]]],[[[12,[11,[0,[0,7]]]]],[[12,[11,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[[0,[0,7]]]]],13],[[[8,[[0,[0,7]]]]]],[[[8,[7,7,7,[0,[0,7]]]]],[[8,[7,7,7,[0,[0,7]]]]]],[14,14],[15,15],[16,16],[[[8,[7,7,7,[0,[0,7]]]],[8,[7,7,7,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[8,2],[[],8],[[[8,[[0,[0,7]]]]],[[17,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[18,[[0,[0,7]]]]]],[18],[8,10],0,[8,[[12,[11]]]],[[8,8],2],[[8,19]],[[8,19]],[[8,19]],[[8,3],4],[[[14,[20,20]],3],4],[[21,3],4],[[[22,[20,20,[0,[0,7]]]],3],4],[[[23,[20,20,[0,[0,7]]]],3],4],[[[24,[20,[0,[0,7]]]],3],4],[[[15,[20]],3],4],[[[16,[20]],3],4],[[17,3],4],[[[25,[20]],3],4],[[[26,[[0,[0,7]]]],3],4],[[[9,[20,20,[0,[0,7]]]],3],4],[[[27,[20,20,[0,[0,7]]]],3],4],[[[28,[[0,[0,7]]]],3],4],[[[29,[[0,[0,7]]]],3],4],[[[10,[20,20,[0,[0,7]]]],3],4],[[[30,[20,20,[0,[0,7]]]],3],4],[[[31,[20,[0,[0,7]]]],3],4],[[[12,[[32,[[0,[11,20]]]],[0,[11,20]],20,[0,[0,7]]]],3],4],[[[33,[[32,[[0,[11,20]]]],[0,[11,20]],20,[0,[0,7]]]],3],4],[[[34,[[32,[[0,[11,20]]]],[0,[11,20]],[0,[0,7]]]],3],4],[[[35,[20,20,[0,[0,7]]]],3],4],[[[35,[20,20,[0,[0,7]]]],3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[26,[[0,[0,7]]]],36],[[9,[[0,[0,7]]]]]],[[[29,[[0,[0,7]]]],36],37],[19,8],[[[26,[[0,[0,7]]]]],[[9,[[0,[0,7]]]]]],[[[29,[[0,[0,7]]]]],37],[[[26,[[0,[0,7]]]],36],[[9,[[0,[0,7]]]]]],[[[29,[[0,[0,7]]]],36],37],[8,37],[[[27,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[8,37],[[[27,[[0,[0,7]]]]]],[8,37],[[[27,[[0,[0,7]]]]]],[8,37],[8,37],[8,37],[8,37],[8,37],[[[27,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]]],[8],[8,37],[[[9,[[0,[0,7]]]]],[[27,[[0,[0,7]]]]]],[[[27,[[0,[0,7]]]]]],[[[28,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]]],[[30,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[31,[[0,[0,7]]]]]],[[[12,[11,[0,[0,7]]]]],[[33,[11,[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[34,[11,[0,[0,7]]]]]],[[[28,[[0,[0,7]]]],36]],[[[27,[[0,[0,7]]]]]],[8],[[[28,[[0,[0,7]]]],36]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[8,[[0,[0,7]]]]],[[22,[[0,[0,7]]]]]],[8,21],[8,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[27,[[0,[0,7]]]]]],[[[31,[[0,[0,7]]]]]],[[[34,[11,[0,[0,7]]]]]],[[[27,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[23,[[0,[0,7]]]]]],[[[27,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[24,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],2],[[[8,[[0,[0,7]]]]],14],[[[8,[[0,[0,7]]]]],21],[[[27,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[31,[[0,[0,7]]]]]],[[[12,[11,[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[34,[11,[0,[0,7]]]]]],[[[27,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],15],[[[8,[[0,[0,7]]]]],13],[14,13],[21,13],[[[22,[[0,[0,7]]]]],13],[[[23,[[0,[0,7]]]]],13],[[[24,[[0,[0,7]]]]],13],[15,13],[16,13],[[[17,[[0,[0,7]]]]],13],[25,13],[14,37],[21,37],[[[22,[[0,[0,7]]]]],37],[[[23,[[0,[0,7]]]]],37],[[[24,[[0,[0,7]]]]],37],[15,37],[16,37],[[[17,[[0,[0,7]]]]],37],[18,37],[25,37],[[[10,[38,[0,[0,7]]]]]],[[[12,[11,38,[0,[0,7]]]]]],[[[9,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]]]],[[[12,[11,[0,[0,7]]]]]],[[[9,[[0,[0,7]]]]]],[[[10,[[0,[0,7]]]],39]],[[[12,[11,[0,[0,7]]]],39]],[[[10,[[0,[0,7]]]],39]],[[[12,[11,[0,[0,7]]]],39]],[[[8,[[0,[0,7]]]]],[[29,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],[[26,[[0,[0,7]]]]]],[[[8,[[0,[0,7]]]]],40],[8,37],[[[27,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[8,37],[[[27,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[[27,[[0,[0,7]]]]],[[9,[[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]],[[10,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]],[[12,[11,[0,[0,7]]]]]],[[[30,[[0,[0,7]]]]]],[[[33,[11,[0,[0,7]]]]]],[[8,13]],[[[8,[[0,[0,7]]]]]],[[8,13]],[8],[14],[21],[[[22,[[0,[0,7]]]]]],[[[23,[[0,[0,7]]]]]],[[[24,[[0,[0,7]]]]]],[15],[16],[[[17,[[0,[0,7]]]]]],[18],[25],[[]],[[]],[[]],[[]],[[],41],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[8,[[5,[35]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[8,13],[[5,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[[8,[[0,[0,7]]]]],16],[[[8,[[0,[0,7]]]]],25],[13,8],[[13,[0,[0,7]]],[[8,[[0,[0,7]]]]]],[[],8],[[[0,[0,7]]],[[8,[[0,[0,7]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[42],[[42,42],42],[[42,42],42],[[42,42],42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[42,[[0,[0,7]]]]],13],[[[42,[[0,[0,7]]]]]],[[[42,[7,7,[0,[0,7]]]]],[[42,[7,7,[0,[0,7]]]]]],[43,43],[[[44,[[0,[0,7]]]]],[[44,[[0,[0,7]]]]]],[[[45,[[0,[0,7]]]]],[[45,[[0,[0,7]]]]]],[[[46,[[0,[0,7]]]]],[[46,[[0,[0,7]]]]]],[[[47,[[0,[0,7]]]]],[[47,[[0,[0,7]]]]]],[[[42,[7,7,[0,[0,7]]]],[42,[7,7,[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[42,2],[[],42],[[42,42],45],[[[42,[[0,[0,7]]]]],[[48,[[0,[0,7]]]]]],[[[42,[[0,[0,7]]]]],[[49,[[0,[0,7]]]]]],[[[49,[[0,[0,7]]]]]],[42,50],[[42,42],2],[[42,19]],[[42,19]],[[42,3],4],[[[43,[20]],3],4],[[[51,[20,[0,[0,7]]]],3],4],[[[48,[20,[0,[0,7]]]],3],4],[[44,3],4],[[45,3],4],[[46,3],4],[[47,3],4],[[[50,[20,[0,[0,7]]]],3],4],[[[52,[20,[0,[0,7]]]],3],4],[[[53,[20,[0,[0,7]]]],3],4],[[]],[8,42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,42],[42,37],[[[50,[[0,[0,7]]]]]],[[[52,[[0,[0,7]]]]]],[[[53,[[0,[0,7]]]]]],[42],[42],[42],[42],[42,2],[[[50,[[0,[0,7]]]]],[[52,[[0,[0,7]]]]]],[[[53,[[0,[0,7]]]]]],[42],[[42,42],44],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[42,43],[[[42,[[0,[0,7]]]]],[[51,[[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[53,[[0,[0,7]]]]]],[[42,42],2],[[[42,[[0,[0,7]]]]],2],[[42,42],2],[[42,42],2],[[[42,[[0,[0,7]]]]],43],[[[42,[[0,[0,7]]]]],13],[43,13],[[[51,[[0,[0,7]]]]],13],[[[48,[[0,[0,7]]]]],13],[43,37],[[[51,[[0,[0,7]]]]],37],[[[48,[[0,[0,7]]]]],37],[[[49,[[0,[0,7]]]]],37],[44,37],[45,37],[46,37],[47,37],[[[50,[[0,[0,7]]]]]],[42,2],[[[52,[[0,[0,7]]]]]],[42,37],[[[52,[[0,[0,7]]]]]],[[42,13]],[[[42,[[0,[0,7]]]]]],[[42,13]],[42],[43],[[[51,[[0,[0,7]]]]]],[[[48,[[0,[0,7]]]]]],[[[49,[[0,[0,7]]]]]],[44],[45],[46],[47],[[42,42],42],[[42,42],46],[42,37],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[42,13],[[5,[1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[42,42],47],[13,[[42,[0]]]],[13,42],[[],[[42,[0]]]],[[],42],0,0,0,0,0,0,0,0,[[[40,[[0,[0,7]]]]]],[54],[54],[54],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[40,[[0,[0,7]]]],13],54],[[[40,[[0,[0,7]]]],54],13],[[[40,[[0,[0,7]]]]],13],[[[40,[[0,[0,7]]]]],13],[[[40,[[0,[0,7]]]]]],[[[40,[[0,[0,7]]]]]],[54,54],[[[40,[7,[0,[0,7]]]]],[[40,[7,[0,[0,7]]]]]],[55,55],[[[40,[7,[0,[0,7]]]],[40,[7,[0,[0,7]]]]]],[[[40,[7,[0,[0,7]]]],[40,[7,[0,[0,7]]]],56]],[[]],[[]],[[]],[[54,54]],[[[40,[[0,[0,7]]]]],57],[[],[[40,[[0,[0,7,38]]]]]],[[[40,[[0,[0,7]]]]],[[58,[[0,[0,7]]]]]],[[[40,[[0,[0,7]]]],55],[[58,[[0,[0,7]]]]]],[54],[[[40,[[0,[0,7]]]]]],[[[59,[[0,[0,7]]]]]],[[[58,[[0,[0,7]]]]]],[[[40,[[0,[0,7]]]],54]],[[[40,[[0,[0,7]]]],36,60],2],[[[40,[[0,[0,7]]]],54]],[[[40,[[0,[0,7]]]],36,60],[[37,[54]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[40,[[0,[0,7]]]],36,60],37],[[[40,[[0,[0,7]]]],60],37],[[[40,[[0,[0,7]]]],60],37],[[[40,[[0,[0,7]]]],36,60],37],[[[40,[[0,[0,7]]]],36,56],54],[[[40,[[0,[0,7]]]],36,56]],[[[40,[[0,[0,7]]]],36],54],[[]],[[]],[[]],[[]],[[]],[[]],[[[40,[[0,[0,7]]]]],[[59,[[0,[0,7]]]]]],[[]],[[]],[[]],[[]],[[[40,[[0,[0,7]]]],55],[[59,[[0,[0,7]]]]]],[[[40,[[0,[0,7]]]]],2],[[[40,[[0,[0,7]]]]],55],[[[59,[[0,[0,7]]]]],55],[[[58,[[0,[0,7]]]]],55],[[[40,[[0,[0,7]]]],36],[[61,[[0,[0,7]]]]]],[[[40,[[0,[0,7]]]]],13],[[],[[40,[0]]]],[[[0,[0,7]]],[[40,[[0,[0,7]]]]]],[55,[[37,[54]]]],[[[59,[[0,[0,7]]]]],37],[[[58,[[0,[0,7]]]]],37],[[[61,[[0,[0,7]]]]],[[37,[54]]]],[54],[[55,54]],[[55,54]],[[[40,[[0,[0,7]]]],54]],[[[40,[[0,[0,7]]]],36,60],37],[[[40,[[0,[0,7]]]],54],2],[[[40,[[0,[0,7]]]],13,56]],[[[40,[[0,[0,7]]]],13,56]],[55],[[[59,[[0,[0,7]]]]]],[[[58,[[0,[0,7]]]]]],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[40,[[0,[0,7]]]],36],[[5,[54]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[40,[[0,[0,7]]]],13,56],[[5,[1]]]],[13,[[5,[[40,[0]],1]]]],[[13,[0,[0,7]]],[[5,[[40,[[0,[0,7]]]],1]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[13,[[40,[0]]]],[[13,[0,[0,7]]],[[40,[[0,[0,7]]]]]],[54]],"p":[[4,"TryReserveError"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[8,"Clone"],[3,"HashMap"],[4,"RawEntryMut"],[4,"Entry"],[8,"Sized"],[4,"EntryRef"],[15,"usize"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"DrainFilter"],[8,"IntoIterator"],[8,"Debug"],[3,"IterMut"],[3,"IntoIter"],[3,"IntoKeys"],[3,"IntoValues"],[3,"ValuesMut"],[3,"RawEntryBuilderMut"],[3,"RawOccupiedEntryMut"],[3,"RawVacantEntryMut"],[3,"RawEntryBuilder"],[3,"OccupiedEntry"],[3,"VacantEntry"],[8,"Borrow"],[3,"OccupiedEntryRef"],[3,"VacantEntryRef"],[3,"OccupiedError"],[15,"u64"],[4,"Option"],[8,"Default"],[8,"FnOnce"],[3,"RawTable"],[3,"String"],[3,"HashSet"],[3,"Iter"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"Drain"],[3,"DrainFilter"],[4,"Entry"],[3,"IntoIter"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Bucket"],[3,"RawIter"],[8,"Fn"],[3,"NonNull"],[3,"RawDrain"],[3,"RawIntoIter"],[8,"FnMut"],[3,"RawIterHash"],[13,"AllocError"],[4,"DefaultHashBuilder"],[13,"Occupied"],[13,"Vacant"],[13,"Occupied"],[13,"Vacant"],[13,"Occupied"],[13,"Vacant"],[13,"Occupied"],[13,"Vacant"]]},\
"heck":{"doc":"<strong>heck</strong> is a case conversion library.","t":[12,12,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,3,10,8,8,8,8,8,8,8,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","0","0","0","0","0","0","0","0","0","AsKebabCase","AsLowerCamelCase","AsPascalCase","AsShoutyKebabCase","AsShoutySnakeCase","AsShoutySnekCase","AsSnakeCase","AsSnekCase","AsTitleCase","AsUpperCamelCase","TO_SHOUTY_SNEK_CASE","ToKebabCase","ToLowerCamelCase","ToPascalCase","ToShoutyKebabCase","ToShoutySnakeCase","ToShoutySnekCase","ToSnakeCase","ToSnekCase","ToTitleCase","ToUpperCamelCase","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","to_kebab_case","to_lower_camel_case","to_pascal_case","to_shouty_kebab_case","to_shouty_snake_case","to_snake_case","to_snek_case","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_title_case","to_upper_camel_case","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["heck","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","This wrapper performs a kebab case conversion in …","This wrapper performs a lower camel case conversion in …","This wrapper performs a upper camel case conversion in …","This wrapper performs a kebab case conversion in …","This wrapper performs a shouty snake  case conversion in …","This wrapper performs a shouty snake  case conversion in …","This wrapper performs a snake case conversion in …","This wrapper performs a snake case conversion in …","This wrapper performs a title case conversion in …","This wrapper performs a upper camel case conversion in …","CONVERT THIS TYPE TO SNEK CASE.","This trait defines a kebab case conversion.","This trait defines a lower camel case conversion.","ToPascalCase is an alias for ToUpperCamelCase. See …","This trait defines a shouty kebab case conversion.","This trait defines a shouty snake case conversion.","Oh heck, ToShoutySnekCase is an alias for …","This trait defines a snake case conversion.","Oh heck, SnekCase is an alias for ToSnakeCase. See …","This trait defines a title case conversion.","This trait defines an upper camel case conversion.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this type to kebab case.","Convert this type to lower camel case.","Convert this type to upper camel case.","Convert this type to shouty kebab case.","Convert this type to shouty snake case.","Convert this type to snake case.","Convert this type to snek case.","","","","","","","","Convert this type to title case.","Convert this type to upper camel case.","","","","","","","","","","","","","","","","","","","","",""],"i":[3,6,7,8,8,9,9,10,11,11,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,3,6,7,8,9,10,11,3,6,7,8,9,10,11,3,6,7,8,9,10,11,3,6,7,8,9,10,11,3,6,7,8,9,10,11,16,17,18,19,20,21,22,3,6,7,8,9,10,11,23,24,3,6,7,8,9,10,11,3,6,7,8,9,10,11,3,6,7,8,9,10,11],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[3,[[2,[1]]]],4],5],[[[6,[[2,[1]]]],4],5],[[[7,[[2,[1]]]],4],5],[[[8,[[2,[1]]]],4],5],[[[9,[[2,[1]]]],4],5],[[[10,[[2,[1]]]],4],5],[[[11,[[2,[1]]]],4],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14]],"p":[[15,"str"],[8,"AsRef"],[3,"AsKebabCase"],[3,"Formatter"],[6,"Result"],[3,"AsLowerCamelCase"],[3,"AsShoutyKebabCase"],[3,"AsShoutySnakeCase"],[3,"AsSnakeCase"],[3,"AsTitleCase"],[3,"AsUpperCamelCase"],[3,"String"],[4,"Result"],[3,"TypeId"],[8,"ToShoutySnekCase"],[8,"ToKebabCase"],[8,"ToLowerCamelCase"],[8,"ToPascalCase"],[8,"ToShoutyKebabCase"],[8,"ToShoutySnakeCase"],[8,"ToSnakeCase"],[8,"ToSnekCase"],[8,"ToTitleCase"],[8,"ToUpperCamelCase"]]},\
"indexmap":{"doc":"<code>IndexMap</code> is a hash table where the iteration order of the …","t":[8,2,2,10,14,14,0,0,3,4,3,3,3,3,3,3,16,3,8,13,3,13,3,16,3,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Equivalent","IndexMap","IndexSet","equivalent","indexmap","indexset","map","set","Drain","Entry","IndexMap","IntoIter","IntoKeys","IntoValues","Iter","IterMut","Key","Keys","MutableKeys","Occupied","OccupiedEntry","Vacant","VacantEntry","Value","Values","ValuesMut","__private_marker","__private_marker","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","collect","collect","collect","collect","collect","collect","contains_key","count","count","count","count","count","count","count","count","count","default","drain","entry","eq","extend","extend","first","first_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get_full","get_full_mut","get_full_mut2","get_full_mut2","get_index","get_index_mut","get_index_of","get_key_value","get_mut","get_mut","hasher","index","index","index","index","index","index_mut","index_mut","insert","insert","insert","insert_full","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_keys","into_mut","into_values","is_empty","iter","iter_mut","key","key","key","keys","last","last","last","last","last","last","last","last","last","last","last_mut","len","len","len","len","len","len","len","len","len","len","move_index","new","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","nth","nth","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","nth_back","or_default","or_insert","or_insert_with","or_insert_with_key","pop","remove","remove","remove_entry","remove_entry","reserve","retain","retain2","retain2","reverse","shift_remove","shift_remove","shift_remove_entry","shift_remove_entry","shift_remove_full","shift_remove_index","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort_by","sort_keys","sort_unstable_by","sort_unstable_keys","sorted_by","sorted_unstable_by","split_off","swap_indices","swap_remove","swap_remove","swap_remove_entry","swap_remove_entry","swap_remove_full","swap_remove_index","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","with_capacity_and_hasher","with_hasher","0","0","Difference","Drain","IndexSet","Intersection","IntoIter","Iter","SymmetricDifference","Union","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","contains","count","count","count","default","difference","drain","eq","extend","extend","first","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","from","from","from","from","from","from","from","from","from","from_iter","get","get_full","get_index","get_index_of","hasher","index","insert","insert_full","intersection","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","last","last","last","last","len","len","len","len","move_index","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth_back","nth_back","nth_back","pop","remove","replace","replace_full","reserve","retain","reverse","rfold","rfold","shift_remove","shift_remove_full","shift_remove_index","shift_take","shrink_to","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort","sort_by","sort_unstable","sort_unstable_by","sorted_by","sorted_unstable_by","split_off","sub","swap_indices","swap_remove","swap_remove_full","swap_remove_index","swap_take","symmetric_difference","take","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_hasher"],"q":["indexmap","","","","","","","","indexmap::mapindexmap::map::Entry","","indexmap::setd":["Key equivalence trait.","","","Compare self to <code>key</code> and return <code>true</code> if they are equal.","Create an <code>IndexMap</code> from a list of key-value pairs","Create an <code>IndexSet</code> from a list of values","<code>IndexMap</code> is a hash table where the iteration order of the …","A hash set implemented using <code>IndexMap</code>","A draining iterator over the entries of a <code>IndexMap</code>.","Entry for an existing key-value pair or a vacant location …","A hash table where the iteration order of the key-value …","An owning iterator over the entries of a <code>IndexMap</code>.","An owning iterator over the keys of a <code>IndexMap</code>.","An owning iterator over the values of a <code>IndexMap</code>.","An iterator over the entries of a <code>IndexMap</code>.","A mutable iterator over the entries of a <code>IndexMap</code>.","","An iterator over the keys of a <code>IndexMap</code>.","Opt-in mutable access to keys.","Existing slot with equivalent key.","A view into an occupied entry in a <code>IndexMap</code>. It is part of …","Vacant slot (no equivalent key in the map).","A view into a vacant entry in a <code>IndexMap</code>. It is part of …","","An iterator over the values of a <code>IndexMap</code>.","A mutable iterator over the values of a <code>IndexMap</code>.","This method is not useful in itself – it is there to …","","Modifies the entry if it is occupied.","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","Remove all key-value pairs in the map, while preserving …","","","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>key</code> exists in the map.","","","","","","","","","","Return an empty <code>IndexMap</code>","Clears the <code>IndexMap</code> in the given index range, returning …","Get the given key’s corresponding entry in the map for …","","Extend the map with all key-value pairs in the iterable.","Extend the map with all key-value pairs in the iterable.","Get the first key-value pair","Get the first key-value pair, with mutable access to the …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Examples","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create an <code>IndexMap</code> from the sequence of key-value pairs in …","Gets a reference to the entry’s value in the map.","Return a reference to the value stored for <code>key</code>, if it is …","Return item index, key and value","","Return item index, mutable reference to key and value","","Get a key-value pair by index","Get a key-value pair by index","Return item index, if it exists in the map","Return references to the key-value pair stored for <code>key</code>, if …","Gets a mutable reference to the entry’s value in the map.","","Return a reference to the map’s <code>BuildHasher</code>.","Return the index of the key-value pair","Return the index where the key-value pair exists or will …","Return the index where the key-value pair will be inserted.","Returns a reference to the value corresponding to the …","Returns a reference to the value at the supplied <code>index</code>.","Returns a mutable reference to the value at the supplied …","Returns a mutable reference to the value corresponding to …","Sets the value of the entry to <code>value</code>, and returns the entry…","Inserts the entry’s key and the given value into the …","Insert a key-value pair in the map.","Insert a key-value pair in the map, and get their index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes ownership of the key, leaving the entry vacant.","Return an owning iterator over the keys of the map, in …","Converts into a mutable reference to the entry’s value …","Return an owning iterator over the values of the map, in …","Returns true if the map contains no elements.","Return an iterator over the key-value pairs of the map, in …","Return an iterator over the key-value pairs of the map, in …","Gets a reference to the entry’s key in the map.","Gets a reference to the entry’s key, either within the …","Gets a reference to the key that was used to find the …","Return an iterator over the keys of the map, in their order","Get the last key-value pair","","","","","","","","","","Get the last key-value pair, with mutable access to the …","Return the number of key-value pairs in the map.","","","","","","","","","","Moves the position of a key-value pair from one index to …","Create a new map. (Does not allocate.)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Inserts a default-constructed value in the entry if it is …","Inserts the given default value in the entry if it is …","Inserts the result of the <code>call</code> function in the entry if it …","Inserts the result of the <code>call</code> function with a reference …","Remove the last key-value pair","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Reserve capacity for <code>additional</code> more key-value pairs.","Scan through each key-value pair in the map and keep those …","Scan through each key-value pair in the map and keep those …","","Reverses the order of the map’s key-value pairs in place.","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","Shrink the capacity of the map with a lower limit.","Shrink the capacity of the map as much as possible.","","","","","","","","","","Sort the map’s key-value pairs in place using the …","Sort the map’s key-value pairs by the default ordering …","Sort the map’s key-value pairs in place using the …","Sort the map’s key-value pairs by the default ordering …","Sort the key-value pairs of the map and return a by-value …","Sort the key-value pairs of the map and return a by-value …","Splits the collection into two at the given index.","Swaps the position of two key-value pairs in the map.","Remove the key, value pair stored in the map for this …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove and return the key, value pair stored in the map …","Remove and return the key-value pair equivalent to <code>key</code>.","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","","","","","Shortens the map, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over the values of the map, in their …","Return an iterator over mutable references to the values …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with <code>hash_builder</code>.","","","A lazy iterator producing elements in the difference of …","A draining iterator over the items of a <code>IndexSet</code>.","A hash set where the iteration order of the values is …","A lazy iterator producing elements in the intersection of …","An owning iterator over the items of a <code>IndexSet</code>.","An iterator over the items of a <code>IndexSet</code>.","A lazy iterator producing elements in the symmetric …","A lazy iterator producing elements in the union of <code>IndexSet</code>…","Returns the set intersection, cloned into a new set.","Returns the set union, cloned into a new set.","Returns the set symmetric-difference, cloned into a new …","","","","","","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","Remove all elements in the set, while preserving its …","","","","","","","","","","","","","","","","","Return <code>true</code> if an equivalent to <code>value</code> exists in the set.","","","","Return an empty <code>IndexSet</code>","Return an iterator over the values that are in <code>self</code> but …","Clears the <code>IndexSet</code> in the given index range, returning …","","","","Get the first value","","","","","","","","","","","Returns the argument unchanged.","Examples","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Return a reference to the value stored in the set, if it …","Return item index and value","Get a value by index","Return item index, if it exists in the set","Return a reference to the set’s <code>BuildHasher</code>.","Returns a reference to the value at the supplied <code>index</code>.","Insert the value into the set.","Insert the value into the set, and get its index.","Return an iterator over the values that are in both <code>self</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.","Returns true if the set contains no elements.","Returns <code>true</code> if all elements of <code>self</code> are contained in <code>other</code>…","Returns <code>true</code> if all elements of <code>other</code> are contained in <code>self</code>…","Return an iterator over the values of the set, in their …","Get the last value","","","","Return the number of elements in the set.","","","","Moves the position of a value from one index to another by …","Create a new set. (Does not allocate.)","","","","","","","","","","","","","","","","","","","","","Remove the last value","Remove the value from the set, and return <code>true</code> if it was …","Adds a value to the set, replacing the existing value, if …","Adds a value to the set, replacing the existing value, if …","Reserve capacity for <code>additional</code> more values.","Scan through each value in the set and keep those where the","Reverses the order of the set’s values in place.","","","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Shrink the capacity of the set with a lower limit.","Shrink the capacity of the set as much as possible.","","","","","","","","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the values of the set and return a by-value iterator …","Sort the values of the set and return a by-value iterator …","Splits the collection into two at the given index.","Returns the set difference, cloned into a new set.","Swaps the position of two values in the set.","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the value by index","Removes and returns the value in the set, if any, that is …","Return an iterator over the values that are in <code>self</code> or …","Removes and returns the value in the set, if any, that is …","","","","","","","Shortens the set, keeping the first <code>len</code> elements and …","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over all values that are in <code>self</code> or …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with <code>hash_builder</code>."],"i":[0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,3,0,3,0,33,0,0,33,2,3,17,3,20,2,5,8,6,9,10,7,11,12,13,17,3,20,2,5,8,6,9,10,7,11,12,13,2,2,2,5,6,7,2,2,5,6,7,5,8,6,9,10,7,11,12,13,2,5,8,6,9,10,7,11,12,13,2,2,2,2,2,2,2,2,17,3,20,2,5,8,6,9,10,7,11,12,13,17,3,20,2,2,5,8,6,9,10,7,11,12,13,2,17,2,2,2,33,2,2,2,2,2,17,2,2,17,3,20,2,2,2,2,17,20,2,2,17,3,20,2,5,8,6,9,10,7,11,12,13,2,2,2,5,8,6,9,10,7,11,12,13,20,2,17,2,2,2,2,17,3,20,2,2,5,8,6,9,10,7,11,12,13,2,2,5,8,6,9,10,7,11,12,13,2,2,5,8,6,9,10,7,11,12,13,5,8,6,9,10,7,11,12,13,5,8,6,9,10,7,11,12,13,5,8,6,9,10,7,11,12,13,3,3,3,3,2,17,2,17,2,2,2,33,2,2,17,2,17,2,2,2,2,2,5,8,6,9,10,7,11,12,13,2,2,2,2,2,2,2,2,17,2,17,2,2,2,2,5,6,7,2,17,3,20,2,5,8,6,9,10,7,11,12,13,17,3,20,2,5,8,6,9,10,7,11,12,13,17,3,20,2,5,8,6,9,10,7,11,12,13,2,2,2,2,2,34,35,0,0,0,0,0,0,0,0,24,24,24,24,30,25,31,26,27,28,29,24,30,25,31,26,27,28,29,24,24,24,25,26,27,28,29,24,24,25,26,27,28,29,30,25,31,24,30,25,31,24,24,24,24,24,24,24,24,30,25,31,26,27,28,29,28,29,24,24,30,25,31,26,27,28,29,24,24,24,24,24,24,24,24,24,24,24,30,25,31,26,27,28,29,24,24,30,25,31,26,27,28,29,24,24,24,24,24,24,30,25,31,24,30,25,31,24,24,30,25,31,26,27,28,29,30,25,31,26,27,28,29,30,25,31,30,25,31,24,24,24,24,24,24,24,28,29,24,24,24,24,24,24,30,25,31,26,27,28,29,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,26,27,28,29,24,24,30,25,31,26,27,28,29,24,30,25,31,26,27,28,29,24,30,25,31,26,27,28,29,24,24,24,24],"f":[0,0,0,[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[3,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,4],[2],[2,2],[5,5],[6,6],[7,7],[[2,2]],[[]],[[]],[[]],[[]],[5],[8],[6],[9],[10],[7],[11],[12],[13],[2,1],[5,4],[8,4],[6,4],[9,4],[10,4],[7,4],[11,4],[12,4],[13,4],[[],2],[2,13],[2,3],[[2,2],1],[[2,14]],[[2,14]],[2,15],[2,15],[[[17,[16,16]],18],19],[[[3,[16,16]],18],19],[[[20,[16]],18],19],[[2,18],19],[[[5,[16]],18],19],[[[8,[16]],18],19],[[[6,[16]],18],19],[[[9,[16]],18],19],[[[10,[16]],18],19],[[[7,[16,16]],18],19],[[[11,[16,16]],18],19],[[[12,[16,16]],18],19],[[[13,[16,16]],18],19],[[]],[[]],[[]],[[]],[[],[[2,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,2],[17],[2,15],[2,15],[2,15],[[],15],[2,15],[[2,4],15],[[2,4],15],[2,[[15,[4]]]],[2,15],[17],[2,15],[2],[17,4],[3,4],[20,4],[2],[[2,4]],[[2,4]],[2],[17],[20],[2,15],[2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2],[2],[2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20],[2,8],[17],[2,10],[2,1],[2,7],[2,11],[17],[3],[20],[2,5],[2,15],[5,15],[8,15],[6,15],[9,15],[10,15],[7,15],[11,15],[12,15],[13,15],[2,15],[2,4],[5,4],[8,4],[6,4],[9,4],[10,4],[7,4],[11,4],[12,4],[13,4],[[2,4,4]],[[],2],[5,15],[8,15],[6,15],[9,15],[10,15],[7,15],[11,15],[12,15],[13,15],[5,15],[8,15],[6,15],[9,15],[10,15],[7,15],[11,15],[12,15],[13,15],[[5,4],15],[[8,4],15],[[6,4],15],[[9,4],15],[[10,4],15],[[7,4],15],[[11,4],15],[[12,4],15],[[13,4],15],[[5,4],15],[[8,4],15],[[6,4],15],[[9,4],15],[[10,4],15],[[7,4],15],[[11,4],15],[[12,4],15],[[13,4],15],[3],[3],[3],[3],[2,15],[17],[2,15],[17],[2,15],[[2,4]],[2],[[]],[2],[2],[17],[2,15],[17],[2,15],[2,15],[[2,4],15],[[2,4]],[2],[5],[8],[6],[9],[10],[7],[11],[12],[13],[2],[2],[2],[2],[2,12],[2,12],[[2,4],2],[[2,4,4]],[17],[2,15],[17],[2,15],[2,15],[[2,4],15],[[]],[[]],[[]],[[]],[[2,4]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[2,6],[2,9],[4,2],[4,2],[[],2],0,0,0,0,0,0,0,0,0,0,[[24,24]],[[24,24]],[[24,24]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24,4],[24],[24,24],[25,25],[26,26],[27,27],[28,28],[29,29],[[24,24]],[[]],[[]],[[]],[[]],[[]],[[]],[30],[25],[31],[24,1],[30,4],[25,4],[31,4],[[],24],[[24,24],26],[24,31],[[24,24],1],[[24,14]],[[24,14]],[24,15],[[24,18],19],[[[30,[16]],18],19],[[[25,[16]],18],19],[[[31,[16]],18],19],[[26,18],19],[[27,18],19],[[28,18],19],[[29,18],19],[28],[29],[[]],[[],[[24,[21]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,24],[24,15],[24,15],[[24,4],15],[24,[[15,[4]]]],[24],[[24,4]],[24,1],[24],[[24,24],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[24],[24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[24,24],1],[24,1],[[24,24],1],[[24,24],1],[24,25],[24,15],[30,15],[25,15],[31,15],[24,4],[30,4],[25,4],[31,4],[[24,4,4]],[[],24],[30,15],[25,15],[31,15],[26,15],[27,15],[28,15],[29,15],[30,15],[25,15],[31,15],[26,15],[27,15],[28,15],[29,15],[[30,4],15],[[25,4],15],[[31,4],15],[[30,4],15],[[25,4],15],[[31,4],15],[24,15],[24,1],[24,15],[24],[[24,4]],[24],[24],[28],[29],[24,1],[24,15],[[24,4],15],[24,15],[[24,4]],[24],[30],[25],[31],[26],[27],[28],[29],[24],[24],[24],[24],[24,30],[24,30],[[24,4],24],[[24,24]],[[24,4,4]],[24,1],[24,15],[[24,4],15],[24,15],[[24,24],28],[24,15],[[]],[[]],[[]],[[]],[[]],[[]],[[24,4]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[24,24],29],[4,24],[4,24],[[],24]],"p":[[15,"bool"],[3,"IndexMap"],[4,"Entry"],[15,"usize"],[3,"Keys"],[3,"Values"],[3,"Iter"],[3,"IntoKeys"],[3,"ValuesMut"],[3,"IntoValues"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[8,"IntoIterator"],[4,"Option"],[8,"Debug"],[3,"OccupiedEntry"],[3,"Formatter"],[6,"Result"],[3,"VacantEntry"],[3,"RandomState"],[4,"Result"],[3,"TypeId"],[3,"IndexSet"],[3,"Iter"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"],[3,"IntoIter"],[3,"Drain"],[8,"Equivalent"],[8,"MutableKeys"],[13,"Occupied"],[13,"Vacant"]]},\
"itertools":{"doc":"Extra iterator adaptors, functions and macros.","tn":["Both","Continue","Diff","Done","Either","EitherOrBoth","First","FirstMismatch","FoldWhile","Itertools","Last","Left","Left","Longer","Middle","MinMax","MinMaxResult","MultiUnzip","NoElements","OneElement","Only","PeekingNext","Position","Right","Right","Shorter","all","all","all_equal","all_unique","any","any","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_pin_mut","as_pin_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","assert_equal","at_most_one","batching","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","both","cartesian_product","cause","chain","chain","chunks","circular_tuple_windows","clone","clone","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cloned","cmp","coalesce","collect","collect_tuple","collect_vec","combinations","combinations_with_replacement","concat","concat","cons_tuples","consume","contains","count","counts","counts_by","dedup","dedup_by","dedup_by_with_count","dedup_with_count","deref","deref_mut","description","diff_with","dropping","dropping_back","duplicates","duplicates_by","either","either_into","either_with","enumerate","eq","eq","eq","eq","eq","equal","exactly_one","expect_left","expect_right","extend","factor_err","factor_first","factor_none","factor_ok","factor_second","fill_buf","filter_map_ok","filter_ok","find","find_map","find_or_first","find_or_last","find_position","flatten_ok","flip","flip","flush","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold1","fold_ok","fold_options","fold_results","fold_while","for_each","foreach","format","format_with","from","from","from","from","from","from","from","group_by","has_left","has_right","hash","hash","interleave","interleave","interleave_shortest","intersperse","intersperse","intersperse_with","intersperse_with","into","into","into","into","into","into","into","into","into_future","into_group_map","into_group_map_by","into_grouping_map","into_grouping_map_by","into_inner","into_inner","into_inner","into_iter","into_iter","into_option","iproduct","is_both","is_done","is_left","is_left","is_right","is_right","iterate","izip","join","join","k_smallest","kmerge","kmerge","kmerge_by","kmerge_by","last","left","left","left_and_then","left_and_then","left_or","left_or_default","left_or_else","len","map","map_any","map_into","map_left","map_left","map_ok","map_results","map_right","map_right","max","max_set","max_set_by","max_set_by_key","merge","merge","merge_by","merge_join_by","merge_join_by","min","min_set","min_set_by","min_set_by_key","minmax","minmax_by","minmax_by_key","multi_cartesian_product","multipeek","multipeek","multiunzip","multiunzip","multiunzip","multizip","next","next_back","next_tuple","nth","or","or_default","or_else","pad_using","partial_cmp","partition","partition","partition_map","partition_result","peek_nth","peeking_next","peeking_take_while","permutations","poll","position","position_max","position_max_by","position_max_by_key","position_min","position_min_by","position_min_by_key","position_minmax","position_minmax_by","position_minmax_by_key","positions","powerset","process_results","product1","provide","put_back","put_back_n","rciter","read","read_exact","read_line","read_to_end","read_to_string","read_until","reduce","repeat_call","repeat_n","rev","rfind","rfold","right","right","right_and_then","right_and_then","right_or","right_or_default","right_or_else","seek","set_from","size_hint","sorted","sorted","sorted_by","sorted_by_cached_key","sorted_by_key","sorted_unstable","sorted_unstable_by","sorted_unstable_by_key","source","step","structs","sum1","take_while_ref","tee","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","traits","tree_fold1","try_collect","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tuple_combinations","tuple_windows","tuples","type_id","type_id","type_id","type_id","type_id","type_id","unfold","unique","unique_by","unwrap_left","unwrap_right","update","while_some","with_position","write","write_all","write_fmt","zip","zip_eq","zip_eq","zip_longest","0","0","0","1","1","1","2","0","0","0","0","0","1","0","0","0","0","1","0","0","0","0","Batching","Chunk","Chunks","CircularTupleWindows","Coalesce","Combinations","CombinationsWithReplacement","ConsTuples","Dedup","DedupBy","DedupByWithCount","DedupWithCount","Duplicates","DuplicatesBy","ExactlyOneError","FilterMapOk","FilterOk","FlattenOk","Format","FormatWith","Group","GroupBy","GroupingMap","GroupingMapBy","Groups","Interleave","InterleaveShortest","Intersperse","IntersperseWith","IntoChunks","Iterate","KMerge","KMergeBy","MapInto","MapOk","MapResults","Merge","MergeBy","MergeJoinBy","MultiPeek","MultiProduct","PadUsing","PeekNth","PeekingTakeWhile","Permutations","Positions","Powerset","ProcessResults","Product","PutBack","PutBackN","RcIter","RepeatCall","RepeatN","Step","TakeWhileRef","Tee","TupleBuffer","TupleCombinations","TupleWindows","Tuples","Unfold","Unique","UniqueBy","Update","WhileSome","WithPosition","Zip","ZipEq","ZipLongest","aggregate","all","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","collect","collect","collect","collect","count","count","count","count","count","count","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold_first","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_buffer","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_parts","k","last","last","last","max","max_by","max_by_key","min","min_by","min_by_key","minmax","minmax_by","minmax_by_key","n","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","peek","peek","peek_nth","peeking_next","peeking_next","peeking_next","peeking_next","product","provide","put_back","put_back","rciter","reset_peek","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","state","sum","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_value","HomogeneousTuple"],"q":["itertoolsitertools::Diff","","","","","","","itertools::Either","","itertools::EitherOrBoth","","","","itertools::FoldWhile","","itertools::MinMaxResult","","","itertools::Position","","","","itertools::structsitertools::traits"],"d":["Both values are present.","Continue folding with this value","A type returned by the <code>diff_with</code> function.","Fold is complete and will return this value","The enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …","Value that either holds a single A or B, or both.","This is the first element.","The index of the first non-matching element along with …","An enum used for controlling the execution of <code>fold_while</code>.","An <code>Iterator</code> blanket implementation that provides extra …","This is the last element.","A value of type <code>L</code>.","Only the left value of type <code>A</code> is present.","The total number of elements that were in <code>I</code> along with the …","This is neither the first nor the last element.","More than one element in the iterator, the first element …","<code>MinMaxResult</code> is an enum returned by <code>minmax</code>.","An iterator that can be unzipped into multiple collections.","Empty iterator","Iterator with one element, so the minimum and maximum are …","This is the only element.","An iterator that allows peeking at an element before …","A value yielded by <code>WithPosition</code>. Indicates the position of …","A value of type <code>R</code>.","Only the right value of type <code>B</code> is present.","The total number of elements that were in <code>J</code> along with the …","Test whether the predicate holds for all elements in the …","","Check whether all elements compare equal.","Check whether all elements are unique (non equal).","Test whether the predicate holds for any elements in the …","","","","","","","","Convert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.","Converts from <code>&amp;mut EitherOrBoth&lt;A, B&gt;</code> to …","Convert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …","Convert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …","Convert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.","","","","","","","Converts from <code>&amp;EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;&amp;A, &amp;B&gt;</code>.","Assert that two iterables produce equal sequences, with …","If the iterator yields no elements, Ok(None) will be …","A “meta iterator adaptor”. Its closure receives a …","","","","","","","","","","","","","If Both, return <code>Some</code> tuple containing left and right.","Return an iterator adaptor that iterates over the …","","Takes two iterables and creates a new iterator over both …","Chain zero or more iterators together into one sequence.","Return an <em>iterable</em> that can chunk the iterator.","Return an iterator over all windows, wrapping back to the …","","","","","","","","","","","","Create an iterator that clones each element from &amp;T to T","","Return an iterator adaptor that uses the passed-in closure …","","Collects all items from the iterator into a tuple of a …","<code>.collect_vec()</code> is simply a type specialization of …","Return an iterator adaptor that iterates over the <code>k</code>-length …","Return an iterator that iterates over the <code>k</code>-length …","Combine all an iterator’s elements into one element by …","Combine all an iterator’s elements into one element by …","Create an iterator that maps for example iterators of …","","Returns <code>true</code> if the given item is present in this iterator.","","Collect the items in this iterator and return a <code>HashMap</code> …","Collect the items in this iterator and return a <code>HashMap</code> …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","Remove duplicates from sections of consecutive identical …","","","","Compares every element yielded by both <code>i</code> and <code>j</code> with the …","Consume the first <code>n</code> elements from the iterator eagerly, …","Consume the last <code>n</code> elements from the iterator eagerly, and …","Return an iterator adaptor that produces elements that …","Return an iterator adaptor that produces elements that …","Apply one of two functions depending on contents, unifying …","Convert the contained value into <code>T</code>","Like <code>either</code>, but provide some context to whichever of the …","Iterate <code>iterable</code> with a running index.","","","","","","Return <code>true</code> if both iterables produce equal sequences …","If the iterator yields exactly one element, that element …","Returns the left value","Returns the right value","","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","Factors out <code>None</code> from an <code>Either</code> of <code>Option</code>.","Factors out a homogenous type from an <code>Either</code> of <code>Result</code>.","Factor out a homogeneous type from an either of pairs.","","Return an iterator adaptor that filters and transforms …","Return an iterator adaptor that filters every <code>Result::Ok</code> …","","","Find the value of the first element satisfying a predicate …","Find the value of the first element satisfying a predicate …","Find the position and value of the first element …","Return an iterator adaptor that flattens every <code>Result::Ok</code> …","Convert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.","Convert <code>EitherOrBoth&lt;A, B&gt;</code> to <code>EitherOrBoth&lt;B, A&gt;</code>.","","","","","","","","Perform a fold operation over the iterable.","","Accumulator of the elements in the iterator.","Fold <code>Result</code> values from an iterator.","Fold <code>Option</code> values from an iterator.","See <code>.fold_ok()</code>.","An iterator method that applies a function, producing a …","","Run the closure <code>f</code> eagerly on each element of the iterator.","Format all iterator elements, separated by <code>sep</code>.","Format all iterator elements, separated by <code>sep</code>.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return an <em>iterable</em> that can group iterator elements. …","If <code>Left</code>, or <code>Both</code>, return true, otherwise, return false.","If <code>Right</code>, or <code>Both</code>, return true, otherwise, return false.","","","Create an iterator that interleaves elements in <code>i</code> and <code>j</code>.","Alternate elements from two iterators until both have run …","Alternate elements from two iterators until at least one …","Iterate <code>iterable</code> with a particular value inserted between …","An iterator adaptor to insert a particular value between …","Iterate <code>iterable</code> with a particular value created by a …","An iterator adaptor to insert a particular value created …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a <code>HashMap</code> of keys mapped to <code>Vec</code>s of values. Keys …","Return an <code>Iterator</code> on a <code>HashMap</code>. Keys mapped to <code>Vec</code>s of …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Constructs a <code>GroupingMap</code> to be used later with one of the …","Extract the value of an either over two equivalent types.","Return the inner value.","Return the value in the continue or done.","","Convert the inner value to an iterator.","<code>into_option</code> creates an <code>Option</code> of type <code>(T, T)</code>. The returned …","Create an iterator over the “cartesian product” of …","If Right, return true otherwise, return false. Equivalent …","Return true if <code>self</code> is <code>Done</code>, false if it is <code>Continue</code>.","Return true if the value is the <code>Left</code> variant.","If Left, return true otherwise, return false. Exclusive …","Return true if the value is the <code>Right</code> variant.","If Right, return true otherwise, return false. Exclusive …","Creates a new iterator that infinitely applies function to …","Create an iterator running multiple iterators in lockstep.","Combine all iterator elements into one String, separated …","Combine all iterator elements into one String, separated …","Sort the k smallest elements into a new iterator, in …","Create an iterator that merges elements of the contained …","Return an iterator adaptor that flattens an iterator of …","Create an iterator that merges elements of the contained …","Return an iterator adaptor that flattens an iterator of …","","Convert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.","If <code>Left</code>, or <code>Both</code>, return <code>Some</code> with the left value, …","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return left value or given value","Return left or a default","Returns left value or computes it from a closure","","Map <code>f</code> over the contained value and return the result in the","Apply the functions <code>f</code> and <code>g</code> on the value <code>a</code> and <code>b</code> …","Convert each item of the iterator using the <code>Into</code> trait.","Apply the function <code>f</code> on the value in the <code>Left</code> variant if …","Apply the function <code>f</code> on the value <code>a</code> in <code>Left(a)</code> or …","Return an iterator adaptor that applies the provided …","See <code>.map_ok()</code>.","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Return the maximum value of the iterable.","Return all maximum elements of an iterator.","Return all maximum elements of an iterator, as determined …","Return all minimum elements of an iterator, as determined …","Create an iterator that merges elements in <code>i</code> and <code>j</code>.","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merges the two base …","Return an iterator adaptor that merge-joins items from the …","Create an iterator that merges items from both this and …","Return the minimum value of the iterable.","Return all minimum elements of an iterator.","Return all minimum elements of an iterator, as determined …","Return all minimum elements of an iterator, as determined …","Return the minimum and maximum elements in the iterator.","Return the minimum and maximum element of an iterator, as …","Return the minimum and maximum element of an iterator, as …","Return an iterator adaptor that iterates over the …","An iterator adaptor that allows the user to peek at …","An iterator adaptor that allows the user to peek at …","Converts an iterator of tuples into a tuple of containers.","Unzip this iterator into multiple collections.","Converts an iterator of tuples into a tuple of containers.","An iterator that generalizes <em>.zip()</em> and allows running …","","","Advances the iterator and returns the next items grouped …","","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Returns a tuple consisting of the <code>l</code> and <code>r</code> in <code>Both(l, r)</code>, …","Return an iterator adaptor that pads the sequence to a …","","Partition a sequence using predicate <code>pred</code> so that elements …","","Collect all iterator elements into one of two partitions. …","Partition a sequence of <code>Result</code>s into one list of all the <code>Ok</code>…","A drop-in replacement for <code>std::iter::Peekable</code> which adds a …","Pass a reference to the next iterator element to the …","Return an iterator adaptor that borrows from this iterator …","Return an iterator adaptor that iterates over all …","","","Return the position of the maximum element in the iterator.","Return the position of the maximum element in the …","Return the position of the maximum element in the …","Return the position of the minimum element in the iterator.","Return the position of the minimum element in the …","Return the position of the minimum element in the …","Return the positions of the minimum and maximum elements in","Return the postions of the minimum and maximum elements of …","Return the postions of the minimum and maximum elements of …","Return an iterator adaptor that yields the indices of all …","Return an iterator that iterates through the powerset of …","“Lift” a function of the values of an iterator so that …","Iterate over the entire iterator and multiply all the …","","Create an iterator where you can put back a single item","Create an iterator where you can put back multiple values …","Return an iterator inside a <code>Rc&lt;RefCell&lt;_&gt;&gt;</code> wrapper.","","","","","","","Return either value of left, right, or the product of <code>f</code> …","An iterator source that produces elements indefinitely by …","Create an iterator that produces <code>n</code> repetitions of <code>element</code>.","Iterate <code>iterable</code> in reverse.","","","Convert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.","If <code>Right</code>, or <code>Both</code>, return <code>Some</code> with the right value, …","Apply the function <code>f</code> on the value in the <code>Right</code> variant if …","Apply the function <code>f</code> on the value <code>b</code> in <code>Right(b)</code> or …","Return right value or given value","Return right or a default","Returns right value or computes it from a closure","","Assign to each reference in <code>self</code> from the <code>from</code> iterator, …","","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","Sort all iterator elements into a new iterator in …","","Return an iterator adaptor that steps <code>n</code> elements in the …","The concrete iterator types.","Iterate over the entire iterator and add all the elements.","Return an iterator adaptor that borrows from a <code>Clone</code>-able …","Split into an iterator pair that both yield all elements …","","","","","","","Traits helpful for using certain <code>Itertools</code> methods in …","Accumulate the elements in the iterator in a tree-like …","<code>.try_collect()</code> is more convenient way of writing …","","","","","","","","","","","","","Return an iterator adaptor that iterates over the …","Return an iterator over all contiguous windows producing …","Return an iterator that groups the items in tuples of a …","","","","","","","Creates a new unfold source with the specified closure as …","Return an iterator adaptor that filters out elements that …","Return an iterator adaptor that filters out elements that …","Returns the left value","Returns the right value","Return an iterator adaptor that applies a mutating function","Return an iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","Return an iterator adaptor that wraps each element in a …","","","","Converts the arguments to iterators and zips them.","Iterate <code>i</code> and <code>j</code> in lock step.","Create an iterator which iterates over both this and the …","Create an iterator which iterates over both this and the …","","","","","","","","","","","","","","","","","","","","","","","A “meta iterator adaptor”. Its closure receives a …","An iterator for the elements in a single chunk.","An iterator that yields the Chunk iterators.","An iterator over all windows,wrapping back to the first …","An iterator adaptor that may join together adjacent …","An iterator to iterate through all the <code>k</code>-length …","An iterator to iterate through all the <code>n</code>-length …","An iterator that maps an iterator of tuples like …","An iterator adaptor that removes repeated duplicates.","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adaptor that removes repeated duplicates, …","An iterator adapter to filter out duplicate elements.","An iterator adapter to filter for duplicate elements.","Iterator returned for the error case of …","An iterator adapter to filter and apply a transformation …","An iterator adapter to filter values within a nested …","An iterator adaptor that flattens <code>Result::Ok</code> values and …","Format all iterator elements lazily, separated by <code>sep</code>.","Format all iterator elements lazily, separated by <code>sep</code>.","An iterator for the elements in a single group.","<code>GroupBy</code> is the storage for the lazy grouping operation.","<code>GroupingMap</code> is an intermediate struct for efficient …","<code>GroupingMapBy</code> is an intermediate struct for efficient …","An iterator that yields the Group iterators.","An iterator adaptor that alternates elements from two …","An iterator adaptor that alternates elements from the two …","An iterator adaptor to insert a particular value between …","An iterator adaptor to insert a particular value created …","<code>ChunkLazy</code> is the storage for a lazy chunking operation.","An iterator that infinitely applies function to value and …","An iterator adaptor that merges an abitrary number of base …","An iterator adaptor that merges an abitrary number of base …","An iterator adapter to apply <code>Into</code> conversion to each …","An iterator adapter to apply a transformation within a …","See <code>MapOk</code>.","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merges the two base iterators in …","An iterator adaptor that merge-joins items from the two …","See <code>multipeek()</code> for more information.","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that pads a sequence to a minimum …","See <code>peek_nth()</code> for more information.","An iterator adaptor that takes items while a closure …","An iterator adaptor that iterates through all the <code>k</code>…","An iterator adapter to get the positions of each element …","An iterator to iterate through the powerset of the …","An iterator that produces only the <code>T</code> values as long as the …","An iterator adaptor that iterates over the cartesian …","An iterator adaptor that allows putting back a single item …","An iterator adaptor that allows putting multiple items in …","A wrapper for <code>Rc&lt;RefCell&lt;I&gt;&gt;</code>, that implements the <code>Iterator</code> …","See <code>repeat_call</code> for more information.","An iterator that produces <em>n</em> repetitions of an element.","An iterator adaptor that steps a number elements in the …","An iterator adaptor that borrows from a <code>Clone</code>-able iterator","One half of an iterator pair where both return the same …","An iterator over a incomplete tuple.","An iterator to iterate through all combinations in a <code>Clone</code>…","An iterator over all contiguous windows that produces …","An iterator that groups the items in tuples of a specific …","See <code>unfold</code> for more information.","An iterator adapter to filter out duplicate elements.","An iterator adapter to filter out duplicate elements.","An iterator adapter to apply a mutating function to each …","An iterator adaptor that filters <code>Option&lt;A&gt;</code> iterator …","An iterator adaptor that wraps each element in an <code>Position</code>.","See <code>multizip</code> for more information.","An iterator which iterates two other iterators …","An iterator which iterates two other iterators …","This is the generic way to perform any operation on a …roups elements from the <code>GroupingMap</code> source by key and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Groups elements from the <code>GroupingMap</code> source by key and …","","","Groups elements from the <code>GroupingMap</code> source by key and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return a buffer with the produced items that was not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Split the <code>PutBack</code> into its parts.","Returns the length of a combination produced by this …","","","","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Groups elements from the <code>GroupingMap</code> source by key and …","Returns the (current) length of the pool from which …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Works exactly like <code>.next()</code> with the only difference that …","Works exactly like the <code>peek</code> method in <code>std::iter::Peekable</code>","Returns a reference to the <code>nth</code> value without advancing the …","","","","","Groups elements from the <code>GroupingMap</code> source by key and …","","Put back a single value to the front of the iterator.","Puts x in front of the iterator. The values are yielded in …","The boxed iterator.","Reset the peeking “cursor”","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Internal state that will be passed to the closure on the …","Groups elements from the <code>GroupingMap</code> source by key and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","put back value <code>value</code> (builder method)","Implemented for homogeneous tuples of size up to 12."],"i":[7,22,0,22,0,0,21,35,0,0,21,2,7,35,21,20,0,0,20,20,21,0,0,2,7,35,0,2,114,114,0,2,2,2,2,2,2,2,2,7,2,2,2,2,2,2,2,2,2,7,0,114,114,2,35,7,20,21,22,2,35,7,20,21,22,7,114,2,0,0,114,114,2,7,20,21,22,2,2,7,20,21,22,0,2,114,2,114,114,114,114,0,114,0,2,114,2,114,114,114,114,114,114,2,2,2,0,114,114,114,114,2,2,2,0,2,7,20,21,22,0,114,2,2,2,2,2,2,2,2,2,114,114,2,2,114,114,114,114,2,7,2,2,2,7,20,21,22,0,2,114,114,114,114,114,2,114,114,114,2,2,35,7,20,21,22,114,7,7,2,7,0,114,114,0,114,0,114,2,2,35,7,7,20,21,22,2,114,114,114,114,2,21,22,2,2,20,0,7,22,2,7,2,7,0,0,0,114,114,0,114,0,114,2,2,7,2,7,2,2,2,2,2,7,114,2,7,114,114,2,7,0,114,114,114,0,114,114,0,114,0,114,114,114,114,114,114,114,0,114,0,115,114,0,2,2,114,2,7,7,7,114,2,0,2,114,114,0,116,114,114,2,2,114,114,114,114,114,114,114,114,114,114,114,0,114,2,0,0,0,2,2,2,2,2,2,7,0,0,0,2,2,2,7,2,7,2,2,2,2,114,2,0,114,114,114,114,114,114,114,2,114,0,114,114,114,2,7,20,21,22,2,0,114,114,2,35,7,20,21,22,2,35,7,20,21,22,114,114,114,2,35,7,20,21,22,0,114,114,2,2,114,114,114,2,2,2,0,0,114,114,117,118,119,117,118,119,117,120,121,122,123,124,122,125,126,127,128,128,129,130,131,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,81,66,91,41,27,43,50,112,108,17,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,66,91,41,27,43,50,112,108,17,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,66,27,43,62,67,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,82,83,86,85,96,58,107,94,93,98,97,104,105,70,66,27,43,62,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,82,83,86,85,96,58,107,94,93,98,97,104,105,70,41,42,99,56,67,75,68,81,98,97,108,109,66,91,41,27,43,62,67,74,75,79,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,10,49,48,48,48,48,48,48,48,48,48,56,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,41,81,13,42,99,29,29,29,29,29,29,29,29,29,29,56,55,110,56,66,91,41,27,43,50,112,108,17,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,70,70,70,70,70,70,70,70,70,70,70,70,66,91,41,27,43,50,112,108,17,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,94,66,91,41,27,43,50,112,108,17,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,55,69,72,73,110,82,83,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,81,27,67,68,81,56,56,56,56,56,56,56,56,56,27,66,91,41,27,43,112,108,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,29,29,29,29,29,29,29,29,29,28,10,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,70,70,70,70,70,70,70,70,70,70,70,43,78,99,29,29,29,29,29,29,29,29,29,29,72,83,86,98,97,105,70,70,70,70,70,70,70,70,70,70,70,70,67,81,69,73,73,81,69,73,82,56,10,81,82,83,69,66,91,41,43,62,67,74,75,79,101,68,52,53,81,13,90,100,42,78,99,29,29,29,29,29,29,29,29,29,29,10,55,69,72,73,110,82,83,86,85,58,111,107,98,97,104,105,70,70,70,70,70,70,70,70,70,70,70,70,96,56,66,27,43,62,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,82,83,86,85,96,58,107,94,93,98,97,104,105,70,10,49,48,66,91,41,27,43,50,112,108,17,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,66,91,41,27,43,50,112,108,17,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,66,91,41,27,43,50,112,108,17,113,109,62,67,74,75,79,101,68,52,53,81,13,12,90,100,92,42,78,99,29,28,10,49,48,56,55,69,72,73,110,82,83,86,85,96,58,111,107,94,93,18,98,97,104,105,70,81,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2,1],[[],1],[[],1],[[],1],[2,1],[2,3],[2,4],[2],[2],[2,5],[2,6],[2,2],[7,7],[[[8,[2]]],[[2,[8,8]]]],[[[8,[2]]],[[2,[8,8]]]],[2,2],[2,3],[2],[2,6],[2,4],[2],[2,5],[7,7],[[]],[[],[[11,[9,10]]]],[[],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,9],[[],13],[2,[[9,[14]]]],[[],15],0,[16,17],[[],18],[2,2],[[[7,[19,19]]],[[7,[19,19]]]],[[[20,[19]]],[[20,[19]]]],[[[21,[19]]],[[21,[19]]]],[[[22,[19]]],[[22,[19]]]],[[2,2]],[[]],[[]],[[]],[[]],[[]],[[],23],[[2,2],24],[[],25],[2],[[],9],[[],26],[16,27],[16,28],[[]],[[]],[[],29],[[2,16]],[[],1],[2,16],[[],[[30,[16]]]],[[],[[30,[16]]]],[[],31],[[],32],[[],33],[[],34],[2],[2],[2,5],[[],[[9,[35]]]],[16],[16],[[],36],[[],37],[2],[2],[2],[[],38],[[2,2],1],[[[7,[39,39]],7],1],[[[20,[39]],20],1],[[[21,[39]],21],1],[[[22,[39]],22],1],[[],1],[[],[[11,[10]]]],[[2,5]],[[2,5]],[2],[[[2,[11,11]]],[[11,[2]]]],[2],[[[2,[9,9]]],[[9,[2]]]],[[[2,[11,11]]],[[11,[2]]]],[2],[2,[[11,[40]]]],[[],41],[[],42],[2,9],[2,9],[[],9],[[],9],[[],9],[[],43],[2,2],[7,7],[2,[[11,[40]]]],[[2,44],[[11,[45]]]],[[2,44],[[11,[45]]]],[[[7,[46,46]],44],47],[[[20,[46]],44],47],[[[21,[46]],44],47],[[[22,[46]],44],47],[[]],[2],[[],9],[[],11],[[],9],[[],11],[[],22],[2],[[]],[5,48],[5,49],[[]],[11,2],[[]],[[]],[[]],[[]],[[]],[[],50],[7,1],[7,1],[2],[[[7,[51,51]]]],[[],52],[[],52],[[],53],[[],54],[[],54],[[],55],[[],55],[2,11],[[]],[[]],[7,[[9,[2]]]],[[]],[[]],[[]],[[]],[[]],[[],[[30,[26]]]],[[],[[30,[26]]]],[[],56],[[],57],[2],[21],[22],[[]],[2,2],[[[20,[19]]],9],0,[7,1],[22,1],[2,1],[7,1],[2,1],[7,1],[[],58],0,[5,59],[5,59],[16,60],[[],61],[[],61],[[],62],[[],62],[2,9],[2,9],[7,9],[2,2],[7,7],[2],[2],[2],[2,16],[2,2],[7,7],[[],63],[2,2],[7,7],[[],64],[[],64],[2,2],[7,7],[[],9],[[],26],[[],26],[[],26],[[],65],[[],65],[[],66],[[],67],[[],67],[[],9],[[],26],[[],26],[[],26],[[],20],[[],20],[[],20],[[],68],[[],69],[[],69],[[]],[[]],[[]],[[],70],[2,9],[2,9],[[],9],[[2,16],9],[7],[7],[[7,71,71]],[16,72],[[2,2],[[9,[24]]]],[[],16],[2],[[]],[[]],[[],73],[[],9],[[],74],[16,75],[[[8,[2]],76],77],[2,[[9,[16]]]],[[],[[9,[16]]]],[[],[[9,[16]]]],[[],[[9,[16]]]],[[],[[9,[16]]]],[[],[[9,[16]]]],[[],[[9,[16]]]],[[],[[20,[16]]]],[[],[[20,[16]]]],[[],[[20,[16]]]],[[],78],[[],79],[[],11],[[],9],[80],[[],81],[[],82],[[],83],[2,[[11,[16,40]]]],[2,[[11,[40]]]],[[2,59],[[11,[16,40]]]],[[2,26],[[11,[16,40]]]],[[2,59],[[11,[16,40]]]],[[2,84,26],[[11,[16,40]]]],[7],[[],85],[16,86],[[],87],[2,9],[2],[2,9],[7,9],[2,2],[7,7],[2],[2],[2],[[2,88],[[11,[89,40]]]],[[],16],[2],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[2,[[9,[14]]]],[16,90],0,[[],9],[[],91],[[]],[[]],[[]],[[]],[[]],[[]],[[],59],0,[[],9],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],92],[[],93],[[],94],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],96],[[],97],[[],98],[2],[2],[[],99],[[],100],[[],101],[2,[[11,[16,40]]]],[2,[[11,[40]]]],[[2,102],[[11,[40]]]],[[],103],[[],104],[[],104],[[],105],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[56,30],[81,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[66,66],[27,27],[43,43],[62,62],[67,67],[75,75],[79,79],[101,101],[[[68,[19]]],[[68,[19]]]],[[[52,[19,19]]],[[52,[19,19]]]],[[[53,[19,19]]],[[53,[19,19]]]],[[[81,[19]]],[[81,[19]]]],[[[13,[19,19]]],[[13,[19,19]]]],[[[12,[19,19]]],[[12,[19,19]]]],[[[90,[19]]],[[90,[19]]]],[[[100,[19]]],[[100,[19]]]],[[[92,[19,19]]],[[92,[19,19]]]],[[[42,[19,19]]],[[42,[19,19]]]],[[[78,[19,19]]],[[78,[19,19]]]],[[[99,[19,19]]],[[99,[19,19]]]],[29,29],[[[28,[19]]],[[28,[19]]]],[[[10,[19]]],[[10,[19]]]],[[[49,[19,19]]],[[49,[19,19]]]],[[[48,[19]]],[[48,[19]]]],[[[56,[19]]],[[56,[19]]]],[[[55,[19,19]]],[[55,[19,19]]]],[[[69,[19]]],[[69,[19]]]],[[[72,[19,19]]],[[72,[19,19]]]],[[[73,[19]]],[[73,[19]]]],[[[82,[[0,[19,106]]]]],[[82,[[0,[19,106]]]]]],[83,83],[[[86,[19]]],[[86,[19]]]],[[[85,[19]]],[[85,[19]]]],[[[96,[19,19]]],[[96,[19,19]]]],[[[58,[19,19]]],[[58,[19,19]]]],[[[107,[19]]],[[107,[19]]]],[[[94,[19,19]]],[[94,[19,19]]]],[[[93,[19,19]]],[[93,[19,19]]]],[[[98,[[0,[19,106]],19,19]]],[[98,[[0,[19,106]],19,19]]]],[[[97,[[0,[19,106]]]]],[[97,[[0,[19,106]]]]]],[[[104,[19,19]]],[[104,[19,19]]]],[[[105,[19,19]]],[[105,[19,19]]]],[[[70,[19]]],[[70,[19]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[41],[42],[99],[56,30],[67,16],[75,16],[68,16],[81,16],[98,16],[97,16],[108],[109],[[66,44],47],[[91,44],47],[[41,44],47],[[27,44],47],[[43,44],47],[[62,44],47],[[67,44],47],[[74,44],47],[[75,44],47],[[79,44],47],[[68,44],47],[[[52,[46,46]],44],47],[[[53,[46,46]],44],47],[[[81,[46]],44],47],[[[13,[46,46]],44],47],[[12,44],47],[[[90,[46]],44],47],[[[100,[46]],44],47],[[[92,[46,46]],44],47],[[42,44],47],[[78,44],47],[[99,44],47],[[[29,[46,46]],44],47],[[28,44],47],[[10,44],47],[[10,44],47],[[49,44],47],[[48,44],47],[[48,44],47],[[48,44],47],[[48,44],47],[[48,44],47],[[48,44],47],[[48,44],47],[[48,44],47],[[48,44],47],[[[56,[46]],44],47],[[[55,[46,46]],44],47],[[[69,[46]],44],47],[[72,44],47],[[[73,[46]],44],47],[[[110,[46,46]],44],47],[[[82,[[0,[46,106]]]],44],47],[[[83,[46]],44],47],[[[86,[46]],44],47],[[85,44],47],[[96,44],47],[[58,44],47],[[[111,[46]],44],47],[[[107,[46]],44],47],[[[94,[46,46]],44],47],[[[93,[46,46]],44],47],[[[18,[46,[0,[46,19]]]],44],47],[[98,44],47],[[97,44],47],[[[104,[46,46]],44],47],[[[105,[46,46]],44],47],[[[70,[46]],44],47],[41],[81],[13],[42],[99],[29],[29],[29],[29],[29],[29],[29],[29],[29],[29],[56,30],[55],[110],[56,30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[],70],[[]],[[],70],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[94,107],[[]],[[]],[[]],[[]],[[]],[50],[[]],[[]],[17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[83,83],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[81],[[[27,[106]]],16],[67,9],[68,9],[81,9],[56,30],[56,30],[56,30],[56,30],[56,30],[56,30],[56,[[30,[20]]]],[56,[[30,[20]]]],[56,[[30,[20]]]],[[[27,[106]]],16],[66,9],[91,9],[41,9],[27,9],[43,9],[112,9],[108,9],[113,9],[109,9],[62,9],[67,9],[74,9],[75,9],[79,9],[[[101,[106]]],9],[68,9],[52,9],[53,9],[81,9],[13,9],[12,9],[90,9],[100,9],[92,9],[42,9],[78,9],[99,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[28,9],[10,9],[55,9],[69,9],[72,9],[73,9],[110,9],[[[82,[106]]],9],[83,9],[86,9],[85,9],[96,9],[58,9],[111,9],[107,9],[94,9],[93,9],[18,9],[98,9],[97,9],[104,9],[105,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[43,9],[78,9],[99,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[29,9],[72,9],[83,9],[86,9],[98,9],[97,9],[105,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[70,9],[[67,16],9],[[81,16],9],[[[69,[106]]],9],[73,9],[[73,16],9],[81,9],[69,9],[73,9],[82,9],[56,30],[80],[81],[[[82,[106]]]],0,[69],[66],[91],[41],[43],[62],[67],[74],[75],[79],[[[101,[106]]]],[68],[52],[53],[81],[13],[90],[100],[42],[78],[99],[29],[29],[29],[29],[29],[29],[29],[29],[29],[29],[10],[55],[69],[72],[73],[110],[[[82,[106]]]],[83],[86],[85],[58],[111],[107],[98],[97],[104],[105],[70],[70],[70],[70],[70],[70],[70],[70],[70],[70],[70],[70],0,[56,30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],59],[[],59],[[],59],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[[],95],[81,81],0],"p":[[15,"bool"],[4,"Either"],[3,"CStr"],[3,"Path"],[15,"str"],[3,"OsStr"],[4,"EitherOrBoth"],[3,"Pin"],[4,"Option"],[3,"ExactlyOneError"],[4,"Result"],[3,"Batching"],[3,"Product"],[8,"Error"],[3,"Chain"],[15,"usize"],[3,"IntoChunks"],[3,"CircularTupleWindows"],[8,"Clone"],[4,"MinMaxResult"],[4,"Position"],[4,"FoldWhile"],[3,"Cloned"],[4,"Ordering"],[6,"Coalesce"],[3,"Vec"],[3,"Combinations"],[3,"CombinationsWithReplacement"],[3,"ConsTuples"],[3,"HashMap"],[6,"Dedup"],[6,"DedupBy"],[6,"DedupByWithCount"],[6,"DedupWithCount"],[4,"Diff"],[6,"Duplicates"],[6,"DuplicatesBy"],[3,"Enumerate"],[8,"PartialEq"],[3,"Error"],[3,"FilterMapOk"],[3,"FilterOk"],[3,"FlattenOk"],[3,"Formatter"],[3,"Error"],[8,"Debug"],[6,"Result"],[3,"Format"],[3,"FormatWith"],[3,"GroupBy"],[8,"Hash"],[3,"Interleave"],[3,"InterleaveShortest"],[6,"Intersperse"],[3,"IntersperseWith"],[3,"GroupingMap"],[6,"GroupingMapBy"],[3,"Iterate"],[3,"String"],[3,"IntoIter"],[6,"KMerge"],[3,"KMergeBy"],[6,"MapInto"],[6,"MapOk"],[6,"Merge"],[3,"MergeBy"],[3,"MergeJoinBy"],[3,"MultiProduct"],[3,"MultiPeek"],[3,"Zip"],[8,"FnOnce"],[3,"PadUsing"],[3,"PeekNth"],[3,"PeekingTakeWhile"],[3,"Permutations"],[3,"Context"],[4,"Poll"],[3,"Positions"],[3,"Powerset"],[3,"Demand"],[3,"PutBack"],[3,"PutBackN"],[3,"RcIter"],[15,"u8"],[3,"RepeatCall"],[3,"RepeatN"],[3,"Rev"],[4,"SeekFrom"],[15,"u64"],[3,"Step"],[3,"TakeWhileRef"],[3,"TupleCombinations"],[3,"TupleWindows"],[3,"Tuples"],[3,"TypeId"],[3,"Unfold"],[3,"Unique"],[3,"UniqueBy"],[3,"Update"],[3,"WhileSome"],[3,"WithPosition"],[3,"Arguments"],[3,"Zip"],[3,"ZipEq"],[3,"ZipLongest"],[8,"Iterator"],[3,"TupleBuffer"],[3,"Group"],[3,"Chunk"],[3,"ProcessResults"],[3,"Tee"],[3,"Groups"],[3,"Chunks"],[8,"Itertools"],[8,"MultiUnzip"],[8,"PeekingNext"],[13,"FirstMismatch"],[13,"Shorter"],[13,"Longer"],[13,"Left"],[13,"Right"],[13,"Both"],[13,"Left"],[13,"Right"],[13,"Continue"],[13,"Done"],[13,"OneElement"],[13,"MinMax"],[13,"First"],[13,"Middle"],[13,"Last"],[13,"Only"]]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","tn":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ABS_CNT","ABS_MAX","ACCOUNTING","ADDR_COMPAT_LAYOUT","ADDR_LIMIT_32BIT","ADDR_LIMIT_3GB","ADDR_NO_RANDOMIZE","ADFS_SUPER_MAGIC","ADJ_ESTERROR","ADJ_FREQUENCY","ADJ_MAXERROR","ADJ_MICRO","ADJ_NANO","ADJ_OFFSET","ADJ_OFFSET_SINGLESHOT","ADJ_OFFSET_SS_READ","ADJ_SETOFFSET","ADJ_STATUS","ADJ_TAI","ADJ_TICK","ADJ_TIMECONST","AFFS_SUPER_MAGIC","AFS_SUPER_MAGIC","AF_ALG","AF_APPLETALK","AF_ASH","AF_ATMPVC","AF_ATMSVC","AF_AX25","AF_BLUETOOTH","AF_BRIDGE","AF_CAIF","AF_CAN","AF_DECnet","AF_ECONET","AF_IB","AF_IEEE802154","AF_INET","AF_INET6","AF_IPX","AF_IRDA","AF_ISDN","AF_IUCV","AF_KEY","AF_LLC","AF_LOCAL","AF_MPLS","AF_NETBEUI","AF_NETLINK","AF_NETROM","AF_NFC","AF_PACKET","AF_PHONET","AF_PPPOX","AF_RDS","AF_ROSE","AF_ROUTE","AF_RXRPC","AF_SECURITY","AF_SNA","AF_TIPC","AF_UNIX","AF_UNSPEC","AF_VSOCK","AF_WANPIPE","AF_X25","AF_XDP","AIO_ALLDONE","AIO_CANCELED","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_V4MAPPED","ALG_OP_DECRYPT","ALG_OP_ENCRYPT","ALG_SET_AEAD_ASSOCLEN","ALG_SET_AEAD_AUTHSIZE","ALG_SET_IV","ALG_SET_KEY","ALG_SET_OP","ALT_DIGITS","AM_STR","ARPD_FLUSH","ARPD_LOOKUP","ARPD_UPDATE","ARPHRD_ADAPT","ARPHRD_APPLETLK","ARPHRD_ARCNET","ARPHRD_ASH","ARPHRD_ATM","ARPHRD_AX25","ARPHRD_BIF","ARPHRD_CAN","ARPHRD_CHAOS","ARPHRD_CISCO","ARPHRD_CSLIP","ARPHRD_CSLIP6","ARPHRD_DDCMP","ARPHRD_DLCI","ARPHRD_ECONET","ARPHRD_EETHER","ARPHRD_ETHER","ARPHRD_EUI64","ARPHRD_FCAL","ARPHRD_FCFABRIC","ARPHRD_FCPL","ARPHRD_FCPP","ARPHRD_FDDI","ARPHRD_FRAD","ARPHRD_HDLC","ARPHRD_HIPPI","ARPHRD_HWX25","ARPHRD_IEEE1394","ARPHRD_IEEE802","ARPHRD_IEEE80211","ARPHRD_IEEE80211_PRISM","ARPHRD_IEEE80211_RADIOTAP","ARPHRD_IEEE802154","ARPHRD_IEEE802_TR","ARPHRD_INFINIBAND","ARPHRD_IPDDP","ARPHRD_IPGRE","ARPHRD_IRDA","ARPHRD_LAPB","ARPHRD_LOCALTLK","ARPHRD_LOOPBACK","ARPHRD_METRICOM","ARPHRD_NETROM","ARPHRD_NONE","ARPHRD_PIMREG","ARPHRD_PPP","ARPHRD_PRONET","ARPHRD_RAWHDLC","ARPHRD_ROSE","ARPHRD_RSRVD","ARPHRD_SIT","ARPHRD_SKIP","ARPHRD_SLIP","ARPHRD_SLIP6","ARPHRD_TUNNEL","ARPHRD_TUNNEL6","ARPHRD_VOID","ARPHRD_X25","ARPOP_InREPLY","ARPOP_InREQUEST","ARPOP_NAK","ARPOP_REPLY","ARPOP_REQUEST","ARPOP_RREPLY","ARPOP_RREQUEST","ATF_COM","ATF_DONTPUB","ATF_MAGIC","ATF_NETMASK","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","AT_BASE","AT_BASE_PLATFORM","AT_CLKTCK","AT_EACCESS","AT_EGID","AT_EMPTY_PATH","AT_ENTRY","AT_EUID","AT_EXECFD","AT_EXECFN","AT_FDCWD","AT_FLAGS","AT_GID","AT_HWCAP","AT_HWCAP2","AT_IGNORE","AT_NOTELF","AT_NO_AUTOMOUNT","AT_NULL","AT_PAGESZ","AT_PHDR","AT_PHENT","AT_PHNUM","AT_PLATFORM","AT_RANDOM","AT_REMOVEDIR","AT_SECURE","AT_STATX_DONT_SYNC","AT_STATX_FORCE_SYNC","AT_STATX_SYNC_AS_STAT","AT_STATX_SYNC_TYPE","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","AT_UID","AUTOFS_SUPER_MAGIC","B0","B1000000","B110","B115200","B1152000","B1200","B134","B150","B1500000","B1800","B19200","B200","B2000000","B230400","B2400","B2500000","B300","B3000000","B3500000","B38400","B4000000","B460800","B4800","B50","B500000","B57600","B576000","B600","B75","B921600","B9600","BINDERFS_SUPER_MAGIC","BLKIOMIN","BLKIOOPT","BLKPBSZGET","BLKSSZGET","BOOT_TIME","BOTHER","BPF_ABS","BPF_ADD","BPF_ALU","BPF_AND","BPF_B","BPF_DIV","BPF_FS_MAGIC","BPF_H","BPF_IMM","BPF_IND","BPF_JA","BPF_JEQ","BPF_JGE","BPF_JGT","BPF_JMP","BPF_JSET","BPF_JUMP","BPF_K","BPF_LD","BPF_LDX","BPF_LEN","BPF_LL_OFF","BPF_LSH","BPF_MAXINSNS","BPF_MEM","BPF_MEMWORDS","BPF_MISC","BPF_MISCOP","BPF_MOD","BPF_MSH","BPF_MUL","BPF_NEG","BPF_NET_OFF","BPF_OR","BPF_RET","BPF_RSH","BPF_RVAL","BPF_ST","BPF_STMT","BPF_STX","BPF_SUB","BPF_W","BPF_X","BPF_XOR","BRKINT","BS0","BS1","BSDLY","BTRFS_SUPER_MAGIC","BUFSIZ","BUS_ADRALN","BUS_ADRERR","BUS_MCEERR_AO","BUS_MCEERR_AR","BUS_OBJERR","CANFD_BRS","CANFD_ESI","CANFD_MAX_DLC","CANFD_MAX_DLEN","CANFD_MTU","CAN_BCM","CAN_EFF_FLAG","CAN_EFF_ID_BITS","CAN_EFF_MASK","CAN_ERR_FLAG","CAN_ERR_MASK","CAN_INV_FILTER","CAN_ISOTP","CAN_J1939","CAN_MAX_DLC","CAN_MAX_DLEN","CAN_MCNET","CAN_MTU","CAN_NPROTO","CAN_RAW","CAN_RAW_ERR_FILTER","CAN_RAW_FD_FRAMES","CAN_RAW_FILTER","CAN_RAW_FILTER_MAX","CAN_RAW_JOIN_FILTERS","CAN_RAW_LOOPBACK","CAN_RAW_RECV_OWN_MSGS","CAN_RTR_FLAG","CAN_SFF_ID_BITS","CAN_SFF_MASK","CAN_TP16","CAN_TP20","CBAUD","CBAUDEX","CGROUP2_SUPER_MAGIC","CGROUP_SUPER_MAGIC","CIBAUD","CLD_CONTINUED","CLD_DUMPED","CLD_EXITED","CLD_KILLED","CLD_STOPPED","CLD_TRAPPED","CLOCAL","CLOCK_BOOTTIME","CLOCK_BOOTTIME_ALARM","CLOCK_MONOTONIC","CLOCK_MONOTONIC_COARSE","CLOCK_MONOTONIC_RAW","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_REALTIME_ALARM","CLOCK_REALTIME_COARSE","CLOCK_TAI","CLOCK_THREAD_CPUTIME_ID","CLONE_CHILD_CLEARTID","CLONE_CHILD_SETTID","CLONE_DETACHED","CLONE_FILES","CLONE_FS","CLONE_IO","CLONE_NEWCGROUP","CLONE_NEWIPC","CLONE_NEWNET","CLONE_NEWNS","CLONE_NEWPID","CLONE_NEWUSER","CLONE_NEWUTS","CLONE_PARENT","CLONE_PARENT_SETTID","CLONE_PIDFD","CLONE_PTRACE","CLONE_SETTLS","CLONE_SIGHAND","CLONE_SYSVSEM","CLONE_THREAD","CLONE_UNTRACED","CLONE_VFORK","CLONE_VM","CLOSE_RANGE_CLOEXEC","CLOSE_RANGE_UNSHARE","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CMSPAR","CODA_SUPER_MAGIC","CODESET","CPU_ALLOC_SIZE","CPU_CLR","CPU_COUNT","CPU_COUNT_S","CPU_EQUAL","CPU_ISSET","CPU_SET","CPU_SETSIZE","CPU_ZERO","CR0","CR1","CR2","CR3","CRAMFS_MAGIC","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","CTRL_ATTR_FAMILY_ID","CTRL_ATTR_FAMILY_NAME","CTRL_ATTR_HDRSIZE","CTRL_ATTR_MAXATTR","CTRL_ATTR_MCAST_GROUPS","CTRL_ATTR_MCAST_GRP_ID","CTRL_ATTR_MCAST_GRP_NAME","CTRL_ATTR_MCAST_GRP_UNSPEC","CTRL_ATTR_OPS","CTRL_ATTR_OP_FLAGS","CTRL_ATTR_OP_ID","CTRL_ATTR_OP_UNSPEC","CTRL_ATTR_UNSPEC","CTRL_ATTR_VERSION","CTRL_CMD_DELFAMILY","CTRL_CMD_DELMCAST_GRP","CTRL_CMD_DELOPS","CTRL_CMD_GETFAMILY","CTRL_CMD_GETMCAST_GRP","CTRL_CMD_GETOPS","CTRL_CMD_NEWFAMILY","CTRL_CMD_NEWMCAST_GRP","CTRL_CMD_NEWOPS","CTRL_CMD_UNSPEC","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DCCP_SERVICE_LIST_MAX_LEN","DCCP_SOCKOPT_AVAILABLE_CCIDS","DCCP_SOCKOPT_CCID","DCCP_SOCKOPT_CCID_RX_INFO","DCCP_SOCKOPT_CCID_TX_INFO","DCCP_SOCKOPT_CHANGE_L","DCCP_SOCKOPT_CHANGE_R","DCCP_SOCKOPT_GET_CUR_MPS","DCCP_SOCKOPT_PACKET_SIZE","DCCP_SOCKOPT_QPOLICY_ID","DCCP_SOCKOPT_QPOLICY_TXQLEN","DCCP_SOCKOPT_RECV_CSCOV","DCCP_SOCKOPT_RX_CCID","DCCP_SOCKOPT_SEND_CSCOV","DCCP_SOCKOPT_SERVER_TIMEWAIT","DCCP_SOCKOPT_SERVICE","DCCP_SOCKOPT_TX_CCID","DEAD_PROCESS","DEBUGFS_MAGIC","DEVPTS_SUPER_MAGIC","DIR","DS","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EADV","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EBADE","EBADF","EBADFD","EBADMSG","EBADR","EBADRQC","EBADSLT","EBFONT","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECHRNG","ECOMM","ECONNABORTED","ECONNREFUSED","ECONNRESET","ECRYPTFS_SUPER_MAGIC","EDEADLK","EDEADLOCK","EDESTADDRREQ","EDOM","EDOTDOT","EDQUOT","EEXIST","EFAULT","EFBIG","EFD_CLOEXEC","EFD_NONBLOCK","EFD_SEMAPHORE","EFLAGS","EFS_SUPER_MAGIC","EHOSTDOWN","EHOSTUNREACH","EHWPOISON","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","EISNAM","EI_ABIVERSION","EI_CLASS","EI_DATA","EI_MAG0","EI_MAG1","EI_MAG2","EI_MAG3","EI_NIDENT","EI_OSABI","EI_PAD","EI_VERSION","EKEYEXPIRED","EKEYREJECTED","EKEYREVOKED","EL2HLT","EL2NSYNC","EL3HLT","EL3RST","ELFCLASS32","ELFCLASS64","ELFCLASSNONE","ELFCLASSNUM","ELFDATA2LSB","ELFDATA2MSB","ELFDATANONE","ELFDATANUM","ELFMAG0","ELFMAG1","ELFMAG2","ELFMAG3","ELFOSABI_AIX","ELFOSABI_ARM","ELFOSABI_ARM_AEABI","ELFOSABI_FREEBSD","ELFOSABI_GNU","ELFOSABI_HPUX","ELFOSABI_IRIX","ELFOSABI_LINUX","ELFOSABI_MODESTO","ELFOSABI_NETBSD","ELFOSABI_NONE","ELFOSABI_OPENBSD","ELFOSABI_SOLARIS","ELFOSABI_STANDALONE","ELFOSABI_SYSV","ELFOSABI_TRU64","ELIBACC","ELIBBAD","ELIBEXEC","ELIBMAX","ELIBSCN","ELNRNG","ELOOP","EMEDIUMTYPE","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","EM_386","EM_68HC05","EM_68HC08","EM_68HC11","EM_68HC12","EM_68HC16","EM_68K","EM_860","EM_88K","EM_960","EM_AARCH64","EM_ALPHA","EM_ARC","EM_ARC_A5","EM_ARM","EM_AVR","EM_COLDFIRE","EM_CRIS","EM_D10V","EM_D30V","EM_FAKE_ALPHA","EM_FIREPATH","EM_FR20","EM_FR30","EM_FX66","EM_H8S","EM_H8_300","EM_H8_300H","EM_H8_500","EM_HUANY","EM_IA_64","EM_JAVELIN","EM_M32","EM_M32R","EM_ME16","EM_MIPS","EM_MIPS_RS3_LE","EM_MIPS_X","EM_MMA","EM_MMIX","EM_MN10200","EM_MN10300","EM_NCPU","EM_NDR1","EM_NONE","EM_OPENRISC","EM_PARISC","EM_PCP","EM_PDSP","EM_PJ","EM_PPC","EM_PPC64","EM_PRISM","EM_RCE","EM_RH32","EM_S370","EM_S390","EM_SH","EM_SPARC","EM_SPARC32PLUS","EM_SPARCV9","EM_ST100","EM_ST19","EM_ST7","EM_ST9PLUS","EM_STARCORE","EM_SVX","EM_TILEGX","EM_TILEPRO","EM_TINYJ","EM_TRICORE","EM_V800","EM_V850","EM_VAX","EM_VPP500","EM_X86_64","EM_XTENSA","EM_ZSP","ENAMETOOLONG","ENAVAIL","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOANO","ENOATTR","ENOBUFS","ENOCSI","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOKEY","ENOLCK","ENOLINK","ENOMEDIUM","ENOMEM","ENOMSG","ENONET","ENOPKG","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTNAM","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENOTUNIQ","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPOLLERR","EPOLLET","EPOLLEXCLUSIVE","EPOLLHUP","EPOLLIN","EPOLLMSG","EPOLLONESHOT","EPOLLOUT","EPOLLPRI","EPOLLRDBAND","EPOLLRDHUP","EPOLLRDNORM","EPOLLWAKEUP","EPOLLWRBAND","EPOLLWRNORM","EPOLL_CLOEXEC","EPOLL_CTL_ADD","EPOLL_CTL_DEL","EPOLL_CTL_MOD","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMCHG","EREMOTE","EREMOTEIO","ERESTART","ERFKILL","EROFS","ES","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESRMNT","ESTALE","ESTRPIPE","ETH_ALEN","ETH_DATA_LEN","ETH_FCS_LEN","ETH_FRAME_LEN","ETH_HLEN","ETH_P_1588","ETH_P_8021AD","ETH_P_8021AH","ETH_P_8021Q","ETH_P_80221","ETH_P_802_2","ETH_P_802_3","ETH_P_802_3_MIN","ETH_P_802_EX1","ETH_P_AARP","ETH_P_AF_IUCV","ETH_P_ALL","ETH_P_AOE","ETH_P_ARCNET","ETH_P_ARP","ETH_P_ATALK","ETH_P_ATMFATE","ETH_P_ATMMPOA","ETH_P_AX25","ETH_P_BATMAN","ETH_P_BPQ","ETH_P_CAIF","ETH_P_CANFD","ETH_P_CONTROL","ETH_P_CUST","ETH_P_DDCMP","ETH_P_DEC","ETH_P_DIAG","ETH_P_DNA_DL","ETH_P_DNA_RC","ETH_P_DNA_RT","ETH_P_DSA","ETH_P_ECONET","ETH_P_EDSA","ETH_P_FCOE","ETH_P_FIP","ETH_P_HDLC","ETH_P_IEEE802154","ETH_P_IEEEPUP","ETH_P_IEEEPUPAT","ETH_P_IP","ETH_P_IPV6","ETH_P_IPX","ETH_P_IRDA","ETH_P_LAT","ETH_P_LINK_CTL","ETH_P_LOCALTALK","ETH_P_LOOP","ETH_P_LOOPBACK","ETH_P_MACSEC","ETH_P_MOBITEX","ETH_P_MPLS_MC","ETH_P_MPLS_UC","ETH_P_MVRP","ETH_P_PAE","ETH_P_PAUSE","ETH_P_PHONET","ETH_P_PPPTALK","ETH_P_PPP_DISC","ETH_P_PPP_MP","ETH_P_PPP_SES","ETH_P_PRP","ETH_P_PUP","ETH_P_PUPAT","ETH_P_QINQ1","ETH_P_QINQ2","ETH_P_QINQ3","ETH_P_RARP","ETH_P_SCA","ETH_P_SLOW","ETH_P_SNAP","ETH_P_TDLS","ETH_P_TEB","ETH_P_TIPC","ETH_P_TRAILER","ETH_P_TR_802_2","ETH_P_WAN_PPP","ETH_P_WCCP","ETH_P_X25","ETH_ZLEN","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","ET_CORE","ET_DYN","ET_EXEC","ET_HIOS","ET_HIPROC","ET_LOOS","ET_LOPROC","ET_NONE","ET_NUM","ET_REL","EUCLEAN","EUNATCH","EUSERS","EV_CNT","EV_CURRENT","EV_MAX","EV_NONE","EV_NUM","EWOULDBLOCK","EXDEV","EXFULL","EXIT_FAILURE","EXIT_SUCCESS","EXT2_SUPER_MAGIC","EXT3_SUPER_MAGIC","EXT4_SUPER_MAGIC","EXTA","EXTB","EXTPROC","Elf32_Addr","Elf32_Chdr","Elf32_Ehdr","Elf32_Half","Elf32_Off","Elf32_Phdr","Elf32_Section","Elf32_Shdr","Elf32_Sym","Elf32_Word","Elf64_Addr","Elf64_Chdr","Elf64_Ehdr","Elf64_Half","Elf64_Off","Elf64_Phdr","Elf64_Section","Elf64_Shdr","Elf64_Sxword","Elf64_Sym","Elf64_Word","Elf64_Xword","F2FS_SUPER_MAGIC","FALLOC_FL_COLLAPSE_RANGE","FALLOC_FL_INSERT_RANGE","FALLOC_FL_KEEP_SIZE","FALLOC_FL_PUNCH_HOLE","FALLOC_FL_UNSHARE_RANGE","FALLOC_FL_ZERO_RANGE","FANOTIFY_METADATA_VERSION","FAN_ACCESS","FAN_ACCESS_PERM","FAN_ALLOW","FAN_CLASS_CONTENT","FAN_CLASS_NOTIF","FAN_CLASS_PRE_CONTENT","FAN_CLOEXEC","FAN_CLOSE","FAN_CLOSE_NOWRITE","FAN_CLOSE_WRITE","FAN_DENY","FAN_EVENT_ON_CHILD","FAN_MARK_ADD","FAN_MARK_DONT_FOLLOW","FAN_MARK_FILESYSTEM","FAN_MARK_FLUSH","FAN_MARK_IGNORED_MASK","FAN_MARK_IGNORED_SURV_MODIFY","FAN_MARK_INODE","FAN_MARK_MOUNT","FAN_MARK_ONLYDIR","FAN_MARK_REMOVE","FAN_MODIFY","FAN_NOFD","FAN_NONBLOCK","FAN_ONDIR","FAN_OPEN","FAN_OPEN_PERM","FAN_Q_OVERFLOW","FAN_UNLIMITED_MARKS","FAN_UNLIMITED_QUEUE","FDPIC_FUNCPTRS","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FF_CNT","FF_MAX","FICLONE","FICLONERANGE","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIONBIO","FIONCLEX","FIONREAD","FIOQSIZE","FLUSHO","FOPEN_MAX","FS","FS_BASE","FUSE_SUPER_MAGIC","FUTEXFS_SUPER_MAGIC","FUTEX_CLOCK_REALTIME","FUTEX_CMD_MASK","FUTEX_CMP_REQUEUE","FUTEX_CMP_REQUEUE_PI","FUTEX_FD","FUTEX_LOCK_PI","FUTEX_LOCK_PI2","FUTEX_PRIVATE_FLAG","FUTEX_REQUEUE","FUTEX_TRYLOCK_PI","FUTEX_UNLOCK_PI","FUTEX_WAIT","FUTEX_WAIT_BITSET","FUTEX_WAIT_REQUEUE_PI","FUTEX_WAKE","FUTEX_WAKE_BITSET","FUTEX_WAKE_OP","F_ADD_SEALS","F_CANCELLK","F_DUPFD","F_DUPFD_CLOEXEC","F_GETFD","F_GETFL","F_GETLEASE","F_GETLK","F_GETOWN","F_GETPIPE_SZ","F_GET_SEALS","F_LOCK","F_NOTIFY","F_OFD_GETLK","F_OFD_SETLK","F_OFD_SETLKW","F_OK","F_RDLCK","F_SEAL_FUTURE_WRITE","F_SEAL_GROW","F_SEAL_SEAL","F_SEAL_SHRINK","F_SEAL_WRITE","F_SETFD","F_SETFL","F_SETLEASE","F_SETLK","F_SETLKW","F_SETOWN","F_SETPIPE_SZ","F_TEST","F_TLOCK","F_ULOCK","F_UNLCK","F_WRLCK","GENL_ADMIN_PERM","GENL_CMD_CAP_DO","GENL_CMD_CAP_DUMP","GENL_CMD_CAP_HASPOL","GENL_ID_CTRL","GENL_ID_PMCRAID","GENL_ID_VFS_DQUOT","GENL_MAX_ID","GENL_MIN_ID","GENL_NAMSIZ","GENL_UNS_ADMIN_PERM","GLOB_ABORTED","GLOB_APPEND","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GRND_INSECURE","GRND_NONBLOCK","GRND_RANDOM","GRPQUOTA","GS","GS_BASE","HOSTFS_SUPER_MAGIC","HPFS_SUPER_MAGIC","HUGETLBFS_MAGIC","HUGETLB_FLAG_ENCODE_16GB","HUGETLB_FLAG_ENCODE_16MB","HUGETLB_FLAG_ENCODE_1GB","HUGETLB_FLAG_ENCODE_1MB","HUGETLB_FLAG_ENCODE_256MB","HUGETLB_FLAG_ENCODE_2GB","HUGETLB_FLAG_ENCODE_2MB","HUGETLB_FLAG_ENCODE_32MB","HUGETLB_FLAG_ENCODE_512KB","HUGETLB_FLAG_ENCODE_512MB","HUGETLB_FLAG_ENCODE_64KB","HUGETLB_FLAG_ENCODE_8MB","HUGETLB_FLAG_ENCODE_MASK","HUGETLB_FLAG_ENCODE_SHIFT","HUPCL","IBSHIFT","ICANON","ICRNL","IEXTEN","IFA_ADDRESS","IFA_ANYCAST","IFA_BROADCAST","IFA_CACHEINFO","IFA_FLAGS","IFA_F_DADFAILED","IFA_F_DEPRECATED","IFA_F_HOMEADDRESS","IFA_F_MANAGETEMPADDR","IFA_F_MCAUTOJOIN","IFA_F_NODAD","IFA_F_NOPREFIXROUTE","IFA_F_OPTIMISTIC","IFA_F_PERMANENT","IFA_F_SECONDARY","IFA_F_STABLE_PRIVACY","IFA_F_TEMPORARY","IFA_F_TENTATIVE","IFA_LABEL","IFA_LOCAL","IFA_MULTICAST","IFA_UNSPEC","IFF_ALLMULTI","IFF_ATTACH_QUEUE","IFF_AUTOMEDIA","IFF_BROADCAST","IFF_DEBUG","IFF_DETACH_QUEUE","IFF_DORMANT","IFF_DYNAMIC","IFF_ECHO","IFF_LOOPBACK","IFF_LOWER_UP","IFF_MASTER","IFF_MULTICAST","IFF_MULTI_QUEUE","IFF_NOARP","IFF_NOFILTER","IFF_NOTRAILERS","IFF_NO_PI","IFF_ONE_QUEUE","IFF_PERSIST","IFF_POINTOPOINT","IFF_PORTSEL","IFF_PROMISC","IFF_RUNNING","IFF_SLAVE","IFF_TAP","IFF_TUN","IFF_TUN_EXCL","IFF_UP","IFF_VNET_HDR","IFLA_ADDRESS","IFLA_AF_SPEC","IFLA_ALT_IFNAME","IFLA_BROADCAST","IFLA_CARRIER","IFLA_CARRIER_CHANGES","IFLA_CARRIER_DOWN_COUNT","IFLA_CARRIER_UP_COUNT","IFLA_COST","IFLA_EVENT","IFLA_EXT_MASK","IFLA_GROUP","IFLA_GSO_MAX_SEGS","IFLA_GSO_MAX_SIZE","IFLA_IFALIAS","IFLA_IFNAME","IFLA_IF_NETNSID","IFLA_INFO_DATA","IFLA_INFO_KIND","IFLA_INFO_SLAVE_DATA","IFLA_INFO_SLAVE_KIND","IFLA_INFO_UNSPEC","IFLA_INFO_XSTATS","IFLA_LINK","IFLA_LINKINFO","IFLA_LINKMODE","IFLA_LINK_NETNSID","IFLA_MAP","IFLA_MASTER","IFLA_MAX_MTU","IFLA_MIN_MTU","IFLA_MTU","IFLA_NET_NS_FD","IFLA_NET_NS_PID","IFLA_NEW_IFINDEX","IFLA_NEW_NETNSID","IFLA_NUM_RX_QUEUES","IFLA_NUM_TX_QUEUES","IFLA_NUM_VF","IFLA_OPERSTATE","IFLA_PAD","IFLA_PERM_ADDRESS","IFLA_PHYS_PORT_ID","IFLA_PHYS_PORT_NAME","IFLA_PHYS_SWITCH_ID","IFLA_PORT_SELF","IFLA_PRIORITY","IFLA_PROMISCUITY","IFLA_PROP_LIST","IFLA_PROTINFO","IFLA_PROTO_DOWN","IFLA_PROTO_DOWN_REASON","IFLA_QDISC","IFLA_STATS","IFLA_STATS64","IFLA_TARGET_NETNSID","IFLA_TXQLEN","IFLA_UNSPEC","IFLA_VFINFO_LIST","IFLA_VF_PORTS","IFLA_WEIGHT","IFLA_WIRELESS","IFLA_XDP","IFNAMSIZ","IF_NAMESIZE","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INPCK","INPUT_PROP_CNT","INPUT_PROP_MAX","INT_MAX","INT_MIN","IN_ACCESS","IN_ALL_EVENTS","IN_ATTRIB","IN_CLOEXEC","IN_CLOSE","IN_CLOSE_NOWRITE","IN_CLOSE_WRITE","IN_CREATE","IN_DELETE","IN_DELETE_SELF","IN_DONT_FOLLOW","IN_IGNORED","IN_ISDIR","IN_MODIFY","IN_MOVE","IN_MOVED_FROM","IN_MOVED_TO","IN_MOVE_SELF","IN_NONBLOCK","IN_ONESHOT","IN_ONLYDIR","IN_OPEN","IN_Q_OVERFLOW","IN_UNMOUNT","IP6T_SO_ORIGINAL_DST","IPC_CREAT","IPC_EXCL","IPC_INFO","IPC_NOWAIT","IPC_PRIVATE","IPC_RMID","IPC_SET","IPC_STAT","IPDEFTTL","IPOPT_CLASS","IPOPT_CLASS_MASK","IPOPT_CONTROL","IPOPT_COPIED","IPOPT_COPY","IPOPT_END","IPOPT_EOL","IPOPT_LSRR","IPOPT_MEASUREMENT","IPOPT_MINOFF","IPOPT_NOOP","IPOPT_NOP","IPOPT_NUMBER","IPOPT_NUMBER_MASK","IPOPT_OFFSET","IPOPT_OLEN","IPOPT_OPTVAL","IPOPT_RA","IPOPT_RESERVED1","IPOPT_RESERVED2","IPOPT_RR","IPOPT_SEC","IPOPT_SID","IPOPT_SSRR","IPOPT_TIMESTAMP","IPOPT_TS","IPOPT_TS_PRESPEC","IPOPT_TS_TSANDADDR","IPOPT_TS_TSONLY","IPPROTO_AH","IPPROTO_BEETPH","IPPROTO_COMP","IPPROTO_DCCP","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_ENCAP","IPPROTO_ESP","IPPROTO_FRAGMENT","IPPROTO_GRE","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IGMP","IPPROTO_IP","IPPROTO_IPIP","IPPROTO_IPV6","IPPROTO_MAX","IPPROTO_MH","IPPROTO_MPLS","IPPROTO_MPTCP","IPPROTO_MTP","IPPROTO_NONE","IPPROTO_PIM","IPPROTO_PUP","IPPROTO_RAW","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_SCTP","IPPROTO_TCP","IPPROTO_TP","IPPROTO_UDP","IPPROTO_UDPLITE","IPTOS_ECN","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOT_ECT","IPTOS_LOWDELAY","IPTOS_MINCOST","IPTOS_PREC","IPTOS_PREC_CRITIC_ECP","IPTOS_PREC_FLASH","IPTOS_PREC_FLASHOVERRIDE","IPTOS_PREC_IMMEDIATE","IPTOS_PREC_INTERNETCONTROL","IPTOS_PREC_MASK","IPTOS_PREC_NETCONTROL","IPTOS_PREC_PRIORITY","IPTOS_PREC_ROUTINE","IPTOS_RELIABILITY","IPTOS_THROUGHPUT","IPTOS_TOS","IPTOS_TOS_MASK","IPV6_2292DSTOPTS","IPV6_2292HOPLIMIT","IPV6_2292HOPOPTS","IPV6_2292PKTINFO","IPV6_2292PKTOPTIONS","IPV6_2292RTHDR","IPV6_ADDRFORM","IPV6_ADDR_PREFERENCES","IPV6_ADD_MEMBERSHIP","IPV6_AUTHHDR","IPV6_AUTOFLOWLABEL","IPV6_CHECKSUM","IPV6_DONTFRAG","IPV6_DROP_MEMBERSHIP","IPV6_DSTOPTS","IPV6_FLOWINFO","IPV6_FLOWINFO_FLOWLABEL","IPV6_FLOWINFO_PRIORITY","IPV6_FLOWINFO_SEND","IPV6_FLOWLABEL_MGR","IPV6_FREEBIND","IPV6_HDRINCL","IPV6_HOPLIMIT","IPV6_HOPOPTS","IPV6_IPSEC_POLICY","IPV6_JOIN_ANYCAST","IPV6_LEAVE_ANYCAST","IPV6_MINHOPCOUNT","IPV6_MTU","IPV6_MTU_DISCOVER","IPV6_MULTICAST_ALL","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_NEXTHOP","IPV6_ORIGDSTADDR","IPV6_PATHMTU","IPV6_PKTINFO","IPV6_PMTUDISC_DO","IPV6_PMTUDISC_DONT","IPV6_PMTUDISC_INTERFACE","IPV6_PMTUDISC_OMIT","IPV6_PMTUDISC_PROBE","IPV6_PMTUDISC_WANT","IPV6_PREFER_SRC_CGA","IPV6_PREFER_SRC_COA","IPV6_PREFER_SRC_HOME","IPV6_PREFER_SRC_NONCGA","IPV6_PREFER_SRC_PUBLIC","IPV6_PREFER_SRC_PUBTMP_DEFAULT","IPV6_PREFER_SRC_TMP","IPV6_RECVDSTOPTS","IPV6_RECVERR","IPV6_RECVFRAGSIZE","IPV6_RECVHOPLIMIT","IPV6_RECVHOPOPTS","IPV6_RECVORIGDSTADDR","IPV6_RECVPATHMTU","IPV6_RECVPKTINFO","IPV6_RECVRTHDR","IPV6_RECVTCLASS","IPV6_ROUTER_ALERT","IPV6_ROUTER_ALERT_ISOLATE","IPV6_RTHDR","IPV6_RTHDRDSTOPTS","IPV6_RTHDR_LOOSE","IPV6_RTHDR_STRICT","IPV6_TCLASS","IPV6_TRANSPARENT","IPV6_UNICAST_HOPS","IPV6_UNICAST_IF","IPV6_V6ONLY","IPV6_XFRM_POLICY","IPVERSION","IP_ADD_MEMBERSHIP","IP_ADD_SOURCE_MEMBERSHIP","IP_BIND_ADDRESS_NO_PORT","IP_BLOCK_SOURCE","IP_CHECKSUM","IP_DEFAULT_MULTICAST_LOOP","IP_DEFAULT_MULTICAST_TTL","IP_DROP_MEMBERSHIP","IP_DROP_SOURCE_MEMBERSHIP","IP_FREEBIND","IP_HDRINCL","IP_IPSEC_POLICY","IP_MINTTL","IP_MSFILTER","IP_MTU","IP_MTU_DISCOVER","IP_MULTICAST_ALL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_NODEFRAG","IP_OPTIONS","IP_ORIGDSTADDR","IP_PASSSEC","IP_PKTINFO","IP_PKTOPTIONS","IP_PMTUDISC_DO","IP_PMTUDISC_DONT","IP_PMTUDISC_INTERFACE","IP_PMTUDISC_OMIT","IP_PMTUDISC_PROBE","IP_PMTUDISC_WANT","IP_RECVERR","IP_RECVFRAGSIZE","IP_RECVOPTS","IP_RECVORIGDSTADDR","IP_RECVTOS","IP_RECVTTL","IP_RETOPTS","IP_ROUTER_ALERT","IP_TOS","IP_TRANSPARENT","IP_TTL","IP_UNBLOCK_SOURCE","IP_UNICAST_IF","IP_XFRM_POLICY","ISIG","ISOFS_SUPER_MAGIC","ISTRIP","ITIMER_PROF","ITIMER_REAL","ITIMER_VIRTUAL","IUTF8","IXANY","IXOFF","IXON","J1939_EE_INFO_NONE","J1939_EE_INFO_RX_ABORT","J1939_EE_INFO_RX_DPO","J1939_EE_INFO_RX_RTS","J1939_EE_INFO_TX_ABORT","J1939_FILTER_MAX","J1939_IDLE_ADDR","J1939_MAX_UNICAST_ADDR","J1939_NLA_BYTES_ACKED","J1939_NLA_DEST_ADDR","J1939_NLA_DEST_NAME","J1939_NLA_PAD","J1939_NLA_PGN","J1939_NLA_SRC_ADDR","J1939_NLA_SRC_NAME","J1939_NLA_TOTAL_SIZE","J1939_NO_ADDR","J1939_NO_NAME","J1939_NO_PGN","J1939_PGN_ADDRESS_CLAIMED","J1939_PGN_ADDRESS_COMMANDED","J1939_PGN_MAX","J1939_PGN_PDU1_MAX","J1939_PGN_REQUEST","JFFS2_SUPER_MAGIC","KEYCTL_ASSUME_AUTHORITY","KEYCTL_CAPABILITIES","KEYCTL_CAPS0_BIG_KEY","KEYCTL_CAPS0_CAPABILITIES","KEYCTL_CAPS0_DIFFIE_HELLMAN","KEYCTL_CAPS0_INVALIDATE","KEYCTL_CAPS0_MOVE","KEYCTL_CAPS0_PERSISTENT_KEYRINGS","KEYCTL_CAPS0_PUBLIC_KEY","KEYCTL_CAPS0_RESTRICT_KEYRING","KEYCTL_CAPS1_NS_KEYRING_NAME","KEYCTL_CAPS1_NS_KEY_TAG","KEYCTL_CHOWN","KEYCTL_CLEAR","KEYCTL_DESCRIBE","KEYCTL_DH_COMPUTE","KEYCTL_GET_KEYRING_ID","KEYCTL_GET_PERSISTENT","KEYCTL_GET_SECURITY","KEYCTL_INSTANTIATE","KEYCTL_INSTANTIATE_IOV","KEYCTL_INVALIDATE","KEYCTL_JOIN_SESSION_KEYRING","KEYCTL_LINK","KEYCTL_MOVE","KEYCTL_NEGATE","KEYCTL_PKEY_DECRYPT","KEYCTL_PKEY_ENCRYPT","KEYCTL_PKEY_QUERY","KEYCTL_PKEY_SIGN","KEYCTL_PKEY_VERIFY","KEYCTL_READ","KEYCTL_REJECT","KEYCTL_RESTRICT_KEYRING","KEYCTL_REVOKE","KEYCTL_SEARCH","KEYCTL_SESSION_TO_PARENT","KEYCTL_SETPERM","KEYCTL_SET_REQKEY_KEYRING","KEYCTL_SET_TIMEOUT","KEYCTL_SUPPORTS_DECRYPT","KEYCTL_SUPPORTS_ENCRYPT","KEYCTL_SUPPORTS_SIGN","KEYCTL_SUPPORTS_VERIFY","KEYCTL_UNLINK","KEYCTL_UPDATE","KEY_CNT","KEY_MAX","KEY_REQKEY_DEFL_DEFAULT","KEY_REQKEY_DEFL_GROUP_KEYRING","KEY_REQKEY_DEFL_NO_CHANGE","KEY_REQKEY_DEFL_PROCESS_KEYRING","KEY_REQKEY_DEFL_REQUESTOR_KEYRING","KEY_REQKEY_DEFL_SESSION_KEYRING","KEY_REQKEY_DEFL_THREAD_KEYRING","KEY_REQKEY_DEFL_USER_KEYRING","KEY_REQKEY_DEFL_USER_SESSION_KEYRING","KEY_SPEC_GROUP_KEYRING","KEY_SPEC_PROCESS_KEYRING","KEY_SPEC_REQKEY_AUTH_KEY","KEY_SPEC_REQUESTOR_KEYRING","KEY_SPEC_SESSION_KEYRING","KEY_SPEC_THREAD_KEYRING","KEY_SPEC_USER_KEYRING","KEY_SPEC_USER_SESSION_KEYRING","LC_ADDRESS","LC_ADDRESS_MASK","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_IDENTIFICATION","LC_IDENTIFICATION_MASK","LC_MEASUREMENT","LC_MEASUREMENT_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NAME","LC_NAME_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_PAPER","LC_PAPER_MASK","LC_TELEPHONE","LC_TELEPHONE_MASK","LC_TIME","LC_TIME_MASK","LED_CNT","LED_MAX","LINUX_REBOOT_CMD_CAD_OFF","LINUX_REBOOT_CMD_CAD_ON","LINUX_REBOOT_CMD_HALT","LINUX_REBOOT_CMD_KEXEC","LINUX_REBOOT_CMD_POWER_OFF","LINUX_REBOOT_CMD_RESTART","LINUX_REBOOT_CMD_RESTART2","LINUX_REBOOT_CMD_SW_SUSPEND","LINUX_REBOOT_MAGIC1","LINUX_REBOOT_MAGIC2","LINUX_REBOOT_MAGIC2A","LINUX_REBOOT_MAGIC2B","LINUX_REBOOT_MAGIC2C","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LM_ID_BASE","LM_ID_NEWLM","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_KERN","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","Lmid_t","MADV_DODUMP","MADV_DOFORK","MADV_DONTDUMP","MADV_DONTFORK","MADV_DONTNEED","MADV_FREE","MADV_HUGEPAGE","MADV_HWPOISON","MADV_MERGEABLE","MADV_NOHUGEPAGE","MADV_NORMAL","MADV_RANDOM","MADV_REMOVE","MADV_SEQUENTIAL","MADV_SOFT_OFFLINE","MADV_UNMERGEABLE","MADV_WILLNEED","MAP_32BIT","MAP_ANON","MAP_ANONYMOUS","MAP_DENYWRITE","MAP_EXECUTABLE","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_FIXED_NOREPLACE","MAP_GROWSDOWN","MAP_HUGETLB","MAP_HUGE_16GB","MAP_HUGE_16MB","MAP_HUGE_1GB","MAP_HUGE_1MB","MAP_HUGE_256MB","MAP_HUGE_2GB","MAP_HUGE_2MB","MAP_HUGE_32MB","MAP_HUGE_512KB","MAP_HUGE_512MB","MAP_HUGE_64KB","MAP_HUGE_8MB","MAP_HUGE_MASK","MAP_HUGE_SHIFT","MAP_LOCKED","MAP_NONBLOCK","MAP_NORESERVE","MAP_POPULATE","MAP_PRIVATE","MAP_SHARED","MAP_SHARED_VALIDATE","MAP_STACK","MAP_SYNC","MAP_TYPE","MAXTC","MAXTTL","MAX_ADDR_LEN","MAX_IPOPTLEN","MAX_LINKS","MCAST_BLOCK_SOURCE","MCAST_EXCLUDE","MCAST_INCLUDE","MCAST_JOIN_GROUP","MCAST_JOIN_SOURCE_GROUP","MCAST_LEAVE_GROUP","MCAST_LEAVE_SOURCE_GROUP","MCAST_MSFILTER","MCAST_UNBLOCK_SOURCE","MCL_CURRENT","MCL_FUTURE","MFD_ALLOW_SEALING","MFD_CLOEXEC","MFD_HUGETLB","MFD_HUGE_16GB","MFD_HUGE_16MB","MFD_HUGE_1GB","MFD_HUGE_1MB","MFD_HUGE_256MB","MFD_HUGE_2GB","MFD_HUGE_2MB","MFD_HUGE_32MB","MFD_HUGE_512KB","MFD_HUGE_512MB","MFD_HUGE_64KB","MFD_HUGE_8MB","MFD_HUGE_MASK","MFD_HUGE_SHIFT","MINIX2_SUPER_MAGIC","MINIX2_SUPER_MAGIC2","MINIX3_SUPER_MAGIC","MINIX_SUPER_MAGIC","MINIX_SUPER_MAGIC2","MINSIGSTKSZ","MLOCK_ONFAULT","MMAP_PAGE_ZERO","MNT_DETACH","MNT_EXPIRE","MNT_FORCE","MODULE_INIT_IGNORE_MODVERSIONS","MODULE_INIT_IGNORE_VERMAGIC","MOD_CLKA","MOD_CLKB","MOD_ESTERROR","MOD_FREQUENCY","MOD_MAXERROR","MOD_MICRO","MOD_NANO","MOD_OFFSET","MOD_STATUS","MOD_TAI","MOD_TIMECONST","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MPOL_BIND","MPOL_DEFAULT","MPOL_F_NUMA_BALANCING","MPOL_F_RELATIVE_NODES","MPOL_F_STATIC_NODES","MPOL_INTERLEAVE","MPOL_LOCAL","MPOL_PREFERRED","MREMAP_DONTUNMAP","MREMAP_FIXED","MREMAP_MAYMOVE","MSC_CNT","MSC_MAX","MSDOS_SUPER_MAGIC","MSG_CMSG_CLOEXEC","MSG_CONFIRM","MSG_COPY","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOR","MSG_ERRQUEUE","MSG_EXCEPT","MSG_FASTOPEN","MSG_FIN","MSG_INFO","MSG_MORE","MSG_NOERROR","MSG_NOSIGNAL","MSG_OOB","MSG_PEEK","MSG_RST","MSG_STAT","MSG_SYN","MSG_TRUNC","MSG_TRYHARD","MSG_WAITALL","MSG_WAITFORONE","MSG_ZEROCOPY","MS_ACTIVE","MS_ASYNC","MS_BIND","MS_DIRSYNC","MS_INVALIDATE","MS_I_VERSION","MS_KERNMOUNT","MS_LAZYTIME","MS_MANDLOCK","MS_MGC_MSK","MS_MGC_VAL","MS_MOVE","MS_NOATIME","MS_NODEV","MS_NODIRATIME","MS_NOEXEC","MS_NOSUID","MS_NOUSER","MS_POSIXACL","MS_PRIVATE","MS_RDONLY","MS_REC","MS_RELATIME","MS_REMOUNT","MS_RMT_MASK","MS_SHARED","MS_SILENT","MS_SLAVE","MS_STRICTATIME","MS_SYNC","MS_SYNCHRONOUS","MS_UNBINDABLE","M_ARENA_MAX","M_ARENA_TEST","M_CHECK_ACTION","M_GRAIN","M_KEEP","M_MMAP_MAX","M_MMAP_THRESHOLD","M_MXFAST","M_NLBLKS","M_PERTURB","M_TOP_PAD","M_TRIM_THRESHOLD","NCCS","NCP_SUPER_MAGIC","NDA_CACHEINFO","NDA_DST","NDA_IFINDEX","NDA_LINK_NETNSID","NDA_LLADDR","NDA_MASTER","NDA_PORT","NDA_PROBES","NDA_SRC_VNI","NDA_UNSPEC","NDA_VLAN","NDA_VNI","NETLINK_ADD_MEMBERSHIP","NETLINK_AUDIT","NETLINK_BROADCAST_ERROR","NETLINK_CAP_ACK","NETLINK_CONNECTOR","NETLINK_CRYPTO","NETLINK_DNRTMSG","NETLINK_DROP_MEMBERSHIP","NETLINK_ECRYPTFS","NETLINK_EXT_ACK","NETLINK_FIB_LOOKUP","NETLINK_FIREWALL","NETLINK_GENERIC","NETLINK_GET_STRICT_CHK","NETLINK_INET_DIAG","NETLINK_IP6_FW","NETLINK_ISCSI","NETLINK_KOBJECT_UEVENT","NETLINK_LISTEN_ALL_NSID","NETLINK_LIST_MEMBERSHIPS","NETLINK_NETFILTER","NETLINK_NFLOG","NETLINK_NO_ENOBUFS","NETLINK_PKTINFO","NETLINK_RDMA","NETLINK_ROUTE","NETLINK_RX_RING","NETLINK_SCSITRANSPORT","NETLINK_SELINUX","NETLINK_SOCK_DIAG","NETLINK_TX_RING","NETLINK_UNUSED","NETLINK_USERSOCK","NETLINK_XFRM","NEW_TIME","NFNETLINK_V0","NFNLGRP_ACCT_QUOTA","NFNLGRP_CONNTRACK_DESTROY","NFNLGRP_CONNTRACK_EXP_DESTROY","NFNLGRP_CONNTRACK_EXP_NEW","NFNLGRP_CONNTRACK_EXP_UPDATE","NFNLGRP_CONNTRACK_NEW","NFNLGRP_CONNTRACK_UPDATE","NFNLGRP_NFTABLES","NFNLGRP_NFTRACE","NFNLGRP_NONE","NFNL_BATCH_GENID","NFNL_BATCH_UNSPEC","NFNL_MSG_BATCH_BEGIN","NFNL_MSG_BATCH_END","NFNL_SUBSYS_ACCT","NFNL_SUBSYS_COUNT","NFNL_SUBSYS_CTHELPER","NFNL_SUBSYS_CTNETLINK","NFNL_SUBSYS_CTNETLINK_EXP","NFNL_SUBSYS_CTNETLINK_TIMEOUT","NFNL_SUBSYS_HOOK","NFNL_SUBSYS_IPSET","NFNL_SUBSYS_NFTABLES","NFNL_SUBSYS_NFT_COMPAT","NFNL_SUBSYS_NONE","NFNL_SUBSYS_OSF","NFNL_SUBSYS_QUEUE","NFNL_SUBSYS_ULOG","NFPROTO_ARP","NFPROTO_BRIDGE","NFPROTO_DECNET","NFPROTO_INET","NFPROTO_IPV4","NFPROTO_IPV6","NFPROTO_NETDEV","NFPROTO_NUMPROTO","NFPROTO_UNSPEC","NFQA_CAP_LEN","NFQA_CFG_CMD","NFQA_CFG_FLAGS","NFQA_CFG_F_CONNTRACK","NFQA_CFG_F_FAIL_OPEN","NFQA_CFG_F_GSO","NFQA_CFG_F_MAX","NFQA_CFG_F_SECCTX","NFQA_CFG_F_UID_GID","NFQA_CFG_MASK","NFQA_CFG_PARAMS","NFQA_CFG_QUEUE_MAXLEN","NFQA_CFG_UNSPEC","NFQA_CT","NFQA_CT_INFO","NFQA_EXP","NFQA_GID","NFQA_HWADDR","NFQA_IFINDEX_INDEV","NFQA_IFINDEX_OUTDEV","NFQA_IFINDEX_PHYSINDEV","NFQA_IFINDEX_PHYSOUTDEV","NFQA_L2HDR","NFQA_MARK","NFQA_PACKET_HDR","NFQA_PAYLOAD","NFQA_PRIORITY","NFQA_SECCTX","NFQA_SKB_CSUMNOTREADY","NFQA_SKB_CSUM_NOTVERIFIED","NFQA_SKB_GSO","NFQA_SKB_INFO","NFQA_TIMESTAMP","NFQA_UID","NFQA_UNSPEC","NFQA_VERDICT_HDR","NFQA_VLAN","NFQA_VLAN_PROTO","NFQA_VLAN_TCI","NFQA_VLAN_UNSPEC","NFQNL_CFG_CMD_BIND","NFQNL_CFG_CMD_NONE","NFQNL_CFG_CMD_PF_BIND","NFQNL_CFG_CMD_PF_UNBIND","NFQNL_CFG_CMD_UNBIND","NFQNL_COPY_META","NFQNL_COPY_NONE","NFQNL_COPY_PACKET","NFQNL_MSG_CONFIG","NFQNL_MSG_PACKET","NFQNL_MSG_VERDICT","NFQNL_MSG_VERDICT_BATCH","NFS_SUPER_MAGIC","NFT_BREAK","NFT_BYTEORDER_HTON","NFT_BYTEORDER_NTOH","NFT_CHAIN_MAXNAMELEN","NFT_CMP_EQ","NFT_CMP_GT","NFT_CMP_GTE","NFT_CMP_LT","NFT_CMP_LTE","NFT_CMP_NEQ","NFT_CONTINUE","NFT_CT_BYTES","NFT_CT_DIRECTION","NFT_CT_DST","NFT_CT_EXPIRATION","NFT_CT_HELPER","NFT_CT_L3PROTOCOL","NFT_CT_LABELS","NFT_CT_MARK","NFT_CT_PKTS","NFT_CT_PROTOCOL","NFT_CT_PROTO_DST","NFT_CT_PROTO_SRC","NFT_CT_SECMARK","NFT_CT_SRC","NFT_CT_STATE","NFT_CT_STATUS","NFT_DATA_RESERVED_MASK","NFT_DATA_VALUE","NFT_DATA_VALUE_MAXLEN","NFT_DATA_VERDICT","NFT_DYNSET_F_INV","NFT_DYNSET_OP_ADD","NFT_DYNSET_OP_UPDATE","NFT_GOTO","NFT_JUMP","NFT_LIMIT_F_INV","NFT_LIMIT_PKTS","NFT_LIMIT_PKT_BYTES","NFT_LOOKUP_F_INV","NFT_META_BRI_IIFNAME","NFT_META_BRI_OIFNAME","NFT_META_CGROUP","NFT_META_CPU","NFT_META_IIF","NFT_META_IIFGROUP","NFT_META_IIFNAME","NFT_META_IIFTYPE","NFT_META_L4PROTO","NFT_META_LEN","NFT_META_MARK","NFT_META_NFPROTO","NFT_META_NFTRACE","NFT_META_OIF","NFT_META_OIFGROUP","NFT_META_OIFNAME","NFT_META_OIFTYPE","NFT_META_PKTTYPE","NFT_META_PRANDOM","NFT_META_PRIORITY","NFT_META_PROTOCOL","NFT_META_RTCLASSID","NFT_META_SECMARK","NFT_META_SKGID","NFT_META_SKUID","NFT_MSG_DELCHAIN","NFT_MSG_DELOBJ","NFT_MSG_DELRULE","NFT_MSG_DELSET","NFT_MSG_DELSETELEM","NFT_MSG_DELTABLE","NFT_MSG_GETCHAIN","NFT_MSG_GETGEN","NFT_MSG_GETOBJ","NFT_MSG_GETOBJ_RESET","NFT_MSG_GETRULE","NFT_MSG_GETSET","NFT_MSG_GETSETELEM","NFT_MSG_GETTABLE","NFT_MSG_MAX","NFT_MSG_NEWCHAIN","NFT_MSG_NEWGEN","NFT_MSG_NEWOBJ","NFT_MSG_NEWRULE","NFT_MSG_NEWSET","NFT_MSG_NEWSETELEM","NFT_MSG_NEWTABLE","NFT_MSG_TRACE","NFT_NAT_DNAT","NFT_NAT_SNAT","NFT_NG_INCREMENTAL","NFT_NG_RANDOM","NFT_OBJ_MAXNAMELEN","NFT_PAYLOAD_CSUM_INET","NFT_PAYLOAD_CSUM_NONE","NFT_PAYLOAD_LL_HEADER","NFT_PAYLOAD_NETWORK_HEADER","NFT_PAYLOAD_TRANSPORT_HEADER","NFT_QUEUE_FLAG_BYPASS","NFT_QUEUE_FLAG_CPU_FANOUT","NFT_QUEUE_FLAG_MASK","NFT_QUOTA_F_INV","NFT_RANGE_EQ","NFT_RANGE_NEQ","NFT_REG32_00","NFT_REG32_01","NFT_REG32_02","NFT_REG32_03","NFT_REG32_04","NFT_REG32_05","NFT_REG32_06","NFT_REG32_07","NFT_REG32_08","NFT_REG32_09","NFT_REG32_10","NFT_REG32_11","NFT_REG32_12","NFT_REG32_13","NFT_REG32_14","NFT_REG32_15","NFT_REG32_SIZE","NFT_REG_1","NFT_REG_2","NFT_REG_3","NFT_REG_4","NFT_REG_SIZE","NFT_REG_VERDICT","NFT_REJECT_ICMPX_ADMIN_PROHIBITED","NFT_REJECT_ICMPX_HOST_UNREACH","NFT_REJECT_ICMPX_NO_ROUTE","NFT_REJECT_ICMPX_PORT_UNREACH","NFT_REJECT_ICMPX_UNREACH","NFT_REJECT_ICMP_UNREACH","NFT_REJECT_TCP_RST","NFT_RETURN","NFT_SET_ANONYMOUS","NFT_SET_CONSTANT","NFT_SET_ELEM_INTERVAL_END","NFT_SET_EVAL","NFT_SET_INTERVAL","NFT_SET_MAP","NFT_SET_MAXNAMELEN","NFT_SET_POL_MEMORY","NFT_SET_POL_PERFORMANCE","NFT_SET_TIMEOUT","NFT_TABLE_MAXNAMELEN","NFT_TRACETYPE_POLICY","NFT_TRACETYPE_RETURN","NFT_TRACETYPE_RULE","NFT_TRACETYPE_UNSPEC","NFT_USERDATA_MAXLEN","NFULA_CFG_CMD","NFULA_CFG_FLAGS","NFULA_CFG_MODE","NFULA_CFG_NLBUFSIZ","NFULA_CFG_QTHRESH","NFULA_CFG_TIMEOUT","NFULA_CFG_UNSPEC","NFULA_CT","NFULA_CT_INFO","NFULA_GID","NFULA_HWADDR","NFULA_HWHEADER","NFULA_HWLEN","NFULA_HWTYPE","NFULA_IFINDEX_INDEV","NFULA_IFINDEX_OUTDEV","NFULA_IFINDEX_PHYSINDEV","NFULA_IFINDEX_PHYSOUTDEV","NFULA_L2HDR","NFULA_MARK","NFULA_PACKET_HDR","NFULA_PAYLOAD","NFULA_PREFIX","NFULA_SEQ","NFULA_SEQ_GLOBAL","NFULA_TIMESTAMP","NFULA_UID","NFULA_UNSPEC","NFULA_VLAN","NFULA_VLAN_PROTO","NFULA_VLAN_TCI","NFULA_VLAN_UNSPEC","NFULNL_CFG_CMD_BIND","NFULNL_CFG_CMD_NONE","NFULNL_CFG_CMD_PF_BIND","NFULNL_CFG_CMD_PF_UNBIND","NFULNL_CFG_CMD_UNBIND","NFULNL_CFG_F_CONNTRACK","NFULNL_CFG_F_SEQ","NFULNL_CFG_F_SEQ_GLOBAL","NFULNL_COPY_META","NFULNL_COPY_NONE","NFULNL_COPY_PACKET","NFULNL_MSG_CONFIG","NFULNL_MSG_PACKET","NF_ACCEPT","NF_DROP","NF_INET_FORWARD","NF_INET_LOCAL_IN","NF_INET_LOCAL_OUT","NF_INET_NUMHOOKS","NF_INET_POST_ROUTING","NF_INET_PRE_ROUTING","NF_IP6_FORWARD","NF_IP6_LOCAL_IN","NF_IP6_LOCAL_OUT","NF_IP6_NUMHOOKS","NF_IP6_POST_ROUTING","NF_IP6_PRE_ROUTING","NF_IP6_PRI_CONNTRACK","NF_IP6_PRI_CONNTRACK_DEFRAG","NF_IP6_PRI_CONNTRACK_HELPER","NF_IP6_PRI_FILTER","NF_IP6_PRI_FIRST","NF_IP6_PRI_LAST","NF_IP6_PRI_MANGLE","NF_IP6_PRI_NAT_DST","NF_IP6_PRI_NAT_SRC","NF_IP6_PRI_RAW","NF_IP6_PRI_SECURITY","NF_IP6_PRI_SELINUX_FIRST","NF_IP6_PRI_SELINUX_LAST","NF_IP_FORWARD","NF_IP_LOCAL_IN","NF_IP_LOCAL_OUT","NF_IP_NUMHOOKS","NF_IP_POST_ROUTING","NF_IP_PRE_ROUTING","NF_IP_PRI_CONNTRACK","NF_IP_PRI_CONNTRACK_CONFIRM","NF_IP_PRI_CONNTRACK_DEFRAG","NF_IP_PRI_CONNTRACK_HELPER","NF_IP_PRI_FILTER","NF_IP_PRI_FIRST","NF_IP_PRI_LAST","NF_IP_PRI_MANGLE","NF_IP_PRI_NAT_DST","NF_IP_PRI_NAT_SRC","NF_IP_PRI_RAW","NF_IP_PRI_SECURITY","NF_IP_PRI_SELINUX_FIRST","NF_IP_PRI_SELINUX_LAST","NF_MAX_VERDICT","NF_NETDEV_INGRESS","NF_NETDEV_NUMHOOKS","NF_QUEUE","NF_REPEAT","NF_STOLEN","NF_STOP","NF_VERDICT_BITS","NF_VERDICT_FLAG_QUEUE_BYPASS","NF_VERDICT_MASK","NF_VERDICT_QBITS","NF_VERDICT_QMASK","NILFS_SUPER_MAGIC","NI_DGRAM","NI_MAXHOST","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSERV","NL0","NL1","NLA_ALIGN","NLA_ALIGNTO","NLA_F_NESTED","NLA_F_NET_BYTEORDER","NLA_TYPE_MASK","NLDLY","NLMSG_DONE","NLMSG_ERROR","NLMSG_MIN_TYPE","NLMSG_NOOP","NLMSG_OVERRUN","NLM_F_ACK","NLM_F_APPEND","NLM_F_ATOMIC","NLM_F_CREATE","NLM_F_DUMP","NLM_F_DUMP_FILTERED","NLM_F_DUMP_INTR","NLM_F_ECHO","NLM_F_EXCL","NLM_F_MATCH","NLM_F_MULTI","NLM_F_REPLACE","NLM_F_REQUEST","NLM_F_ROOT","NOEXPR","NOFLSH","NOSTR","NSFS_MAGIC","NTF_EXT_LEARNED","NTF_MASTER","NTF_OFFLOADED","NTF_PROXY","NTF_ROUTER","NTF_SELF","NTF_USE","NTP_API","NT_ASRS","NT_AUXV","NT_FPREGSET","NT_GWINDOWS","NT_LWPSINFO","NT_LWPSTATUS","NT_PLATFORM","NT_PRCRED","NT_PRFPREG","NT_PRFPXREG","NT_PRPSINFO","NT_PRSTATUS","NT_PRXREG","NT_PSINFO","NT_PSTATUS","NT_TASKSTRUCT","NT_UTSNAME","NUD_DELAY","NUD_FAILED","NUD_INCOMPLETE","NUD_NOARP","NUD_NONE","NUD_PERMANENT","NUD_PROBE","NUD_REACHABLE","NUD_STALE","OCFS2_SUPER_MAGIC","OCRNL","OFDEL","OFILL","OLCUC","OLD_TIME","ONLCR","ONLRET","ONOCR","OPENPROM_SUPER_MAGIC","OPOST","ORIG_RAX","OVERLAYFS_SUPER_MAGIC","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECT","O_DIRECTORY","O_DSYNC","O_EXCL","O_FSYNC","O_LARGEFILE","O_NDELAY","O_NOATIME","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_PATH","O_RDONLY","O_RDWR","O_RSYNC","O_SYNC","O_TMPFILE","O_TRUNC","O_WRONLY","PACKET_ADD_MEMBERSHIP","PACKET_DROP_MEMBERSHIP","PACKET_MR_ALLMULTI","PACKET_MR_MULTICAST","PACKET_MR_PROMISC","PACKET_MR_UNICAST","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_ALG","PF_APPLETALK","PF_ASH","PF_ATMPVC","PF_ATMSVC","PF_AX25","PF_BLUETOOTH","PF_BRIDGE","PF_CAIF","PF_CAN","PF_DECnet","PF_ECONET","PF_IB","PF_IEEE802154","PF_INET","PF_INET6","PF_IPX","PF_IRDA","PF_ISDN","PF_IUCV","PF_KEY","PF_LLC","PF_LOCAL","PF_MASKOS","PF_MASKPROC","PF_MPLS","PF_NETBEUI","PF_NETLINK","PF_NETROM","PF_NFC","PF_PACKET","PF_PHONET","PF_PPPOX","PF_R","PF_RDS","PF_ROSE","PF_ROUTE","PF_RXRPC","PF_SECURITY","PF_SNA","PF_TIPC","PF_UNIX","PF_UNSPEC","PF_VSOCK","PF_W","PF_WANPIPE","PF_X","PF_X25","PF_XDP","PIDFD_NONBLOCK","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDHUP","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_FADV_DONTNEED","POSIX_FADV_NOREUSE","POSIX_FADV_NORMAL","POSIX_FADV_RANDOM","POSIX_FADV_SEQUENTIAL","POSIX_FADV_WILLNEED","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSCHEDPARAM","POSIX_SPAWN_SETSCHEDULER","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_USEVFORK","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROC_SUPER_MAGIC","PROT_EXEC","PROT_GROWSDOWN","PROT_GROWSUP","PROT_NONE","PROT_READ","PROT_WRITE","PR_CAPBSET_DROP","PR_CAPBSET_READ","PR_CAP_AMBIENT","PR_CAP_AMBIENT_CLEAR_ALL","PR_CAP_AMBIENT_IS_SET","PR_CAP_AMBIENT_LOWER","PR_CAP_AMBIENT_RAISE","PR_ENDIAN_BIG","PR_ENDIAN_LITTLE","PR_ENDIAN_PPC_LITTLE","PR_FPEMU_NOPRINT","PR_FPEMU_SIGFPE","PR_FP_EXC_ASYNC","PR_FP_EXC_DISABLED","PR_FP_EXC_DIV","PR_FP_EXC_INV","PR_FP_EXC_NONRECOV","PR_FP_EXC_OVF","PR_FP_EXC_PRECISE","PR_FP_EXC_RES","PR_FP_EXC_SW_ENABLE","PR_FP_EXC_UND","PR_FP_MODE_FR","PR_FP_MODE_FRE","PR_GET_CHILD_SUBREAPER","PR_GET_DUMPABLE","PR_GET_ENDIAN","PR_GET_FPEMU","PR_GET_FPEXC","PR_GET_FP_MODE","PR_GET_KEEPCAPS","PR_GET_NAME","PR_GET_NO_NEW_PRIVS","PR_GET_PDEATHSIG","PR_GET_SECCOMP","PR_GET_SECUREBITS","PR_GET_SPECULATION_CTRL","PR_GET_THP_DISABLE","PR_GET_TID_ADDRESS","PR_GET_TIMERSLACK","PR_GET_TIMING","PR_GET_TSC","PR_GET_UNALIGN","PR_MCE_KILL","PR_MCE_KILL_CLEAR","PR_MCE_KILL_DEFAULT","PR_MCE_KILL_EARLY","PR_MCE_KILL_GET","PR_MCE_KILL_LATE","PR_MCE_KILL_SET","PR_MPX_DISABLE_MANAGEMENT","PR_MPX_ENABLE_MANAGEMENT","PR_SET_CHILD_SUBREAPER","PR_SET_DUMPABLE","PR_SET_ENDIAN","PR_SET_FPEMU","PR_SET_FPEXC","PR_SET_FP_MODE","PR_SET_KEEPCAPS","PR_SET_MM","PR_SET_MM_ARG_END","PR_SET_MM_ARG_START","PR_SET_MM_AUXV","PR_SET_MM_BRK","PR_SET_MM_END_CODE","PR_SET_MM_END_DATA","PR_SET_MM_ENV_END","PR_SET_MM_ENV_START","PR_SET_MM_EXE_FILE","PR_SET_MM_MAP","PR_SET_MM_MAP_SIZE","PR_SET_MM_START_BRK","PR_SET_MM_START_CODE","PR_SET_MM_START_DATA","PR_SET_MM_START_STACK","PR_SET_NAME","PR_SET_NO_NEW_PRIVS","PR_SET_PDEATHSIG","PR_SET_PTRACER","PR_SET_SECCOMP","PR_SET_SECUREBITS","PR_SET_SPECULATION_CTRL","PR_SET_THP_DISABLE","PR_SET_TIMERSLACK","PR_SET_TIMING","PR_SET_TSC","PR_SET_UNALIGN","PR_SET_VMA","PR_SET_VMA_ANON_NAME","PR_SPEC_DISABLE","PR_SPEC_DISABLE_NOEXEC","PR_SPEC_ENABLE","PR_SPEC_FORCE_DISABLE","PR_SPEC_INDIRECT_BRANCH","PR_SPEC_NOT_AFFECTED","PR_SPEC_PRCTL","PR_SPEC_STORE_BYPASS","PR_TASK_PERF_EVENTS_DISABLE","PR_TASK_PERF_EVENTS_ENABLE","PR_TIMING_STATISTICAL","PR_TIMING_TIMESTAMP","PR_TSC_ENABLE","PR_TSC_SIGSEGV","PR_UNALIGN_NOPRINT","PR_UNALIGN_SIGBUS","PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP","PTHREAD_MUTEX_ADAPTIVE_NP","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_MUTEX_ROBUST","PTHREAD_MUTEX_STALLED","PTHREAD_PRIO_INHERIT","PTHREAD_PRIO_NONE","PTHREAD_PRIO_PROTECT","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PTRACE_ATTACH","PTRACE_CONT","PTRACE_DETACH","PTRACE_EVENT_CLONE","PTRACE_EVENT_EXEC","PTRACE_EVENT_EXIT","PTRACE_EVENT_FORK","PTRACE_EVENT_SECCOMP","PTRACE_EVENT_STOP","PTRACE_EVENT_VFORK","PTRACE_EVENT_VFORK_DONE","PTRACE_GETEVENTMSG","PTRACE_GETFPREGS","PTRACE_GETFPXREGS","PTRACE_GETREGS","PTRACE_GETREGSET","PTRACE_GETSIGINFO","PTRACE_GET_SYSCALL_INFO","PTRACE_INTERRUPT","PTRACE_KILL","PTRACE_LISTEN","PTRACE_O_EXITKILL","PTRACE_O_MASK","PTRACE_O_SUSPEND_SECCOMP","PTRACE_O_TRACECLONE","PTRACE_O_TRACEEXEC","PTRACE_O_TRACEEXIT","PTRACE_O_TRACEFORK","PTRACE_O_TRACESECCOMP","PTRACE_O_TRACESYSGOOD","PTRACE_O_TRACEVFORK","PTRACE_O_TRACEVFORKDONE","PTRACE_PEEKDATA","PTRACE_PEEKSIGINFO","PTRACE_PEEKSIGINFO_SHARED","PTRACE_PEEKTEXT","PTRACE_PEEKUSER","PTRACE_POKEDATA","PTRACE_POKETEXT","PTRACE_POKEUSER","PTRACE_SEIZE","PTRACE_SETFPREGS","PTRACE_SETFPXREGS","PTRACE_SETOPTIONS","PTRACE_SETREGS","PTRACE_SETREGSET","PTRACE_SETSIGINFO","PTRACE_SINGLESTEP","PTRACE_SYSCALL","PTRACE_SYSEMU","PTRACE_SYSEMU_SINGLESTEP","PTRACE_TRACEME","PT_DYNAMIC","PT_GNU_EH_FRAME","PT_GNU_RELRO","PT_GNU_STACK","PT_HIOS","PT_HIPROC","PT_HISUNW","PT_INTERP","PT_LOAD","PT_LOOS","PT_LOPROC","PT_LOSUNW","PT_NOTE","PT_NULL","PT_NUM","PT_PHDR","PT_SHLIB","PT_SUNWBSS","PT_SUNWSTACK","PT_TLS","P_ALL","P_PGID","P_PID","P_PIDFD","QCMD","QFMT_VFS_OLD","QFMT_VFS_V0","QFMT_VFS_V1","QIF_ALL","QIF_BLIMITS","QIF_BTIME","QIF_ILIMITS","QIF_INODES","QIF_ITIME","QIF_LIMITS","QIF_SPACE","QIF_TIMES","QIF_USAGE","QNX4_SUPER_MAGIC","QNX6_SUPER_MAGIC","Q_GETFMT","Q_GETINFO","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETINFO","Q_SETQUOTA","Q_SYNC","R10","R11","R12","R13","R14","R15","R8","R9","RADIXCHAR","RAND_MAX","RAX","RBP","RBX","RB_AUTOBOOT","RB_DISABLE_CAD","RB_ENABLE_CAD","RB_HALT_SYSTEM","RB_KEXEC","RB_POWER_OFF","RB_SW_SUSPEND","RCX","RDI","RDTGROUP_SUPER_MAGIC","RDX","READ_IMPLIES_EXEC","REG_BADBR","REG_BADPAT","REG_BADRPT","REG_CR2","REG_CSGSFS","REG_EBRACE","REG_EBRACK","REG_ECOLLATE","REG_ECTYPE","REG_EEND","REG_EESCAPE","REG_EFL","REG_ENOSYS","REG_EPAREN","REG_ERANGE","REG_ERPAREN","REG_ERR","REG_ESIZE","REG_ESPACE","REG_ESUBREG","REG_EXTENDED","REG_ICASE","REG_NEWLINE","REG_NOMATCH","REG_NOSUB","REG_NOTBOL","REG_NOTEOL","REG_OLDMASK","REG_R10","REG_R11","REG_R12","REG_R13","REG_R14","REG_R15","REG_R8","REG_R9","REG_RAX","REG_RBP","REG_RBX","REG_RCX","REG_RDI","REG_RDX","REG_RIP","REG_RSI","REG_RSP","REG_STARTEND","REG_TRAPNO","REISERFS_SUPER_MAGIC","REL_CNT","REL_MAX","RENAME_EXCHANGE","RENAME_NOREPLACE","RENAME_WHITEOUT","REP_CNT","REP_MAX","RESOLVE_BENEATH","RESOLVE_CACHED","RESOLVE_IN_ROOT","RESOLVE_NO_MAGICLINKS","RESOLVE_NO_SYMLINKS","RESOLVE_NO_XDEV","RIP","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_LOCKS","RLIMIT_MEMLOCK","RLIMIT_MSGQUEUE","RLIMIT_NICE","RLIMIT_NLIMITS","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_RTPRIO","RLIMIT_RTTIME","RLIMIT_SIGPENDING","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RLIM_SAVED_CUR","RLIM_SAVED_MAX","RSI","RSP","RTA_CACHEINFO","RTA_DST","RTA_ENCAP","RTA_ENCAP_TYPE","RTA_EXPIRES","RTA_FLOW","RTA_GATEWAY","RTA_IIF","RTA_MARK","RTA_METRICS","RTA_MFC_STATS","RTA_MP_ALGO","RTA_MULTIPATH","RTA_NEWDST","RTA_OIF","RTA_PAD","RTA_PREF","RTA_PREFSRC","RTA_PRIORITY","RTA_PROTOINFO","RTA_SESSION","RTA_SRC","RTA_TABLE","RTA_TTL_PROPAGATE","RTA_UID","RTA_UNSPEC","RTA_VIA","RTCF_DIRECTSRC","RTCF_DOREDIRECT","RTCF_LOG","RTCF_MASQ","RTCF_NAT","RTCF_VALVE","RTF_ADDRCLASSMASK","RTF_ADDRCONF","RTF_ALLONLINK","RTF_BROADCAST","RTF_CACHE","RTF_DEFAULT","RTF_DYNAMIC","RTF_FLOW","RTF_GATEWAY","RTF_HOST","RTF_INTERFACE","RTF_IRTT","RTF_LINKRT","RTF_LOCAL","RTF_MODIFIED","RTF_MSS","RTF_MTU","RTF_MULTICAST","RTF_NAT","RTF_NOFORWARD","RTF_NONEXTHOP","RTF_NOPMTUDISC","RTF_POLICY","RTF_REINSTATE","RTF_REJECT","RTF_STATIC","RTF_THROW","RTF_UP","RTF_WINDOW","RTF_XRESOLVE","RTLD_DEEPBIND","RTLD_DEFAULT","RTLD_DI_CONFIGADDR","RTLD_DI_LINKMAP","RTLD_DI_LMID","RTLD_DI_ORIGIN","RTLD_DI_PROFILENAME","RTLD_DI_PROFILEOUT","RTLD_DI_SERINFO","RTLD_DI_SERINFOSIZE","RTLD_DI_TLS_DATA","RTLD_DI_TLS_MODID","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTMGRP_DECnet_IFADDR","RTMGRP_DECnet_ROUTE","RTMGRP_IPV4_IFADDR","RTMGRP_IPV4_MROUTE","RTMGRP_IPV4_ROUTE","RTMGRP_IPV4_RULE","RTMGRP_IPV6_IFADDR","RTMGRP_IPV6_IFINFO","RTMGRP_IPV6_MROUTE","RTMGRP_IPV6_PREFIX","RTMGRP_IPV6_ROUTE","RTMGRP_LINK","RTMGRP_NEIGH","RTMGRP_NOTIFY","RTMGRP_TC","RTMSG_AR_FAILED","RTMSG_CONTROL","RTMSG_DELDEVICE","RTMSG_DELROUTE","RTMSG_DELRULE","RTMSG_NEWDEVICE","RTMSG_NEWROUTE","RTMSG_NEWRULE","RTMSG_OVERRUN","RTM_DELACTION","RTM_DELADDR","RTM_DELADDRLABEL","RTM_DELLINK","RTM_DELMDB","RTM_DELNEIGH","RTM_DELNETCONF","RTM_DELNSID","RTM_DELQDISC","RTM_DELROUTE","RTM_DELRULE","RTM_DELTCLASS","RTM_DELTFILTER","RTM_F_CLONED","RTM_F_EQUALIZE","RTM_F_FIB_MATCH","RTM_F_LOOKUP_TABLE","RTM_F_NOTIFY","RTM_F_PREFIX","RTM_GETACTION","RTM_GETADDR","RTM_GETADDRLABEL","RTM_GETANYCAST","RTM_GETDCB","RTM_GETLINK","RTM_GETMDB","RTM_GETMULTICAST","RTM_GETNEIGH","RTM_GETNEIGHTBL","RTM_GETNETCONF","RTM_GETNSID","RTM_GETQDISC","RTM_GETROUTE","RTM_GETRULE","RTM_GETSTATS","RTM_GETTCLASS","RTM_GETTFILTER","RTM_NEWACTION","RTM_NEWADDR","RTM_NEWADDRLABEL","RTM_NEWCACHEREPORT","RTM_NEWLINK","RTM_NEWMDB","RTM_NEWNDUSEROPT","RTM_NEWNEIGH","RTM_NEWNEIGHTBL","RTM_NEWNETCONF","RTM_NEWNSID","RTM_NEWPREFIX","RTM_NEWQDISC","RTM_NEWROUTE","RTM_NEWRULE","RTM_NEWSTATS","RTM_NEWTCLASS","RTM_NEWTFILTER","RTM_SETDCB","RTM_SETLINK","RTM_SETNEIGHTBL","RTNLGRP_BRVLAN","RTNLGRP_DCB","RTNLGRP_DECnet_IFADDR","RTNLGRP_DECnet_ROUTE","RTNLGRP_DECnet_RULE","RTNLGRP_IPV4_IFADDR","RTNLGRP_IPV4_MROUTE","RTNLGRP_IPV4_MROUTE_R","RTNLGRP_IPV4_NETCONF","RTNLGRP_IPV4_ROUTE","RTNLGRP_IPV4_RULE","RTNLGRP_IPV6_IFADDR","RTNLGRP_IPV6_IFINFO","RTNLGRP_IPV6_MROUTE","RTNLGRP_IPV6_MROUTE_R","RTNLGRP_IPV6_NETCONF","RTNLGRP_IPV6_PREFIX","RTNLGRP_IPV6_ROUTE","RTNLGRP_IPV6_RULE","RTNLGRP_LINK","RTNLGRP_MCTP_IFADDR","RTNLGRP_MDB","RTNLGRP_MPLS_NETCONF","RTNLGRP_MPLS_ROUTE","RTNLGRP_ND_USEROPT","RTNLGRP_NEIGH","RTNLGRP_NEXTHOP","RTNLGRP_NONE","RTNLGRP_NOP2","RTNLGRP_NOP4","RTNLGRP_NOTIFY","RTNLGRP_NSID","RTNLGRP_PHONET_IFADDR","RTNLGRP_PHONET_ROUTE","RTNLGRP_STATS","RTNLGRP_TC","RTNLGRP_TUNNEL","RTN_ANYCAST","RTN_BLACKHOLE","RTN_BROADCAST","RTN_LOCAL","RTN_MULTICAST","RTN_NAT","RTN_PROHIBIT","RTN_THROW","RTN_UNICAST","RTN_UNREACHABLE","RTN_UNSPEC","RTN_XRESOLVE","RTPROT_BOOT","RTPROT_KERNEL","RTPROT_REDIRECT","RTPROT_STATIC","RTPROT_UNSPEC","RT_ADDRCLASS","RT_CLASS_DEFAULT","RT_CLASS_LOCAL","RT_CLASS_MAIN","RT_CLASS_MAX","RT_CLASS_UNSPEC","RT_LOCALADDR","RT_SCOPE_HOST","RT_SCOPE_LINK","RT_SCOPE_NOWHERE","RT_SCOPE_SITE","RT_SCOPE_UNIVERSE","RT_TABLE_COMPAT","RT_TABLE_DEFAULT","RT_TABLE_LOCAL","RT_TABLE_MAIN","RT_TABLE_UNSPEC","RT_TOS","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_SELF","RUSAGE_THREAD","RWF_APPEND","RWF_DSYNC","RWF_HIPRI","RWF_NOWAIT","RWF_SYNC","R_OK","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCHED_BATCH","SCHED_FIFO","SCHED_IDLE","SCHED_OTHER","SCHED_RESET_ON_FORK","SCHED_RR","SCM_CREDENTIALS","SCM_J1939_DEST_ADDR","SCM_J1939_DEST_NAME","SCM_J1939_ERRQUEUE","SCM_J1939_PRIO","SCM_RIGHTS","SCM_TIMESTAMP","SCM_TIMESTAMPING","SCM_TIMESTAMPING_OPT_STATS","SCM_TIMESTAMPING_PKTINFO","SCM_TIMESTAMPNS","SCM_TXTIME","SCM_WIFI_STATUS","SECCOMP_FILTER_FLAG_LOG","SECCOMP_FILTER_FLAG_SPEC_ALLOW","SECCOMP_FILTER_FLAG_TSYNC","SECCOMP_GET_ACTION_AVAIL","SECCOMP_GET_NOTIF_SIZES","SECCOMP_MODE_DISABLED","SECCOMP_MODE_FILTER","SECCOMP_MODE_STRICT","SECCOMP_RET_ACTION","SECCOMP_RET_ACTION_FULL","SECCOMP_RET_ALLOW","SECCOMP_RET_DATA","SECCOMP_RET_ERRNO","SECCOMP_RET_KILL","SECCOMP_RET_KILL_PROCESS","SECCOMP_RET_KILL_THREAD","SECCOMP_RET_LOG","SECCOMP_RET_TRACE","SECCOMP_RET_TRAP","SECCOMP_SET_MODE_FILTER","SECCOMP_SET_MODE_STRICT","SECURITYFS_MAGIC","SEEK_CUR","SEEK_DATA","SEEK_END","SEEK_HOLE","SEEK_SET","SELFMAG","SELINUX_MAGIC","SEM_FAILED","SFD_CLOEXEC","SFD_NONBLOCK","SHM_EXEC","SHM_HUGETLB","SHM_LOCK","SHM_NORESERVE","SHM_R","SHM_RDONLY","SHM_REMAP","SHM_RND","SHM_UNLOCK","SHM_W","SHORT_INODE","SHUT_RD","SHUT_RDWR","SHUT_WR","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGEV_THREAD_ID","SIGFPE","SIGHUP","SIGILL","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGPIPE","SIGPOLL","SIGPROF","SIGPWR","SIGQUIT","SIGRTMAX","SIGRTMIN","SIGSEGV","SIGSTKFLT","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGUNUSED","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SIOCADDMULTI","SIOCADDRT","SIOCDARP","SIOCDELMULTI","SIOCDELRT","SIOCDRARP","SIOCGARP","SIOCGIFADDR","SIOCGIFBRDADDR","SIOCGIFCONF","SIOCGIFDSTADDR","SIOCGIFENCAP","SIOCGIFFLAGS","SIOCGIFHWADDR","SIOCGIFMAP","SIOCGIFMEM","SIOCGIFMETRIC","SIOCGIFMTU","SIOCGIFNAME","SIOCGIFNETMASK","SIOCGIFSLAVE","SIOCGRARP","SIOCSARP","SIOCSIFADDR","SIOCSIFBRDADDR","SIOCSIFDSTADDR","SIOCSIFENCAP","SIOCSIFFLAGS","SIOCSIFHWADDR","SIOCSIFLINK","SIOCSIFMAP","SIOCSIFMEM","SIOCSIFMETRIC","SIOCSIFMTU","SIOCSIFNETMASK","SIOCSIFSLAVE","SIOCSRARP","SI_LOAD_SHIFT","SKF_AD_ALU_XOR_X","SKF_AD_CPU","SKF_AD_HATYPE","SKF_AD_IFINDEX","SKF_AD_MARK","SKF_AD_MAX","SKF_AD_NLATTR","SKF_AD_NLATTR_NEST","SKF_AD_OFF","SKF_AD_PAY_OFFSET","SKF_AD_PKTTYPE","SKF_AD_PROTOCOL","SKF_AD_QUEUE","SKF_AD_RANDOM","SKF_AD_RXHASH","SKF_AD_VLAN_TAG","SKF_AD_VLAN_TAG_PRESENT","SKF_AD_VLAN_TPID","SKF_LL_OFF","SKF_NET_OFF","SK_MEMINFO_BACKLOG","SK_MEMINFO_DROPS","SK_MEMINFO_FWD_ALLOC","SK_MEMINFO_OPTMEM","SK_MEMINFO_RCVBUF","SK_MEMINFO_RMEM_ALLOC","SK_MEMINFO_SNDBUF","SK_MEMINFO_WMEM_ALLOC","SK_MEMINFO_WMEM_QUEUED","SMACK_MAGIC","SMB_SUPER_MAGIC","SND_CNT","SND_MAX","SOCK_CLOEXEC","SOCK_DCCP","SOCK_DGRAM","SOCK_NONBLOCK","SOCK_PACKET","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOF_TIMESTAMPING_OPT_CMSG","SOF_TIMESTAMPING_OPT_ID","SOF_TIMESTAMPING_OPT_PKTINFO","SOF_TIMESTAMPING_OPT_STATS","SOF_TIMESTAMPING_OPT_TSONLY","SOF_TIMESTAMPING_OPT_TX_SWHW","SOF_TIMESTAMPING_RAW_HARDWARE","SOF_TIMESTAMPING_RX_HARDWARE","SOF_TIMESTAMPING_RX_SOFTWARE","SOF_TIMESTAMPING_SOFTWARE","SOF_TIMESTAMPING_SYS_HARDWARE","SOF_TIMESTAMPING_TX_ACK","SOF_TIMESTAMPING_TX_HARDWARE","SOF_TIMESTAMPING_TX_SCHED","SOF_TIMESTAMPING_TX_SOFTWARE","SOF_TXTIME_DEADLINE_MODE","SOF_TXTIME_REPORT_ERRORS","SOL_AAL","SOL_ALG","SOL_ATM","SOL_BLUETOOTH","SOL_CAIF","SOL_CAN_BASE","SOL_CAN_J1939","SOL_CAN_RAW","SOL_DCCP","SOL_DECNET","SOL_ICMPV6","SOL_IP","SOL_IPV6","SOL_IRDA","SOL_IUCV","SOL_LLC","SOL_NETBEUI","SOL_NETLINK","SOL_NFC","SOL_PACKET","SOL_PNPIPE","SOL_PPPOL2TP","SOL_RAW","SOL_RDS","SOL_RXRPC","SOL_SOCKET","SOL_TCP","SOL_TIPC","SOL_UDP","SOL_X25","SOL_XDP","SOMAXCONN","SO_ACCEPTCONN","SO_ATTACH_BPF","SO_ATTACH_FILTER","SO_ATTACH_REUSEPORT_CBPF","SO_ATTACH_REUSEPORT_EBPF","SO_BINDTODEVICE","SO_BINDTOIFINDEX","SO_BPF_EXTENSIONS","SO_BROADCAST","SO_BSDCOMPAT","SO_BUSY_POLL","SO_CNX_ADVICE","SO_COOKIE","SO_DEBUG","SO_DETACH_BPF","SO_DETACH_FILTER","SO_DETACH_REUSEPORT_BPF","SO_DOMAIN","SO_DONTROUTE","SO_EE_OFFENDER","SO_EE_ORIGIN_ICMP","SO_EE_ORIGIN_ICMP6","SO_EE_ORIGIN_LOCAL","SO_EE_ORIGIN_NONE","SO_EE_ORIGIN_TIMESTAMPING","SO_EE_ORIGIN_TXSTATUS","SO_ERROR","SO_GET_FILTER","SO_INCOMING_CPU","SO_INCOMING_NAPI_ID","SO_J1939_ERRQUEUE","SO_J1939_FILTER","SO_J1939_PROMISC","SO_J1939_SEND_PRIO","SO_KEEPALIVE","SO_LINGER","SO_LOCK_FILTER","SO_MARK","SO_MAX_PACING_RATE","SO_MEMINFO","SO_NOFCS","SO_NO_CHECK","SO_OOBINLINE","SO_ORIGINAL_DST","SO_PASSCRED","SO_PASSSEC","SO_PEEK_OFF","SO_PEERCRED","SO_PEERGROUPS","SO_PEERNAME","SO_PEERSEC","SO_PRIORITY","SO_PROTOCOL","SO_RCVBUF","SO_RCVBUFFORCE","SO_RCVLOWAT","SO_RCVTIMEO","SO_RCVTIMEO_NEW","SO_REUSEADDR","SO_REUSEPORT","SO_RXQ_OVFL","SO_SECURITY_AUTHENTICATION","SO_SECURITY_ENCRYPTION_NETWORK","SO_SECURITY_ENCRYPTION_TRANSPORT","SO_SELECT_ERR_QUEUE","SO_SNDBUF","SO_SNDBUFFORCE","SO_SNDLOWAT","SO_SNDTIMEO","SO_SNDTIMEO_NEW","SO_TIMESTAMP","SO_TIMESTAMPING","SO_TIMESTAMPING_NEW","SO_TIMESTAMPNS","SO_TIMESTAMPNS_NEW","SO_TIMESTAMP_NEW","SO_TXTIME","SO_TYPE","SO_WIFI_STATUS","SO_ZEROCOPY","SPLICE_F_GIFT","SPLICE_F_MORE","SPLICE_F_MOVE","SPLICE_F_NONBLOCK","SS","SS_DISABLE","SS_ONSTACK","STATX_ALL","STATX_ATIME","STATX_ATTR_APPEND","STATX_ATTR_AUTOMOUNT","STATX_ATTR_COMPRESSED","STATX_ATTR_ENCRYPTED","STATX_ATTR_IMMUTABLE","STATX_ATTR_NODUMP","STATX_BASIC_STATS","STATX_BLOCKS","STATX_BTIME","STATX_CTIME","STATX_GID","STATX_INO","STATX_MNT_ID","STATX_MODE","STATX_MTIME","STATX_NLINK","STATX_SIZE","STATX_TYPE","STATX_UID","STATX__RESERVED","STA_CLK","STA_CLOCKERR","STA_DEL","STA_FLL","STA_FREQHOLD","STA_INS","STA_MODE","STA_NANO","STA_PLL","STA_PPSERROR","STA_PPSFREQ","STA_PPSJITTER","STA_PPSSIGNAL","STA_PPSTIME","STA_PPSWANDER","STA_RONLY","STA_UNSYNC","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","STICKY_TIMEOUTS","ST_APPEND","ST_IMMUTABLE","ST_MANDLOCK","ST_NOATIME","ST_NODEV","ST_NODIRATIME","ST_NOEXEC","ST_NOSUID","ST_RDONLY","ST_RELATIME","ST_SYNCHRONOUS","ST_WRITE","SW_CNT","SW_MAX","SYNC_FILE_RANGE_WAIT_AFTER","SYNC_FILE_RANGE_WAIT_BEFORE","SYNC_FILE_RANGE_WRITE","SYN_CNT","SYN_MAX","SYSFS_MAGIC","SYS__sysctl","SYS_accept","SYS_accept4","SYS_access","SYS_acct","SYS_add_key","SYS_adjtimex","SYS_afs_syscall","SYS_alarm","SYS_arch_prctl","SYS_bind","SYS_bpf","SYS_brk","SYS_capget","SYS_capset","SYS_chdir","SYS_chmod","SYS_chown","SYS_chroot","SYS_clock_adjtime","SYS_clock_getres","SYS_clock_gettime","SYS_clock_nanosleep","SYS_clock_settime","SYS_clone","SYS_clone3","SYS_close","SYS_close_range","SYS_connect","SYS_copy_file_range","SYS_creat","SYS_create_module","SYS_delete_module","SYS_dup","SYS_dup2","SYS_dup3","SYS_epoll_create","SYS_epoll_create1","SYS_epoll_ctl","SYS_epoll_ctl_old","SYS_epoll_pwait","SYS_epoll_pwait2","SYS_epoll_wait","SYS_epoll_wait_old","SYS_eventfd","SYS_eventfd2","SYS_execve","SYS_execveat","SYS_exit","SYS_exit_group","SYS_faccessat","SYS_faccessat2","SYS_fadvise64","SYS_fallocate","SYS_fanotify_init","SYS_fanotify_mark","SYS_fchdir","SYS_fchmod","SYS_fchmodat","SYS_fchown","SYS_fchownat","SYS_fcntl","SYS_fdatasync","SYS_fgetxattr","SYS_finit_module","SYS_flistxattr","SYS_flock","SYS_fork","SYS_fremovexattr","SYS_fsconfig","SYS_fsetxattr","SYS_fsmount","SYS_fsopen","SYS_fspick","SYS_fstat","SYS_fstatfs","SYS_fsync","SYS_ftruncate","SYS_futex","SYS_futex_waitv","SYS_futimesat","SYS_get_kernel_syms","SYS_get_mempolicy","SYS_get_robust_list","SYS_get_thread_area","SYS_getcpu","SYS_getcwd","SYS_getdents","SYS_getdents64","SYS_getegid","SYS_geteuid","SYS_getgid","SYS_getgroups","SYS_getitimer","SYS_getpeername","SYS_getpgid","SYS_getpgrp","SYS_getpid","SYS_getpmsg","SYS_getppid","SYS_getpriority","SYS_getrandom","SYS_getresgid","SYS_getresuid","SYS_getrlimit","SYS_getrusage","SYS_getsid","SYS_getsockname","SYS_getsockopt","SYS_gettid","SYS_gettimeofday","SYS_getuid","SYS_getxattr","SYS_init_module","SYS_inotify_add_watch","SYS_inotify_init","SYS_inotify_init1","SYS_inotify_rm_watch","SYS_io_cancel","SYS_io_destroy","SYS_io_getevents","SYS_io_setup","SYS_io_submit","SYS_io_uring_enter","SYS_io_uring_register","SYS_io_uring_setup","SYS_ioctl","SYS_ioperm","SYS_iopl","SYS_ioprio_get","SYS_ioprio_set","SYS_kcmp","SYS_kexec_file_load","SYS_kexec_load","SYS_keyctl","SYS_kill","SYS_landlock_add_rule","SYS_landlock_create_ruleset","SYS_landlock_restrict_self","SYS_lchown","SYS_lgetxattr","SYS_link","SYS_linkat","SYS_listen","SYS_listxattr","SYS_llistxattr","SYS_lookup_dcookie","SYS_lremovexattr","SYS_lseek","SYS_lsetxattr","SYS_lstat","SYS_madvise","SYS_mbind","SYS_membarrier","SYS_memfd_create","SYS_memfd_secret","SYS_migrate_pages","SYS_mincore","SYS_mkdir","SYS_mkdirat","SYS_mknod","SYS_mknodat","SYS_mlock","SYS_mlock2","SYS_mlockall","SYS_mmap","SYS_modify_ldt","SYS_mount","SYS_mount_setattr","SYS_move_mount","SYS_move_pages","SYS_mprotect","SYS_mq_getsetattr","SYS_mq_notify","SYS_mq_open","SYS_mq_timedreceive","SYS_mq_timedsend","SYS_mq_unlink","SYS_mremap","SYS_msgctl","SYS_msgget","SYS_msgrcv","SYS_msgsnd","SYS_msync","SYS_munlock","SYS_munlockall","SYS_munmap","SYS_name_to_handle_at","SYS_nanosleep","SYS_newfstatat","SYS_nfsservctl","SYS_open","SYS_open_by_handle_at","SYS_open_tree","SYS_openat","SYS_openat2","SYS_pause","SYS_perf_event_open","SYS_personality","SYS_pidfd_getfd","SYS_pidfd_open","SYS_pidfd_send_signal","SYS_pipe","SYS_pipe2","SYS_pivot_root","SYS_pkey_alloc","SYS_pkey_free","SYS_pkey_mprotect","SYS_poll","SYS_ppoll","SYS_prctl","SYS_pread64","SYS_preadv","SYS_preadv2","SYS_prlimit64","SYS_process_madvise","SYS_process_mrelease","SYS_process_vm_readv","SYS_process_vm_writev","SYS_pselect6","SYS_ptrace","SYS_putpmsg","SYS_pwrite64","SYS_pwritev","SYS_pwritev2","SYS_query_module","SYS_quotactl","SYS_quotactl_fd","SYS_read","SYS_readahead","SYS_readlink","SYS_readlinkat","SYS_readv","SYS_reboot","SYS_recvfrom","SYS_recvmmsg","SYS_recvmsg","SYS_remap_file_pages","SYS_removexattr","SYS_rename","SYS_renameat","SYS_renameat2","SYS_request_key","SYS_restart_syscall","SYS_rmdir","SYS_rseq","SYS_rt_sigaction","SYS_rt_sigpending","SYS_rt_sigprocmask","SYS_rt_sigqueueinfo","SYS_rt_sigreturn","SYS_rt_sigsuspend","SYS_rt_sigtimedwait","SYS_rt_tgsigqueueinfo","SYS_sched_get_priority_max","SYS_sched_get_priority_min","SYS_sched_getaffinity","SYS_sched_getattr","SYS_sched_getparam","SYS_sched_getscheduler","SYS_sched_rr_get_interval","SYS_sched_setaffinity","SYS_sched_setattr","SYS_sched_setparam","SYS_sched_setscheduler","SYS_sched_yield","SYS_seccomp","SYS_security","SYS_select","SYS_semctl","SYS_semget","SYS_semop","SYS_semtimedop","SYS_sendfile","SYS_sendmmsg","SYS_sendmsg","SYS_sendto","SYS_set_mempolicy","SYS_set_mempolicy_home_node","SYS_set_robust_list","SYS_set_thread_area","SYS_set_tid_address","SYS_setdomainname","SYS_setfsgid","SYS_setfsuid","SYS_setgid","SYS_setgroups","SYS_sethostname","SYS_setitimer","SYS_setns","SYS_setpgid","SYS_setpriority","SYS_setregid","SYS_setresgid","SYS_setresuid","SYS_setreuid","SYS_setrlimit","SYS_setsid","SYS_setsockopt","SYS_settimeofday","SYS_setuid","SYS_setxattr","SYS_shmat","SYS_shmctl","SYS_shmdt","SYS_shmget","SYS_shutdown","SYS_sigaltstack","SYS_signalfd","SYS_signalfd4","SYS_socket","SYS_socketpair","SYS_splice","SYS_stat","SYS_statfs","SYS_statx","SYS_swapoff","SYS_swapon","SYS_symlink","SYS_symlinkat","SYS_sync","SYS_sync_file_range","SYS_syncfs","SYS_sysfs","SYS_sysinfo","SYS_syslog","SYS_tee","SYS_tgkill","SYS_time","SYS_timer_create","SYS_timer_delete","SYS_timer_getoverrun","SYS_timer_gettime","SYS_timer_settime","SYS_timerfd_create","SYS_timerfd_gettime","SYS_timerfd_settime","SYS_times","SYS_tkill","SYS_truncate","SYS_tuxcall","SYS_umask","SYS_umount2","SYS_uname","SYS_unlink","SYS_unlinkat","SYS_unshare","SYS_uselib","SYS_userfaultfd","SYS_ustat","SYS_utime","SYS_utimensat","SYS_utimes","SYS_vfork","SYS_vhangup","SYS_vmsplice","SYS_vserver","SYS_wait4","SYS_waitid","SYS_write","SYS_writev","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","TAB0","TAB1","TAB2","TAB3","TABDLY","TCA_CHAIN","TCA_DUMP_INVISIBLE","TCA_FCNT","TCA_HW_OFFLOAD","TCA_KIND","TCA_OPTIONS","TCA_PAD","TCA_RATE","TCA_STAB","TCA_STATS","TCA_STATS2","TCA_UNSPEC","TCA_XSTATS","TCFLSH","TCGETA","TCGETS","TCGETS2","TCGETX","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_CC_INFO","TCP_CM_INQ","TCP_CONGESTION","TCP_COOKIE_TRANSACTIONS","TCP_CORK","TCP_DEFER_ACCEPT","TCP_FASTOPEN","TCP_FASTOPEN_CONNECT","TCP_FASTOPEN_KEY","TCP_FASTOPEN_NO_COOKIE","TCP_INFO","TCP_INQ","TCP_KEEPCNT","TCP_KEEPIDLE","TCP_KEEPINTVL","TCP_LINGER2","TCP_MAXSEG","TCP_MD5SIG","TCP_MD5SIG_EXT","TCP_NODELAY","TCP_NOTSENT_LOWAT","TCP_QUEUE_SEQ","TCP_QUICKACK","TCP_REPAIR","TCP_REPAIR_OPTIONS","TCP_REPAIR_QUEUE","TCP_REPAIR_WINDOW","TCP_SAVED_SYN","TCP_SAVE_SYN","TCP_SYNCNT","TCP_THIN_DUPACK","TCP_THIN_LINEAR_TIMEOUTS","TCP_TIMESTAMP","TCP_ULP","TCP_USER_TIMEOUT","TCP_WINDOW_CLAMP","TCP_ZEROCOPY_RECEIVE","TCSADRAIN","TCSAFLUSH","TCSANOW","TCSBRK","TCSBRKP","TCSETA","TCSETAF","TCSETAW","TCSETS","TCSETS2","TCSETSF","TCSETSF2","TCSETSW","TCSETSW2","TCSETX","TCSETXF","TCSETXW","TCXONC","TFD_CLOEXEC","TFD_NONBLOCK","TFD_TIMER_ABSTIME","TFD_TIMER_CANCEL_ON_SET","THOUSEP","TIMER_ABSTIME","TIME_BAD","TIME_DEL","TIME_ERROR","TIME_INS","TIME_OK","TIME_OOP","TIME_WAIT","TIOCCBRK","TIOCCONS","TIOCEXCL","TIOCGDEV","TIOCGETD","TIOCGEXCL","TIOCGICOUNT","TIOCGLCKTRMIOS","TIOCGPGRP","TIOCGPKT","TIOCGPTLCK","TIOCGPTN","TIOCGPTPEER","TIOCGRS485","TIOCGSERIAL","TIOCGSID","TIOCGSOFTCAR","TIOCGWINSZ","TIOCINQ","TIOCLINUX","TIOCMBIC","TIOCMBIS","TIOCMGET","TIOCMIWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCSBRK","TIOCSCTTY","TIOCSERCONFIG","TIOCSERGETLSR","TIOCSERGETMULTI","TIOCSERGSTRUCT","TIOCSERGWILD","TIOCSERSETMULTI","TIOCSERSWILD","TIOCSETD","TIOCSIG","TIOCSLCKTRMIOS","TIOCSPGRP","TIOCSPTLCK","TIOCSRS485","TIOCSSERIAL","TIOCSSOFTCAR","TIOCSTI","TIOCSWINSZ","TIOCVHANGUP","TMPFS_MAGIC","TMP_MAX","TOSTOP","TRACEFS_MAGIC","TUN_READQ_SIZE","TUN_TAP_DEV","TUN_TUN_DEV","TUN_TYPE_MASK","T_FMT","T_FMT_AMPM","UDF_SUPER_MAGIC","UDP_CORK","UDP_ENCAP","UDP_GRO","UDP_NO_CHECK6_RX","UDP_NO_CHECK6_TX","UDP_SEGMENT","UINPUT_MAX_NAME_SIZE","UINPUT_VERSION","UIO_MAXIOV","UMOUNT_NOFOLLOW","UNAME26","USBDEVICE_SUPER_MAGIC","USER_PROCESS","USRQUOTA","UTIME_NOW","UTIME_OMIT","VDISCARD","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMADDR_CID_ANY","VMADDR_CID_HOST","VMADDR_CID_HYPERVISOR","VMADDR_CID_LOCAL","VMADDR_CID_RESERVED","VMADDR_PORT_ANY","VMIN","VQUIT","VREPRINT","VSTART","VSTOP","VSUSP","VSWTC","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WHOLE_SECONDS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_EXITCODE","W_OK","W_STOPCODE","XATTR_CREATE","XATTR_REPLACE","XENFS_SUPER_MAGIC","XFS_SUPER_MAGIC","XTABS","X_OK","YESEXPR","YESSTR","_IOFBF","_IOLBF","_IONBF","_PC_2_SYMLINKS","_PC_ALLOC_SIZE_MIN","_PC_ASYNC_IO","_PC_CHOWN_RESTRICTED","_PC_FILESIZEBITS","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_PRIO_IO","_PC_REC_INCR_XFER_SIZE","_PC_REC_MAX_XFER_SIZE","_PC_REC_MIN_XFER_SIZE","_PC_REC_XFER_ALIGN","_PC_SOCK_MAXBUF","_PC_SYMLINK_MAX","_PC_SYNC_IO","_PC_VDISABLE","_POSIX_VDISABLE","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_C_VERSION","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_AVPHYS_PAGES","_SC_BARRIERS","_SC_BASE","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHARCLASS_NAME_MAX","_SC_CHAR_BIT","_SC_CHAR_MAX","_SC_CHAR_MIN","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_C_LANG_SUPPORT","_SC_C_LANG_SUPPORT_R","_SC_DELAYTIMER_MAX","_SC_DEVICE_IO","_SC_DEVICE_SPECIFIC","_SC_DEVICE_SPECIFIC_R","_SC_EQUIV_CLASS_MAX","_SC_EXPR_NEST_MAX","_SC_FD_MGMT","_SC_FIFO","_SC_FILE_ATTRIBUTES","_SC_FILE_LOCKING","_SC_FILE_SYSTEM","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_INT_MAX","_SC_INT_MIN","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LEVEL1_DCACHE_ASSOC","_SC_LEVEL1_DCACHE_LINESIZE","_SC_LEVEL1_DCACHE_SIZE","_SC_LEVEL1_ICACHE_ASSOC","_SC_LEVEL1_ICACHE_LINESIZE","_SC_LEVEL1_ICACHE_SIZE","_SC_LEVEL2_CACHE_ASSOC","_SC_LEVEL2_CACHE_LINESIZE","_SC_LEVEL2_CACHE_SIZE","_SC_LEVEL3_CACHE_ASSOC","_SC_LEVEL3_CACHE_LINESIZE","_SC_LEVEL3_CACHE_SIZE","_SC_LEVEL4_CACHE_ASSOC","_SC_LEVEL4_CACHE_LINESIZE","_SC_LEVEL4_CACHE_SIZE","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_LONG_BIT","_SC_MAPPED_FILES","_SC_MB_LEN_MAX","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_MULTI_PROCESS","_SC_NETWORKING","_SC_NGROUPS_MAX","_SC_NL_ARGMAX","_SC_NL_LANGMAX","_SC_NL_MSGMAX","_SC_NL_NMAX","_SC_NL_SETMAX","_SC_NL_TEXTMAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_NZERO","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PII","_SC_PII_INTERNET","_SC_PII_INTERNET_DGRAM","_SC_PII_INTERNET_STREAM","_SC_PII_OSI","_SC_PII_OSI_CLTS","_SC_PII_OSI_COTS","_SC_PII_OSI_M","_SC_PII_SOCKET","_SC_PII_XTI","_SC_PIPE","_SC_POLL","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_REGEX_VERSION","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SCHAR_MAX","_SC_SCHAR_MIN","_SC_SELECT","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SHRT_MAX","_SC_SHRT_MIN","_SC_SIGNALS","_SC_SIGQUEUE_MAX","_SC_SINGLE_PROCESS","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SSIZE_MAX","_SC_SS_REPL_MAX","_SC_STREAMS","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_SYSTEM_DATABASE","_SC_SYSTEM_DATABASE_R","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_ROBUST_PRIO_INHERIT","_SC_THREAD_ROBUST_PRIO_PROTECT","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_T_IOV_MAX","_SC_UCHAR_MAX","_SC_UINT_MAX","_SC_UIO_MAXIOV","_SC_ULONG_MAX","_SC_USER_GROUPS","_SC_USER_GROUPS_R","_SC_USHRT_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_V7_ILP32_OFF32","_SC_V7_ILP32_OFFBIG","_SC_V7_LP64_OFF64","_SC_V7_LPBIG_OFFBIG","_SC_VERSION","_SC_WORD_BIT","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_SC_XOPEN_XPG2","_SC_XOPEN_XPG3","_SC_XOPEN_XPG4","__NFT_REG_MAX","__SIZEOF_PTHREAD_CONDATTR_T","__SIZEOF_PTHREAD_COND_T","__SIZEOF_PTHREAD_MUTEXATTR_T","__SIZEOF_PTHREAD_MUTEX_T","__SIZEOF_PTHREAD_RWLOCKATTR_T","__SIZEOF_PTHREAD_RWLOCK_T","__UT_HOSTSIZE","__UT_LINESIZE","__UT_NAMESIZE","__WALL","__WCLONE","__WNOTHREAD","__c_anonymous_ptrace_syscall_info_data","__c_anonymous_ptrace_syscall_info_entry","__c_anonymous_ptrace_syscall_info_exit","__c_anonymous_ptrace_syscall_info_seccomp","__c_anonymous_sockaddr_can_can_addr","__c_anonymous_sockaddr_can_j1939","__c_anonymous_sockaddr_can_tp","__errno_location","__exit_status","__fsword_t","__glibc_reserved1","__glibc_reserved2","__glibc_reserved3","__glibc_reserved4","__key","__priority_which_t","__rlimit_resource_t","__s16","__s32","__s64","__seq","__statx_timestamp_pad1","__syscall_ulong_t","__timeval","__u16","__u32","__u64","__u8","__unused1","__unused10","__unused11","__unused2","__unused3","__unused4","__unused5","__unused6","__unused7","__unused8","__unused9","_exit","_f","_libc_fpstate","_libc_fpxreg","_libc_xmmreg","_st","_xmm","abort","abs","absflat","absfuzz","absinfo","absmax","absmin","accept","accept4","access","acct","actime","addmntent","addr","addr","addr_mask","addrinfo","adjtime","adjtimex","af_alg_iv","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_cancel","aio_error","aio_fildes","aio_fsync","aio_lio_opcode","aio_nbytes","aio_offset","aio_read","aio_reqprio","aio_return","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arch","arch","arena","arena","args","args","args","arp_dev","arp_flags","arp_flags","arp_ha","arp_ha","arp_netmask","arp_netmask","arp_pa","arp_pa","arpd_request","arphdr","arpreq","arpreq_old","atexit","atof","atoi","attack_length","attack_level","backtrace","bind","blkcnt64_t","blkcnt_t","blksize_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brk","bsearch","bufferram","bustype","button","c_cc","c_cc","c_cflag","c_cflag","c_char","c_double","c_float","c_iflag","c_iflag","c_int","c_ispeed","c_ispeed","c_lflag","c_lflag","c_line","c_line","c_long","c_longlong","c_oflag","c_oflag","c_ospeed","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calcnt","calloc","can_addr","can_dlc","can_err_mask_t","can_family","can_filter","can_frame","can_id","can_id","can_id","can_ifindex","can_mask","canfd_frame","canid_t","cc_t","center","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","cgroup","ch_addralign","ch_addralign","ch_reserved","ch_size","ch_size","ch_type","ch_type","chdir","child_tid","chmod","chown","chroot","clearenv","clearerr","clock_adjtime","clock_getcpuclockid","clock_getres","clock_gettime","clock_nanosleep","clock_settime","clock_t","clockid","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_args","close","closedir","closelog","cmd","cmsg_len","cmsg_level","cmsg_type","cmsghdr","code","code","code","codes_ptr","codes_size","connect","constant","cookie","copy_file_range","cpu_set_t","creat","creat64","cs","ctermid","cuid","currency_symbol","custom_data","custom_len","cwd","cwd","d_ino","d_ino","d_name","d_name","d_off","d_off","d_reclen","d_reclen","d_type","d_type","daemon","data","data","deadband","decimal_point","delay","dest_offset","dev","dev_t","difftime","direction","dirent","dirent64","dirfd","dl_iterate_phdr","dl_phdr_info","dladdr","dladdr1","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlinfo","dlmopen","dlopen","dlpi_addr","dlpi_adds","dlpi_name","dlpi_phdr","dlpi_phnum","dlpi_subs","dlpi_tls_data","dlpi_tls_modid","dlsym","domainname","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curinodes","dqb_curspace","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_valid","dqblk","ds","dup","dup2","dup3","duplocale","e_ehsize","e_ehsize","e_entry","e_entry","e_exit","e_flags","e_flags","e_ident","e_ident","e_machine","e_machine","e_phentsize","e_phentsize","e_phnum","e_phnum","e_phoff","e_phoff","e_shentsize","e_shentsize","e_shnum","e_shnum","e_shoff","e_shoff","e_shstrndx","e_shstrndx","e_termination","e_type","e_type","e_version","e_version","ee_code","ee_data","ee_errno","ee_info","ee_origin","ee_pad","ee_type","effect","effect_id","eflags","element","end_level","endgrent","endmntent","endpwent","endservent","endspent","endutxent","entry","envelope","envelope","envelope","epoll_create","epoll_create1","epoll_ctl","epoll_event","epoll_pwait","epoll_wait","errcnt","error","es","esterror","esterror","event_len","eventfd","events","events","execl","execle","execlp","execv","execve","execvp","execvpe","exit","exit","exit_signal","explicit_bzero","exponent","f_bavail","f_bavail","f_bavail","f_bavail","f_bfree","f_bfree","f_bfree","f_bfree","f_blocks","f_blocks","f_blocks","f_blocks","f_bsize","f_bsize","f_bsize","f_bsize","f_favail","f_favail","f_ffree","f_ffree","f_ffree","f_ffree","f_files","f_files","f_files","f_files","f_flag","f_flag","f_flags","f_frsize","f_frsize","f_frsize","f_frsize","f_fsid","f_fsid","f_fsid","f_fsid","f_namelen","f_namelen","f_namemax","f_namemax","f_spare","f_type","f_type","faccessat","fade_length","fade_level","fallocate","fallocate64","fanotify_event_metadata","fanotify_init","fanotify_mark","fanotify_response","fchdir","fchmod","fchmodat","fchown","fchownat","fclose","fcntl","fd","fd","fd","fd_set","fdatasync","fdopen","fdopendir","feof","ferror","fexecve","ff_condition_effect","ff_constant_effect","ff_effect","ff_effects_max","ff_effects_max","ff_envelope","ff_periodic_effect","ff_ramp_effect","ff_replay","ff_rumble_effect","ff_trigger","fflush","fgetc","fgetpos","fgetpos64","fgets","fgetspent_r","fgetxattr","file_clone_range","fileno","filter","flags","flags","flags","flags","flags","flags","flat","flistxattr","flock","flock","flock64","fmemopen","fmt","fop","fop","fopen","fopen64","fordblks","fordblks","fork","forkpty","fpathconf","fpos64_t","fpos_t","fpregs","fprintf","fputc","fputs","frac_digits","fread","fread_unlocked","free","freeaddrinfo","freehigh","freeifaddrs","freelocale","freeram","freeswap","fremovexattr","freopen","freopen64","freq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fs","fs_base","fsblkcnt_t","fscanf","fseek","fseeko","fseeko64","fsetpos","fsetpos64","fsetxattr","fsfilcnt_t","fsid_t","fsmblks","fsmblks","fstat","fstat64","fstatat","fstatat64","fstatfs","fstatfs64","fstatvfs","fstatvfs64","fsync","ftell","ftello","ftello64","ftok","ftruncate","ftruncate64","ftw","ftw","futimens","futimes","fuzz","fwrite","gai_strerror","genlmsghdr","getaddrinfo","getauxval","getchar","getchar_unlocked","getcontext","getcwd","getdomainname","getdtablesize","getegid","getentropy","getenv","geteuid","getgid","getgrent","getgrent_r","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostid","gethostname","getifaddrs","getline","getloadavg","getlogin","getmntent","getnameinfo","getopt","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprotobyname","getprotobynumber","getpt","getpwent","getpwent_r","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrandom","getresgid","getresuid","getrlimit","getrlimit64","getrusage","getservbyname","getservbyport","getservent","getsid","getsockname","getsockopt","getspent","getspent_r","getspnam","getspnam_r","gettid","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid","gid_t","gl_flags","gl_flags","gl_offs","gl_offs","gl_pathc","gl_pathc","gl_pathv","gl_pathv","glob","glob64","glob64_t","glob_t","globfree","globfree64","gmtime","gmtime_r","gnu_get_libc_release","gnu_get_libc_version","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","greg_t","gregs","group","group","grouping","gs","gs_base","h_addr_list","h_addrtype","h_aliases","h_length","h_name","ha","hasmntopt","hblkhd","hblkhd","hblks","hblks","hostent","hstrerror","i387","iconv","iconv_close","iconv_open","iconv_t","id","id","id","id_t","idtype_t","if_freenameindex","if_index","if_indextoname","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_flags","ifa_ifu","ifa_name","ifa_netmask","ifa_next","ifaddrs","imr_address","imr_ifindex","imr_interface","imr_interface","imr_multiaddr","imr_multiaddr","imr_multiaddr","imr_sourceaddr","in6_addr","in6_pktinfo","in6_rtmsg","in_addr","in_addr_t","in_pktinfo","in_port_t","index","initgroups","ino64_t","ino_t","inotify_add_watch","inotify_event","inotify_init","inotify_init1","inotify_rm_watch","input_absinfo","input_event","input_id","input_keymap_entry","input_mask","instruction_pointer","instruction_pointer","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","interval","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","ioctl","ioperm","iopl","iov_base","iov_len","iovec","ip","ip_mreq","ip_mreq_source","ip_mreqn","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","is_error","isalnum","isalpha","isatty","isblank","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_interval","it_value","it_value","itimerspec","itimerval","iv","ivlen","j1939","j1939_filter","jf","jitcnt","jitter","jt","k","keepcost","keepcost","key_t","keycode","kill","killpg","l_len","l_len","l_linger","l_onoff","l_pid","l_pid","l_start","l_start","l_type","l_type","l_whence","l_whence","labs","lchown","lconv","left_coeff","left_saturation","len","len","len","len","length","level","lgetxattr","linger","link","linkat","lio_listio","listen","listxattr","llistxattr","loads","locale_t","localeconv","localtime","localtime_r","lockf","loff_t","login_tty","lremovexattr","lseek","lseek64","lsetxattr","lstat","lstat64","lutimes","machine","madvise","magic","magnitude","major","makecontext","makedev","mallinfo","mallinfo","mallinfo2","mallinfo2","malloc","malloc_info","malloc_trim","malloc_usable_size","mallopt","mask","mask","max_align_t","maxerror","maxerror","maximum","mcontext_t","mem_unit","memalign","memchr","memcmp","memcpy","memfd_create","memmem","memmove","memrchr","memset","metadata_len","mincore","minimum","minor","mkdir","mkdirat","mkdtemp","mkfifo","mkfifoat","mknod","mknodat","mkostemp","mkostemps","mkstemp","mkstemps","mktime","mlock","mlock2","mlockall","mmap","mmap64","mmsghdr","mnt_dir","mnt_freq","mnt_fsname","mnt_opts","mnt_passno","mnt_type","mntent","mode","mode","mode_t","modes","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","mq_attr","mq_close","mq_curmsgs","mq_flags","mq_getattr","mq_maxmsg","mq_msgsize","mq_open","mq_receive","mq_send","mq_setattr","mq_timedreceive","mq_timedsend","mq_unlink","mqd_t","mr_address","mr_alen","mr_ifindex","mr_type","mremap","msg","msg_control","msg_controllen","msg_ctime","msg_flags","msg_hdr","msg_iov","msg_iovlen","msg_len","msg_lrpid","msg_lspid","msg_name","msg_namelen","msg_perm","msg_qbytes","msg_qnum","msg_rtime","msg_stime","msgctl","msgget","msghdr","msginfo","msglen_t","msgmap","msgmax","msgmnb","msgmni","msgpool","msgqnum_t","msgrcv","msgseg","msgsnd","msgssz","msgtql","msqid_ds","msync","munlock","munlockall","munmap","mxcr_mask","mxcr_mask","mxcsr","mxcsr","n_cs_precedes","n_sep_by_space","n_sign_posn","name","name","name","name","name_mask","name_t","nanosleep","negative_sign","newlocale","nfds_t","nice","nl_family","nl_groups","nl_item","nl_langinfo","nl_langinfo_l","nl_mmap_hdr","nl_mmap_req","nl_pid","nl_pktinfo","nla_len","nla_type","nlattr","nlink_t","nlmsg_flags","nlmsg_len","nlmsg_pid","nlmsg_seq","nlmsg_type","nlmsgerr","nlmsghdr","nm_block_nr","nm_block_size","nm_frame_nr","nm_frame_size","nm_gid","nm_group","nm_len","nm_pid","nm_status","nm_uid","nodename","nr","nr","nr","nr","ntp_adjtime","ntp_gettime","ntptimeval","off","off64_t","off_t","offset","offset","old","op","open","open64","open_how","open_memstream","open_wmemstream","openat","openat64","opendir","openlog","openpty","ordblks","ordblks","orig_rax","p_aliases","p_align","p_align","p_cs_precedes","p_filesz","p_filesz","p_flags","p_flags","p_memsz","p_memsz","p_name","p_offset","p_offset","p_paddr","p_paddr","p_proto","p_sep_by_space","p_sign_posn","p_type","p_type","p_vaddr","p_vaddr","packet_mreq","pad","pad","parent_tid","passwd","pathconf","pause","pclose","period","perror","personality","pgn","pgn","pgn_mask","pgn_t","phase","pid","pid","pid_t","pidfd","pipe","pipe2","poll","pollfd","popen","positive_sign","posix_fadvise","posix_fadvise64","posix_fallocate","posix_fallocate64","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addclose","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addopen","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getschedparam","posix_spawnattr_getschedpolicy","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setschedparam","posix_spawnattr_setschedpolicy","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","ppoll","ppsfreq","prctl","pread","pread64","preadv","preadv2","preadv64","preadv64v2","precision","printf","priority_t","prlimit","prlimit64","process_vm_readv","process_vm_writev","procs","product","protoent","pselect","pthread_atfork","pthread_attr_destroy","pthread_attr_getaffinity_np","pthread_attr_getguardsize","pthread_attr_getstack","pthread_attr_init","pthread_attr_setaffinity_np","pthread_attr_setdetachstate","pthread_attr_setstacksize","pthread_attr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getclock","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setclock","pthread_condattr_setpshared","pthread_condattr_t","pthread_create","pthread_detach","pthread_exit","pthread_getaffinity_np","pthread_getattr_np","pthread_getcpuclockid","pthread_getname_np","pthread_getschedparam","pthread_getspecific","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mutex_consistent","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_timedlock","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getprotocol","pthread_mutexattr_getpshared","pthread_mutexattr_getrobust","pthread_mutexattr_init","pthread_mutexattr_setprotocol","pthread_mutexattr_setpshared","pthread_mutexattr_setrobust","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getkind_np","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setkind_np","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_setaffinity_np","pthread_setname_np","pthread_setschedparam","pthread_setschedprio","pthread_setspecific","pthread_sigmask","pthread_sigqueue","pthread_spin_destroy","pthread_spin_init","pthread_spin_lock","pthread_spin_trylock","pthread_spin_unlock","pthread_spinlock_t","pthread_t","ptrace","ptrace_peeksiginfo_args","ptrace_syscall_info","ptrdiff_t","ptsname","ptsname_r","putchar","putchar_unlocked","putenv","puts","pututxline","pw_dir","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","pwrite64","pwritev","pwritev2","pwritev64","pwritev64v2","qsort","qsort_r","quotactl","r10","r11","r12","r13","r14","r15","r8","r9","raise","rand","rax","rbp","rbx","rcx","rdi","rdp","rdp","rdx","read","readahead","readdir","readdir64","readdir64_r","readdir_r","readlink","readlinkat","readv","realloc","reallocarray","realpath","reboot","recv","recvfrom","recvmmsg","recvmsg","regcomp","regerror","regex_t","regexec","regfree","regmatch_t","regoff_t","regs","release","remap_file_pages","remove","removexattr","rename","renameat","renameat2","replay","req","request_id","request_id","res_init","reserved","reserved","resolution","resolve","response","ret_data","retval","retval","revents","rewind","rewinddir","right_coeff","right_saturation","rip","rip","rip","rlim64_t","rlim_cur","rlim_cur","rlim_max","rlim_max","rlim_t","rlimit","rlimit64","rm_eo","rm_so","rmdir","rsi","rsp","rt_class","rt_dev","rt_dst","rt_flags","rt_gateway","rt_genmask","rt_irtt","rt_metric","rt_mtu","rt_pad1","rt_pad2","rt_pad3","rt_pad4","rt_tos","rt_window","rtentry","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","rusage","rx_id","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_family","sa_family_t","sa_flags","sa_mask","sa_restorer","sa_sigaction","salg_family","salg_feat","salg_mask","salg_name","salg_type","sbrk","scancode","scanf","sched_get_priority_max","sched_get_priority_min","sched_getaffinity","sched_getcpu","sched_getparam","sched_getscheduler","sched_param","sched_priority","sched_rr_get_interval","sched_setaffinity","sched_setparam","sched_setscheduler","sched_yield","seccomp","seccomp_data","seccomp_data","seccomp_notif","seccomp_notif_resp","seccomp_notif_sizes","seekdir","select","sem_close","sem_ctime","sem_destroy","sem_flg","sem_getvalue","sem_init","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_perm","sem_post","sem_t","sem_timedwait","sem_trywait","sem_unlink","sem_wait","semaem","sembuf","semctl","semget","semid_ds","seminfo","semmap","semmni","semmns","semmnu","semmsl","semop","semopm","semume","semusz","semvmx","send","sendfile","sendfile64","sendmmsg","sendmsg","sendto","servent","set_tid","set_tid_size","setbuf","setcontext","setdomainname","setegid","setenv","seteuid","setfsgid","setfsuid","setgid","setgrent","setgroups","sethostid","sethostname","setlocale","setlogmask","setmntent","setns","setpgid","setpriority","setpwent","setregid","setresgid","setresuid","setreuid","setrlimit","setrlimit64","setservent","setsid","setsockopt","setspent","settimeofday","setuid","setutxent","setvbuf","setxattr","sgetspent_r","sh_addr","sh_addr","sh_addralign","sh_addralign","sh_entsize","sh_entsize","sh_flags","sh_flags","sh_info","sh_info","sh_link","sh_link","sh_name","sh_name","sh_offset","sh_offset","sh_size","sh_size","sh_type","sh_type","sharedram","shift","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_code","si_errno","si_pid","si_signo","si_status","si_stime","si_uid","si_utime","si_value","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_thread_id","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","signal","signalfd","signalfd_siginfo","significand","sigpending","sigprocmask","sigset_t","sigsuspend","sigtimedwait","sigval","sigwait","sigwaitinfo","sin6_addr","sin6_family","sin6_flowinfo","sin6_port","sin6_scope_id","sin_addr","sin_family","sin_port","sin_zero","sival_ptr","size_t","sleep","sll_addr","sll_family","sll_halen","sll_hatype","sll_ifindex","sll_pkttype","sll_protocol","smblks","smblks","snprintf","sock_extended_err","sock_filter","sock_fprog","sock_txtime","sockaddr","sockaddr_alg","sockaddr_can","sockaddr_in","sockaddr_in6","sockaddr_ll","sockaddr_nl","sockaddr_storage","sockaddr_un","sockaddr_vm","socket","socketpair","socklen_t","sp_expire","sp_flag","sp_inact","sp_lstchg","sp_max","sp_min","sp_namp","sp_pwdp","sp_warn","speed_t","splice","sprintf","spwd","srand","src_fd","src_length","src_offset","ss","ss_family","ss_flags","ss_size","ss_sp","sscanf","ssi_addr","ssi_addr_lsb","ssi_arch","ssi_band","ssi_call_addr","ssi_code","ssi_errno","ssi_fd","ssi_int","ssi_overrun","ssi_pid","ssi_ptr","ssi_signo","ssi_status","ssi_stime","ssi_syscall","ssi_tid","ssi_trapno","ssi_uid","ssi_utime","ssize_t","st_atime","st_atime","st_atime_nsec","st_atime_nsec","st_blksize","st_blksize","st_blocks","st_blocks","st_ctime","st_ctime","st_ctime_nsec","st_ctime_nsec","st_dev","st_dev","st_gid","st_gid","st_info","st_info","st_ino","st_ino","st_mode","st_mode","st_mtime","st_mtime","st_mtime_nsec","st_mtime_nsec","st_name","st_name","st_nlink","st_nlink","st_other","st_other","st_rdev","st_rdev","st_shndx","st_shndx","st_size","st_size","st_size","st_size","st_space","st_uid","st_uid","st_value","st_value","stabil","stack","stack_pointer","stack_size","stack_t","stamp","start_code","start_level","start_stack","stat","stat","stat64","stat64","statfs","statfs","statfs64","statfs64","status","statvfs","statvfs","statvfs64","statvfs64","statx","statx","statx_timestamp","stbcnt","stpcpy","stpncpy","strcasecmp","strcasestr","strcat","strchr","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strlen","strncasecmp","strncat","strncmp","strncpy","strndup","strnlen","strong_magnitude","strpbrk","strrchr","strsignal","strspn","strstr","strtod","strtof","strtok","strtok_r","strtol","strtoul","strxfrm","stx_atime","stx_attributes","stx_attributes_mask","stx_blksize","stx_blocks","stx_btime","stx_ctime","stx_dev_major","stx_dev_minor","stx_gid","stx_ino","stx_mask","stx_mnt_id","stx_mode","stx_mtime","stx_nlink","stx_rdev_major","stx_rdev_minor","stx_size","stx_uid","sun_family","sun_path","suseconds_t","sval","svm_cid","svm_family","svm_port","svm_reserved1","svm_zero","swapcontext","swapoff","swapon","swd","swd","symlink","symlinkat","sync","sync_file_range","syncfs","syscall","sysconf","sysctl","sysinfo","sysinfo","syslog","sysname","system","tai","tai","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcsendbreak","tcsetattr","tcsetpgrp","tee","telldir","termios","termios2","thousands_sep","tick","time","time","time","time","time_t","timegm","timer_create","timer_delete","timer_getoverrun","timer_gettime","timer_settime","timer_t","timerfd_create","timerfd_gettime","timerfd_settime","times","timespec","timeval","timex","timezone","tls","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpfile64","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolerance","tolower","totalhigh","totalram","totalswap","toupper","tp","trigger","truncate","truncate64","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","ttyname_r","tv_nsec","tv_nsec","tv_sec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","tx_id","type_","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","u","u64","u_ar0","u_comm","u_debugreg","u_dsize","u_fpstate","u_fpvalid","u_ssize","u_tsize","uc_flags","uc_link","uc_mcontext","uc_sigmask","uc_stack","ucontext_t","ucred","uid","uid","uid_t","uinput_abs_setup","uinput_ff_erase","uinput_ff_upload","uinput_setup","uinput_user_dev","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","umount","umount2","uname","ungetc","unlink","unlinkat","unlockpt","unsetenv","unshare","uordblks","uordblks","updated","uptime","useconds_t","uselocale","user","user_fpregs_struct","user_regs_struct","usleep","usmblks","usmblks","ut_addr_v6","ut_exit","ut_host","ut_id","ut_line","ut_pid","ut_session","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpname","utmpx","utmpxname","utsname","value","value","vendor","vers","version","version","version","vfork","vhangup","vmsplice","wait","wait4","waitid","waitpid","waveform","wchar_t","wcslen","wcstombs","wd","weak_magnitude","winsize","wmemchr","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xmm_space"],"q":["libcdmaximum number of services provided on the same listening …uth Header","","IP Payload Comp. Protocol","DCCP","IP6 destination option","exterior gateway protocol","encapsulation header","IP6 Encap Sec. Payload","IP6 fragmentation header","General Routing Encap.","Hop-by-hop option header","","","xns idp","group mgmt protocol","","for compatibility","","","","","Multipath TCP","","IP6 no next header","Protocol indep. multicast","pup","raw IP packet","IP6 routing header","resource reservation","SCTP","","tp-4 w/ class negotiationhe <code>PartialEq</code>, <code>Eq</code> and <code>Hash</code> implementations of this","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Equivalent to C’s <code>void</code> type when used as a pointereturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codehe 64-bit libc on Solaris and illumos only has readdir_r. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"ifp":[[6,"__u16"],[6,"__u32"],[6,"__u8"],[3,"sock_filter"],[3,"cmsghdr"],[6,"c_uchar"],[3,"msghdr"],[6,"c_uint"],[6,"c_int"],[6,"size_t"],[15,"usize"],[3,"cpu_set_t"],[15,"bool"],[3,"fd_set"],[15,"u8"],[15,"u32"],[3,"sock_extended_err"],[3,"sockaddr"],[4,"DIR"],[4,"FILE"],[4,"fpos_t"],[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[4,"timezone"],[3,"in_addr"],[3,"ip_mreq"],[3,"ip_mreqn"],[3,"ip_mreq_source"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"addrinfo"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"lconv"],[3,"in_pktinfo"],[3,"ifaddrs"],[3,"in6_rtmsg"],[3,"arpreq"],[3,"arpreq_old"],[3,"arphdr"],[3,"mmsghdr"],[3,"epoll_event"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"utsname"],[3,"sigevent"],[4,"fpos64_t"],[3,"rlimit64"],[3,"glob_t"],[3,"passwd"],[3,"spwd"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"fsid_t"],[3,"packet_mreq"],[3,"if_nameindex"],[3,"msginfo"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"uinput_ff_upload"],[3,"uinput_ff_erase"],[3,"uinput_abs_setup"],[3,"dl_phdr_info"],[3,"Elf32_Ehdr"],[3,"Elf64_Ehdr"],[3,"Elf32_Sym"],[3,"Elf64_Sym"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"Elf32_Shdr"],[3,"Elf64_Shdr"],[3,"ucred"],[3,"mntent"],[3,"posix_spawn_file_actions_t"],[3,"posix_spawnattr_t"],[3,"genlmsghdr"],[3,"in6_pktinfo"],[3,"arpd_request"],[3,"inotify_event"],[3,"fanotify_response"],[3,"sockaddr_vm"],[3,"regmatch_t"],[3,"__c_anonymous_sockaddr_can_tp"],[3,"__c_anonymous_sockaddr_can_j1939"],[3,"can_filter"],[3,"j1939_filter"],[3,"sock_fprog"],[3,"seccomp_data"],[3,"nlmsghdr"],[3,"nlmsgerr"],[3,"nlattr"],[3,"file_clone_range"],[3,"sockaddr_nl"],[3,"dirent"],[3,"dirent64"],[3,"sockaddr_alg"],[3,"uinput_setup"],[3,"uinput_user_dev"],[3,"af_alg_iv"],[3,"mq_attr"],[3,"sock_txtime"],[19,"__c_anonymous_sockaddr_can_can_addr"],[3,"sockaddr_can"],[3,"statx"],[3,"statx_timestamp"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"glob64_t"],[3,"termios"],[3,"mallinfo"],[3,"mallinfo2"],[3,"nl_pktinfo"],[3,"nl_mmap_req"],[3,"nl_mmap_hdr"],[3,"rtentry"],[3,"timex"],[3,"ntptimeval"],[3,"regex_t"],[3,"Elf64_Chdr"],[3,"Elf32_Chdr"],[3,"seminfo"],[3,"ptrace_peeksiginfo_args"],[3,"__c_anonymous_ptrace_syscall_info_entry"],[3,"__c_anonymous_ptrace_syscall_info_exit"],[3,"__c_anonymous_ptrace_syscall_info_seccomp"],[3,"ptrace_syscall_info"],[19,"__c_anonymous_ptrace_syscall_info_data"],[3,"utmpx"],[3,"sigset_t"],[3,"sysinfo"],[3,"msqid_ds"],[3,"semid_ds"],[3,"sigaction"],[3,"statfs"],[3,"flock"],[3,"flock64"],[3,"siginfo_t"],[3,"stack_t"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"seccomp_notif_sizes"],[3,"user_fpregs_struct"],[3,"ucontext_t"],[3,"statvfs"],[3,"max_align_t"],[3,"clone_args"],[3,"sem_t"],[3,"termios2"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_condattr_t"],[3,"fanotify_event_metadata"],[3,"pthread_cond_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"can_frame"],[3,"canfd_frame"],[3,"open_how"],[3,"in6_addr"],[4,"c_void"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"dev_t"],[6,"pid_t"],[6,"c_long"],[6,"uid_t"],[3,"TypeId"]]},\
"once_cell":{"doc":"Overview","t":[0,0,0,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["race","sync","unsync","OnceBool","OnceBox","OnceNonZeroUsize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","drop","fmt","fmt","fmt","from","from","from","get","get","get","get_or_init","get_or_init","get_or_init","get_or_try_init","get_or_try_init","get_or_try_init","into","into","into","new","new","new","set","set","set","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","get_unchecked","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","wait","with_value","Lazy","OnceCell","borrow","borrow","borrow_mut","borrow_mut","clone","clone_from","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","force","force_mut","from","from","from","from","get","get","get_mut","get_mut","get_or_init","get_or_try_init","into","into","into_inner","into_value","new","new","set","take","to_owned","try_from","try_from","try_insert","try_into","try_into","type_id","type_id","with_value"],"q":["once_cell","","","once_cell::race","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","once_cell::sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","once_cell::unsync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Thread-safe, non-blocking, “first one wins” flavor of …","Thread-safe, blocking version of <code>OnceCell</code>.","Single-threaded version of <code>OnceCell</code>.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","A thread-safe cell which can be written to only once.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the underlying value.","Gets the underlying value.","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new empty cell.","Creates a new empty cell.","Creates a new empty cell.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","Sets the contents of this cell to <code>value</code>.","","","","","","","","","","A value which is initialized on the first access.","A thread-safe cell which can be written to only once.","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","","Returns the argument unchanged.","","Returns the argument unchanged.","Gets the reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the mutable reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Get the reference to the underlying value, without …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value. Returns","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Gets the reference to the underlying value, blocking the …","Creates a new initialized cell.","A value which is initialized on the first access.","A cell which can be written to only once. It is not thread …","","","","","","","","","Creates a new lazy value using <code>Default</code> as the initializing …","","","","","","Forces the evaluation of this lazy value and returns a …","Forces the evaluation of this lazy value and returns a …","","Returns the argument unchanged.","","Returns the argument unchanged.","Gets a reference to the underlying value.","Gets the reference to the result of this lazy value if it …","Gets a mutable reference to the underlying value.","Gets the mutable reference to the result of this lazy …","Gets the contents of the cell, initializing it with <code>f</code> if …","Gets the contents of the cell, initializing it with <code>f</code> if …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>OnceCell</code>, returning the wrapped value.","Consumes this <code>Lazy</code> returning the stored value.","Creates a new empty cell.","Creates a new lazy value with the given initializing …","Sets the contents of this cell to <code>value</code>.","Takes the value out of this <code>OnceCell</code>, moving it back to an …","","","","Like <code>set</code>, but also returns a reference to the final cell …","","","","","Creates a new initialized cell."],"i":[0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,13,15,13,15,13,13,13,13,15,15,15,13,13,15,15,15,13,13,13,15,13,15,13,15,13,13,13,13,15,13,15,13,15,13,13,13,13,15,13,13,15,13,15,13,13,0,0,20,21,20,21,20,20,20,20,21,21,21,20,20,21,21,21,20,20,20,21,20,21,20,21,20,20,20,21,20,21,20,21,20,20,20,20,21,20,20,21,20,21,20],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[1],[[1,4],5],[[2,4],5],[[3,4],5],[[]],[[]],[[]],[1,6],[2,[[6,[7]]]],[3,[[6,[8]]]],[1],[2,7],[3,8],[1,9],[2,[[9,[7]]]],[3,[[9,[8]]]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[1,10],[[9,[10]]]],[[2,7],9],[[3,8],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],11],[[],11],[[],11],0,0,[[]],[[]],[[]],[[]],[[[13,[12]]],[[13,[12]]]],[[[13,[12]],[13,[12]]]],[[]],[[],13],[[],[[15,[14]]]],[[[15,[16]]]],[[[15,[16]]]],[[[13,[17]],13],8],[[[13,[18]],4],5],[[[15,[18]],4],5],[15],[15],[19],[[]],[[],13],[[]],[13,6],[15,6],[13,6],[15,6],[13],[13,9],[13],[[]],[[]],[13,6],[15,9],[[],13],[[],15],[13,9],[13,6],[[]],[[],9],[[],9],[13,9],[[],9],[[],9],[[],11],[[],11],[13],[[],13],0,0,[[]],[[]],[[]],[[]],[[[20,[12]]],[[20,[12]]]],[[[20,[12]],[20,[12]]]],[[]],[[],20],[[],[[21,[14]]]],[[[21,[16]]]],[[[21,[16]]]],[[[20,[17]],[20,[17]]],8],[[[20,[18]],4],5],[[[21,[18]],4],5],[21],[21],[19],[[]],[[],20],[[]],[20,6],[21,6],[20,6],[21,6],[20],[20,9],[[]],[[]],[20,6],[21,9],[[],20],[[],21],[20,9],[20,6],[[]],[[],9],[[],9],[20,9],[[],9],[[],9],[[],11],[[],11],[[],20]],"p":[[3,"OnceBox"],[3,"OnceNonZeroUsize"],[3,"OnceBool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[3,"NonZeroUsize"],[15,"bool"],[4,"Result"],[3,"Box"],[3,"TypeId"],[8,"Clone"],[3,"OnceCell"],[8,"Default"],[3,"Lazy"],[8,"FnOnce"],[8,"PartialEq"],[8,"Debug"],[15,"never"],[3,"OnceCell"],[3,"Lazy"]]},\
"os_str_bytes":{"doc":"This crate allows interacting with the data stored by <code>OsStr</code>…","t":[3,8,8,8,3,8,3,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,10,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["EncodingError","OsStrBytes","OsStringBytes","Pattern","RawOsStr","RawOsStrCow","RawOsString","as_raw_bytes","as_ref","as_ref","assert_from_raw_bytes","assert_from_raw_bytes","assert_from_raw_vec","assert_from_raw_vec","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","cmp","cmp","contains","default","default","deref","ends_with","ends_with_os","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","find","fmt","fmt","fmt","fmt","from","from","from","from","from_raw_bytes","from_raw_bytes_unchecked","from_raw_vec","from_raw_vec_unchecked","from_str","from_string","hash","hash","index","index","index","index","index","index","index","index","index","index","index","index","into","into","into_box","into_os_str","into_os_string","into_raw_bytes","into_raw_vec","into_raw_vec","into_string","is_empty","iter","new","new","partial_cmp","partial_cmp","provide","raw_len","rfind","rsplit_once","shrink_to_fit","split","split_at","split_off","split_once","starts_with","starts_with_os","strip_prefix","strip_suffix","to_os_str","to_owned","to_owned","to_raw_bytes","to_str","to_str_lossy","to_string","trim_end_matches","trim_matches","trim_start_matches","truncate","try_from","try_from","try_into","try_into","type_id","type_id","type_id","Split","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","last","next","next_back","to_owned","try_from","try_into","type_id"],"q":["os_str_bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","os_str_bytes::iter","","","","","","","","","","","","","","",""],"d":["The error that occurs when a byte sequence is not …","A platform agnostic variant of <code>OsStrExt</code>.","A platform agnostic variant of <code>OsStringExt</code>.","Allows a type to be used for searching by <code>RawOsStr</code> and …","A container for borrowed byte strings converted by this …","Extensions to <code>Cow&lt;RawOsStr&gt;</code> for additional conversions.","A container for owned byte strings converted by this crate.","Returns the byte string stored by this container.","","","Converts a byte string into an equivalent platform-native …","Wraps a byte string, without copying or encoding …","Converts a byte string into an equivalent platform-native …","Wraps a byte string, without copying or encoding …","","","","","","","","Equivalent to <code>String::clear</code>.","","","","","Equivalent to <code>str::contains</code>.","","","","Equivalent to <code>str::ends_with</code>.","Equivalent to <code>str::ends_with</code> but accepts this type for the …","","","","","","","","","","","","","","Equivalent to <code>str::find</code>.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Converts a byte string into an equivalent platform-native …","Wraps a byte string, without copying or encoding …","Converts a byte string into an equivalent platform-native …","Wraps a byte string, without copying or encoding …","Wraps a string, without copying or encoding conversion.","Wraps a string, without copying or encoding conversion.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Equivalent to <code>String::into_boxed_str</code>.","Converts this representation back to a platform-native …","Converts this representation back to a platform-native …","Returns the byte string stored by this container.","Converts a platform-native string into an equivalent byte …","Returns the byte string stored by this container.","Equivalent to <code>OsString::into_string</code>.","Equivalent to <code>str::is_empty</code>.","Iterators provided by this crate.","Converts a platform-native string into a representation …","Converts a platform-native string into a representation …","","","","Returns the length of the byte string stored by this …","Equivalent to <code>str::rfind</code>.","Equivalent to <code>str::rsplit_once</code>.","Equivalent to <code>String::shrink_to_fit</code>.","Equivalent to <code>str::split</code>, but empty patterns are not …","Equivalent to <code>str::split_at</code>.","Equivalent to <code>String::split_off</code>.","Equivalent to <code>str::split_once</code>.","Equivalent to <code>str::starts_with</code>.","Equivalent to <code>str::starts_with</code> but accepts this type for …","Equivalent to <code>str::strip_prefix</code>.","Equivalent to <code>str::strip_suffix</code>.","Converts this representation back to a platform-native …","","","Converts a platform-native string into an equivalent byte …","Equivalent to <code>OsStr::to_str</code>.","Converts this string to the best UTF-8 representation …","","Equivalent to <code>str::trim_end_matches</code>.","Equivalent to <code>str::trim_matches</code>.","Equivalent to <code>str::trim_start_matches</code>.","Equivalent to <code>String::truncate</code>.","","","","","","","","The iterator returned by <code>RawOsStr::split</code>.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,1,2,28,1,29,2,1,2,2,10,1,2,10,2,2,2,1,2,1,1,2,2,1,1,1,1,1,1,1,1,2,2,2,2,2,2,10,1,1,2,10,10,2,2,2,10,28,1,29,2,1,2,1,2,1,1,1,1,1,1,2,2,2,2,2,2,2,10,2,30,2,30,29,2,2,1,0,1,2,1,2,10,1,1,1,2,1,1,2,1,1,1,1,1,1,1,2,28,1,1,10,1,1,1,2,2,10,2,10,1,2,10,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26],"f":[0,0,0,0,0,0,0,[1],[1,1],[2,1],[[],3],[[],1],[[[5,[4]]]],[[[5,[4]]],2],[[]],[2,1],[[]],[[]],[[]],[[]],[[]],[2],[2,2],[[]],[[1,1],6],[[2,2],6],[1,7],[[],1],[[],2],[2],[1,7],[[1,1],7],[[1,8],7],[[1,2],7],[[1,2],7],[[1,9],7],[[1,9],7],[[1,1],7],[[2,9],7],[[2,1],7],[[2,1],7],[[2,2],7],[[2,8],7],[[2,8],7],[[10,10],7],[1,[[12,[11]]]],[[1,13],14],[[2,13],14],[[10,13],14],[[10,13],14],[[[15,[1]]],2],[[]],[9,2],[[]],[[],[[16,[3,10]]]],[[],1],[[[5,[4]]],[[16,[10]]]],[[[5,[4]]],2],[8,1],[9,2],[1],[2],[[1,[17,[11]]]],[[1,[18,[11]]]],[[1,[19,[11]]]],[[1,20]],[[1,[21,[11]]]],[[1,[22,[11]]]],[[2,20]],[[2,[17,[11]]]],[[2,[18,[11]]]],[[2,[19,[11]]]],[[2,[21,[11]]]],[[2,[22,[11]]]],[[]],[[]],[2,[[15,[1]]]],[[],[[3,[23]]]],[2,24],[[],3],[[],[[5,[4]]]],[2,[[5,[4]]]],[2,[[16,[9,2]]]],[1,7],0,[23,[[3,[1]]]],[24,2],[[1,1],[[12,[6]]]],[[2,2],[[12,[6]]]],[25],[1,11],[1,[[12,[11]]]],[1,12],[2],[1,26],[[1,11]],[[2,11],2],[1,12],[1,7],[[1,1],7],[1,[[12,[1]]]],[1,[[12,[1]]]],[1,[[3,[23]]]],[1],[[]],[[],3],[1,[[12,[8]]]],[1,[[3,[8]]]],[[],9],[1,1],[1,1],[1,1],[[2,11]],[[],16],[[],16],[[],16],[[],16],[[],27],[[],27],[[],27],0,[[]],[[]],[26,26],[[]],[[26,13],14],[[]],[[]],[[]],[26,12],[26,12],[26,12],[[]],[[],16],[[],16],[[],27]],"p":[[3,"RawOsStr"],[3,"RawOsString"],[4,"Cow"],[15,"u8"],[3,"Vec"],[4,"Ordering"],[15,"bool"],[15,"str"],[3,"String"],[3,"EncodingError"],[15,"usize"],[4,"Option"],[3,"Formatter"],[6,"Result"],[3,"Box"],[4,"Result"],[3,"RangeToInclusive"],[3,"RangeTo"],[3,"RangeInclusive"],[3,"RangeFull"],[3,"RangeFrom"],[3,"Range"],[3,"OsStr"],[3,"OsString"],[3,"Demand"],[3,"Split"],[3,"TypeId"],[8,"OsStrBytes"],[8,"OsStringBytes"],[8,"RawOsStrCow"]]},\
"proc_macro2":{"doc":"github crates-io docs-rs","t":[13,13,13,4,3,13,3,13,13,3,3,13,13,13,3,13,4,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delimiter","eq","eq","eq","eq","extend","extend","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","join","located_at","mixed_site","new","new","new","new","new_raw","partial_cmp","provide","resolved_at","set_span","set_span","set_span","set_span","set_span","spacing","span","span","span","span","span","span","span_close","span_open","stream","string","subspan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","0","0","0","0","IntoIter","TokenStream","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","next","size_hint","to_owned","try_from","try_into","type_id"],"q":["proc_macroproc_macro2::TokenTree","","","","proc_macro2::token_stream","","","","","","","","","","","","","","",""],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;</code> is <code>Joint</code> in <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","A <code>Punct</code> is a single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether a <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","Byte string literal.","The span of the invocation of the current procedural macro.","Character literal.","","","","","","","","","","","","","","","","","","","","","Returns the delimiter of this <code>Group</code>","","","","","","","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","Creates a new suffixed floating-point literal.","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Create a new span encompassing <code>self</code> and <code>other</code>.","Creates a new span with the same name resolution behavior …","The span located at the invocation of the procedural …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","Creates a new span with the same line/column information …","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","Configures the span associated for this literal.","Returns the spacing of this punctuation character, …","","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","Returns the span encompassing this literal.","Returns the span pointing to the closing delimiter of this …","Returns the span pointing to the opening delimiter of this …","Returns the <code>TokenStream</code> of tokens that are delimited in …","String literal.","Returns a <code>Span</code> that is a subset of <code>self.span()</code> containing …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[9,8,8,0,0,6,0,6,9,0,0,6,8,8,0,6,0,0,0,0,1,16,5,4,6,7,8,1,9,10,3,16,5,4,6,7,8,1,9,10,3,3,4,3,5,4,6,7,8,1,9,10,3,5,4,6,7,8,1,9,10,3,10,5,7,8,9,10,10,5,5,3,3,3,3,16,16,5,5,4,6,6,7,7,8,1,1,9,10,10,3,3,16,5,5,5,4,4,6,6,6,6,6,7,8,1,9,10,3,5,5,5,3,10,3,3,3,3,3,3,3,3,3,3,16,5,4,6,7,8,1,9,10,3,5,5,3,3,4,4,4,5,7,1,10,10,10,16,4,6,7,1,10,3,1,16,6,7,1,10,3,7,7,7,3,3,5,4,6,7,8,1,9,10,3,16,5,6,7,1,10,3,0,16,5,4,6,7,8,1,9,10,3,16,5,4,6,7,8,1,9,10,3,16,5,4,6,7,8,1,9,10,3,3,3,3,3,3,3,3,3,3,3,4,3,3,41,42,43,44,0,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],4],[2,3],[5,5],[4,4],[6,6],[7,7],[8,8],[1,1],[9,9],[10,10],[3,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[10,10],11],[[],5],[7,8],[[8,8],12],[[9,9],12],[10,12],[[10,10],12],[[5,13]],[[5,13]],[14,3],[14,3],[15,3],[15,3],[[16,17],18],[[16,17],18],[[5,17],18],[[5,17],18],[[4,17],18],[[6,17],18],[[6,17],18],[[7,17],18],[[7,17],18],[[8,17],18],[[1,17],18],[[1,17],18],[[9,17],18],[[10,17],18],[[10,17],18],[[3,17],18],[[3,17],18],[[]],[19,5],[[]],[6,5],[20,4],[[]],[7,6],[1,6],[3,6],[[]],[10,6],[[]],[[]],[[]],[[]],[[]],[[]],[13,5],[13,5],[21,[[22,[5,16]]]],[21,[[22,[3,16]]]],[10],[23,3],[23,3],[24,3],[24,3],[25,3],[25,3],[26,3],[26,3],[27,3],[27,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,28],[5,12],[29,3],[29,3],[[4,4],[[30,[4]]]],[[4,4],4],[[],4],[[],5],[[8,5],7],[[2,9],1],[[21,4],10],[[21,4],10],[[10,10],[[30,[11]]]],[31],[[4,4],4],[[6,4]],[[7,4]],[[1,4]],[[10,4]],[[3,4]],[1,9],[16,4],[6,4],[7,4],[1,4],[10,4],[3,4],[7,4],[7,4],[7,5],[21,3],[[3,[33,[32]]],[[30,[4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],[[],34],0,[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[36,3],[36,3],[37,3],[37,3],[38,3],[38,3],[39,3],[39,3],[40,3],[40,3],[4,20],[32,3],[32,3],0,0,0,0,0,0,[[]],[[]],[28,28],[[]],[[28,17],18],[[]],[[]],[[]],[28,[[30,[6]]]],[28],[[]],[[],22],[[],22],[[],35]],"p":[[3,"Punct"],[15,"char"],[3,"Literal"],[3,"Span"],[3,"TokenStream"],[4,"TokenTree"],[3,"Group"],[4,"Delimiter"],[4,"Spacing"],[3,"Ident"],[4,"Ordering"],[15,"bool"],[8,"IntoIterator"],[15,"f32"],[15,"f64"],[3,"LexError"],[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[15,"str"],[4,"Result"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"IntoIter"],[15,"isize"],[4,"Option"],[3,"Demand"],[15,"usize"],[8,"RangeBounds"],[3,"String"],[3,"TypeId"],[15,"u128"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"u8"],[13,"Group"],[13,"Ident"],[13,"Punct"],[13,"Literal"]]},\
"proc_macro_error":{"doc":"proc-macro-error","t":[3,8,13,4,16,8,8,16,3,13,11,14,14,5,2,11,11,11,11,11,11,11,11,11,11,14,0,11,14,14,14,14,11,10,10,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,23,2,11,11,11,11,11,10,11,10,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,5,5],"n":["Diagnostic","DiagnosticExt","Error","Level","Ok","OptionExt","ResultExt","Some","SpanRange","Warning","abort","abort","abort_call_site","abort_if_dirty","append_dummy","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_site","clone","clone_into","collapse","diagnostic","dummy","emit","emit_call_site_error","emit_call_site_warning","emit_error","emit_warning","eq","expect_or_abort","expect_or_abort","first","fmt","fmt","fmt","from","from","from","from","from_tokens","help","into","into","into","join_range","last","message","new","note","proc_macro_error","set_dummy","single_span","span","span_error","span_help","span_note","span_range_error","span_range_error","span_range_help","span_range_help","span_range_note","span_range_note","spanned","spanned_range","spanned_range","to_owned","to_tokens","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unwrap_or_abort","append_dummy","set_dummy"],"q":["proc_macro_error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","proc_macro_error::dummy",""],"d":["Represents a single diagnostic message","A collection of methods that do not exist in …","","Represents a diagnostic level","","This traits expands <code>Option</code> with some handy shortcuts.","This traits expands <code>Result&lt;T, Into&lt;Diagnostic&gt;&gt;</code> with some …","","","","Abort the proc-macro’s execution and display the …","Abort proc-macro execution right now and display the error.","Shortcut for <code>abort!(Span::call_site(), msg...)</code>. This macro …","Abort macro execution and display all the emitted errors, …","","","","","","","","Create a <code>SpanRange</code> resolving at call site.","","","Collapse the range into single span, preserving as much …","Build <code>Diagnostic</code> instance from provided arguments.","Facility to emit dummy implementations (or whatever) in …","Display the diagnostic while not aborting macro execution.","Shortcut for <code>emit_error!(Span::call_site(), ...)</code>. This …","Shortcut for <code>emit_warning!(Span::call_site(), ...)</code>.","Emit an error while not aborting the proc-macro right away.","Emit a warning. Warnings are not errors and compilation won…","","Behaves like <code>Result::expect</code>: if self is <code>Ok</code> yield the …","Behaves like <code>Option::expect</code>: if self is <code>Some</code> yield the …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Construct span range from a <code>TokenStream</code>. This method …","Attach a “help” note to your main message.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Join two span ranges. The resulting range will start at …","","The message of main warning/error (no notes attached)","Create a new diagnostic message that points to …","Attach a note to your main message","","","Create a range with the <code>first</code> and <code>last</code> spans being the …","","Add another error message to self such that it will be …","Attach a “help” note to your main message, the note …","Attach a note to your main message, the note will have it…","Add another error message to self such that it will be …","","Attach a “help” note to your main message, the note …","","Attach a note to your main message, the note will have it…","","Create a new diagnostic message that points to the <code>span</code>","Create a new diagnostic message that points to the …","","","","","","","","","","","","","Behaves like <code>Result::unwrap</code>: if self is <code>Ok</code> yield the …","Same as <code>set_dummy</code> but, instead of resetting, appends …","Sets dummy token stream which will be appended to …"],"i":[0,0,5,0,17,0,0,18,0,5,1,0,0,0,0,5,1,3,5,1,3,3,3,3,3,0,0,1,0,0,0,0,5,17,18,3,5,1,3,5,1,1,3,3,1,5,1,3,3,3,1,1,1,0,0,3,1,1,1,1,19,1,19,1,19,1,1,19,1,3,1,5,1,3,5,1,3,5,1,3,17,0,0],"f":[0,0,0,0,0,0,0,0,0,0,[1,2],0,0,[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[3,3],[[]],[3,4],0,0,[1],0,0,0,0,[[5,5],6],[7],[7],0,[[5,8],9],[[1,8],9],[[3,8],9],[[]],[[]],[10,1],[[]],[11,3],[[1,12],1],[[]],[[]],[[]],[[3,3],3],0,[1,7],[[5,12],1],[[1,12],1],0,0,[4,3],[[],4],[[1,4,12],1],[[1,4,12],1],[[1,4,12],1],[[3,12]],[[1,3,12],1],[[3,12]],[[1,3,12],1],[[3,12]],[[1,3,12],1],[[4,5,12],1],[[3,5,12]],[[3,5,12],1],[[]],[[1,13]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[]],[13],[13,[[16,[13]]]]],"p":[[3,"Diagnostic"],[15,"never"],[3,"SpanRange"],[3,"Span"],[4,"Level"],[15,"bool"],[15,"str"],[3,"Formatter"],[6,"Result"],[3,"Error"],[8,"ToTokens"],[3,"String"],[3,"TokenStream"],[4,"Result"],[3,"TypeId"],[4,"Option"],[8,"ResultExt"],[8,"OptionExt"],[8,"DiagnosticExt"]]},\
"proc_macro_error_attr":{"doc":"This is <code>#[proc_macro_error]</code> attribute to be used with …","t":[23],"n":["proc_macro_error"],"q":["proc_macro_error_attr"],"d":[""],"i":[0],"f":[0],"p":[]},\
"quote":{"doc":"github crates-io docs-rs","t":[8,8,8,10,10,10,10,10,14,11,11,14,14,11,11,11,11,10],"n":["IdentFragment","ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","fmt","format_ident","into_token_stream","into_token_stream","quote","quote_spanned","span","span","to_token_stream","to_token_stream","to_tokens"],"q":["quote","","","","","","","","","","","","","","","","",""],"d":["Specialized formatting trait used by <code>format_ident!</code>.","Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Format this value as an identifier fragment.","Formatting macro for constructing <code>Ident</code>s.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Span associated with this <code>IdentFragment</code>.","Span associated with this <code>IdentFragment</code>.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,0,6,6,6,6,7,0,8,8,0,0,7,7,8,8,8],"f":[0,0,0,[[]],[[]],[[]],[[]],[1,2],0,[[],3],[[],3],0,0,[[],[[5,[4]]]],[[],[[5,[4]]]],[[],3],[[],3],[3]],"p":[[3,"Formatter"],[6,"Result"],[3,"TokenStream"],[3,"Span"],[4,"Option"],[8,"TokenStreamExt"],[8,"IdentFragment"],[8,"ToTokens"]]},\
"strsim":{"doc":"This library implements string similarity metrics.","t":[13,6,4,11,11,5,11,11,11,11,5,5,5,5,5,5,11,5,5,5,5,5,5,11,5,11,11,11,11],"n":["DifferentLengthArgs","HammingResult","StrSimError","borrow","borrow_mut","damerau_levenshtein","eq","fmt","fmt","from","generic_damerau_levenshtein","generic_hamming","generic_jaro","generic_jaro_winkler","generic_levenshtein","hamming","into","jaro","jaro_winkler","levenshtein","normalized_damerau_levenshtein","normalized_levenshtein","osa_distance","provide","sorensen_dice","to_string","try_from","try_into","type_id"],"q":["strsim","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","Like optimal string alignment, but substrings can be …","","","","Returns the argument unchanged.","Like optimal string alignment, but substrings can be …","Calculates the number of positions in the two sequences …","Calculates the Jaro similarity between two sequences. The …","Like Jaro but gives a boost to sequences that have a …","Calculates the minimum number of insertions, deletions, …","Calculates the number of positions in the two strings …","Calls <code>U::from(self)</code>.","Calculates the Jaro similarity between two strings. The …","Like Jaro but gives a boost to strings that have a common …","Calculates the minimum number of insertions, deletions, …","Calculates a normalized score of the Damerau–Levenshtein …","Calculates a normalized score of the Levenshtein algorithm …","Like Levenshtein but allows for adjacent transpositions. …","","Calculates a Sørensen-Dice similarity distance using …","","","",""],"i":[3,0,0,3,3,0,3,3,3,3,0,0,0,0,0,0,3,0,0,0,0,0,0,3,0,3,3,3,3],"f":[0,0,0,[[]],[[]],[[1,1],2],[[3,3],4],[[3,5],[[7,[6]]]],[[3,5],8],[[]],[[],2],[[],9],[[],10],[[],10],[[],2],[[1,1],9],[[]],[[1,1],10],[[1,1],10],[[1,1],2],[[1,1],10],[[1,1],10],[[1,1],2],[11],[[1,1],10],[[],12],[[],7],[[],7],[[],13]],"p":[[15,"str"],[15,"usize"],[4,"StrSimError"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[6,"HammingResult"],[15,"f64"],[3,"Demand"],[3,"String"],[3,"TypeId"]]},\
"syn":{"doc":"github crates-io docs-rs","tn":["Abi","Add","AddEq","And","AngleBracketed","AngleBracketedGenericArguments","Arm","Array","Array","Assign","AssignOp","Async","AttrStyle","Attribute","AttributeArgs","Await","BareFn","BareFnArg","BinOp","Binary","Binding","Binding","BitAnd","BitAndEq","BitOr","BitOrEq","BitXor","BitXorEq","Block","Block","Bool","BoundLifetimes","Box","Box","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closed","Closure","Const","Const","Const","Const","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Crate","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivEq","Enum","Enum","Eq","Eq","Error","Expr","Expr","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprAwait","ExprBinary","ExprBlock","ExprBox","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprIndex","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","ExprUnsafe","ExprWhile","ExprYield","ExternCrate","Field","Field","FieldPat","FieldValue","Fields","FieldsNamed","FieldsUnnamed","File","Float","Fn","Fn","FnArg","ForLoop","ForeignItem","ForeignItemFn","ForeignItemMacro","ForeignItemStatic","ForeignItemType","ForeignMod","Ge","GenericArgument","GenericMethodArgument","GenericParam","Generics","Glob","Group","Group","Group","Gt","HalfOpen","Ident","Ident","If","Impl","ImplGenerics","ImplItem","ImplItemConst","ImplItemMacro","ImplItemMethod","ImplItemType","ImplTrait","Index","Index","Infer","Inherited","Inner","Int","Item","Item","ItemConst","ItemEnum","ItemExternCrate","ItemFn","ItemForeignMod","ItemImpl","ItemMacro","ItemMacro2","ItemMod","ItemStatic","ItemStruct","ItemTrait","ItemTraitAlias","ItemType","ItemUnion","ItemUse","Label","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeDef","List","Lit","Lit","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","Local","Local","Loop","Lt","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro","Macro2","MacroDelimiter","Match","Maybe","Member","Meta","Meta","MetaList","MetaNameValue","Method","Method","MethodCall","MethodTurbofish","Mod","Mul","MulEq","Name","NameValue","Named","Named","Ne","Neg","NestedMeta","Never","None","None","Not","Or","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Pat","PatBox","PatIdent","PatLit","PatMacro","PatOr","PatPath","PatRange","PatReference","PatRest","PatSlice","PatStruct","PatTuple","PatTupleStruct","PatType","PatWild","Path","Path","Path","Path","Path","Path","PathArguments","PathSegment","PredicateEq","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Range","RangeLimits","Raw","Receiver","Receiver","Reference","Reference","Reference","Rem","RemEq","Rename","Repeat","Rest","Restricted","Result","Return","ReturnType","Semi","Shl","ShlEq","Shr","ShrEq","Signature","Slice","Slice","Static","Static","Stmt","Str","StrStyle","Struct","Struct","Struct","Struct","Sub","SubEq","Token","Trait","Trait","TraitAlias","TraitBound","TraitBoundModifier","TraitItem","TraitItemConst","TraitItemMacro","TraitItemMethod","TraitItemType","TraitObject","Try","TryBlock","Tuple","Tuple","Tuple","TupleStruct","Turbofish","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","Typed","UnOp","Unary","Union","Union","Unit","Unnamed","Unnamed","Unsafe","Use","UseGlob","UseGroup","UseName","UsePath","UseRename","UseTree","Variadic","Variant","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","Verbatim","VisCrate","VisPublic","VisRestricted","Visibility","WhereClause","WherePredicate","While","Wild","Yield","abi","abi","abi","and_token","and_token","and_token","apostrophe","args","args","args","args","arguments","arms","as_token","as_token","as_token","as_turbofish","async_token","asyncness","asyncness","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","auto_token","await_token","bang_token","bang_token","base","base","base10_digits","base10_digits","base10_parse","base10_parse","block","block","block","block","block","block","body","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","bounds","box_token","box_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","break_token","buffer","by_ref","capture","capture","cases","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon2_token","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","comma","cond","cond","const_params","const_params_mut","const_token","const_token","const_token","const_token","const_token","constness","content","continue_token","crate_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","default","default","default","defaultness","defaultness","defaultness","defaultness","delimiter","discriminant","dot2_token","dot2_token","dot2_token","dot_token","dot_token","dot_token","dots","dyn_token","elem","elem","elem","elem","elem","elem","elems","elems","elems","elems","elems","else_branch","enum_token","enum_token","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","expr","ext","extern_token","extern_token","fat_arrow_token","fields","fields","fields","fields","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","fn_token","for_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","generics","get_ident","group_token","group_token","gt_token","gt_token","gt_token","gt_token","gt_token","guard","hash","hash","hash","hash","hi","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","if_token","impl_token","impl_token","in_token","in_token","index","index","init","inputs","inputs","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","is_empty","is_empty","is_ident","items","items","items","items","items","iter","iter_mut","label","label","label","label","label","label","leading_colon","leading_colon","leading_vert","left","left","left","len","len","len","let_token","let_token","lhs_ty","lifetime","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","limits","limits","lit","lit","lo","loop_token","lt_token","lt_token","lt_token","lt_token","lt_token","mac","mac","mac","mac","mac","mac","mac","macro_token","make_where_clause","match_token","member","member","member","method","mod_token","modifier","movability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","mutability","name","name","name","named","nested","new","new","new","new","new","new","new","new","new","new","new","new_raw","op","op","op","or1_token","or2_token","output","output","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_args","parse_args_with","parse_body","parse_body_with","parse_file","parse_inner","parse_macro_input","parse_meta","parse_mod_style","parse_named","parse_outer","parse_quote","parse_quote_spanned","parse_str","parse_unnamed","parse_with","parse_within","parse_without_eager_brace","partial_cmp","partial_cmp","pat","pat","pat","pat","pat","pat","pat","pat","pat","path","path","path","path","path","path","path","path","path","path","path","path","path","position","pound_token","predicates","pub_token","pub_token","punctuated","qself","qself","qself","question_token","raw","receiver","receiver","reference","rename","rename","rest","return_token","rhs_ty","right","right","right","rules","segments","self_token","self_ty","semi","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","shebang","sig","sig","sig","sig","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","star_token","static_token","static_token","stmts","struct_token","struct_token","style","subpat","suffix","suffix","suffix","suffix","suffix","suffix","suffix","supertraits","then_branch","to","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","token","token","token","token","token","token","tokens","tokens","trait_","trait_token","trait_token","tree","tree","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_token","turbofish","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","type_token","type_token","type_token","type_token","underscore_token","underscore_token","union_token","union_token","unnamed","unraw","unsafe_token","unsafety","unsafety","unsafety","unsafety","use_token","value","value","value","value","value","value","variadic","variadic","variants","variants","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","vis","where_clause","where_token","while_token","without_plus","without_plus","without_plus","without_plus","yield_tokenursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","drop","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","new","new2","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","Error","Lookahead1","Nothing","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","advance_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","combine","cursor","deref","discouraged","drop","error","error","error","extend","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","from","into","into","into","into","into","into_compile_error","into_iter","into_iter","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse","parse2","parse_str","parse_terminated","peek","peek","peek2","peek3","provide","span","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","Speculative","advance_to","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","empty_or_trailing","extend","extend","first","first_mut","from","from","from","from","from","from","from","from","from_iter","from_iter","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","punct","punct_mut","push","push_punct","push_value","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","0","0","1","Spanned","span","Abstract","Add","AddEq","And","AndAnd","AndEq","As","Async","At","Auto","Await","Bang","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Colon2","Comma","Const","Continue","Crate","Default","Div","DivEq","Do","Dollar","Dot","Dot2","Dot3","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Mod","Move","MulEq","Mut","Ne","Or","OrEq","OrOr","Override","Paren","Pound","Priv","Pub","Question","RArrow","Ref","Rem","RemEq","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Star","Static","Struct","Sub","SubEq","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["synsyn::AttrStyle","syn::BinOp","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::Data","","","syn::Expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::Fields","","syn::FnArg","","syn::ForeignItem","","","","","syn::GenericArgument","","","","","syn::GenericMethodArgument","","syn::GenericParam","","","syn::ImplItem","","","","","syn::Item","","","","","","","","","","","","","","","","","syn::Lit","","","","","","","","syn::MacroDelimiter","","","syn::Member","","syn::Meta","","","syn::NestedMeta","","syn::Pat","","","","","","","","","","","","","","","","syn::PathArguments","","syn::RangeLimits","","syn::ReturnType","","syn::Stmt","","","","","syn::StrStyle","syn::TraitBoundModifier","syn::TraitItem","","","","","syn::Type","","","","","","","","","","","","","","","syn::TypeParamBound","","syn::UnOp","","","syn::UseTree","","","","","syn::Visibility","","","syn::WherePredicate","","","syn::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::ext","","","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::parse::discouraged","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::punctuated::Pair","","","syn::spanned","","syn::tokend":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","One arm of a <code>match</code> expression: <code>0...10 =&gt; { return true; }</code>.","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute like <code>#[repr(transparent)]</code>.","Conventional argument type associated with an invocation …","An await expression: <code>fut.await</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A binding (equality constraint) on an associated type: …","A binding (equality constraint) on an associated type: the …","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A braced block containing Rust statements.","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","A box expression: <code>box f</code>.","A box pattern: <code>box v</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","Inclusive at the beginning and end.","A closure expression: <code>|a, b| a + b</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","A constant item: <code>const MAX: u16 = 65535</code>.","An associated constant within the definition of a trait.","An associated constant within an impl block.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","A crate-level visibility: <code>crate</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","An untagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An enum input to a <code>proc_macro_derive</code> macro.","An equality predicate in a <code>where</code> clause (unsupported).","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","Expr without trailing semicolon.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","An await expression: <code>fut.await</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A single field in a struct pattern.","A field-value pair in a struct literal.","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A complete file of Rust source code.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","A free-standing function: …","A foreign function in an <code>extern</code> block.","An argument in a function signature: the <code>n: usize</code> in …","A for loop: <code>for pat in expr { ... }</code>.","An item within an <code>extern</code> block.","A foreign function in an <code>extern</code> block.","A macro invocation within an extern block.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A foreign type in an <code>extern</code> block: <code>type void</code>.","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","An individual generic argument to a method, like <code>T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","A glob import in a <code>use</code> item: <code>*</code>.","An expression contained within invisible delimiters.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","Inclusive at the beginning, exclusive at the end.","A word of Rust code, which may be a keyword or legal …","A pattern that binds a new variable: …","An <code>if</code> expression with an optional <code>else</code> block: …","An impl block providing trait or associated items: …","Returned by <code>Generics::split_for_impl</code>.","An item within an impl block.","An associated constant within an impl block.","A macro invocation within an impl block.","A method within an impl block.","An associated type within an impl block.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","Things that can appear directly inside of a module or …","An item definition.","A constant item: <code>const MAX: u16 = 65535</code>.","An enum definition: <code>enum Foo&lt;A, B&gt; { A(A), B(B) }</code>.","An <code>extern crate</code> item: <code>extern crate serde</code>.","A free-standing function: …","A block of foreign items: <code>extern &quot;C&quot; { ... }</code>.","An impl block providing trait or associated items: …","A macro invocation, which includes <code>macro_rules!</code> …","A 2.0-style declarative macro introduced by the <code>macro</code> …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A type alias: …","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A lifetime labeling a <code>for</code>, <code>while</code>, or <code>loop</code>.","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A Rust literal, like the <code>&quot;new_name&quot;</code> in …","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A literal pattern: <code>0</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","A local <code>let</code> binding: <code>let x: u64 = s.parse()?</code>.","A local (let) binding.","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro invocation, which includes <code>macro_rules!</code> …","A macro invocation within an extern block.","A macro invocation within the definition of a trait.","A macro invocation within an impl block.","A macro in the type position.","A macro in pattern position.","A 2.0-style declarative macro introduced by the <code>macro</code> …","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A trait method within the definition of a trait.","A method within an impl block.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>::&lt;&gt;</code> explicit type parameters passed to a method call: …","A module or module declaration: <code>mod m</code> or <code>mod m { ... }</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","Element of a compile-time attribute list.","The never type: <code>!</code>.","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","A pattern that matches any one of a set of cases.","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A pattern in a local binding, function signature, match …","A box pattern: <code>box v</code>.","A pattern that binds a new variable: …","A literal pattern: <code>0</code>.","A macro in pattern position.","A pattern that matches any one of a set of cases.","A path pattern like <code>Color::Red</code>, optionally qualified with a","A range pattern: <code>1..=2</code>.","A reference pattern: <code>&amp;mut var</code>.","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","A type ascription pattern: <code>foo: f64</code>.","A pattern that matches any value: <code>_</code>.","A path at which a named item is exported (e.g. …","","A path like <code>std::mem::replace</code> possibly containing generic …","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A path pattern like <code>Color::Red</code>, optionally qualified with a","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","An equality predicate in a <code>where</code> clause (unsupported).","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A range pattern: <code>1..=2</code>.","Limit types of a range, inclusive or exclusive.","A raw string like <code>r##&quot;data&quot;##</code>.","The <code>self</code> argument of an associated method, whether taken …","The <code>self</code> argument of an associated method, whether taken …","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A reference pattern: <code>&amp;mut var</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An renamed identifier imported by a <code>use</code> item: …","An array literal constructed from one repeated element: …","The dots in a tuple or slice pattern: <code>[0, 1, ..]</code>","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","Expression with trailing semicolon.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A function signature in a trait or implementation: …","A dynamically sized slice type: <code>[T]</code>.","A dynamically sized slice pattern: <code>[a, b, ref i @ .., y, z]</code>…","A static item: <code>static BIKE: Shed = Shed(42)</code>.","A foreign static item in an <code>extern</code> block: <code>static ext: u8</code>.","A statement, usually ending in a semicolon.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct definition: <code>struct Foo&lt;A&gt; { x: A }</code>.","A struct input to a <code>proc_macro_derive</code> macro.","A struct or struct variant pattern: <code>Variant { x, y, .. }</code>.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait definition: <code>pub trait Iterator { ... }</code>.","A trait alias: <code>pub trait SharableIterator = Iterator + Sync</code>…","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","An item declaration within the definition of a trait.","An associated constant within the definition of a trait.","A macro invocation within the definition of a trait.","A trait method within the definition of a trait.","An associated type within the definition of a trait.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","A tuple pattern: <code>(a, b)</code>.","A tuple struct or tuple variant pattern: …","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A type ascription expression: <code>foo: f64</code>.","A type argument.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A type alias: …","A foreign type in an <code>extern</code> block: <code>type void</code>.","An associated type within the definition of a trait.","An associated type within an impl block.","A particular type is returned.","A type ascription pattern: <code>foo: f64</code>.","A type argument.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>dyn Bound1 + Bound2 + Bound3</code> where …","A tuple type: <code>(A, B, C, String)</code>.","A function argument accepted by pattern and type.","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","A union definition: <code>union Foo&lt;A, B&gt; { x: A, y: B }</code>.","An untagged union input to a <code>proc_macro_derive</code> macro.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","A use declaration: <code>use std::collections::HashMap</code>.","A glob import in a <code>use</code> item: <code>*</code>.","A braced group of imports in a <code>use</code> item: <code>{A, B, C}</code>.","An identifier imported by a <code>use</code> item: <code>HashMap</code>.","A path prefix of imports in a <code>use</code> item: <code>std::...</code>.","An renamed identifier imported by a <code>use</code> item: …","A suffix of an import tree in a <code>use</code> item: <code>Type as Renamed</code> …","The variadic argument of a foreign function.","An enum variant.","Tokens in expression position not interpreted by Syn.","Tokens forming an item not interpreted by Syn.","Tokens in an <code>extern</code> block not interpreted by Syn.","Tokens within the definition of a trait not interpreted by …","Tokens within an impl block not interpreted by Syn.","A raw token literal not interpreted by Syn.","Tokens in type position not interpreted by Syn.","Tokens in pattern position not interpreted by Syn.","A crate-level visibility: <code>crate</code>.","A public visibility level: <code>pub</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","A pattern that matches any value: <code>_</code>.","A yield expression: <code>yield expr</code>.","","","","","","","","","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","","","","Attributes tagged on the variant.","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attributes tagged on the whole struct or enum.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses the literal into a selected number typehe type being bounded","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","","","","","","","","","","","","","","Parse a set of curly braces and expose their content to …","","","","","","","","Parse a set of square brackets and expose their content to …","","A stably addressed token buffer supporting efficient …he colon in <code>Struct { x: x }</code>. If written in shorthand like …","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","","","","","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","Data within the struct or enum.","","","","","","","","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Value of the field.","","","","","Extension traits to provide parsing methods on foreign …","","","","Content stored in the variant.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Generics required to complete the definition.","If this path consists of a single ident, returns the ident.","","","","","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","","","","The <code>example</code> in <code>macro_rules! example { ... }</code>.","","","","","","","","","","","","","","","","","","","Name of the struct or enum.","","","","","","","","","","","","","","","","<code>(A, B)</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if there are zero fields.","","Determines whether this is a path of length 1 equal to the …","","","","","","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","","","","","","","","","","","Returns the number of fields.","","","","","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeDef&gt; over the lifetime …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeDef&gt; over the …","","","","","","","","","","","","","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","Name or index of the field.","","","","","","","","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","Panics","","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","Same as <code>Ident::new</code>, but creates a raw identifier (<code>r#ident</code>…","","","","","","","","","<code>C</code>","","","","","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parse the arguments to the attribute as a syntax tree.","Parse the arguments to the attribute using the given …","Parse the tokens within the macro invocation’s …","Parse the tokens within the macro invocation’s …","Parse the content of a file of Rust code.","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parses the content of the attribute, consisting of the …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","This macro is <code>parse_quote!</code> + <code>quote_spanned!</code>.","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","Parse the body of a block as zero or more statements, …","An alternative to the primary <code>Expr::parse</code> parser (from the …","","","","","","","","","","","","Returns the identifier that begins this structured meta …","","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","A method’s <code>self</code> receiver, such as <code>&amp;self</code> or …","","","","","","","","","","","","","","The Self type of the impl.","","","","","","","","","","","","","","","","","","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","","","","","","","","","","Returns the span of this <code>Ident</codetrait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…","","","","","Statements in a blockokens representing Rust punctuation, keywords, and …","","","","","","","","","","Trait this impl implementsype of the fieldeturns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","","","","","","","","","","","","","Visibility of the field.","","","","","","","","","","","","","","","","","","","","Visibility of the struct or enum.","","","","In some positions, types may not contain the <code>+</code> character, …cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","If the cursor is pointing at a <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","An empty syntax tree node that consumes no tokens when …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Add another error message to self such that when …","Provides low-level access to the token representation …","","Extensions to the parsing API with niche applicability.","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","","Forks a parse stream so that parsing tokens out of either …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Render the error as an invocation of <code>compile_error!</code>.","","","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","","Returns the <code>Span</code> of the next token in the parse stream, or …","The source location of the error.","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","","","Extensions to the <code>ParseStream</code> API to support speculative …","Advance this parse stream to the position of a forked …","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","","","","","","","","","","","","","","","","","","Clears the sequence of all values and punctuation, making …","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","Borrows the first element in this sequence.","Mutably borrows the first element in this sequence.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last element in this sequence.","Mutably borrows the last element in this sequence.","Returns the number of syntax tree nodes in this punctuated …","","","","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Borrows the punctuation from this punctuated pair, unless …","Mutably borrows the punctuation from this punctuated pair, …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","","","","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>+</code>","<code>+=</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>await</code>","<code>!</code>","<code>become</code>","<code>box</code>","<code>{...}</code>","<code>[...]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>::</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>/</code>","<code>/=</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>mod</code>","<code>move</code>","<code>*=</code>","<code>mut</code>","<code>!=</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(...)</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>%</code>","<code>%=</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>*</code>","<code>static</code>","<code>struct</code>","<code>-</code>","<code>-=</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codei":[0,142,142,142,185,0,0,25,147,25,25,25,0,0,0,25,147,0,0,25,0,186,142,142,142,142,142,142,0,25,129,0,25,166,136,136,25,129,129,25,25,129,72,25,68,74,87,115,120,186,0,0,186,25,337,21,0,0,0,0,165,143,0,142,142,87,138,83,142,0,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,25,0,0,0,0,0,0,129,87,110,0,25,0,0,0,0,0,87,142,0,0,0,0,104,25,104,147,142,72,0,166,25,87,0,0,0,0,0,0,147,0,25,147,21,11,129,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,25,0,74,79,83,186,0,12,0,15,25,166,0,0,0,0,0,0,0,0,145,25,142,0,25,87,110,115,120,147,166,87,0,25,81,0,0,15,0,0,115,120,25,0,87,142,142,104,12,17,65,142,143,0,147,81,185,143,142,166,11,25,136,147,185,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,25,104,147,166,0,0,0,0,0,147,21,0,25,166,0,337,0,126,25,147,166,142,142,104,25,166,21,0,25,0,145,142,142,142,142,0,147,166,87,110,0,129,0,25,87,138,166,142,142,0,79,87,87,0,0,0,0,0,0,0,147,25,25,25,147,166,166,0,0,25,68,74,83,87,110,115,120,165,166,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,0,25,87,138,17,17,65,25,87,0,0,0,0,0,0,0,0,25,87,110,115,120,129,147,166,0,0,0,0,0,0,25,166,25,92,125,149,53,158,174,9,35,49,67,187,184,48,36,107,191,1,29,37,125,16,20,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,69,71,75,76,77,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,111,112,113,114,116,117,118,119,121,122,123,124,127,128,137,146,163,164,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,99,30,135,154,30,39,3,5,3,5,29,32,58,62,91,122,37,40,46,63,71,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,84,75,76,84,85,100,118,151,160,189,33,167,18,48,56,89,92,93,99,109,140,144,177,0,10,26,43,54,148,159,176,0,34,0,168,29,37,171,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,9,67,105,187,20,60,69,70,75,76,77,84,85,88,97,99,112,116,118,121,180,182,189,71,42,63,73,73,77,88,116,121,157,125,96,38,23,90,0,0,137,73,78,185,75,77,116,117,118,93,121,122,123,135,16,56,175,177,30,39,49,164,160,148,150,155,157,158,159,26,59,161,176,178,42,89,140,7,7,9,65,66,14,27,44,75,77,86,88,97,100,101,121,123,188,33,34,36,40,41,43,44,48,50,53,54,55,57,60,61,64,69,88,97,121,169,0,90,162,71,16,56,98,102,139,141,177,7,7,7,9,65,66,3,5,125,149,40,78,7,7,7,7,7,7,7,8,1,2,9,10,11,12,12,12,12,13,14,15,15,15,16,17,17,17,18,19,20,21,21,21,21,22,23,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,65,65,66,66,67,68,69,70,71,72,73,74,74,74,74,75,75,76,77,78,79,79,79,80,81,82,83,83,83,83,84,85,86,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,104,104,104,104,104,105,106,107,108,109,110,110,110,110,110,111,112,113,114,115,115,115,115,115,116,117,118,119,120,120,120,120,120,121,122,123,124,125,126,126,126,127,128,129,129,129,129,129,129,129,129,130,131,132,133,3,3,5,5,134,337,135,136,137,137,137,137,138,138,138,138,139,140,141,142,143,144,145,146,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,183,184,184,185,186,187,188,189,190,191,52,35,89,93,98,99,100,101,102,118,123,125,137,183,41,150,67,73,78,187,191,71,7,9,65,66,173,9,16,20,75,77,88,89,90,94,95,96,97,98,99,100,101,102,105,106,107,112,113,116,118,121,123,125,137,168,184,188,189,42,93,151,24,40,43,66,146,37,125,149,190,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,17,17,17,17,185,183,92,93,99,109,128,17,17,32,34,38,40,46,63,103,183,171,27,28,31,17,54,148,44,146,86,127,76,85,158,73,78,80,84,149,73,52,173,14,45,173,46,67,73,78,187,191,47,94,114,119,124,153,170,95,73,48,39,69,182,49,96,80,37,53,97,112,127,157,158,168,174,70,162,163,18,13,7,9,76,129,130,131,132,133,3,5,134,7,28,31,61,37,37,37,125,149,190,73,13,19,24,35,49,50,59,80,125,149,155,161,178,190,0,0,0,7,9,12,13,14,15,16,18,19,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,130,131,132,133,3,5,134,135,137,142,143,144,145,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,183,184,186,187,188,189,190,0,7,10,10,135,135,0,10,0,10,183,20,10,0,0,0,20,130,144,25,7,9,40,44,71,146,167,174,179,180,182,12,10,13,14,24,51,56,80,135,156,172,177,179,191,10,82,22,24,0,51,156,172,57,53,125,49,127,90,107,56,55,86,27,28,31,95,183,127,93,96,54,88,90,94,97,98,100,101,103,111,112,113,114,116,117,118,119,121,123,124,139,146,148,7,9,129,130,131,132,133,3,5,134,128,91,111,117,122,7,7,7,8,1,2,9,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,65,66,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,129,130,130,131,131,132,132,133,133,3,3,5,5,134,134,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,66,134,0,73,108,157,97,112,144,98,139,10,168,129,130,131,132,133,3,5,99,42,52,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,9,3,5,7,8,1,2,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,0,130,131,132,133,3,5,134,10,135,93,99,100,103,105,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,58,49,20,36,60,77,88,97,101,112,116,121,123,163,180,188,191,7,8,1,2,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,3,5,134,337,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,73,73,101,113,118,123,152,181,102,141,19,7,62,93,99,125,149,103,130,131,132,133,134,134,125,149,89,140,20,88,89,90,91,95,96,97,98,99,100,101,102,103,111,112,113,121,122,123,137,73,82,63,147,151,160,165,64,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,489,490,491,492,493,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,0,0,220,220,221,220,221,221,221,220,221,221,221,220,221,221,221,220,221,221,221,220,220,221,221,221,221,221,220,221,220,221,220,221,0,532,532,532,0,0,0,216,0,0,0,0,0,0,0,223,226,223,224,231,225,226,223,224,231,225,223,224,225,224,225,225,223,224,0,223,226,223,224,225,223,223,225,225,223,226,223,224,231,225,225,226,223,224,231,225,225,225,225,223,223,225,225,213,223,216,231,216,216,223,226,223,223,223,225,223,225,223,225,224,225,223,225,226,223,224,231,225,226,223,224,231,225,226,223,224,231,225,0,533,238,0,0,0,0,0,0,0,0,238,232,235,239,236,237,207,208,238,232,235,239,236,237,207,208,238,232,232,235,236,237,207,238,232,235,236,237,207,238,232,232,232,232,232,232,232,235,239,236,237,207,208,238,232,232,232,232,232,232,235,239,236,237,207,208,238,232,232,232,235,239,236,237,207,208,232,238,238,232,232,232,232,232,232,235,239,236,237,207,208,232,238,235,239,236,237,207,208,235,239,236,237,207,208,232,232,232,232,232,232,232,238,238,232,232,232,235,239,236,237,207,208,232,238,232,235,236,237,207,238,232,238,232,232,235,239,236,237,207,208,238,232,235,239,236,237,207,208,238,232,235,239,236,237,207,208,238,238,238,534,535,534,0,536,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,199,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,201,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,200,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,199,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,201,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,200,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,199,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,201,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,200,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,199,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,201,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,200,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,199,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,201,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,200,287,289,292,293,294,296,298,299,301,302,306,309,311,314,317,318,321,324,329,330,332,200,287,289,292,293,294,296,298,299,301,302,306,309,311,314,317,318,321,324,329,330,332,200,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,199,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,201,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,200,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,199,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,201,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,200,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,199,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,201,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,200,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,199,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,201,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,199,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,201,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,333,334,335,336,200,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,200,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,199,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,201,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,200,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,199,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,201,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,200,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,199,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,201,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,200,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,199,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,201,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,200,240,241,242,243,244,245,246,247,248,249,202,250,251,252,253,254,199,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,203,201,273,274,198,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336],"fp":[[3,"TypeGenerics"],[3,"Turbofish"],[3,"LitInt"],[15,"str"],[3,"LitFloat"],[6,"Result"],[3,"Ident"],[3,"ImplGenerics"],[3,"Lifetime"],[3,"Attribute"],[4,"AttrStyle"],[4,"Meta"],[3,"MetaList"],[3,"MetaNameValue"],[4,"NestedMeta"],[3,"Variant"],[4,"Fields"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"Field"],[4,"Visibility"],[3,"VisPublic"],[3,"VisCrate"],[3,"VisRestricted"],[4,"Expr"],[3,"ExprArray"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprAsync"],[3,"ExprAwait"],[3,"ExprBinary"],[3,"ExprBlock"],[3,"ExprBox"],[3,"ExprBreak"],[3,"ExprCall"],[3,"ExprCast"],[3,"ExprClosure"],[3,"ExprContinue"],[3,"ExprField"],[3,"ExprForLoop"],[3,"ExprGroup"],[3,"ExprIf"],[3,"ExprIndex"],[3,"ExprLet"],[3,"ExprLit"],[3,"ExprLoop"],[3,"ExprMacro"],[3,"ExprMatch"],[3,"ExprMethodCall"],[3,"ExprParen"],[3,"ExprPath"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprRepeat"],[3,"ExprReturn"],[3,"ExprStruct"],[3,"ExprTry"],[3,"ExprTryBlock"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprUnary"],[3,"ExprUnsafe"],[3,"ExprWhile"],[3,"ExprYield"],[4,"Member"],[3,"Index"],[3,"MethodTurbofish"],[4,"GenericMethodArgument"],[3,"FieldValue"],[3,"Label"],[3,"Arm"],[4,"RangeLimits"],[3,"Generics"],[4,"GenericParam"],[3,"TypeParam"],[3,"LifetimeDef"],[3,"ConstParam"],[3,"BoundLifetimes"],[4,"TypeParamBound"],[3,"TraitBound"],[4,"TraitBoundModifier"],[3,"WhereClause"],[4,"WherePredicate"],[3,"PredicateType"],[3,"PredicateLifetime"],[3,"PredicateEq"],[4,"Item"],[3,"ItemConst"],[3,"ItemEnum"],[3,"ItemExternCrate"],[3,"ItemFn"],[3,"ItemForeignMod"],[3,"ItemImpl"],[3,"ItemMacro"],[3,"ItemMacro2"],[3,"ItemMod"],[3,"ItemStatic"],[3,"ItemStruct"],[3,"ItemTrait"],[3,"ItemTraitAlias"],[3,"ItemType"],[3,"ItemUnion"],[3,"ItemUse"],[4,"UseTree"],[3,"UsePath"],[3,"UseName"],[3,"UseRename"],[3,"UseGlob"],[3,"UseGroup"],[4,"ForeignItem"],[3,"ForeignItemFn"],[3,"ForeignItemStatic"],[3,"ForeignItemType"],[3,"ForeignItemMacro"],[4,"TraitItem"],[3,"TraitItemConst"],[3,"TraitItemMethod"],[3,"TraitItemType"],[3,"TraitItemMacro"],[4,"ImplItem"],[3,"ImplItemConst"],[3,"ImplItemMethod"],[3,"ImplItemType"],[3,"ImplItemMacro"],[3,"Signature"],[4,"FnArg"],[3,"Receiver"],[3,"File"],[4,"Lit"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitBool"],[3,"Macro"],[4,"MacroDelimiter"],[3,"DeriveInput"],[4,"Data"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[4,"BinOp"],[4,"UnOp"],[3,"Block"],[4,"Stmt"],[3,"Local"],[4,"Type"],[3,"TypeArray"],[3,"TypeBareFn"],[3,"TypeGroup"],[3,"TypeImplTrait"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeNever"],[3,"TypeParen"],[3,"TypePath"],[3,"TypePtr"],[3,"TypeReference"],[3,"TypeSlice"],[3,"TypeTraitObject"],[3,"TypeTuple"],[3,"Abi"],[3,"BareFnArg"],[3,"Variadic"],[4,"ReturnType"],[4,"Pat"],[3,"PatBox"],[3,"PatIdent"],[3,"PatLit"],[3,"PatMacro"],[3,"PatOr"],[3,"PatPath"],[3,"PatRange"],[3,"PatReference"],[3,"PatRest"],[3,"PatSlice"],[3,"PatStruct"],[3,"PatTuple"],[3,"PatTupleStruct"],[3,"PatType"],[3,"PatWild"],[3,"FieldPat"],[3,"Path"],[3,"PathSegment"],[4,"PathArguments"],[4,"GenericArgument"],[3,"AngleBracketedGenericArguments"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[3,"QSelf"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[3,"Super"],[3,"Extern"],[3,"Underscore"],[3,"SelfValue"],[3,"Crate"],[3,"SelfType"],[15,"usize"],[3,"Literal"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"Span"],[15,"u8"],[15,"char"],[3,"TokenStream"],[8,"Parse"],[6,"ParseStream"],[3,"TokenStream"],[8,"Parser"],[3,"Vec"],[3,"String"],[3,"TypeId"],[3,"TokenBuffer"],[3,"Cursor"],[4,"Delimiter"],[3,"ParseBuffer"],[3,"StepCursor"],[3,"Error"],[3,"Lookahead1"],[8,"Display"],[8,"IntoIterator"],[3,"LexError"],[8,"ToTokens"],[3,"Nothing"],[3,"Punctuated"],[8,"Peek"],[3,"Demand"],[3,"Pairs"],[3,"IntoPairs"],[3,"IntoIter"],[4,"Pair"],[3,"PairsMut"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Await"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"Static"],[3,"Struct"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[4,"StrStyle"],[13,"Inner"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Div"],[13,"Rem"],[13,"And"],[13,"Or"],[13,"BitXor"],[13,"BitAnd"],[13,"BitOr"],[13,"Shl"],[13,"Shr"],[13,"Eq"],[13,"Lt"],[13,"Le"],[13,"Ne"],[13,"Ge"],[13,"Gt"],[13,"AddEq"],[13,"SubEq"],[13,"MulEq"],[13,"DivEq"],[13,"RemEq"],[13,"BitXorEq"],[13,"BitAndEq"],[13,"BitOrEq"],[13,"ShlEq"],[13,"ShrEq"],[13,"Struct"],[13,"Enum"],[13,"Union"],[13,"Array"],[13,"Assign"],[13,"AssignOp"],[13,"Async"],[13,"Await"],[13,"Binary"],[13,"Block"],[13,"Box"],[13,"Break"],[13,"Call"],[13,"Cast"],[13,"Closure"],[13,"Continue"],[13,"Field"],[13,"ForLoop"],[13,"Group"],[13,"If"],[13,"Index"],[13,"Let"],[13,"Lit"],[13,"Loop"],[13,"Macro"],[13,"Match"],[13,"MethodCall"],[13,"Paren"],[13,"Path"],[13,"Range"],[13,"Reference"],[13,"Repeat"],[13,"Return"],[13,"Struct"],[13,"Try"],[13,"TryBlock"],[13,"Tuple"],[13,"Type"],[13,"Unary"],[13,"Unsafe"],[13,"Verbatim"],[13,"While"],[13,"Yield"],[13,"Named"],[13,"Unnamed"],[13,"Receiver"],[13,"Typed"],[13,"Fn"],[13,"Static"],[13,"Type"],[13,"Macro"],[13,"Verbatim"],[13,"Lifetime"],[13,"Type"],[13,"Const"],[13,"Binding"],[13,"Constraint"],[13,"Type"],[13,"Const"],[13,"Type"],[13,"Lifetime"],[13,"Const"],[13,"Const"],[13,"Method"],[13,"Type"],[13,"Macro"],[13,"Verbatim"],[13,"Const"],[13,"Enum"],[13,"ExternCrate"],[13,"Fn"],[13,"ForeignMod"],[13,"Impl"],[13,"Macro"],[13,"Macro2"],[13,"Mod"],[13,"Static"],[13,"Struct"],[13,"Trait"],[13,"TraitAlias"],[13,"Type"],[13,"Union"],[13,"Use"],[13,"Verbatim"],[13,"Str"],[13,"ByteStr"],[13,"Byte"],[13,"Char"],[13,"Int"],[13,"Float"],[13,"Bool"],[13,"Verbatim"],[13,"Paren"],[13,"Brace"],[13,"Bracket"],[13,"Named"],[13,"Unnamed"],[13,"Path"],[13,"List"],[13,"NameValue"],[13,"Meta"],[13,"Lit"],[13,"Box"],[13,"Ident"],[13,"Lit"],[13,"Macro"],[13,"Or"],[13,"Path"],[13,"Range"],[13,"Reference"],[13,"Rest"],[13,"Slice"],[13,"Struct"],[13,"Tuple"],[13,"TupleStruct"],[13,"Type"],[13,"Verbatim"],[13,"Wild"],[13,"AngleBracketed"],[13,"Parenthesized"],[13,"HalfOpen"],[13,"Closed"],[13,"Type"],[13,"Local"],[13,"Item"],[13,"Expr"],[13,"Semi"],[13,"Raw"],[13,"Maybe"],[13,"Const"],[13,"Method"],[13,"Type"],[13,"Macro"],[13,"Verbatim"],[13,"Array"],[13,"BareFn"],[13,"Group"],[13,"ImplTrait"],[13,"Infer"],[13,"Macro"],[13,"Never"],[13,"Paren"],[13,"Path"],[13,"Ptr"],[13,"Reference"],[13,"Slice"],[13,"TraitObject"],[13,"Tuple"],[13,"Verbatim"],[13,"Trait"],[13,"Lifetime"],[13,"Deref"],[13,"Not"],[13,"Neg"],[13,"Path"],[13,"Name"],[13,"Rename"],[13,"Glob"],[13,"Group"],[13,"Public"],[13,"Crate"],[13,"Restricted"],[13,"Type"],[13,"Lifetime"],[13,"Eq"],[8,"IdentExt"],[8,"Speculative"],[13,"Punctuated"],[13,"End"],[8,"Spanned"]]},\
"termcolor":{"doc":"This crate provides a cross platform abstraction for …","t":[13,13,3,13,13,13,13,3,3,3,4,4,3,13,13,13,13,3,3,13,13,3,3,13,8,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["Always","AlwaysAnsi","Ansi","Ansi256","Auto","Black","Blue","Buffer","BufferWriter","BufferedStandardStream","Color","ColorChoice","ColorSpec","Cyan","Green","Magenta","Never","NoColor","ParseColorError","Red","Rgb","StandardStream","StandardStreamLock","White","WriteColor","Yellow","ansi","as_mut_slice","as_slice","bg","bold","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","clear","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","description","dimmed","eq","eq","eq","eq","fg","flush","flush","flush","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_str","get_mut","get_mut","get_ref","get_ref","intense","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","invalid","is_empty","is_none","is_synchronous","is_synchronous","is_synchronous","is_synchronous","is_synchronous","is_synchronous","is_synchronous","italic","len","lock","new","new","new","no_color","print","provide","reset","reset","reset","reset","reset","reset","reset","reset","separator","set_bg","set_bold","set_color","set_color","set_color","set_color","set_color","set_color","set_color","set_dimmed","set_fg","set_intense","set_italic","set_reset","set_underline","stderr","stderr","stderr","stdout","stdout","stdout","supports_color","supports_color","supports_color","supports_color","supports_color","supports_color","supports_color","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","underline","write","write","write","write","write","write","0","0","1","2"],"q":["termcolortermcolor::Color","","",""],"d":["Try very hard to emit colors. This includes emitting ANSI …","AlwaysAnsi is like Always, except it never tries to use …","Satisfies <code>WriteColor</code> using standard ANSI escape sequences.","","Try to use colors, but don’t force the issue. If the …","","","Write colored text to memory.","Writes colored buffers to stdout or stderr.","Like <code>StandardStream</code>, but does buffered writing.","The set of available colors for the terminal …","ColorChoice represents the color preferences of an end …","A color specification.","","","","Never emit colors.","Satisfies <code>WriteColor</code> but ignores all color options.","An error from parsing an invalid color specification.","","","Satisfies <code>io::Write</code> and <code>WriteColor</code>, and supports optional …","<code>StandardStreamLock</code> is a locked reference to a …","","This trait describes the behavior of writers that support …","","Create a buffer that uses ANSI escape sequences.","Return the underlying data of the buffer as a mutable …","Return the underlying data of the buffer.","Get the background color.","Get whether this is bold or not.","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Buffer</code> with the current color preferences.","Clears this buffer.","Clears this color specification so that it has no …","","","","","","","","","","","Get whether this is dimmed or not.","","","","","Get the foreground color.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Return a mutable reference to the inner writer.","Return a mutable reference to the inner writer.","Return a reference to the inner writer.","Return a reference to the inner writer.","Get whether this is intense or not.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume this buffer and return the underlying raw data.","Consume this <code>NoColor</code> value and return the inner writer.","Consume this <code>Ansi</code> value and return the inner writer.","Return the string that couldn’t be parsed as a valid …","Returns true if and only if this buffer is empty.","Returns true if this color specification has no colors or …","Returns true if and only if the underlying writer must …","","","","","","","Get whether this is italic or not.","Returns the length of this buffer in bytes.","Lock the underlying writer.","Create a new writer that satisfies <code>WriteColor</code> but drops …","Create a new writer that satisfies <code>WriteColor</code> using …","Create a new color specification that has no colors or …","Create a buffer that drops all color information.","Prints the contents of the given buffer.","","Reset the current color settings to their original …","","","","","","","Get whether reset is enabled or not.","If set, the separator given is printed between buffers. By …","Set the background color.","Set whether the text is bolded or not.","Set the color settings of the writer.","","","","","","","Set whether the text is dimmed or not.","Set the foreground color.","Set whether the text is intense or not.","Set whether the text is italicized or not.","Set whether to reset the terminal whenever color settings …","Set whether the text is underlined or not.","Create a new <code>StandardStream</code> with the given color …","Create a new <code>BufferedStandardStream</code> with the given color …","Create a new <code>BufferWriter</code> that writes to stderr with the …","Create a new <code>StandardStream</code> with the given color …","Create a new <code>BufferedStandardStream</code> with the given color …","Create a new <code>BufferWriter</code> that writes to stdout with the …","Returns true if and only if the underlying writer supports …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get whether this is underline or not.","","","","","","","","","",""],"i":[7,7,0,3,7,3,3,0,0,0,0,0,0,3,3,3,7,0,0,3,3,0,0,3,0,3,1,1,1,2,2,10,12,13,6,1,15,16,7,2,3,8,10,12,13,6,1,15,16,7,2,3,8,6,1,2,7,2,3,8,7,2,3,8,2,8,2,7,2,3,8,2,10,12,13,1,15,16,7,2,3,8,8,10,12,13,6,1,15,16,7,2,3,8,3,15,16,15,16,2,10,12,13,6,1,15,16,7,2,3,8,1,15,16,8,1,2,26,10,12,13,1,15,16,2,1,10,15,16,2,1,6,8,26,10,12,13,1,15,16,2,6,2,2,26,10,12,13,1,15,16,2,2,2,2,2,2,10,13,6,10,13,6,26,10,12,13,1,15,16,7,2,3,8,8,10,12,13,6,1,15,16,7,2,3,8,10,12,13,6,1,15,16,7,2,3,8,10,12,13,6,1,15,16,7,2,3,8,2,10,12,13,1,15,16,27,28,28,28],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[1],[1],[2,[[4,[3]]]],[2,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,1],[1],[2],[7,7],[2,2],[3,3],[8,8],[[]],[[]],[[]],[[]],[[],2],[8,9],[2,5],[[7,7],5],[[2,2],5],[[3,3],5],[[8,8],5],[2,[[4,[3]]]],[10,11],[12,11],[13,11],[1,11],[[[15,[14]]],11],[[[16,[14]]],11],[[7,17],18],[[2,17],18],[[3,17],18],[[8,17],18],[[8,17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,[[19,[3,8]]]],[[[15,[14]]]],[[[16,[14]]]],[[[15,[14]]]],[[[16,[14]]]],[2,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[21,[20]]]],[[[15,[14]]],14],[[[16,[14]]],14],[8,9],[1,5],[2,5],[[],5],[10,5],[12,5],[13,5],[1,5],[[[15,[14]]],5],[[[16,[14]]],5],[2,5],[1,22],[10,12],[14,[[15,[14]]]],[14,[[16,[14]]]],[[],2],[[],1],[[6,1],11],[23],[[],11],[10,11],[12,11],[13,11],[1,11],[[[15,[14]]],11],[[[16,[14]]],11],[2,5],[[6,[4,[[21,[20]]]]]],[[2,[4,[3]]],2],[[2,5],2],[2,11],[[10,2],11],[[12,2],11],[[13,2],11],[[1,2],11],[[[15,[14]],2],11],[[[16,[14]],2],11],[[2,5],2],[[2,[4,[3]]],2],[[2,5],2],[[2,5],2],[[2,5],2],[[2,5],2],[7,10],[7,13],[7,6],[7,10],[7,13],[7,6],[[],5],[10,5],[12,5],[13,5],[1,5],[[[15,[14]]],5],[[[16,[14]]],5],[[]],[[]],[[]],[[]],[[],24],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[2,5],[10,[[11,[22]]]],[12,[[11,[22]]]],[13,[[11,[22]]]],[1,[[11,[22]]]],[[[15,[14]]],[[11,[22]]]],[[[16,[14]]],[[11,[22]]]],0,0,0,0],"p":[[3,"Buffer"],[3,"ColorSpec"],[4,"Color"],[4,"Option"],[15,"bool"],[3,"BufferWriter"],[4,"ColorChoice"],[3,"ParseColorError"],[15,"str"],[3,"StandardStream"],[6,"Result"],[3,"StandardStreamLock"],[3,"BufferedStandardStream"],[8,"Write"],[3,"NoColor"],[3,"Ansi"],[3,"Formatter"],[6,"Result"],[4,"Result"],[15,"u8"],[3,"Vec"],[15,"usize"],[3,"Demand"],[3,"String"],[3,"TypeId"],[8,"WriteColor"],[13,"Ansi256"],[13,"Rgb"]]},\
"textwrap":{"doc":"The textwrap library provides functions for word wrapping …","t":[13,13,13,13,4,3,4,2,2,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,0,5,11,5,5,11,11,11,11,11,11,11,11,11,5,11,12,11,11,11,11,12,11,11,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,12,11,12,0,5,11,12,0,5,12,8,3,11,11,11,5,11,11,11,5,11,11,11,11,11,12,10,11,11,11,11,11,12,10,11,10,11,12,13,13,13,4,11,11,11,11,11,11,11,11,11,5,11,11,11,11,12,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12],"n":["AsciiSpace","CRLF","Custom","LF","LineEnding","Options","WordSeparator","WordSplitter","WrapAlgorithm","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","break_words","break_words","clone","clone","clone","clone_into","clone_into","clone_into","core","dedent","eq","fill","fill_inplace","find_words","fmt","fmt","fmt","from","from","from","from","from","indent","initial_indent","initial_indent","into","into","into","line_ending","line_ending","new","new","refill","subsequent_indent","subsequent_indent","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unfill","width","word_separator","word_separator","word_splitter","word_splitter","word_splitters","wrap","wrap_algorithm","wrap_algorithm","wrap_algorithms","wrap_columns","0","Fragment","Word","borrow","borrow_mut","break_apart","break_words","clone","clone_into","deref","display_width","eq","fmt","from","from","into","penalty","penalty_width","penalty_width","to_owned","try_from","try_into","type_id","whitespace","whitespace_width","whitespace_width","width","width","word","Custom","HyphenSplitter","NoHyphenation","WordSplitter","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","split_points","split_words","to_owned","try_from","try_into","type_id","0","Custom","FirstFit","WrapAlgorithm","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","new","to_owned","try_from","try_into","type_id","wrap","wrap_first_fit","0"],"q":["textwrap","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","textwrap::WordSeparator","textwrap::core","","","","","","","","","","","","","","","","","","","","","","","","","","","","textwrap::word_splitters","","","","","","","","","","","","","","","","","","textwrap::word_splitters::WordSplitter","textwrap::wrap_algorithms","","","","","","","","","","","","","","","","","","textwrap::wrap_algorithms::WrapAlgorithm"],"d":["Find words by splitting on runs of <code>&#39; &#39;</code> characters.","<em>Carriage return and line feed</em> – a line ending sequence …","Find words using a custom word separator","<em>Line feed</em> – a line ending historically used in Unix. …","Supported line endings. Like in the Rust standard library, …","Holds configuration options for wrapping and filling text.","Describes where words occur in a line of text.","","","Turns this <code>LineEnding</code> value into its ASCII representation.","","","","","","","Change <code>self.break_words</code>. This controls if words longer …","Allow long words to be broken if they cannot fit on a line.","","","","","","","Building blocks for advanced wrapping functionality.","Removes common leading whitespace from each line.","","Fill a line of text at a given width.","Fill <code>text</code> in-place without reallocating the input string.","Find all words in <code>line</code>.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Indent each line by the given prefix.","Change <code>self.initial_indent</code>. The initial indentation is …","Indentation used for the first line of output. See the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Change <code>self.line_ending</code>. This specifies which of the …","Line ending used for breaking lines.","Create a new word separator.","Creates a new <code>Options</code> with the specified width. Equivalent …","Refill a paragraph of wrapped text with a new width.","Change <code>self.subsequent_indent</code>. The subsequent indentation …","Indentation used for subsequent lines of output. See the …","","","","","","","","","","","","","Unpack a paragraph of already-wrapped text.","The width in columns at which the text will be wrapped.","Change <code>self.word_separator</code>.","The line breaking algorithm to use, see …","Change <code>self.word_splitter</code>. The <code>word_splitters::WordSplitter</code>…","The method for splitting words. This can be used to …","Word splitting functionality.","Wrap a line of text at a given width.","Change <code>self.wrap_algorithm</code>.","Wrapping algorithm to use, see the implementations of the …","Word wrapping algorithms.","Wrap text into columns with a given total width.","","A (text) fragment denotes the unit which we wrap into …","A piece of wrappable text, including any trailing …","","","Break this word into smaller words with a width of at most …","Forcibly break words wider than <code>line_width</code> into smaller …","","","","Compute the display width of <code>text</code> while skipping over ANSI …","","","Returns the argument unchanged.","Construct a <code>Word</code> from a string.","Calls <code>U::from(self)</code>.","Penalty string to insert if the word falls at the end of a …","Displayed width of the penalty that must be inserted if the","","","","","","Whitespace to insert if the word does not fall at the end …","Displayed width of the whitespace that must follow the word","","Displayed width of word represented by this fragment.","","Word content.","Use a custom function as the word splitter.","<code>HyphenSplitter</code> is the default <code>WordSplitter</code> used by …","Use this as a <code>Options.word_splitter</code> to avoid any kind of …","The <code>WordSplitter</code> enum describes where words can be split.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Return all possible indices where <code>word</code> can be split.","Split words into smaller words according to the split …","","","","","","Custom wrapping function.","Wrap words using a fast and simple algorithm.","Describes how to wrap words into lines.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create new wrap algorithm.","","","","","Wrap words according to line widths.","Wrap abstract fragments into lines with a first-fit …",""],"i":[5,1,5,1,0,0,0,0,0,1,5,1,3,5,1,3,3,3,5,1,3,5,1,3,0,0,1,0,0,5,5,1,3,5,1,3,3,3,0,3,3,5,1,3,3,3,5,3,0,3,3,5,1,3,5,1,3,5,1,3,5,1,3,0,3,3,3,3,3,0,0,3,3,0,0,20,0,0,18,18,18,0,18,18,18,0,18,18,18,18,18,18,21,18,18,18,18,18,18,21,18,21,18,18,14,14,14,0,14,14,14,14,14,14,14,14,14,0,14,14,14,14,22,17,17,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,23],"f":[0,0,0,0,0,0,0,0,0,[1,2],[[]],[[]],[[]],[[]],[[]],[[]],[[3,4],3],0,[5,5],[1,1],[3,3],[[]],[[]],[[]],0,[2,6],[[1,1],4],[2,6],[[6,7]],[[5,2],[[9,[8]]]],[[5,10],11],[[1,10],11],[[3,10],11],[[]],[[]],[7,3],[[]],[3,3],[[2,2],6],[[3,2],3],0,[[]],[[]],[[]],[[3,1],3],0,[[],5],[7,3],[2,6],[[3,2],3],0,[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13],[2],0,[[3,5],3],0,[[3,14],3],0,0,[2,[[16,[[15,[2]]]]]],[[3,17],3],0,0,[[2,7,2,2,2],[[16,[6]]]],0,0,0,[[]],[[]],[[18,7],8],[7,[[16,[18]]]],[18,18],[[]],[18],[2,7],[[18,18],4],[[18,10],11],[[]],[2,18],[[]],0,[[],19],[18,19],[[]],[[],12],[[],12],[[],13],0,[[],19],[18,19],[[],19],[18,19],0,0,0,0,0,[[]],[[]],[14,14],[[]],[[14,14],4],[[14,10],11],[[]],[[]],[[14,2],[[16,[7]]]],[14,8],[[]],[[],12],[[],12],[[],13],0,0,0,0,[[]],[[]],[17,17],[[]],[[],17],[[17,10],11],[[]],[[]],[[],17],[[]],[[],12],[[],12],[[],13],[17,16],[[],16],0],"p":[[4,"LineEnding"],[15,"str"],[3,"Options"],[15,"bool"],[4,"WordSeparator"],[3,"String"],[15,"usize"],[8,"Iterator"],[3,"Box"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"],[4,"WordSplitter"],[4,"Cow"],[3,"Vec"],[4,"WrapAlgorithm"],[3,"Word"],[15,"f64"],[13,"Custom"],[8,"Fragment"],[13,"Custom"],[13,"Custom"]]},\
"unicode_ident":{"doc":"github crates-io docs-rs","t":[5,5],"n":["is_xid_continue","is_xid_start"],"q":["unicode_ident",""],"d":["",""],"i":[0,0],"f":[[1,2],[1,2]],"p":[[15,"char"],[15,"bool"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
